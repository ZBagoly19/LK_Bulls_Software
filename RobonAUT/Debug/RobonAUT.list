
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800fbb4  0800fbb4  0001fbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe9c  0800fe9c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe9c  0800fe9c  0001fe9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fea4  0800fea4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fea4  0800fea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800feac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200000dc  0800ff88  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800ff88  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032337  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9b  00000000  00000000  00052443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  000562e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00057e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  000598c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026adc  00000000  00000000  00082ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f629d  00000000  00000000  000a95ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007810  00000000  00000000  0019f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000dc 	.word	0x200000dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800fb9c 	.word	0x0800fb9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000e0 	.word	0x200000e0
 8000200:	0800fb9c 	.word	0x0800fb9c

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b96e 	b.w	8000cd4 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468c      	mov	ip, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8083 	bne.w	8000b26 <__udivmoddi4+0x116>
 8000a20:	428a      	cmp	r2, r1
 8000a22:	4617      	mov	r7, r2
 8000a24:	d947      	bls.n	8000ab6 <__udivmoddi4+0xa6>
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	b142      	cbz	r2, 8000a3e <__udivmoddi4+0x2e>
 8000a2c:	f1c2 0020 	rsb	r0, r2, #32
 8000a30:	fa24 f000 	lsr.w	r0, r4, r0
 8000a34:	4091      	lsls	r1, r2
 8000a36:	4097      	lsls	r7, r2
 8000a38:	ea40 0c01 	orr.w	ip, r0, r1
 8000a3c:	4094      	lsls	r4, r2
 8000a3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a42:	0c23      	lsrs	r3, r4, #16
 8000a44:	fbbc f6f8 	udiv	r6, ip, r8
 8000a48:	fa1f fe87 	uxth.w	lr, r7
 8000a4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000a50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a54:	fb06 f10e 	mul.w	r1, r6, lr
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x60>
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 8119 	bcs.w	8000c98 <__udivmoddi4+0x288>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 8116 	bls.w	8000c98 <__udivmoddi4+0x288>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x8c>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8e:	f080 8105 	bcs.w	8000c9c <__udivmoddi4+0x28c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f240 8102 	bls.w	8000c9c <__udivmoddi4+0x28c>
 8000a98:	3802      	subs	r0, #2
 8000a9a:	443c      	add	r4, r7
 8000a9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa0:	eba4 040e 	sub.w	r4, r4, lr
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa0>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xaa>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d150      	bne.n	8000b64 <__udivmoddi4+0x154>
 8000ac2:	1bcb      	subs	r3, r1, r7
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	fa1f f887 	uxth.w	r8, r7
 8000acc:	2601      	movs	r6, #1
 8000ace:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad2:	0c21      	lsrs	r1, r4, #16
 8000ad4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ad8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000adc:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xe4>
 8000ae4:	1879      	adds	r1, r7, r1
 8000ae6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aea:	d202      	bcs.n	8000af2 <__udivmoddi4+0xe2>
 8000aec:	428b      	cmp	r3, r1
 8000aee:	f200 80e9 	bhi.w	8000cc4 <__udivmoddi4+0x2b4>
 8000af2:	4684      	mov	ip, r0
 8000af4:	1ac9      	subs	r1, r1, r3
 8000af6:	b2a3      	uxth	r3, r4
 8000af8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000afc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b04:	fb08 f800 	mul.w	r8, r8, r0
 8000b08:	45a0      	cmp	r8, r4
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0x10c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x10a>
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	f200 80d9 	bhi.w	8000ccc <__udivmoddi4+0x2bc>
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	eba4 0408 	sub.w	r4, r4, r8
 8000b20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b24:	e7bf      	b.n	8000aa6 <__udivmoddi4+0x96>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x12e>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80b1 	beq.w	8000c92 <__udivmoddi4+0x282>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x1cc>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0x140>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80b8 	bhi.w	8000cc0 <__udivmoddi4+0x2b0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0103 	sbc.w	r1, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	468c      	mov	ip, r1
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0a8      	beq.n	8000ab0 <__udivmoddi4+0xa0>
 8000b5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000b64:	f1c2 0320 	rsb	r3, r2, #32
 8000b68:	fa20 f603 	lsr.w	r6, r0, r3
 8000b6c:	4097      	lsls	r7, r2
 8000b6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000b72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b76:	40d9      	lsrs	r1, r3
 8000b78:	4330      	orrs	r0, r6
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b80:	fa1f f887 	uxth.w	r8, r7
 8000b84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8c:	fb06 f108 	mul.w	r1, r6, r8
 8000b90:	4299      	cmp	r1, r3
 8000b92:	fa04 f402 	lsl.w	r4, r4, r2
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x19c>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b9e:	f080 808d 	bcs.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 808a 	bls.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b281      	uxth	r1, r0
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb00 f308 	mul.w	r3, r0, r8
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d907      	bls.n	8000bd4 <__udivmoddi4+0x1c4>
 8000bc4:	1879      	adds	r1, r7, r1
 8000bc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bca:	d273      	bcs.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d971      	bls.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4439      	add	r1, r7
 8000bd4:	1acb      	subs	r3, r1, r3
 8000bd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bda:	e778      	b.n	8000ace <__udivmoddi4+0xbe>
 8000bdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000be0:	fa03 f406 	lsl.w	r4, r3, r6
 8000be4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000be8:	431c      	orrs	r4, r3
 8000bea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	0c3b      	lsrs	r3, r7, #16
 8000bfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c02:	fa1f f884 	uxth.w	r8, r4
 8000c06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000c12:	458a      	cmp	sl, r1
 8000c14:	fa02 f206 	lsl.w	r2, r2, r6
 8000c18:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x220>
 8000c1e:	1861      	adds	r1, r4, r1
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	d248      	bcs.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c26:	458a      	cmp	sl, r1
 8000c28:	d946      	bls.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2e:	4421      	add	r1, r4
 8000c30:	eba1 010a 	sub.w	r1, r1, sl
 8000c34:	b2bf      	uxth	r7, r7
 8000c36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c42:	fb00 f808 	mul.w	r8, r0, r8
 8000c46:	45b8      	cmp	r8, r7
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x24a>
 8000c4a:	19e7      	adds	r7, r4, r7
 8000c4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c50:	d22e      	bcs.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d92c      	bls.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c56:	3802      	subs	r0, #2
 8000c58:	4427      	add	r7, r4
 8000c5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5e:	eba7 0708 	sub.w	r7, r7, r8
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	454f      	cmp	r7, r9
 8000c68:	46c6      	mov	lr, r8
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	d31a      	bcc.n	8000ca4 <__udivmoddi4+0x294>
 8000c6e:	d017      	beq.n	8000ca0 <__udivmoddi4+0x290>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x27a>
 8000c72:	ebb3 020e 	subs.w	r2, r3, lr
 8000c76:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c7e:	40f2      	lsrs	r2, r6
 8000c80:	ea4c 0202 	orr.w	r2, ip, r2
 8000c84:	40f7      	lsrs	r7, r6
 8000c86:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	462e      	mov	r6, r5
 8000c94:	4628      	mov	r0, r5
 8000c96:	e70b      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	e6e9      	b.n	8000a70 <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fd      	b.n	8000a9c <__udivmoddi4+0x8c>
 8000ca0:	4543      	cmp	r3, r8
 8000ca2:	d2e5      	bcs.n	8000c70 <__udivmoddi4+0x260>
 8000ca4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca8:	eb69 0104 	sbc.w	r1, r9, r4
 8000cac:	3801      	subs	r0, #1
 8000cae:	e7df      	b.n	8000c70 <__udivmoddi4+0x260>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e7d2      	b.n	8000c5a <__udivmoddi4+0x24a>
 8000cb4:	4660      	mov	r0, ip
 8000cb6:	e78d      	b.n	8000bd4 <__udivmoddi4+0x1c4>
 8000cb8:	4681      	mov	r9, r0
 8000cba:	e7b9      	b.n	8000c30 <__udivmoddi4+0x220>
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	e775      	b.n	8000bac <__udivmoddi4+0x19c>
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e74a      	b.n	8000b5a <__udivmoddi4+0x14a>
 8000cc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc8:	4439      	add	r1, r7
 8000cca:	e713      	b.n	8000af4 <__udivmoddi4+0xe4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	443c      	add	r4, r7
 8000cd0:	e724      	b.n	8000b1c <__udivmoddi4+0x10c>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b0a8      	sub	sp, #160	; 0xa0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000d1a:	f00e fec1 	bl	800faa0 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4aaa      	ldr	r2, [pc, #680]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	4413      	add	r3, r2
 8000d26:	3314      	adds	r3, #20
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbac 	bl	8000488 <__aeabi_ui2d>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4ba6      	ldr	r3, [pc, #664]	; (8000fd0 <SERVO_Init+0x2f8>)
 8000d36:	f7ff fd4b 	bl	80007d0 <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	f7ff fe2d 	bl	80009a0 <__aeabi_d2uiz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4a9f      	ldr	r2, [pc, #636]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d50:	015b      	lsls	r3, r3, #5
 8000d52:	4413      	add	r3, r2
 8000d54:	3314      	adds	r3, #20
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb95 	bl	8000488 <__aeabi_ui2d>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000d66:	f7ff fb8f 	bl	8000488 <__aeabi_ui2d>
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000d70:	f7ff fa4e 	bl	8000210 <__adddf3>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b95      	ldr	r3, [pc, #596]	; (8000fd8 <SERVO_Init+0x300>)
 8000d82:	f7ff fbfb 	bl	800057c <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fd1f 	bl	80007d0 <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000da0:	f7ff fa34 	bl	800020c <__aeabi_dsub>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fdf8 	bl	80009a0 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000db6:	2313      	movs	r3, #19
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000dbc:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4a81      	ldr	r2, [pc, #516]	; (8000fcc <SERVO_Init+0x2f4>)
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4413      	add	r3, r2
 8000dcc:	3308      	adds	r3, #8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a82      	ldr	r2, [pc, #520]	; (8000fdc <SERVO_Init+0x304>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <SERVO_Init+0x308>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a80      	ldr	r2, [pc, #512]	; (8000fe0 <SERVO_Init+0x308>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <SERVO_Init+0x308>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	e046      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	4a75      	ldr	r2, [pc, #468]	; (8000fcc <SERVO_Init+0x2f4>)
 8000df8:	015b      	lsls	r3, r3, #5
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d10e      	bne.n	8000e24 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <SERVO_Init+0x308>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a74      	ldr	r2, [pc, #464]	; (8000fe0 <SERVO_Init+0x308>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b72      	ldr	r3, [pc, #456]	; (8000fe0 <SERVO_Init+0x308>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	e02e      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4a69      	ldr	r2, [pc, #420]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <SERVO_Init+0x30c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <SERVO_Init+0x308>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <SERVO_Init+0x308>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <SERVO_Init+0x308>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	e016      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e58:	015b      	lsls	r3, r3, #5
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a61      	ldr	r2, [pc, #388]	; (8000fe8 <SERVO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <SERVO_Init+0x308>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <SERVO_Init+0x308>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <SERVO_Init+0x308>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	4413      	add	r3, r2
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e94:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 f877 	bl	8006fa0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000eba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 f921 	bl	800810c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fa1c 	bl	800730c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000ee0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 f8ae 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3310      	adds	r3, #16
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 ff21 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8000f1a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f1e:	f7ff fab3 	bl	8000488 <__aeabi_ui2d>
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3318      	adds	r3, #24
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faca 	bl	80004cc <__aeabi_f2d>
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <SERVO_Init+0x314>)
 8000f3e:	f7ff fc47 	bl	80007d0 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4620      	mov	r0, r4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	f7ff fb17 	bl	800057c <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	88fc      	ldrh	r4, [r7, #6]
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fd22 	bl	80009a0 <__aeabi_d2uiz>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SERVO_Init+0x318>)
 8000f62:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8000f66:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f6a:	f7ff fa8d 	bl	8000488 <__aeabi_ui2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <SERVO_Init+0x31c>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faa9 	bl	80004cc <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <SERVO_Init+0x314>)
 8000f80:	f7ff fc26 	bl	80007d0 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff faf6 	bl	800057c <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	88fc      	ldrh	r4, [r7, #6]
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd01 	bl	80009a0 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <SERVO_Init+0x318>)
 8000fa4:	00a3      	lsls	r3, r4, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	460a      	mov	r2, r1
 8000faa:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SERVO_Init+0x2f4>)
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fa94 	bl	80074ec <HAL_TIM_PWM_Start>

}
 8000fc4:	bf00      	nop
 8000fc6:	37a0      	adds	r7, #160	; 0xa0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	0800fe34 	.word	0x0800fe34
 8000fd0:	41490000 	.word	0x41490000
 8000fd4:	3ff00000 	.word	0x3ff00000
 8000fd8:	40490000 	.word	0x40490000
 8000fdc:	40001800 	.word	0x40001800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	40340000 	.word	0x40340000
 8000ff0:	200000f8 	.word	0x200000f8
 8000ff4:	40066666 	.word	0x40066666

08000ff8 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	ed87 0a00 	vstr	s0, [r7]
 8001004:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <SERVO_MoveTo+0x94>)
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	885b      	ldrh	r3, [r3, #2]
 8001014:	4619      	mov	r1, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SERVO_MoveTo+0x94>)
 800101a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	ee17 0a90 	vmov	r0, s15
 8001034:	f7ff fa4a 	bl	80004cc <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SERVO_MoveTo+0x98>)
 800103e:	f7ff fbc7 	bl	80007d0 <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <SERVO_MoveTo+0x94>)
 800104e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa28 	bl	80004a8 <__aeabi_i2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f8d6 	bl	8000210 <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fc98 	bl	80009a0 <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SERVO_MoveTo+0x9c>)
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	4413      	add	r3, r2
 800107c:	330c      	adds	r3, #12
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	89fa      	ldrh	r2, [r7, #14]
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	200000f8 	.word	0x200000f8
 8001090:	40668000 	.word	0x40668000
 8001094:	0800fe34 	.word	0x0800fe34

08001098 <HAL_UART_RxCpltCallback>:
void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny);	//aktualisan chip selectelt adc-bol parameterben adott chanelen olvas; ret: [0, 3]
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80010c6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f001 ff11 	bl	8002ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f9ff 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fe51 	bl	8001d7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010da:	f000 fe05 	bl	8001ce8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010de:	f000 fa6b 	bl	80015b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010e2:	f000 fa97 	bl	8001614 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010e6:	f000 fb27 	bl	8001738 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010ea:	f000 fb5b 	bl	80017a4 <MX_SPI3_Init>
  MX_TIM3_Init();
 80010ee:	f000 fbdd 	bl	80018ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f2:	f000 fc35 	bl	8001960 <MX_TIM4_Init>
  MX_UART4_Init();
 80010f6:	f000 fda3 	bl	8001c40 <MX_UART4_Init>
  MX_TIM8_Init();
 80010fa:	f000 fc85 	bl	8001a08 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80010fe:	f000 fdc9 	bl	8001c94 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001102:	f000 fab5 	bl	8001670 <MX_I2C3_Init>
  MX_TIM12_Init();
 8001106:	f000 fd2b 	bl	8001b60 <MX_TIM12_Init>
  MX_DMA_Init();
 800110a:	f000 fe17 	bl	8001d3c <MX_DMA_Init>
  MX_TIM2_Init();
 800110e:	f000 fb7f 	bl	8001810 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001112:	f000 fadb 	bl	80016cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fdde 	bl	8000cd8 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800111c:	2000      	movs	r0, #0
 800111e:	f00e fb31 	bl	800f784 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001122:	2001      	movs	r0, #1
 8001124:	f00e fb2e 	bl	800f784 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f00e fc00 	bl	800f930 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f00e fbfc 	bl	800f930 <DC_MOTOR_Start>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001138:	48cc      	ldr	r0, [pc, #816]	; (800146c <main+0x3ac>)
 800113a:	f006 f821 	bl	8007180 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 800113e:	2104      	movs	r1, #4
 8001140:	48cb      	ldr	r0, [pc, #812]	; (8001470 <main+0x3b0>)
 8001142:	f006 f9d3 	bl	80074ec <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 8001146:	f000 fee3 	bl	8001f10 <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 800114a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800114e:	4ac9      	ldr	r2, [pc, #804]	; (8001474 <main+0x3b4>)
 8001150:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 8001154:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001158:	2252      	movs	r2, #82	; 0x52
 800115a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 800115e:	2314      	movs	r3, #20
 8001160:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001170:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2303      	movs	r3, #3
 800117c:	2184      	movs	r1, #132	; 0x84
 800117e:	48bd      	ldr	r0, [pc, #756]	; (8001474 <main+0x3b4>)
 8001180:	f003 fab2 	bl	80046e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001184:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2303      	movs	r3, #3
 8001190:	2186      	movs	r1, #134	; 0x86
 8001192:	48b8      	ldr	r0, [pc, #736]	; (8001474 <main+0x3b4>)
 8001194:	f003 faa8 	bl	80046e8 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001198:	2313      	movs	r3, #19
 800119a:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800119e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2184      	movs	r1, #132	; 0x84
 80011ac:	48b1      	ldr	r0, [pc, #708]	; (8001474 <main+0x3b4>)
 80011ae:	f003 fa9b 	bl	80046e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011b2:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2184      	movs	r1, #132	; 0x84
 80011c0:	48ac      	ldr	r0, [pc, #688]	; (8001474 <main+0x3b4>)
 80011c2:	f003 fb8f 	bl	80048e4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80011c6:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 80011ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80011d4:	2313      	movs	r3, #19
 80011d6:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80011da:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2184      	movs	r1, #132	; 0x84
 80011e8:	48a2      	ldr	r0, [pc, #648]	; (8001474 <main+0x3b4>)
 80011ea:	f003 fa7d 	bl	80046e8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 80011ee:	2002      	movs	r0, #2
 80011f0:	f001 fef2 	bl	8002fd8 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 80011f4:	2313      	movs	r3, #19
 80011f6:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011fa:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	2184      	movs	r1, #132	; 0x84
 8001208:	489a      	ldr	r0, [pc, #616]	; (8001474 <main+0x3b4>)
 800120a:	f003 fa6d 	bl	80046e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800120e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2184      	movs	r1, #132	; 0x84
 800121c:	4895      	ldr	r0, [pc, #596]	; (8001474 <main+0x3b4>)
 800121e:	f003 fb61 	bl	80048e4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001222:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001230:	2313      	movs	r3, #19
 8001232:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001236:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	2184      	movs	r1, #132	; 0x84
 8001244:	488b      	ldr	r0, [pc, #556]	; (8001474 <main+0x3b4>)
 8001246:	f003 fa4f 	bl	80046e8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 800124a:	2002      	movs	r0, #2
 800124c:	f001 fec4 	bl	8002fd8 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 8001250:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001254:	f009 f83c 	bl	800a2d0 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 8001258:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800125c:	f008 ffe0 	bl	800a220 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 8001260:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001264:	f009 f815 	bl	800a292 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8001268:	2103      	movs	r1, #3
 800126a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800126e:	f009 f961 	bl	800a534 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8001272:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001276:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800127a:	f009 f9d1 	bl	800a620 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 800127e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001282:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001286:	f009 fb57 	bl	800a938 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 800128a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800128e:	f009 fc91 	bl	800abb4 <VL53L1_StartMeasurement>
		kapu2 = kapuk[2];
		kapu3 = kapuk[3];
		kapu4 = kapuk[4];				ez a resz itt valahogy gebaszt okoz, akasztja a while-t
		kapu5 = kapuk[5];*/

		for(int i=0; i < 5; i++) {		/* 5: vonalak[] merete */
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001298:	e00a      	b.n	80012b0 <main+0x1f0>
			vonalak[i] = '-';
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <main+0x3b8>)
 800129c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80012a0:	4413      	add	r3, r2
 80012a2:	222d      	movs	r2, #45	; 0x2d
 80012a4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < 5; i++) {		/* 5: vonalak[] merete */
 80012a6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80012aa:	3301      	adds	r3, #1
 80012ac:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80012b0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	ddf0      	ble.n	800129a <main+0x1da>
		}
		for(int i=1; i < 33; i++) {		/* 32: vonal_eredmeny[] merete */
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80012be:	e00a      	b.n	80012d6 <main+0x216>
			vonal_eredmeny[i] = '-';
 80012c0:	4a6e      	ldr	r2, [pc, #440]	; (800147c <main+0x3bc>)
 80012c2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80012c6:	4413      	add	r3, r2
 80012c8:	222d      	movs	r2, #45	; 0x2d
 80012ca:	701a      	strb	r2, [r3, #0]
		for(int i=1; i < 33; i++) {		/* 32: vonal_eredmeny[] merete */
 80012cc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80012d6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80012da:	2b20      	cmp	r3, #32
 80012dc:	ddf0      	ble.n	80012c0 <main+0x200>
		}
		Vonalszenzor_operal(vonal_eredmeny);
 80012de:	4867      	ldr	r0, [pc, #412]	; (800147c <main+0x3bc>)
 80012e0:	f000 fe28 	bl	8001f34 <Vonalszenzor_operal>
		for(int poz=1; poz < 33-1; poz++) {
 80012e4:	2301      	movs	r3, #1
 80012e6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80012ea:	e03b      	b.n	8001364 <main+0x2a4>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny[poz] > VONAL_THRESHOLD) {
 80012ec:	4a63      	ldr	r2, [pc, #396]	; (800147c <main+0x3bc>)
 80012ee:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <main+0x3c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd2c      	ble.n	800135a <main+0x29a>
				if(vonal_eredmeny[poz+1] > VONAL_THRESHOLD) {
 8001300:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001304:	3301      	adds	r3, #1
 8001306:	4a5d      	ldr	r2, [pc, #372]	; (800147c <main+0x3bc>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	461a      	mov	r2, r3
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <main+0x3c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	dd22      	ble.n	800135a <main+0x29a>
					if(vonal_eredmeny[poz-1] < VONAL_THRESHOLD) {
 8001314:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001318:	3b01      	subs	r3, #1
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <main+0x3bc>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	461a      	mov	r2, r3
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <main+0x3c0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	da18      	bge.n	800135a <main+0x29a>
						int i = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
							while(vonalak[i] != '-') {
 800132e:	e004      	b.n	800133a <main+0x27a>
								i++;
 8001330:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001334:	3301      	adds	r3, #1
 8001336:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
							while(vonalak[i] != '-') {
 800133a:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <main+0x3b8>)
 800133c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b2d      	cmp	r3, #45	; 0x2d
 8001346:	d1f3      	bne.n	8001330 <main+0x270>
							}
							vonalak[i] = poz;
 8001348:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800134c:	b2d9      	uxtb	r1, r3
 800134e:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <main+0x3b8>)
 8001350:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 800135a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001364:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001368:	2b1f      	cmp	r3, #31
 800136a:	ddbf      	ble.n	80012ec <main+0x22c>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 800136c:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001370:	f009 fca2 	bl	800acb8 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8001374:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001378:	4619      	mov	r1, r3
 800137a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800137e:	f009 fe57 	bl	800b030 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 8001382:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001386:	f009 fc81 	bl	800ac8c <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <main+0x3c4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 808c 	bne.w	80014ac <main+0x3ec>
			if (szervoEnable == 1) {
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <main+0x3c8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d140      	bne.n	800141e <main+0x35e>
				if 			(0 <= vonal1 && vonal1 < 6) {
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <main+0x3cc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d805      	bhi.n	80013b0 <main+0x2f0>
					SERVO_MoveTo(SZERVO, 0);
 80013a4:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001490 <main+0x3d0>
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fe25 	bl	8000ff8 <SERVO_MoveTo>
 80013ae:	e036      	b.n	800141e <main+0x35e>
					//motornak nagyon lassu megadas
				} else if 	(6 <= vonal1 && vonal1 < 13) {
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <main+0x3cc>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d909      	bls.n	80013cc <main+0x30c>
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <main+0x3cc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d805      	bhi.n	80013cc <main+0x30c>
					SERVO_MoveTo(SZERVO, 60);
 80013c0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001494 <main+0x3d4>
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fe17 	bl	8000ff8 <SERVO_MoveTo>
 80013ca:	e028      	b.n	800141e <main+0x35e>
					//motornak lassu megadas
				} else if 	(13 <= vonal1 && vonal1 < 19) {
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <main+0x3cc>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d909      	bls.n	80013e8 <main+0x328>
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <main+0x3cc>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b12      	cmp	r3, #18
 80013da:	d805      	bhi.n	80013e8 <main+0x328>
					SERVO_MoveTo(SZERVO, 90);
 80013dc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80014a8 <main+0x3e8>
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fe09 	bl	8000ff8 <SERVO_MoveTo>
 80013e6:	e01a      	b.n	800141e <main+0x35e>
					//motornak gyors megadas
				} else if 	(19 <= vonal1 && vonal1 < 26) {
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <main+0x3cc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d909      	bls.n	8001404 <main+0x344>
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <main+0x3cc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b19      	cmp	r3, #25
 80013f6:	d805      	bhi.n	8001404 <main+0x344>
					SERVO_MoveTo(SZERVO, 120);
 80013f8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001498 <main+0x3d8>
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fdfb 	bl	8000ff8 <SERVO_MoveTo>
 8001402:	e00c      	b.n	800141e <main+0x35e>
					//motornak lassu megadas
				} else if 	(26 <= vonal1 && vonal1 < 32) {
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0x3cc>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b19      	cmp	r3, #25
 800140a:	d908      	bls.n	800141e <main+0x35e>
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <main+0x3cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b1f      	cmp	r3, #31
 8001412:	d804      	bhi.n	800141e <main+0x35e>
					SERVO_MoveTo(SZERVO, 180);
 8001414:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800149c <main+0x3dc>
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fded 	bl	8000ff8 <SERVO_MoveTo>
					//motornak nagyon lassu megadas
				}
			}

			if (motvezEnable == 1) {
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0x3e0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	f47f af35 	bne.w	8001292 <main+0x1d2>
				int k = 200;
 8001428:	23c8      	movs	r3, #200	; 0xc8
 800142a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				if (k < motvez_d / 2) {
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <main+0x3e4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0fda      	lsrs	r2, r3, #31
 8001434:	4413      	add	r3, r2
 8001436:	105b      	asrs	r3, r3, #1
 8001438:	461a      	mov	r2, r3
 800143a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800143e:	4293      	cmp	r3, r2
 8001440:	f6bf af27 	bge.w	8001292 <main+0x1d2>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); //ha pwm1 nagyobb, előremenet
 8001444:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001448:	b29b      	uxth	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2000      	movs	r0, #0
 800144e:	f00e facb 	bl	800f9e8 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <main+0x3e4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800145c:	b29b      	uxth	r3, r3
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b29b      	uxth	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	2001      	movs	r0, #1
 8001466:	f00e fabf 	bl	800f9e8 <DC_MOTOR_Set_Speed>
 800146a:	e712      	b.n	8001292 <main+0x1d2>
 800146c:	200004ec 	.word	0x200004ec
 8001470:	20000578 	.word	0x20000578
 8001474:	20000264 	.word	0x20000264
 8001478:	20000094 	.word	0x20000094
 800147c:	20000100 	.word	0x20000100
 8001480:	20000090 	.word	0x20000090
 8001484:	200000fc 	.word	0x200000fc
 8001488:	200000fd 	.word	0x200000fd
 800148c:	20000099 	.word	0x20000099
 8001490:	00000000 	.word	0x00000000
 8001494:	42700000 	.word	0x42700000
 8001498:	42f00000 	.word	0x42f00000
 800149c:	43340000 	.word	0x43340000
 80014a0:	200000fe 	.word	0x200000fe
 80014a4:	2000009c 	.word	0x2000009c
 80014a8:	42b40000 	.word	0x42b40000
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 80014ac:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80014a8 <main+0x3e8>
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fda1 	bl	8000ff8 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d);// elvileg ez a ketto a megallas
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <main+0x410>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	2000      	movs	r0, #0
 80014c0:	f00e fa92 	bl	800f9e8 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	2001      	movs	r0, #1
 80014c8:	f00e fa8e 	bl	800f9e8 <DC_MOTOR_Set_Speed>
		for(int i=0; i < 5; i++) {		/* 5: vonalak[] merete */
 80014cc:	e6e1      	b.n	8001292 <main+0x1d2>
 80014ce:	bf00      	nop
 80014d0:	2000009c 	.word	0x2000009c

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2234      	movs	r2, #52	; 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00e fb3e 	bl	800fb64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <SystemClock_Config+0xdc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <SystemClock_Config+0xdc>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <SystemClock_Config+0xdc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <SystemClock_Config+0xe0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <SystemClock_Config+0xe0>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemClock_Config+0xe0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001548:	23b4      	movs	r3, #180	; 0xb4
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4618      	mov	r0, r3
 800155e:	f004 faf1 	bl	8005b44 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001568:	f000 ff6c 	bl	8002444 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800156c:	f003 ff0e 	bl	800538c <HAL_PWREx_EnableOverDrive>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001576:	f000 ff65 	bl	8002444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157a:	230f      	movs	r3, #15
 800157c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157e:	2302      	movs	r3, #2
 8001580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001586:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800158c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001590:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2105      	movs	r1, #5
 8001598:	4618      	mov	r0, r3
 800159a:	f003 ff47 	bl	800542c <HAL_RCC_ClockConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015a4:	f000 ff4e 	bl	8002444 <Error_Handler>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3750      	adds	r7, #80	; 0x50
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000

080015b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_I2C1_Init+0x50>)
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <MX_I2C1_Init+0x54>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_I2C1_Init+0x50>)
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_I2C1_Init+0x58>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_I2C1_Init+0x50>)
 80015d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_I2C1_Init+0x50>)
 80015f6:	f002 feab 	bl	8004350 <HAL_I2C_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001600:	f000 ff20 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000264 	.word	0x20000264
 800160c:	40005400 	.word	0x40005400
 8001610:	000186a0 	.word	0x000186a0

08001614 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C2_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C2_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C2_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C2_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C2_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C2_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C2_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C2_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C2_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C2_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C2_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C2_Init+0x50>)
 8001652:	f002 fe7d 	bl	8004350 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 fef2 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002b8 	.word	0x200002b8
 8001668:	40005800 	.word	0x40005800
 800166c:	000186a0 	.word	0x000186a0

08001670 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C3_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_I2C3_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C3_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_I2C3_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C3_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2C3_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_I2C3_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_I2C3_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2C3_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_I2C3_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2C3_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C3_Init+0x50>)
 80016ae:	f002 fe4f 	bl	8004350 <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 fec4 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000128 	.word	0x20000128
 80016c4:	40005c00 	.word	0x40005c00
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI1_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0x64>)
 8001700:	2220      	movs	r2, #32
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI1_Init+0x64>)
 800171e:	f004 fd6f 	bl	8006200 <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 fe8c 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000494 	.word	0x20000494
 8001734:	40013000 	.word	0x40013000

08001738 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_SPI2_Init+0x64>)
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <MX_SPI2_Init+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_SPI2_Init+0x64>)
 8001744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001748:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_SPI2_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_SPI2_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_SPI2_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_SPI2_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_SPI2_Init+0x64>)
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_SPI2_Init+0x64>)
 800176c:	2218      	movs	r2, #24
 800176e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_SPI2_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_SPI2_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_SPI2_Init+0x64>)
 8001784:	220a      	movs	r2, #10
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_SPI2_Init+0x64>)
 800178a:	f004 fd39 	bl	8006200 <HAL_SPI_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001794:	f000 fe56 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000017c 	.word	0x2000017c
 80017a0:	40003800 	.word	0x40003800

080017a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI3_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MX_SPI3_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI3_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI3_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI3_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI3_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI3_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI3_Init+0x64>)
 80017d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI3_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI3_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI3_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI3_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI3_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI3_Init+0x64>)
 80017f6:	f004 fd03 	bl	8006200 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 fe20 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000354 	.word	0x20000354
 800180c:	40003c00 	.word	0x40003c00

08001810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <MX_TIM2_Init+0x98>)
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001836:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800183a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_TIM2_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_TIM2_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001858:	f005 fba2 	bl	8006fa0 <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001862:	f000 fdef 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4619      	mov	r1, r3
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001874:	f006 fc4a 	bl	800810c <HAL_TIM_ConfigClockSource>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800187e:	f000 fde1 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <MX_TIM2_Init+0x98>)
 8001890:	f007 fbdc 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800189a:	f000 fdd3 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200004ec 	.word	0x200004ec

080018ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <MX_TIM3_Init+0xac>)
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <MX_TIM3_Init+0xb0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <MX_TIM3_Init+0xac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <MX_TIM3_Init+0xac>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_TIM3_Init+0xac>)
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_TIM3_Init+0xac>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_TIM3_Init+0xac>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <MX_TIM3_Init+0xac>)
 80018f6:	f005 fd09 	bl	800730c <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 fda0 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	4811      	ldr	r0, [pc, #68]	; (8001958 <MX_TIM3_Init+0xac>)
 8001914:	f007 fb9a 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800191e:	f000 fd91 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	; 0x60
 8001924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM3_Init+0xac>)
 800193a:	f006 fa0f 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001944:	f000 fd7e 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM3_Init+0xac>)
 800194a:	f001 f8cb 	bl	8002ae4 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000030c 	.word	0x2000030c
 800195c:	40000400 	.word	0x40000400

08001960 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f00e f8f8 	bl	800fb64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_TIM4_Init+0xa0>)
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <MX_TIM4_Init+0xa4>)
 8001980:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_TIM4_Init+0xa0>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_TIM4_Init+0xa0>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_TIM4_Init+0xa0>)
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_TIM4_Init+0xa0>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_TIM4_Init+0xa0>)
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ba:	2301      	movs	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <MX_TIM4_Init+0xa0>)
 80019ce:	f005 ff15 	bl	80077fc <HAL_TIM_Encoder_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f000 fd34 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_TIM4_Init+0xa0>)
 80019ea:	f007 fb2f 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80019f4:	f000 fd26 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000021c 	.word	0x2000021c
 8001a04:	40000800 	.word	0x40000800

08001a08 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b096      	sub	sp, #88	; 0x58
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00e f88f 	bl	800fb64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a46:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <MX_TIM8_Init+0x154>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a54:	2260      	movs	r2, #96	; 0x60
 8001a56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a72:	4839      	ldr	r0, [pc, #228]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a74:	f005 fa94 	bl	8006fa0 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001a7e:	f000 fce1 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4832      	ldr	r0, [pc, #200]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001a90:	f006 fb3c 	bl	800810c <HAL_TIM_ConfigClockSource>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a9a:	f000 fcd3 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a9e:	482e      	ldr	r0, [pc, #184]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001aa0:	f005 fc34 	bl	800730c <HAL_TIM_PWM_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001aaa:	f000 fccb 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aba:	4619      	mov	r1, r3
 8001abc:	4826      	ldr	r0, [pc, #152]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001abe:	f007 fac5 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ac8:	f000 fcbc 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	2204      	movs	r2, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001af2:	f006 f933 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001afc:	f000 fca2 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	2208      	movs	r2, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001b0a:	f006 f927 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b14:	f000 fc96 	bl	8002444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001b3c:	f007 fb64 	bl	8009208 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b46:	f000 fc7d 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b4a:	4803      	ldr	r0, [pc, #12]	; (8001b58 <MX_TIM8_Init+0x150>)
 8001b4c:	f000 ffca 	bl	8002ae4 <HAL_TIM_MspPostInit>

}
 8001b50:	bf00      	nop
 8001b52:	3758      	adds	r7, #88	; 0x58
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001d4 	.word	0x200001d4
 8001b5c:	40010400 	.word	0x40010400

08001b60 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001b88:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <MX_TIM12_Init+0xdc>)
 8001b8a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001b8e:	2213      	movs	r2, #19
 8001b90:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001b9a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001b9e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001bac:	4822      	ldr	r0, [pc, #136]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001bae:	f005 f9f7 	bl	8006fa0 <HAL_TIM_Base_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001bb8:	f000 fc44 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481b      	ldr	r0, [pc, #108]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001bca:	f006 fa9f 	bl	800810c <HAL_TIM_ConfigClockSource>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001bd4:	f000 fc36 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001bd8:	4817      	ldr	r0, [pc, #92]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001bda:	f005 fb97 	bl	800730c <HAL_TIM_PWM_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001be4:	f000 fc2e 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be8:	2360      	movs	r3, #96	; 0x60
 8001bea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001c00:	f006 f8ac 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001c0a:	f000 fc1b 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2204      	movs	r2, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001c16:	f006 f8a1 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001c20:	f000 fc10 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001c26:	f005 faab 	bl	8007180 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <MX_TIM12_Init+0xd8>)
 8001c2c:	f000 ff5a 	bl	8002ae4 <HAL_TIM_MspPostInit>

}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000578 	.word	0x20000578
 8001c3c:	40001800 	.word	0x40001800

08001c40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_UART4_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_UART4_Init+0x4c>)
 8001c78:	f007 fba6 	bl	80093c8 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c82:	f000 fbdf 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000450 	.word	0x20000450
 8001c90:	40004c00 	.word	0x40004c00

08001c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART1_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cba:	2204      	movs	r2, #4
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f007 fb7c 	bl	80093c8 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f000 fbb5 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000040c 	.word	0x2000040c
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_USART2_UART_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f007 fb52 	bl	80093c8 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f000 fb8b 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000534 	.word	0x20000534
 8001d38:	40004400 	.word	0x40004400

08001d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <MX_DMA_Init+0x3c>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_DMA_Init+0x3c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2010      	movs	r0, #16
 8001d64:	f001 fa4c 	bl	8003200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f001 fa75 	bl	8003258 <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <MX_GPIO_Init+0x180>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <MX_GPIO_Init+0x180>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b56      	ldr	r3, [pc, #344]	; (8001efc <MX_GPIO_Init+0x180>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b52      	ldr	r3, [pc, #328]	; (8001efc <MX_GPIO_Init+0x180>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <MX_GPIO_Init+0x180>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <MX_GPIO_Init+0x180>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <MX_GPIO_Init+0x180>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <MX_GPIO_Init+0x180>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <MX_GPIO_Init+0x180>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <MX_GPIO_Init+0x180>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a43      	ldr	r2, [pc, #268]	; (8001efc <MX_GPIO_Init+0x180>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <MX_GPIO_Init+0x180>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <MX_GPIO_Init+0x180>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <MX_GPIO_Init+0x180>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <MX_GPIO_Init+0x180>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	213d      	movs	r1, #61	; 0x3d
 8001e22:	4837      	ldr	r0, [pc, #220]	; (8001f00 <MX_GPIO_Init+0x184>)
 8001e24:	f002 fa4a 	bl	80042bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f641 0102 	movw	r1, #6146	; 0x1802
 8001e2e:	4835      	ldr	r0, [pc, #212]	; (8001f04 <MX_GPIO_Init+0x188>)
 8001e30:	f002 fa44 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f241 0126 	movw	r1, #4134	; 0x1026
 8001e3a:	4833      	ldr	r0, [pc, #204]	; (8001f08 <MX_GPIO_Init+0x18c>)
 8001e3c:	f002 fa3e 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	482a      	ldr	r0, [pc, #168]	; (8001f00 <MX_GPIO_Init+0x184>)
 8001e58:	f001 ff0c 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001e5c:	233d      	movs	r3, #61	; 0x3d
 8001e5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4823      	ldr	r0, [pc, #140]	; (8001f00 <MX_GPIO_Init+0x184>)
 8001e74:	f001 fefe 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001e78:	f641 0302 	movw	r3, #6146	; 0x1802
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481c      	ldr	r0, [pc, #112]	; (8001f04 <MX_GPIO_Init+0x188>)
 8001e92:	f001 feef 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e96:	2310      	movs	r3, #16
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4816      	ldr	r0, [pc, #88]	; (8001f04 <MX_GPIO_Init+0x188>)
 8001eaa:	f001 fee3 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001eae:	f241 0326 	movw	r3, #4134	; 0x1026
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <MX_GPIO_Init+0x18c>)
 8001ec8:	f001 fed4 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <MX_GPIO_Init+0x190>)
 8001ee0:	f001 fec8 	bl	8003c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2028      	movs	r0, #40	; 0x28
 8001eea:	f001 f989 	bl	8003200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eee:	2028      	movs	r0, #40	; 0x28
 8001ef0:	f001 f9b2 	bl	8003258 <HAL_NVIC_EnableIRQ>

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020c00 	.word	0x40020c00

08001f10 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001f14:	2200      	movs	r2, #0
 8001f16:	2104      	movs	r1, #4
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <Vonalszenzor_Init+0x1c>)
 8001f1a:	f002 f9cf 	bl	80042bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2120      	movs	r1, #32
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <Vonalszenzor_Init+0x20>)
 8001f24:	f002 f9ca 	bl	80042bc <HAL_GPIO_WritePin>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800

08001f34 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	Vonalszenzor_minta_kuldes(leszed);
 8001f3c:	48be      	ldr	r0, [pc, #760]	; (8002238 <Vonalszenzor_operal+0x304>)
 8001f3e:	f000 fa1f 	bl	8002380 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8001f42:	2370      	movs	r3, #112	; 0x70
 8001f44:	81bb      	strh	r3, [r7, #12]

	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8001f46:	48bd      	ldr	r0, [pc, #756]	; (800223c <Vonalszenzor_operal+0x308>)
 8001f48:	f000 fa1a 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001f4c:	4bbc      	ldr	r3, [pc, #752]	; (8002240 <Vonalszenzor_operal+0x30c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f107 020c 	add.w	r2, r7, #12
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fa3a 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[1] = (uint8_t) eredmeny_16bit_temp[0];
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	7b3a      	ldrb	r2, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8001f64:	4bb7      	ldr	r3, [pc, #732]	; (8002244 <Vonalszenzor_operal+0x310>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f107 020c 	add.w	r2, r7, #12
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa2e 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[5] = (uint8_t) eredmeny_16bit_temp[0];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3305      	adds	r3, #5
 8001f78:	7b3a      	ldrb	r2, [r7, #12]
 8001f7a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001f7c:	48ae      	ldr	r0, [pc, #696]	; (8002238 <Vonalszenzor_operal+0x304>)
 8001f7e:	f000 f9ff 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8001f82:	48b1      	ldr	r0, [pc, #708]	; (8002248 <Vonalszenzor_operal+0x314>)
 8001f84:	f000 f9fc 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001f88:	4bad      	ldr	r3, [pc, #692]	; (8002240 <Vonalszenzor_operal+0x30c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f107 020c 	add.w	r2, r7, #12
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fa1c 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[9] = (uint8_t) eredmeny_16bit_temp[0];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3309      	adds	r3, #9
 8001f9c:	7b3a      	ldrb	r2, [r7, #12]
 8001f9e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8001fa0:	4ba8      	ldr	r3, [pc, #672]	; (8002244 <Vonalszenzor_operal+0x310>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f107 020c 	add.w	r2, r7, #12
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fa10 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[13] = (uint8_t) eredmeny_16bit_temp[0];
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	330d      	adds	r3, #13
 8001fb4:	7b3a      	ldrb	r2, [r7, #12]
 8001fb6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001fb8:	489f      	ldr	r0, [pc, #636]	; (8002238 <Vonalszenzor_operal+0x304>)
 8001fba:	f000 f9e1 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 8001fbe:	48a3      	ldr	r0, [pc, #652]	; (800224c <Vonalszenzor_operal+0x318>)
 8001fc0:	f000 f9de 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001fc4:	4b9e      	ldr	r3, [pc, #632]	; (8002240 <Vonalszenzor_operal+0x30c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f107 020c 	add.w	r2, r7, #12
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f9fe 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[17] = (uint8_t) eredmeny_16bit_temp[0];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3311      	adds	r3, #17
 8001fd8:	7b3a      	ldrb	r2, [r7, #12]
 8001fda:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8001fdc:	4b99      	ldr	r3, [pc, #612]	; (8002244 <Vonalszenzor_operal+0x310>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f107 020c 	add.w	r2, r7, #12
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f9f2 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[21] = (uint8_t) eredmeny_16bit_temp[0];
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3315      	adds	r3, #21
 8001ff0:	7b3a      	ldrb	r2, [r7, #12]
 8001ff2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001ff4:	4890      	ldr	r0, [pc, #576]	; (8002238 <Vonalszenzor_operal+0x304>)
 8001ff6:	f000 f9c3 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 8001ffa:	4895      	ldr	r0, [pc, #596]	; (8002250 <Vonalszenzor_operal+0x31c>)
 8001ffc:	f000 f9c0 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002000:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <Vonalszenzor_operal+0x30c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f107 020c 	add.w	r2, r7, #12
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9e0 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3319      	adds	r3, #25
 8002014:	7b3a      	ldrb	r2, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002018:	4b8a      	ldr	r3, [pc, #552]	; (8002244 <Vonalszenzor_operal+0x310>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9d4 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	331d      	adds	r3, #29
 800202c:	7b3a      	ldrb	r2, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002030:	4881      	ldr	r0, [pc, #516]	; (8002238 <Vonalszenzor_operal+0x304>)
 8002032:	f000 f9a5 	bl	8002380 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 8002036:	4887      	ldr	r0, [pc, #540]	; (8002254 <Vonalszenzor_operal+0x320>)
 8002038:	f000 f9a2 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800203c:	4b86      	ldr	r3, [pc, #536]	; (8002258 <Vonalszenzor_operal+0x324>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f107 020c 	add.w	r2, r7, #12
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f9c2 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[2] = (uint8_t) eredmeny_16bit_temp[0];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3302      	adds	r3, #2
 8002050:	7b3a      	ldrb	r2, [r7, #12]
 8002052:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002054:	4b81      	ldr	r3, [pc, #516]	; (800225c <Vonalszenzor_operal+0x328>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f107 020c 	add.w	r2, r7, #12
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f9b6 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3306      	adds	r3, #6
 8002068:	7b3a      	ldrb	r2, [r7, #12]
 800206a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800206c:	4872      	ldr	r0, [pc, #456]	; (8002238 <Vonalszenzor_operal+0x304>)
 800206e:	f000 f987 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002072:	487b      	ldr	r0, [pc, #492]	; (8002260 <Vonalszenzor_operal+0x32c>)
 8002074:	f000 f984 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002078:	4b77      	ldr	r3, [pc, #476]	; (8002258 <Vonalszenzor_operal+0x324>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f107 020c 	add.w	r2, r7, #12
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f9a4 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	330a      	adds	r3, #10
 800208c:	7b3a      	ldrb	r2, [r7, #12]
 800208e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <Vonalszenzor_operal+0x328>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f107 020c 	add.w	r2, r7, #12
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f998 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[14] = (uint8_t) eredmeny_16bit_temp[0];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	330e      	adds	r3, #14
 80020a4:	7b3a      	ldrb	r2, [r7, #12]
 80020a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020a8:	4863      	ldr	r0, [pc, #396]	; (8002238 <Vonalszenzor_operal+0x304>)
 80020aa:	f000 f969 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80020ae:	486d      	ldr	r0, [pc, #436]	; (8002264 <Vonalszenzor_operal+0x330>)
 80020b0:	f000 f966 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <Vonalszenzor_operal+0x324>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f986 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[18] = (uint8_t) eredmeny_16bit_temp[0];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3312      	adds	r3, #18
 80020c8:	7b3a      	ldrb	r2, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80020cc:	4b63      	ldr	r3, [pc, #396]	; (800225c <Vonalszenzor_operal+0x328>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f107 020c 	add.w	r2, r7, #12
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f97a 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[22] = (uint8_t) eredmeny_16bit_temp[0];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3316      	adds	r3, #22
 80020e0:	7b3a      	ldrb	r2, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020e4:	4854      	ldr	r0, [pc, #336]	; (8002238 <Vonalszenzor_operal+0x304>)
 80020e6:	f000 f94b 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80020ea:	485f      	ldr	r0, [pc, #380]	; (8002268 <Vonalszenzor_operal+0x334>)
 80020ec:	f000 f948 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <Vonalszenzor_operal+0x324>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f968 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[26] = (uint8_t) eredmeny_16bit_temp[0];
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	331a      	adds	r3, #26
 8002104:	7b3a      	ldrb	r2, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002108:	4b54      	ldr	r3, [pc, #336]	; (800225c <Vonalszenzor_operal+0x328>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f95c 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	331e      	adds	r3, #30
 800211c:	7b3a      	ldrb	r2, [r7, #12]
 800211e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002120:	4845      	ldr	r0, [pc, #276]	; (8002238 <Vonalszenzor_operal+0x304>)
 8002122:	f000 f92d 	bl	8002380 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 8002126:	4851      	ldr	r0, [pc, #324]	; (800226c <Vonalszenzor_operal+0x338>)
 8002128:	f000 f92a 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <Vonalszenzor_operal+0x33c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f94a 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[3] = (uint8_t) eredmeny_16bit_temp[0];
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3303      	adds	r3, #3
 8002140:	7b3a      	ldrb	r2, [r7, #12]
 8002142:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <Vonalszenzor_operal+0x340>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f107 020c 	add.w	r2, r7, #12
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f93e 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3307      	adds	r3, #7
 8002158:	7b3a      	ldrb	r2, [r7, #12]
 800215a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800215c:	4836      	ldr	r0, [pc, #216]	; (8002238 <Vonalszenzor_operal+0x304>)
 800215e:	f000 f90f 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002162:	4845      	ldr	r0, [pc, #276]	; (8002278 <Vonalszenzor_operal+0x344>)
 8002164:	f000 f90c 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <Vonalszenzor_operal+0x33c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f92c 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	330b      	adds	r3, #11
 800217c:	7b3a      	ldrb	r2, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <Vonalszenzor_operal+0x340>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f920 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[15] = (uint8_t) eredmeny_16bit_temp[0];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	330f      	adds	r3, #15
 8002194:	7b3a      	ldrb	r2, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002198:	4827      	ldr	r0, [pc, #156]	; (8002238 <Vonalszenzor_operal+0x304>)
 800219a:	f000 f8f1 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 800219e:	4837      	ldr	r0, [pc, #220]	; (800227c <Vonalszenzor_operal+0x348>)
 80021a0:	f000 f8ee 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021a4:	4b32      	ldr	r3, [pc, #200]	; (8002270 <Vonalszenzor_operal+0x33c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f107 020c 	add.w	r2, r7, #12
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f90e 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[19] = (uint8_t) eredmeny_16bit_temp[0];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3313      	adds	r3, #19
 80021b8:	7b3a      	ldrb	r2, [r7, #12]
 80021ba:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <Vonalszenzor_operal+0x340>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	f107 020c 	add.w	r2, r7, #12
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f902 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[23] = (uint8_t) eredmeny_16bit_temp[0];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3317      	adds	r3, #23
 80021d0:	7b3a      	ldrb	r2, [r7, #12]
 80021d2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021d4:	4818      	ldr	r0, [pc, #96]	; (8002238 <Vonalszenzor_operal+0x304>)
 80021d6:	f000 f8d3 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 80021da:	4829      	ldr	r0, [pc, #164]	; (8002280 <Vonalszenzor_operal+0x34c>)
 80021dc:	f000 f8d0 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <Vonalszenzor_operal+0x33c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	f107 020c 	add.w	r2, r7, #12
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f8f0 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[27] = (uint8_t) eredmeny_16bit_temp[0];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	331b      	adds	r3, #27
 80021f4:	7b3a      	ldrb	r2, [r7, #12]
 80021f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <Vonalszenzor_operal+0x340>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f107 020c 	add.w	r2, r7, #12
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f8e4 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	331f      	adds	r3, #31
 800220c:	7b3a      	ldrb	r2, [r7, #12]
 800220e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <Vonalszenzor_operal+0x304>)
 8002212:	f000 f8b5 	bl	8002380 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <Vonalszenzor_operal+0x350>)
 8002218:	f000 f8b2 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <Vonalszenzor_operal+0x354>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f107 020c 	add.w	r2, r7, #12
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f8d2 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[4] = (uint8_t) eredmeny_16bit_temp[0];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	7b3a      	ldrb	r2, [r7, #12]
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e02a      	b.n	800228c <Vonalszenzor_operal+0x358>
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	20000080 	.word	0x20000080
 8002240:	200000ff 	.word	0x200000ff
 8002244:	20000089 	.word	0x20000089
 8002248:	20000078 	.word	0x20000078
 800224c:	20000070 	.word	0x20000070
 8002250:	20000068 	.word	0x20000068
 8002254:	20000060 	.word	0x20000060
 8002258:	20000086 	.word	0x20000086
 800225c:	2000008a 	.word	0x2000008a
 8002260:	20000058 	.word	0x20000058
 8002264:	20000050 	.word	0x20000050
 8002268:	20000048 	.word	0x20000048
 800226c:	20000040 	.word	0x20000040
 8002270:	20000087 	.word	0x20000087
 8002274:	2000008b 	.word	0x2000008b
 8002278:	20000038 	.word	0x20000038
 800227c:	20000030 	.word	0x20000030
 8002280:	20000028 	.word	0x20000028
 8002284:	20000020 	.word	0x20000020
 8002288:	20000088 	.word	0x20000088
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <Vonalszenzor_operal+0x434>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f89a 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[8] = (uint8_t) eredmeny_16bit_temp[0];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3308      	adds	r3, #8
 80022a0:	7b3a      	ldrb	r2, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022a4:	4831      	ldr	r0, [pc, #196]	; (800236c <Vonalszenzor_operal+0x438>)
 80022a6:	f000 f86b 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 80022aa:	4831      	ldr	r0, [pc, #196]	; (8002370 <Vonalszenzor_operal+0x43c>)
 80022ac:	f000 f868 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <Vonalszenzor_operal+0x440>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f107 020c 	add.w	r2, r7, #12
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f888 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[12] = (uint8_t) eredmeny_16bit_temp[0];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	330c      	adds	r3, #12
 80022c4:	7b3a      	ldrb	r2, [r7, #12]
 80022c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <Vonalszenzor_operal+0x434>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f107 020c 	add.w	r2, r7, #12
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f87c 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[16] = (uint8_t) eredmeny_16bit_temp[0];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3310      	adds	r3, #16
 80022dc:	7b3a      	ldrb	r2, [r7, #12]
 80022de:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022e0:	4822      	ldr	r0, [pc, #136]	; (800236c <Vonalszenzor_operal+0x438>)
 80022e2:	f000 f84d 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80022e6:	4824      	ldr	r0, [pc, #144]	; (8002378 <Vonalszenzor_operal+0x444>)
 80022e8:	f000 f84a 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <Vonalszenzor_operal+0x440>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f107 020c 	add.w	r2, r7, #12
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f86a 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[20] = (uint8_t) eredmeny_16bit_temp[0];
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3314      	adds	r3, #20
 8002300:	7b3a      	ldrb	r2, [r7, #12]
 8002302:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <Vonalszenzor_operal+0x434>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f107 020c 	add.w	r2, r7, #12
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f85e 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3318      	adds	r3, #24
 8002318:	7b3a      	ldrb	r2, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800231c:	4813      	ldr	r0, [pc, #76]	; (800236c <Vonalszenzor_operal+0x438>)
 800231e:	f000 f82f 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 8002322:	4816      	ldr	r0, [pc, #88]	; (800237c <Vonalszenzor_operal+0x448>)
 8002324:	f000 f82c 	bl	8002380 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <Vonalszenzor_operal+0x440>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f107 020c 	add.w	r2, r7, #12
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f84c 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	331c      	adds	r3, #28
 800233c:	7b3a      	ldrb	r2, [r7, #12]
 800233e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <Vonalszenzor_operal+0x434>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f107 020c 	add.w	r2, r7, #12
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f840 	bl	80023d0 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	7b3a      	ldrb	r2, [r7, #12]
 8002356:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <Vonalszenzor_operal+0x438>)
 800235a:	f000 f811 	bl	8002380 <Vonalszenzor_minta_kuldes>
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000008c 	.word	0x2000008c
 800236c:	20000000 	.word	0x20000000
 8002370:	20000018 	.word	0x20000018
 8002374:	20000088 	.word	0x20000088
 8002378:	20000010 	.word	0x20000010
 800237c:	20000008 	.word	0x20000008

08002380 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002388:	2200      	movs	r2, #0
 800238a:	2110      	movs	r1, #16
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <Vonalszenzor_minta_kuldes+0x44>)
 800238e:	f001 ff95 	bl	80042bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 8002392:	2200      	movs	r2, #0
 8002394:	2102      	movs	r1, #2
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <Vonalszenzor_minta_kuldes+0x48>)
 8002398:	f001 ff90 	bl	80042bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	2206      	movs	r2, #6
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	480a      	ldr	r0, [pc, #40]	; (80023cc <Vonalszenzor_minta_kuldes+0x4c>)
 80023a4:	f004 f8c0 	bl	8006528 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 80023a8:	2201      	movs	r2, #1
 80023aa:	2110      	movs	r1, #16
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <Vonalszenzor_minta_kuldes+0x44>)
 80023ae:	f001 ff85 	bl	80042bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 80023b2:	2201      	movs	r2, #1
 80023b4:	2102      	movs	r1, #2
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <Vonalszenzor_minta_kuldes+0x48>)
 80023b8:	f001 ff80 	bl	80042bc <HAL_GPIO_WritePin>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020400 	.word	0x40020400
 80023cc:	2000017c 	.word	0x2000017c

080023d0 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	733b      	strb	r3, [r7, #12]
 80023e0:	2300      	movs	r3, #0
 80023e2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 80023e4:	f107 010c 	add.w	r1, r7, #12
 80023e8:	2364      	movs	r3, #100	; 0x64
 80023ea:	2202      	movs	r2, #2
 80023ec:	4806      	ldr	r0, [pc, #24]	; (8002408 <Vonalszenzor_meres_kiolvasas+0x38>)
 80023ee:	f004 f89b 	bl	8006528 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 80023f2:	2364      	movs	r3, #100	; 0x64
 80023f4:	2202      	movs	r2, #2
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <Vonalszenzor_meres_kiolvasas+0x38>)
 80023fa:	f004 f9e1 	bl	80067c0 <HAL_SPI_Receive>
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000494 	.word	0x20000494

0800240c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d109      	bne.n	8002432 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_GPIO_EXTI_Callback+0x34>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_GPIO_EXTI_Callback+0x34>)
 8002430:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200000fc 	.word	0x200000fc

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800244c:	e7fe      	b.n	800244c <Error_Handler+0x8>

0800244e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_MspInit+0x4c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_MspInit+0x4c>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_MspInit+0x4c>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024a2:	2007      	movs	r0, #7
 80024a4:	f000 fe8c 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b090      	sub	sp, #64	; 0x40
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_I2C_MspInit+0x1cc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12d      	bne.n	8002532 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f8:	2312      	movs	r3, #18
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002504:	2304      	movs	r3, #4
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	485e      	ldr	r0, [pc, #376]	; (8002688 <HAL_I2C_MspInit+0x1d4>)
 8002510:	f001 fbb0 	bl	8003c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4a59      	ldr	r2, [pc, #356]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800251e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002522:	6413      	str	r3, [r2, #64]	; 0x40
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002530:	e0a2      	b.n	8002678 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a55      	ldr	r2, [pc, #340]	; (800268c <HAL_I2C_MspInit+0x1d8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d14c      	bne.n	80025d6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002546:	f043 0302 	orr.w	r3, r3, #2
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6313      	str	r3, [r2, #48]	; 0x30
 8002568:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002586:	2304      	movs	r3, #4
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258e:	4619      	mov	r1, r3
 8002590:	483d      	ldr	r0, [pc, #244]	; (8002688 <HAL_I2C_MspInit+0x1d4>)
 8002592:	f001 fb6f 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259c:	2312      	movs	r3, #18
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025a8:	2304      	movs	r3, #4
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b0:	4619      	mov	r1, r3
 80025b2:	4837      	ldr	r0, [pc, #220]	; (8002690 <HAL_I2C_MspInit+0x1dc>)
 80025b4:	f001 fb5e 	bl	8003c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a30      	ldr	r2, [pc, #192]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	69bb      	ldr	r3, [r7, #24]
}
 80025d4:	e050      	b.n	8002678 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_I2C_MspInit+0x1e0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d14b      	bne.n	8002678 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6313      	str	r3, [r2, #48]	; 0x30
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6313      	str	r3, [r2, #48]	; 0x30
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261e:	2312      	movs	r3, #18
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800262a:	2304      	movs	r3, #4
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002632:	4619      	mov	r1, r3
 8002634:	4816      	ldr	r0, [pc, #88]	; (8002690 <HAL_I2C_MspInit+0x1dc>)
 8002636:	f001 fb1d 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800264c:	2304      	movs	r3, #4
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002654:	4619      	mov	r1, r3
 8002656:	4810      	ldr	r0, [pc, #64]	; (8002698 <HAL_I2C_MspInit+0x1e4>)
 8002658:	f001 fb0c 	bl	8003c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 8002666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_I2C_MspInit+0x1d0>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	bf00      	nop
 800267a:	3740      	adds	r7, #64	; 0x40
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40005400 	.word	0x40005400
 8002684:	40023800 	.word	0x40023800
 8002688:	40020400 	.word	0x40020400
 800268c:	40005800 	.word	0x40005800
 8002690:	40020800 	.word	0x40020800
 8002694:	40005c00 	.word	0x40005c00
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b090      	sub	sp, #64	; 0x40
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a98      	ldr	r2, [pc, #608]	; (800291c <HAL_SPI_MspInit+0x280>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d12c      	bne.n	8002718 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c2:	4b97      	ldr	r3, [pc, #604]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a96      	ldr	r2, [pc, #600]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b94      	ldr	r3, [pc, #592]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	4b90      	ldr	r3, [pc, #576]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a8f      	ldr	r2, [pc, #572]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b8d      	ldr	r3, [pc, #564]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026f6:	23e0      	movs	r3, #224	; 0xe0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002706:	2305      	movs	r3, #5
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270e:	4619      	mov	r1, r3
 8002710:	4884      	ldr	r0, [pc, #528]	; (8002924 <HAL_SPI_MspInit+0x288>)
 8002712:	f001 faaf 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002716:	e0fd      	b.n	8002914 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a82      	ldr	r2, [pc, #520]	; (8002928 <HAL_SPI_MspInit+0x28c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d14b      	bne.n	80027ba <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a7d      	ldr	r2, [pc, #500]	; (8002920 <HAL_SPI_MspInit+0x284>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	4b77      	ldr	r3, [pc, #476]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a76      	ldr	r2, [pc, #472]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a6f      	ldr	r2, [pc, #444]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_SPI_MspInit+0x284>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002776:	2302      	movs	r3, #2
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002786:	2307      	movs	r3, #7
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278e:	4619      	mov	r1, r3
 8002790:	4866      	ldr	r0, [pc, #408]	; (800292c <HAL_SPI_MspInit+0x290>)
 8002792:	f001 fa6f 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027a8:	2305      	movs	r3, #5
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b0:	4619      	mov	r1, r3
 80027b2:	485f      	ldr	r0, [pc, #380]	; (8002930 <HAL_SPI_MspInit+0x294>)
 80027b4:	f001 fa5e 	bl	8003c74 <HAL_GPIO_Init>
}
 80027b8:	e0ac      	b.n	8002914 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5d      	ldr	r2, [pc, #372]	; (8002934 <HAL_SPI_MspInit+0x298>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 80a7 	bne.w	8002914 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	4b55      	ldr	r3, [pc, #340]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a54      	ldr	r2, [pc, #336]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <HAL_SPI_MspInit+0x284>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a46      	ldr	r2, [pc, #280]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HAL_SPI_MspInit+0x284>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_SPI_MspInit+0x284>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002836:	2301      	movs	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002846:	2307      	movs	r3, #7
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284e:	4619      	mov	r1, r3
 8002850:	4837      	ldr	r0, [pc, #220]	; (8002930 <HAL_SPI_MspInit+0x294>)
 8002852:	f001 fa0f 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002868:	2306      	movs	r3, #6
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002870:	4619      	mov	r1, r3
 8002872:	482c      	ldr	r0, [pc, #176]	; (8002924 <HAL_SPI_MspInit+0x288>)
 8002874:	f001 f9fe 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800288a:	2306      	movs	r3, #6
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002892:	4619      	mov	r1, r3
 8002894:	4825      	ldr	r0, [pc, #148]	; (800292c <HAL_SPI_MspInit+0x290>)
 8002896:	f001 f9ed 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800289a:	2310      	movs	r3, #16
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028aa:	2306      	movs	r3, #6
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	4619      	mov	r1, r3
 80028b4:	481e      	ldr	r0, [pc, #120]	; (8002930 <HAL_SPI_MspInit+0x294>)
 80028b6:	f001 f9dd 	bl	8003c74 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_SPI_MspInit+0x2a0>)
 80028be:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80028f8:	480f      	ldr	r0, [pc, #60]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 80028fa:	f000 fcd1 	bl	80032a0 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8002904:	f7ff fd9e 	bl	8002444 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 800290c:	649a      	str	r2, [r3, #72]	; 0x48
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_SPI_MspInit+0x29c>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002914:	bf00      	nop
 8002916:	3740      	adds	r7, #64	; 0x40
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013000 	.word	0x40013000
 8002920:	40023800 	.word	0x40023800
 8002924:	40020000 	.word	0x40020000
 8002928:	40003800 	.word	0x40003800
 800292c:	40020800 	.word	0x40020800
 8002930:	40020400 	.word	0x40020400
 8002934:	40003c00 	.word	0x40003c00
 8002938:	200003ac 	.word	0x200003ac
 800293c:	40026088 	.word	0x40026088

08002940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d116      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	201c      	movs	r0, #28
 8002974:	f000 fc44 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002978:	201c      	movs	r0, #28
 800297a:	f000 fc6d 	bl	8003258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800297e:	e036      	b.n	80029ee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_TIM_Base_MspInit+0xbc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d116      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2100      	movs	r1, #0
 80029aa:	202b      	movs	r0, #43	; 0x2b
 80029ac:	f000 fc28 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80029b0:	202b      	movs	r0, #43	; 0x2b
 80029b2:	f000 fc51 	bl	8003258 <HAL_NVIC_EnableIRQ>
}
 80029b6:	e01a      	b.n	80029ee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_TIM_Base_MspInit+0xc0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d115      	bne.n	80029ee <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 80029cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_TIM_Base_MspInit+0xb8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 80029de:	2201      	movs	r2, #1
 80029e0:	2100      	movs	r1, #0
 80029e2:	202b      	movs	r0, #43	; 0x2b
 80029e4:	f000 fc0c 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80029e8:	202b      	movs	r0, #43	; 0x2b
 80029ea:	f000 fc35 	bl	8003258 <HAL_NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40010400 	.word	0x40010400
 8002a00:	40001800 	.word	0x40001800

08002a04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_TIM_PWM_MspInit+0x48>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d115      	bne.n	8002a42 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_TIM_PWM_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_TIM_PWM_MspInit+0x4c>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_TIM_PWM_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	201d      	movs	r0, #29
 8002a38:	f000 fbe2 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a3c:	201d      	movs	r0, #29
 8002a3e:	f000 fc0b 	bl	8003258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12b      	bne.n	8002ace <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_TIM_Encoder_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aae:	23c0      	movs	r3, #192	; 0xc0
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002aca:	f001 f8d3 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a37      	ldr	r2, [pc, #220]	; (8002be0 <HAL_TIM_MspPostInit+0xfc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11e      	bne.n	8002b44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a35      	ldr	r2, [pc, #212]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b32:	2302      	movs	r3, #2
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	482a      	ldr	r0, [pc, #168]	; (8002be8 <HAL_TIM_MspPostInit+0x104>)
 8002b3e:	f001 f899 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b42:	e048      	b.n	8002bd6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_TIM_MspPostInit+0x108>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d11f      	bne.n	8002b8e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4818      	ldr	r0, [pc, #96]	; (8002be8 <HAL_TIM_MspPostInit+0x104>)
 8002b88:	f001 f874 	bl	8003c74 <HAL_GPIO_Init>
}
 8002b8c:	e023      	b.n	8002bd6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_TIM_MspPostInit+0x10c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d11e      	bne.n	8002bd6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_TIM_MspPostInit+0x100>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bc6:	2309      	movs	r3, #9
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <HAL_TIM_MspPostInit+0x110>)
 8002bd2:	f001 f84f 	bl	8003c74 <HAL_GPIO_Init>
}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40001800 	.word	0x40001800
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_UART_MspInit+0x19c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d153      	bne.n	8002cc2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a56      	ldr	r2, [pc, #344]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b54      	ldr	r3, [pc, #336]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c7e:	2308      	movs	r3, #8
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c86:	4619      	mov	r1, r3
 8002c88:	4844      	ldr	r0, [pc, #272]	; (8002d9c <HAL_UART_MspInit+0x1a4>)
 8002c8a:	f000 fff3 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca8:	4619      	mov	r1, r3
 8002caa:	483d      	ldr	r0, [pc, #244]	; (8002da0 <HAL_UART_MspInit+0x1a8>)
 8002cac:	f000 ffe2 	bl	8003c74 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2034      	movs	r0, #52	; 0x34
 8002cb6:	f000 faa3 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cba:	2034      	movs	r0, #52	; 0x34
 8002cbc:	f000 facc 	bl	8003258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cc0:	e063      	b.n	8002d8a <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <HAL_UART_MspInit+0x1ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d12d      	bne.n	8002d28 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6453      	str	r3, [r2, #68]	; 0x44
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d16:	2307      	movs	r3, #7
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1e:	4619      	mov	r1, r3
 8002d20:	481e      	ldr	r0, [pc, #120]	; (8002d9c <HAL_UART_MspInit+0x1a4>)
 8002d22:	f000 ffa7 	bl	8003c74 <HAL_GPIO_Init>
}
 8002d26:	e030      	b.n	8002d8a <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_UART_MspInit+0x1b0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12b      	bne.n	8002d8a <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_UART_MspInit+0x1a0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d82:	4619      	mov	r1, r3
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_UART_MspInit+0x1a4>)
 8002d86:	f000 ff75 	bl	8003c74 <HAL_GPIO_Init>
}
 8002d8a:	bf00      	nop
 8002d8c:	3738      	adds	r7, #56	; 0x38
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40004c00 	.word	0x40004c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40004400 	.word	0x40004400

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler+0x4>

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df8:	f000 f8ce 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <DMA1_Stream5_IRQHandler+0x10>)
 8002e06:	f000 fcf9 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200003ac 	.word	0x200003ac

08002e14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM2_IRQHandler+0x10>)
 8002e1a:	f004 fe97 	bl	8007b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200004ec 	.word	0x200004ec

08002e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <TIM3_IRQHandler+0x10>)
 8002e2e:	f004 fe8d 	bl	8007b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000030c 	.word	0x2000030c

08002e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e44:	f001 fa6c 	bl	8004320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e50:	4803      	ldr	r0, [pc, #12]	; (8002e60 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002e52:	f004 fe7b 	bl	8007b4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002e58:	f004 fe78 	bl	8007b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200001d4 	.word	0x200001d4
 8002e64:	20000578 	.word	0x20000578

08002e68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <UART4_IRQHandler+0x10>)
 8002e6e:	f006 fb85 	bl	800957c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000450 	.word	0x20000450

08002e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <SystemInit+0x20>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <SystemInit+0x20>)
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ea6:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ebc:	4c0b      	ldr	r4, [pc, #44]	; (8002eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eca:	f7ff ffd7 	bl	8002e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f00c fe17 	bl	800fb00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7fe f8f5 	bl	80010c0 <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002ee4:	0800feac 	.word	0x0800feac
  ldr r2, =_sbss
 8002ee8:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002eec:	200006c4 	.word	0x200006c4

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>
	...

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_Init+0x40>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_Init+0x40>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x40>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 f94f 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff fa9c 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f996 	bl	8003288 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 f944 	bl	8003200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200000a0 	.word	0x200000a0
 8002f90:	200000a8 	.word	0x200000a8
 8002f94:	200000a4 	.word	0x200000a4

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	200000a8 	.word	0x200000a8
 8002fbc:	200005c0 	.word	0x200005c0

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200005c0 	.word	0x200005c0

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000a8 	.word	0x200000a8

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d00f      	beq.n	80031ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d00c      	beq.n	80031ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d009      	beq.n	80031ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d006      	beq.n	80031ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d003      	beq.n	80031ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031e6:	2192      	movs	r1, #146	; 0x92
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80031ea:	f7ff f930 	bl	800244e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ff16 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0800fbb4 	.word	0x0800fbb4

08003200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0f      	cmp	r3, #15
 8003216:	d903      	bls.n	8003220 <HAL_NVIC_SetPriority+0x20>
 8003218:	21aa      	movs	r1, #170	; 0xaa
 800321a:	480e      	ldr	r0, [pc, #56]	; (8003254 <HAL_NVIC_SetPriority+0x54>)
 800321c:	f7ff f917 	bl	800244e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	d903      	bls.n	800322e <HAL_NVIC_SetPriority+0x2e>
 8003226:	21ab      	movs	r1, #171	; 0xab
 8003228:	480a      	ldr	r0, [pc, #40]	; (8003254 <HAL_NVIC_SetPriority+0x54>)
 800322a:	f7ff f910 	bl	800244e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800322e:	f7ff ff1b 	bl	8003068 <__NVIC_GetPriorityGrouping>
 8003232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	6978      	ldr	r0, [r7, #20]
 800323a:	f7ff ff6b 	bl	8003114 <NVIC_EncodePriority>
 800323e:	4602      	mov	r2, r0
 8003240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff3a 	bl	80030c0 <__NVIC_SetPriority>
}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	0800fbb4 	.word	0x0800fbb4

08003258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	2b00      	cmp	r3, #0
 8003268:	da03      	bge.n	8003272 <HAL_NVIC_EnableIRQ+0x1a>
 800326a:	21be      	movs	r1, #190	; 0xbe
 800326c:	4805      	ldr	r0, [pc, #20]	; (8003284 <HAL_NVIC_EnableIRQ+0x2c>)
 800326e:	f7ff f8ee 	bl	800244e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff04 	bl	8003084 <__NVIC_EnableIRQ>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	0800fbb4 	.word	0x0800fbb4

08003288 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff73 	bl	800317c <SysTick_Config>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff fe88 	bl	8002fc0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e204      	b.n	80036c6 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a97      	ldr	r2, [pc, #604]	; (8003520 <HAL_DMA_Init+0x280>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d04e      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a96      	ldr	r2, [pc, #600]	; (8003524 <HAL_DMA_Init+0x284>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d049      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a94      	ldr	r2, [pc, #592]	; (8003528 <HAL_DMA_Init+0x288>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d044      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a93      	ldr	r2, [pc, #588]	; (800352c <HAL_DMA_Init+0x28c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d03f      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a91      	ldr	r2, [pc, #580]	; (8003530 <HAL_DMA_Init+0x290>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03a      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a90      	ldr	r2, [pc, #576]	; (8003534 <HAL_DMA_Init+0x294>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d035      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a8e      	ldr	r2, [pc, #568]	; (8003538 <HAL_DMA_Init+0x298>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d030      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8d      	ldr	r2, [pc, #564]	; (800353c <HAL_DMA_Init+0x29c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02b      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a8b      	ldr	r2, [pc, #556]	; (8003540 <HAL_DMA_Init+0x2a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d026      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a8a      	ldr	r2, [pc, #552]	; (8003544 <HAL_DMA_Init+0x2a4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d021      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a88      	ldr	r2, [pc, #544]	; (8003548 <HAL_DMA_Init+0x2a8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01c      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a87      	ldr	r2, [pc, #540]	; (800354c <HAL_DMA_Init+0x2ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d017      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_DMA_Init+0x2b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d012      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a84      	ldr	r2, [pc, #528]	; (8003554 <HAL_DMA_Init+0x2b4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00d      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_DMA_Init+0x2b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d008      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_DMA_Init+0x2bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <HAL_DMA_Init+0xc4>
 800335c:	21b8      	movs	r1, #184	; 0xb8
 800335e:	4880      	ldr	r0, [pc, #512]	; (8003560 <HAL_DMA_Init+0x2c0>)
 8003360:	f7ff f875 	bl	800244e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d026      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003374:	d021      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800337e:	d01c      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003388:	d017      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003392:	d012      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800339c:	d00d      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033a6:	d008      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80033b0:	d003      	beq.n	80033ba <HAL_DMA_Init+0x11a>
 80033b2:	21b9      	movs	r1, #185	; 0xb9
 80033b4:	486a      	ldr	r0, [pc, #424]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80033b6:	f7ff f84a 	bl	800244e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_DMA_Init+0x13a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d007      	beq.n	80033da <HAL_DMA_Init+0x13a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d003      	beq.n	80033da <HAL_DMA_Init+0x13a>
 80033d2:	21ba      	movs	r1, #186	; 0xba
 80033d4:	4862      	ldr	r0, [pc, #392]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80033d6:	f7ff f83a 	bl	800244e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e2:	d007      	beq.n	80033f4 <HAL_DMA_Init+0x154>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_Init+0x154>
 80033ec:	21bb      	movs	r1, #187	; 0xbb
 80033ee:	485c      	ldr	r0, [pc, #368]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80033f0:	f7ff f82d 	bl	800244e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d007      	beq.n	800340e <HAL_DMA_Init+0x16e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_DMA_Init+0x16e>
 8003406:	21bc      	movs	r1, #188	; 0xbc
 8003408:	4855      	ldr	r0, [pc, #340]	; (8003560 <HAL_DMA_Init+0x2c0>)
 800340a:	f7ff f820 	bl	800244e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_DMA_Init+0x192>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Init+0x192>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d003      	beq.n	8003432 <HAL_DMA_Init+0x192>
 800342a:	21bd      	movs	r1, #189	; 0xbd
 800342c:	484c      	ldr	r0, [pc, #304]	; (8003560 <HAL_DMA_Init+0x2c0>)
 800342e:	f7ff f80e 	bl	800244e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_DMA_Init+0x1b6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d008      	beq.n	8003456 <HAL_DMA_Init+0x1b6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344c:	d003      	beq.n	8003456 <HAL_DMA_Init+0x1b6>
 800344e:	21be      	movs	r1, #190	; 0xbe
 8003450:	4843      	ldr	r0, [pc, #268]	; (8003560 <HAL_DMA_Init+0x2c0>)
 8003452:	f7fe fffc 	bl	800244e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_DMA_Init+0x1d8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Init+0x1d8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b20      	cmp	r3, #32
 800346e:	d003      	beq.n	8003478 <HAL_DMA_Init+0x1d8>
 8003470:	21bf      	movs	r1, #191	; 0xbf
 8003472:	483b      	ldr	r0, [pc, #236]	; (8003560 <HAL_DMA_Init+0x2c0>)
 8003474:	f7fe ffeb 	bl	800244e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <HAL_DMA_Init+0x206>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d00d      	beq.n	80034a6 <HAL_DMA_Init+0x206>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Init+0x206>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800349c:	d003      	beq.n	80034a6 <HAL_DMA_Init+0x206>
 800349e:	21c0      	movs	r1, #192	; 0xc0
 80034a0:	482f      	ldr	r0, [pc, #188]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80034a2:	f7fe ffd4 	bl	800244e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_DMA_Init+0x21e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d003      	beq.n	80034be <HAL_DMA_Init+0x21e>
 80034b6:	21c1      	movs	r1, #193	; 0xc1
 80034b8:	4829      	ldr	r0, [pc, #164]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80034ba:	f7fe ffc8 	bl	800244e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d065      	beq.n	8003592 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00f      	beq.n	80034ee <HAL_DMA_Init+0x24e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d00b      	beq.n	80034ee <HAL_DMA_Init+0x24e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_Init+0x24e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d003      	beq.n	80034ee <HAL_DMA_Init+0x24e>
 80034e6:	21c6      	movs	r1, #198	; 0xc6
 80034e8:	481d      	ldr	r0, [pc, #116]	; (8003560 <HAL_DMA_Init+0x2c0>)
 80034ea:	f7fe ffb0 	bl	800244e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_DMA_Init+0x2c4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fe:	d031      	beq.n	8003564 <HAL_DMA_Init+0x2c4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003508:	d02c      	beq.n	8003564 <HAL_DMA_Init+0x2c4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003512:	d027      	beq.n	8003564 <HAL_DMA_Init+0x2c4>
 8003514:	21c7      	movs	r1, #199	; 0xc7
 8003516:	4812      	ldr	r0, [pc, #72]	; (8003560 <HAL_DMA_Init+0x2c0>)
 8003518:	f7fe ff99 	bl	800244e <assert_failed>
 800351c:	e022      	b.n	8003564 <HAL_DMA_Init+0x2c4>
 800351e:	bf00      	nop
 8003520:	40026010 	.word	0x40026010
 8003524:	40026028 	.word	0x40026028
 8003528:	40026040 	.word	0x40026040
 800352c:	40026058 	.word	0x40026058
 8003530:	40026070 	.word	0x40026070
 8003534:	40026088 	.word	0x40026088
 8003538:	400260a0 	.word	0x400260a0
 800353c:	400260b8 	.word	0x400260b8
 8003540:	40026410 	.word	0x40026410
 8003544:	40026428 	.word	0x40026428
 8003548:	40026440 	.word	0x40026440
 800354c:	40026458 	.word	0x40026458
 8003550:	40026470 	.word	0x40026470
 8003554:	40026488 	.word	0x40026488
 8003558:	400264a0 	.word	0x400264a0
 800355c:	400264b8 	.word	0x400264b8
 8003560:	0800fbf0 	.word	0x0800fbf0
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_DMA_Init+0x2f2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003574:	d00d      	beq.n	8003592 <HAL_DMA_Init+0x2f2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357e:	d008      	beq.n	8003592 <HAL_DMA_Init+0x2f2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003588:	d003      	beq.n	8003592 <HAL_DMA_Init+0x2f2>
 800358a:	21c8      	movs	r1, #200	; 0xc8
 800358c:	4850      	ldr	r0, [pc, #320]	; (80036d0 <HAL_DMA_Init+0x430>)
 800358e:	f7fe ff5e 	bl	800244e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b2:	e00f      	b.n	80035d4 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035b4:	f7ff fd04 	bl	8002fc0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d908      	bls.n	80035d4 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2203      	movs	r2, #3
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e078      	b.n	80036c6 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e8      	bne.n	80035b4 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_DMA_Init+0x434>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b04      	cmp	r3, #4
 800362c:	d107      	bne.n	800363e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4313      	orrs	r3, r2
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0307 	bic.w	r3, r3, #7
 8003654:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b04      	cmp	r3, #4
 8003666:	d117      	bne.n	8003698 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa7e 	bl	8003b7c <DMA_CheckFifoParam>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2240      	movs	r2, #64	; 0x40
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003694:	2301      	movs	r3, #1
 8003696:	e016      	b.n	80036c6 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fa35 	bl	8003b10 <DMA_CalcBaseAndBitshift>
 80036a6:	4603      	mov	r3, r0
 80036a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	223f      	movs	r2, #63	; 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	0800fbf0 	.word	0x0800fbf0
 80036d4:	f010803f 	.word	0xf010803f

080036d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036e6:	f7ff fc6b 	bl	8002fc0 <HAL_GetTick>
 80036ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d008      	beq.n	800370a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e052      	b.n	80037b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0216 	bic.w	r2, r2, #22
 8003718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_DMA_Abort+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375a:	e013      	b.n	8003784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375c:	f7ff fc30 	bl	8002fc0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b05      	cmp	r3, #5
 8003768:	d90c      	bls.n	8003784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2203      	movs	r2, #3
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e015      	b.n	80037b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e4      	bne.n	800375c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00c      	b.n	80037f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003808:	4b92      	ldr	r3, [pc, #584]	; (8003a54 <HAL_DMA_IRQHandler+0x258>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a92      	ldr	r2, [pc, #584]	; (8003a58 <HAL_DMA_IRQHandler+0x25c>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2208      	movs	r2, #8
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2208      	movs	r2, #8
 8003856:	409a      	lsls	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2201      	movs	r2, #1
 800388c:	409a      	lsls	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2204      	movs	r2, #4
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2204      	movs	r2, #4
 80038c2:	409a      	lsls	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f043 0204 	orr.w	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2210      	movs	r2, #16
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d043      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2210      	movs	r2, #16
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d018      	beq.n	800393e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d024      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
 800392a:	e01f      	b.n	800396c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
 800393c:	e016      	b.n	800396c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0208 	bic.w	r2, r2, #8
 800395a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2220      	movs	r2, #32
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 808e 	beq.w	8003a9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8086 	beq.w	8003a9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2220      	movs	r2, #32
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d136      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0216 	bic.w	r2, r2, #22
 80039b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x1da>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0208 	bic.w	r2, r2, #8
 80039e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	223f      	movs	r2, #63	; 0x3f
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d07d      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
        }
        return;
 8003a12:	e078      	b.n	8003b06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d108      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d030      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	e02b      	b.n	8003a9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d027      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
 8003a52:	e022      	b.n	8003a9a <HAL_DMA_IRQHandler+0x29e>
 8003a54:	200000a0 	.word	0x200000a0
 8003a58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0210 	bic.w	r2, r2, #16
 8003a78:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d022      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d307      	bcc.n	8003ae2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f2      	bne.n	8003ac6 <HAL_DMA_IRQHandler+0x2ca>
 8003ae0:	e000      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ae2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b06:	bf00      	nop
    }
  }
}
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop

08003b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3b10      	subs	r3, #16
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <DMA_CalcBaseAndBitshift+0x64>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <DMA_CalcBaseAndBitshift+0x68>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d909      	bls.n	8003b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b50:	e007      	b.n	8003b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	aaaaaaab 	.word	0xaaaaaaab
 8003b78:	0800fe6c 	.word	0x0800fe6c

08003b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <DMA_CheckFifoParam+0x5a>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d856      	bhi.n	8003c4a <DMA_CheckFifoParam+0xce>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <DMA_CheckFifoParam+0x28>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc7 	.word	0x08003bc7
 8003bac:	08003bb5 	.word	0x08003bb5
 8003bb0:	08003c4b 	.word	0x08003c4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d046      	beq.n	8003c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e043      	b.n	8003c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bce:	d140      	bne.n	8003c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e03d      	b.n	8003c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d121      	bne.n	8003c24 <DMA_CheckFifoParam+0xa8>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d837      	bhi.n	8003c56 <DMA_CheckFifoParam+0xda>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <DMA_CheckFifoParam+0x70>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c03 	.word	0x08003c03
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	08003c15 	.word	0x08003c15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e030      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d025      	beq.n	8003c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c12:	e022      	b.n	8003c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1c:	d11f      	bne.n	8003c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c22:	e01c      	b.n	8003c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d903      	bls.n	8003c32 <DMA_CheckFifoParam+0xb6>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d003      	beq.n	8003c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c30:	e018      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      break;
 8003c36:	e015      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      break;
 8003c48:	e00b      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e00a      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e008      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
 8003c54:	e006      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
    }
  } 
  
  return status; 
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_GPIO_Init+0xf8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a36      	ldr	r2, [pc, #216]	; (8003d70 <HAL_GPIO_Init+0xfc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01b      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a35      	ldr	r2, [pc, #212]	; (8003d74 <HAL_GPIO_Init+0x100>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <HAL_GPIO_Init+0x104>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <HAL_GPIO_Init+0x108>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00f      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a32      	ldr	r2, [pc, #200]	; (8003d80 <HAL_GPIO_Init+0x10c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_GPIO_Init+0x110>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <HAL_GPIO_Init+0x114>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x5e>
 8003cca:	21ac      	movs	r1, #172	; 0xac
 8003ccc:	482f      	ldr	r0, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x118>)
 8003cce:	f7fe fbbe 	bl	800244e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_GPIO_Init+0x74>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x7c>
 8003ce8:	21ad      	movs	r1, #173	; 0xad
 8003cea:	4828      	ldr	r0, [pc, #160]	; (8003d8c <HAL_GPIO_Init+0x118>)
 8003cec:	f7fe fbaf 	bl	800244e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d031      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b11      	cmp	r3, #17
 8003d06:	d02d      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d029      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b12      	cmp	r3, #18
 8003d16:	d025      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003d20:	d020      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003d2a:	d01b      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003d34:	d016      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003d3e:	d011      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003d48:	d00c      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d5c:	21ae      	movs	r1, #174	; 0xae
 8003d5e:	480b      	ldr	r0, [pc, #44]	; (8003d8c <HAL_GPIO_Init+0x118>)
 8003d60:	f7fe fb75 	bl	800244e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e289      	b.n	800427e <HAL_GPIO_Init+0x60a>
 8003d6a:	bf00      	nop
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40021400 	.word	0x40021400
 8003d84:	40021800 	.word	0x40021800
 8003d88:	40021c00 	.word	0x40021c00
 8003d8c:	0800fc28 	.word	0x0800fc28
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d90:	2201      	movs	r2, #1
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	f040 8265 	bne.w	8004278 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d005      	beq.n	8003dc6 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d144      	bne.n	8003e50 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00f      	beq.n	8003dee <HAL_GPIO_Init+0x17a>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d00b      	beq.n	8003dee <HAL_GPIO_Init+0x17a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_Init+0x17a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x17a>
 8003de6:	21c0      	movs	r1, #192	; 0xc0
 8003de8:	4831      	ldr	r0, [pc, #196]	; (8003eb0 <HAL_GPIO_Init+0x23c>)
 8003dea:	f7fe fb30 	bl	800244e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0201 	and.w	r2, r3, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_GPIO_Init+0x208>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_GPIO_Init+0x208>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x208>
 8003e74:	21d1      	movs	r1, #209	; 0xd1
 8003e76:	480e      	ldr	r0, [pc, #56]	; (8003eb0 <HAL_GPIO_Init+0x23c>)
 8003e78:	f7fe fae9 	bl	800244e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eae:	bf00      	nop
 8003eb0:	0800fc28 	.word	0x0800fc28
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 810c 	bne.w	80040da <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80e3 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	f000 80de 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80d9 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80d4 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80cf 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80ca 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	f000 80c5 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f000 80c0 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	f000 80bb 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f000 80b6 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f000 80b1 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	f000 80ac 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	f000 80a7 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	f000 80a2 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	f000 809d 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	f000 8098 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	f000 8093 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b09      	cmp	r3, #9
 8003f72:	f000 808e 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	f000 8089 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	f000 8084 	beq.w	8004092 <HAL_GPIO_Init+0x41e>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b07      	cmp	r3, #7
 8003f90:	d07f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b07      	cmp	r3, #7
 8003f98:	d07b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b07      	cmp	r3, #7
 8003fa0:	d077      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d073      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d06f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d06b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d067      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	d063      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b0a      	cmp	r3, #10
 8003fd0:	d05f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b0a      	cmp	r3, #10
 8003fd8:	d05b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b0b      	cmp	r3, #11
 8003fe0:	d057      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d053      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d04f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b0d      	cmp	r3, #13
 8003ff8:	d04b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	d047      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d043      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d03f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d03b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d037      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d033      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d02f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b06      	cmp	r3, #6
 8004038:	d02b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d027      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b07      	cmp	r3, #7
 8004048:	d023      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b07      	cmp	r3, #7
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b07      	cmp	r3, #7
 8004058:	d01b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b07      	cmp	r3, #7
 8004060:	d017      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d00f      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b09      	cmp	r3, #9
 8004078:	d00b      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b0a      	cmp	r3, #10
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b0a      	cmp	r3, #10
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x41e>
 800408a:	21de      	movs	r1, #222	; 0xde
 800408c:	4880      	ldr	r0, [pc, #512]	; (8004290 <HAL_GPIO_Init+0x61c>)
 800408e:	f7fe f9de 	bl	800244e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80ae 	beq.w	8004278 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_GPIO_Init+0x620>)
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4a5b      	ldr	r2, [pc, #364]	; (8004294 <HAL_GPIO_Init+0x620>)
 8004126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800412a:	6453      	str	r3, [r2, #68]	; 0x44
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_GPIO_Init+0x620>)
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004138:	4a57      	ldr	r2, [pc, #348]	; (8004298 <HAL_GPIO_Init+0x624>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a4f      	ldr	r2, [pc, #316]	; (800429c <HAL_GPIO_Init+0x628>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d025      	beq.n	80041b0 <HAL_GPIO_Init+0x53c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <HAL_GPIO_Init+0x62c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01f      	beq.n	80041ac <HAL_GPIO_Init+0x538>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <HAL_GPIO_Init+0x630>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d019      	beq.n	80041a8 <HAL_GPIO_Init+0x534>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <HAL_GPIO_Init+0x634>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_GPIO_Init+0x530>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_GPIO_Init+0x638>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00d      	beq.n	80041a0 <HAL_GPIO_Init+0x52c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <HAL_GPIO_Init+0x63c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <HAL_GPIO_Init+0x528>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a49      	ldr	r2, [pc, #292]	; (80042b4 <HAL_GPIO_Init+0x640>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_GPIO_Init+0x524>
 8004194:	2306      	movs	r3, #6
 8004196:	e00c      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 8004198:	2307      	movs	r3, #7
 800419a:	e00a      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 800419c:	2305      	movs	r3, #5
 800419e:	e008      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 80041a0:	2304      	movs	r3, #4
 80041a2:	e006      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 80041a4:	2303      	movs	r3, #3
 80041a6:	e004      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e002      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_GPIO_Init+0x53e>
 80041b0:	2300      	movs	r3, #0
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	f002 0203 	and.w	r2, r2, #3
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4093      	lsls	r3, r2
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c2:	4935      	ldr	r1, [pc, #212]	; (8004298 <HAL_GPIO_Init+0x624>)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	3302      	adds	r3, #2
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_GPIO_Init+0x644>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f4:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <HAL_GPIO_Init+0x644>)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_GPIO_Init+0x644>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800421e:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <HAL_GPIO_Init+0x644>)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <HAL_GPIO_Init+0x644>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_GPIO_Init+0x644>)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_GPIO_Init+0x644>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004272:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <HAL_GPIO_Init+0x644>)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3301      	adds	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b0f      	cmp	r3, #15
 8004282:	f67f ad85 	bls.w	8003d90 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	0800fc28 	.word	0x0800fc28
 8004294:	40023800 	.word	0x40023800
 8004298:	40013800 	.word	0x40013800
 800429c:	40020000 	.word	0x40020000
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020800 	.word	0x40020800
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40021400 	.word	0x40021400
 80042b4:	40021800 	.word	0x40021800
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_GPIO_WritePin+0x20>
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_GPIO_WritePin+0x2a>
 80042dc:	f240 119d 	movw	r1, #413	; 0x19d
 80042e0:	480e      	ldr	r0, [pc, #56]	; (800431c <HAL_GPIO_WritePin+0x60>)
 80042e2:	f7fe f8b4 	bl	800244e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80042e6:	787b      	ldrb	r3, [r7, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_GPIO_WritePin+0x40>
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d004      	beq.n	80042fc <HAL_GPIO_WritePin+0x40>
 80042f2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80042f6:	4809      	ldr	r0, [pc, #36]	; (800431c <HAL_GPIO_WritePin+0x60>)
 80042f8:	f7fe f8a9 	bl	800244e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80042fc:	787b      	ldrb	r3, [r7, #1]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004308:	e003      	b.n	8004312 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	0800fc28 	.word	0x0800fc28

08004320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe f864 	bl	800240c <HAL_GPIO_EXTI_Callback>
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40013c00 	.word	0x40013c00

08004350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1be      	b.n	80046e0 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a9f      	ldr	r2, [pc, #636]	; (80045e4 <HAL_I2C_Init+0x294>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_I2C_Init+0x3a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a9d      	ldr	r2, [pc, #628]	; (80045e8 <HAL_I2C_Init+0x298>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_I2C_Init+0x3a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a9c      	ldr	r2, [pc, #624]	; (80045ec <HAL_I2C_Init+0x29c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_I2C_Init+0x3a>
 8004380:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004384:	489a      	ldr	r0, [pc, #616]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 8004386:	f7fe f862 	bl	800244e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_I2C_Init+0x4c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a97      	ldr	r2, [pc, #604]	; (80045f4 <HAL_I2C_Init+0x2a4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d904      	bls.n	80043a6 <HAL_I2C_Init+0x56>
 800439c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80043a0:	4893      	ldr	r0, [pc, #588]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 80043a2:	f7fe f854 	bl	800244e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_I2C_Init+0x72>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b6:	d004      	beq.n	80043c2 <HAL_I2C_Init+0x72>
 80043b8:	f240 11c1 	movw	r1, #449	; 0x1c1
 80043bc:	488c      	ldr	r0, [pc, #560]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 80043be:	f7fe f846 	bl	800244e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_I2C_Init+0x8c>
 80043d2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80043d6:	4886      	ldr	r0, [pc, #536]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 80043d8:	f7fe f839 	bl	800244e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e4:	d009      	beq.n	80043fa <HAL_I2C_Init+0xaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043ee:	d004      	beq.n	80043fa <HAL_I2C_Init+0xaa>
 80043f0:	f240 11c3 	movw	r1, #451	; 0x1c3
 80043f4:	487e      	ldr	r0, [pc, #504]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 80043f6:	f7fe f82a 	bl	800244e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_I2C_Init+0xc4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d004      	beq.n	8004414 <HAL_I2C_Init+0xc4>
 800440a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800440e:	4878      	ldr	r0, [pc, #480]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 8004410:	f7fe f81d 	bl	800244e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_I2C_Init+0xda>
 8004420:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004424:	4872      	ldr	r0, [pc, #456]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 8004426:	f7fe f812 	bl	800244e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_I2C_Init+0xf4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d004      	beq.n	8004444 <HAL_I2C_Init+0xf4>
 800443a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800443e:	486c      	ldr	r0, [pc, #432]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 8004440:	f7fe f805 	bl	800244e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_I2C_Init+0x10e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d004      	beq.n	800445e <HAL_I2C_Init+0x10e>
 8004454:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004458:	4865      	ldr	r0, [pc, #404]	; (80045f0 <HAL_I2C_Init+0x2a0>)
 800445a:	f7fd fff8 	bl	800244e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe f81e 	bl	80024b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b0:	f001 f96e 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4a4f      	ldr	r2, [pc, #316]	; (80045f8 <HAL_I2C_Init+0x2a8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d807      	bhi.n	80044d0 <HAL_I2C_Init+0x180>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a4e      	ldr	r2, [pc, #312]	; (80045fc <HAL_I2C_Init+0x2ac>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bf94      	ite	ls
 80044c8:	2301      	movls	r3, #1
 80044ca:	2300      	movhi	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e006      	b.n	80044de <HAL_I2C_Init+0x18e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a4b      	ldr	r2, [pc, #300]	; (8004600 <HAL_I2C_Init+0x2b0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0fc      	b.n	80046e0 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a46      	ldr	r2, [pc, #280]	; (8004604 <HAL_I2C_Init+0x2b4>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0c9b      	lsrs	r3, r3, #18
 80044f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <HAL_I2C_Init+0x2a8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <HAL_I2C_Init+0x1d0>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	e009      	b.n	8004534 <HAL_I2C_Init+0x1e4>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <HAL_I2C_Init+0x2b8>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	3301      	adds	r3, #1
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	430b      	orrs	r3, r1
 800453a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	492a      	ldr	r1, [pc, #168]	; (80045f8 <HAL_I2C_Init+0x2a8>)
 8004550:	428b      	cmp	r3, r1
 8004552:	d819      	bhi.n	8004588 <HAL_I2C_Init+0x238>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e59      	subs	r1, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004568:	400b      	ands	r3, r1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_I2C_Init+0x234>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e59      	subs	r1, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fbb1 f3f3 	udiv	r3, r1, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	e066      	b.n	8004652 <HAL_I2C_Init+0x302>
 8004584:	2304      	movs	r3, #4
 8004586:	e064      	b.n	8004652 <HAL_I2C_Init+0x302>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d111      	bne.n	80045b4 <HAL_I2C_Init+0x264>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e58      	subs	r0, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e012      	b.n	80045da <HAL_I2C_Init+0x28a>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e58      	subs	r0, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	0099      	lsls	r1, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_I2C_Init+0x2bc>
 80045de:	2301      	movs	r3, #1
 80045e0:	e037      	b.n	8004652 <HAL_I2C_Init+0x302>
 80045e2:	bf00      	nop
 80045e4:	40005400 	.word	0x40005400
 80045e8:	40005800 	.word	0x40005800
 80045ec:	40005c00 	.word	0x40005c00
 80045f0:	0800fc64 	.word	0x0800fc64
 80045f4:	00061a80 	.word	0x00061a80
 80045f8:	000186a0 	.word	0x000186a0
 80045fc:	001e847f 	.word	0x001e847f
 8004600:	003d08ff 	.word	0x003d08ff
 8004604:	431bde83 	.word	0x431bde83
 8004608:	10624dd3 	.word	0x10624dd3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10e      	bne.n	8004632 <HAL_I2C_Init+0x2e2>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004630:	e00f      	b.n	8004652 <HAL_I2C_Init+0x302>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1e58      	subs	r0, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	0099      	lsls	r1, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	fbb0 f3f3 	udiv	r3, r0, r3
 8004648:	3301      	adds	r3, #1
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	6809      	ldr	r1, [r1, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004680:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6911      	ldr	r1, [r2, #16]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	430b      	orrs	r3, r1
 8004694:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	460b      	mov	r3, r1
 80046f6:	817b      	strh	r3, [r7, #10]
 80046f8:	4613      	mov	r3, r2
 80046fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7fe fc60 	bl	8002fc0 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b20      	cmp	r3, #32
 800470c:	f040 80e0 	bne.w	80048d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2319      	movs	r3, #25
 8004716:	2201      	movs	r2, #1
 8004718:	4970      	ldr	r1, [pc, #448]	; (80048dc <HAL_I2C_Master_Transmit+0x1f4>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fc58 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	e0d3      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2C_Master_Transmit+0x50>
 8004734:	2302      	movs	r3, #2
 8004736:	e0cc      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d007      	beq.n	800475e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2210      	movs	r2, #16
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	893a      	ldrh	r2, [r7, #8]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a50      	ldr	r2, [pc, #320]	; (80048e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047a0:	8979      	ldrh	r1, [r7, #10]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a3a      	ldr	r2, [r7, #32]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fac2 	bl	8004d30 <I2C_MasterRequestWrite>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e08d      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047cc:	e066      	b.n	800489c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fcd2 	bl	800517c <I2C_WaitOnTXEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11b      	bne.n	8004870 <HAL_I2C_Master_Transmit+0x188>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d017      	beq.n	8004870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	6a39      	ldr	r1, [r7, #32]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fcc2 	bl	80051fe <I2C_WaitOnBTFFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b04      	cmp	r3, #4
 8004886:	d107      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e01a      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d194      	bne.n	80047ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	00100002 	.word	0x00100002
 80048e0:	ffff0000 	.word	0xffff0000

080048e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	461a      	mov	r2, r3
 80048f0:	460b      	mov	r3, r1
 80048f2:	817b      	strh	r3, [r7, #10]
 80048f4:	4613      	mov	r3, r2
 80048f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7fe fb62 	bl	8002fc0 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	f040 820b 	bne.w	8004d22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2319      	movs	r3, #25
 8004912:	2201      	movs	r2, #1
 8004914:	497c      	ldr	r1, [pc, #496]	; (8004b08 <HAL_I2C_Master_Receive+0x224>)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fb5a 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004922:	2302      	movs	r3, #2
 8004924:	e1fe      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_I2C_Master_Receive+0x50>
 8004930:	2302      	movs	r3, #2
 8004932:	e1f7      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	d007      	beq.n	800495a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2222      	movs	r2, #34	; 0x22
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2210      	movs	r2, #16
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	893a      	ldrh	r2, [r7, #8]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a5c      	ldr	r2, [pc, #368]	; (8004b0c <HAL_I2C_Master_Receive+0x228>)
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800499c:	8979      	ldrh	r1, [r7, #10]
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fa46 	bl	8004e34 <I2C_MasterRequestRead>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1b8      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d113      	bne.n	80049e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e18c      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d11b      	bne.n	8004a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e16c      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d11b      	bne.n	8004a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	e14c      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a88:	e138      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	f200 80f1 	bhi.w	8004c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d123      	bne.n	8004ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fbed 	bl	8005280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e139      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae2:	e10b      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d14e      	bne.n	8004b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <HAL_I2C_Master_Receive+0x22c>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fa6a 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e10e      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
 8004b06:	bf00      	nop
 8004b08:	00100002 	.word	0x00100002
 8004b0c:	ffff0000 	.word	0xffff0000
 8004b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b88:	e0b8      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2200      	movs	r2, #0
 8004b92:	4966      	ldr	r1, [pc, #408]	; (8004d2c <HAL_I2C_Master_Receive+0x448>)
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fa1b 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0bf      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	2200      	movs	r2, #0
 8004bee:	494f      	ldr	r1, [pc, #316]	; (8004d2c <HAL_I2C_Master_Receive+0x448>)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f9ed 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e091      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c74:	e042      	b.n	8004cfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb00 	bl	8005280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e04c      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d118      	bne.n	8004cfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f47f aec2 	bne.w	8004a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	; 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	00010004 	.word	0x00010004

08004d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d006      	beq.n	8004d5a <I2C_MasterRequestWrite+0x2a>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d003      	beq.n	8004d5a <I2C_MasterRequestWrite+0x2a>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d58:	d108      	bne.n	8004d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e00b      	b.n	8004d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	2b12      	cmp	r3, #18
 8004d72:	d107      	bne.n	8004d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f91d 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d103      	bne.n	8004db4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e035      	b.n	8004e24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc0:	d108      	bne.n	8004dd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc2:	897b      	ldrh	r3, [r7, #10]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dd0:	611a      	str	r2, [r3, #16]
 8004dd2:	e01b      	b.n	8004e0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dd4:	897b      	ldrh	r3, [r7, #10]
 8004dd6:	11db      	asrs	r3, r3, #7
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f063 030f 	orn	r3, r3, #15
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	490e      	ldr	r1, [pc, #56]	; (8004e2c <I2C_MasterRequestWrite+0xfc>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f943 	bl	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e010      	b.n	8004e24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e02:	897b      	ldrh	r3, [r7, #10]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4907      	ldr	r1, [pc, #28]	; (8004e30 <I2C_MasterRequestWrite+0x100>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f933 	bl	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00010008 	.word	0x00010008
 8004e30:	00010002 	.word	0x00010002

08004e34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	460b      	mov	r3, r1
 8004e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d006      	beq.n	8004e6e <I2C_MasterRequestRead+0x3a>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d003      	beq.n	8004e6e <I2C_MasterRequestRead+0x3a>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e6c:	d108      	bne.n	8004e80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e00b      	b.n	8004e98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b11      	cmp	r3, #17
 8004e86:	d107      	bne.n	8004e98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f893 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d103      	bne.n	8004ec8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e079      	b.n	8004fc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed4:	d108      	bne.n	8004ee8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	611a      	str	r2, [r3, #16]
 8004ee6:	e05f      	b.n	8004fa8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ee8:	897b      	ldrh	r3, [r7, #10]
 8004eea:	11db      	asrs	r3, r3, #7
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 0306 	and.w	r3, r3, #6
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f063 030f 	orn	r3, r3, #15
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4930      	ldr	r1, [pc, #192]	; (8004fc8 <I2C_MasterRequestRead+0x194>)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f8b9 	bl	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e054      	b.n	8004fc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4929      	ldr	r1, [pc, #164]	; (8004fcc <I2C_MasterRequestRead+0x198>)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f8a9 	bl	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e044      	b.n	8004fc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f831 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d103      	bne.n	8004f8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e017      	b.n	8004fc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	11db      	asrs	r3, r3, #7
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f063 030e 	orn	r3, r3, #14
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4907      	ldr	r1, [pc, #28]	; (8004fcc <I2C_MasterRequestRead+0x198>)
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f865 	bl	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	00010008 	.word	0x00010008
 8004fcc:	00010002 	.word	0x00010002

08004fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe0:	e025      	b.n	800502e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d021      	beq.n	800502e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fd ffe9 	bl	8002fc0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e023      	b.n	8005076 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10d      	bne.n	8005054 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	e00c      	b.n	800506e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d0b6      	beq.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800508c:	e051      	b.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d123      	bne.n	80050e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f043 0204 	orr.w	r2, r3, #4
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e046      	b.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d021      	beq.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ee:	f7fd ff67 	bl	8002fc0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d116      	bne.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e020      	b.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10c      	bne.n	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	43da      	mvns	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e00b      	b.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	43da      	mvns	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d18d      	bne.n	800508e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005188:	e02d      	b.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f8ce 	bl	800532c <I2C_IsAcknowledgeFailed>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e02d      	b.n	80051f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d021      	beq.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd ff0d 	bl	8002fc0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e007      	b.n	80051f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d1ca      	bne.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800520a:	e02d      	b.n	8005268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f88d 	bl	800532c <I2C_IsAcknowledgeFailed>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e02d      	b.n	8005278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d021      	beq.n	8005268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005224:	f7fd fecc 	bl	8002fc0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	429a      	cmp	r2, r3
 8005232:	d302      	bcc.n	800523a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d116      	bne.n	8005268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e007      	b.n	8005278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d1ca      	bne.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800528c:	e042      	b.n	8005314 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d119      	bne.n	80052d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e029      	b.n	8005324 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d0:	f7fd fe76 	bl	8002fc0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d302      	bcc.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e007      	b.n	8005324 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d1b5      	bne.n	800528e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005342:	d11b      	bne.n	800537c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f043 0204 	orr.w	r2, r3, #4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <HAL_PWREx_EnableOverDrive+0x90>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_PWREx_EnableOverDrive+0x90>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_PWREx_EnableOverDrive+0x90>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_PWREx_EnableOverDrive+0x94>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053b8:	f7fd fe02 	bl	8002fc0 <HAL_GetTick>
 80053bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053be:	e009      	b.n	80053d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053c0:	f7fd fdfe 	bl	8002fc0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ce:	d901      	bls.n	80053d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e01f      	b.n	8005414 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_PWREx_EnableOverDrive+0x98>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e0:	d1ee      	bne.n	80053c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053e8:	f7fd fdea 	bl	8002fc0 <HAL_GetTick>
 80053ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053ee:	e009      	b.n	8005404 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053f0:	f7fd fde6 	bl	8002fc0 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fe:	d901      	bls.n	8005404 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e007      	b.n	8005414 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_PWREx_EnableOverDrive+0x98>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005410:	d1ee      	bne.n	80053f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	420e0040 	.word	0x420e0040
 8005424:	40007000 	.word	0x40007000
 8005428:	420e0044 	.word	0x420e0044

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e18c      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_RCC_ClockConfig+0x24>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d904      	bls.n	800545a <HAL_RCC_ClockConfig+0x2e>
 8005450:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005454:	4887      	ldr	r0, [pc, #540]	; (8005674 <HAL_RCC_ClockConfig+0x248>)
 8005456:	f7fc fffa 	bl	800244e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d031      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d02e      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d02b      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d028      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b04      	cmp	r3, #4
 8005476:	d025      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b05      	cmp	r3, #5
 800547c:	d022      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b06      	cmp	r3, #6
 8005482:	d01f      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b07      	cmp	r3, #7
 8005488:	d01c      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d019      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b09      	cmp	r3, #9
 8005494:	d016      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b0a      	cmp	r3, #10
 800549a:	d013      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b0b      	cmp	r3, #11
 80054a0:	d010      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d00d      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b0d      	cmp	r3, #13
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b0e      	cmp	r3, #14
 80054b2:	d007      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d004      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x98>
 80054ba:	f240 215d 	movw	r1, #605	; 0x25d
 80054be:	486d      	ldr	r0, [pc, #436]	; (8005674 <HAL_RCC_ClockConfig+0x248>)
 80054c0:	f7fc ffc5 	bl	800244e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90c      	bls.n	80054ec <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b69      	ldr	r3, [pc, #420]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e136      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d049      	beq.n	800558c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a5c      	ldr	r2, [pc, #368]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 800550a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800550e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800551c:	4b57      	ldr	r3, [pc, #348]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 8005522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d024      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d020      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b90      	cmp	r3, #144	; 0x90
 800553e:	d01c      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2ba0      	cmp	r3, #160	; 0xa0
 8005546:	d018      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2bb0      	cmp	r3, #176	; 0xb0
 800554e:	d014      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2bc0      	cmp	r3, #192	; 0xc0
 8005556:	d010      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2bd0      	cmp	r3, #208	; 0xd0
 800555e:	d00c      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2be0      	cmp	r3, #224	; 0xe0
 8005566:	d008      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2bf0      	cmp	r3, #240	; 0xf0
 800556e:	d004      	beq.n	800557a <HAL_RCC_ClockConfig+0x14e>
 8005570:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005574:	483f      	ldr	r0, [pc, #252]	; (8005674 <HAL_RCC_ClockConfig+0x248>)
 8005576:	f7fc ff6a 	bl	800244e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557a:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	493d      	ldr	r1, [pc, #244]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d059      	beq.n	800564c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d010      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x196>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x196>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d008      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x196>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d004      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x196>
 80055b8:	f240 2187 	movw	r1, #647	; 0x287
 80055bc:	482d      	ldr	r0, [pc, #180]	; (8005674 <HAL_RCC_ClockConfig+0x248>)
 80055be:	f7fc ff46 	bl	800244e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d119      	bne.n	800560a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0bf      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0af      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0a7      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 0203 	bic.w	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4919      	ldr	r1, [pc, #100]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800561c:	f7fd fcd0 	bl	8002fc0 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	e00a      	b.n	800563a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005624:	f7fd fccc 	bl	8002fc0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e08f      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCC_ClockConfig+0x250>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 020c 	and.w	r2, r3, #12
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	429a      	cmp	r2, r3
 800564a:	d1eb      	bne.n	8005624 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d212      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCC_ClockConfig+0x24c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d007      	beq.n	8005680 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e072      	b.n	800575a <HAL_RCC_ClockConfig+0x32e>
 8005674:	0800fc9c 	.word	0x0800fc9c
 8005678:	40023c00 	.word	0x40023c00
 800567c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d025      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d018      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x29a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d013      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x29a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056a6:	d00e      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x29a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x29a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80056ba:	d004      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x29a>
 80056bc:	f240 21c5 	movw	r1, #709	; 0x2c5
 80056c0:	4828      	ldr	r0, [pc, #160]	; (8005764 <HAL_RCC_ClockConfig+0x338>)
 80056c2:	f7fc fec4 	bl	800244e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c6:	4b28      	ldr	r3, [pc, #160]	; (8005768 <HAL_RCC_ClockConfig+0x33c>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4925      	ldr	r1, [pc, #148]	; (8005768 <HAL_RCC_ClockConfig+0x33c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d026      	beq.n	8005732 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d018      	beq.n	800571e <HAL_RCC_ClockConfig+0x2f2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d013      	beq.n	800571e <HAL_RCC_ClockConfig+0x2f2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056fe:	d00e      	beq.n	800571e <HAL_RCC_ClockConfig+0x2f2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005708:	d009      	beq.n	800571e <HAL_RCC_ClockConfig+0x2f2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005712:	d004      	beq.n	800571e <HAL_RCC_ClockConfig+0x2f2>
 8005714:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005718:	4812      	ldr	r0, [pc, #72]	; (8005764 <HAL_RCC_ClockConfig+0x338>)
 800571a:	f7fc fe98 	bl	800244e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_RCC_ClockConfig+0x33c>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490e      	ldr	r1, [pc, #56]	; (8005768 <HAL_RCC_ClockConfig+0x33c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005732:	f000 f855 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_ClockConfig+0x33c>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490a      	ldr	r1, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x340>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x344>)
 800574c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_ClockConfig+0x348>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd fbf0 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	0800fc9c 	.word	0x0800fc9c
 8005768:	40023800 	.word	0x40023800
 800576c:	0800fe54 	.word	0x0800fe54
 8005770:	200000a0 	.word	0x200000a0
 8005774:	200000a4 	.word	0x200000a4

08005778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCC_GetHCLKFreq+0x14>)
 800577e:	681b      	ldr	r3, [r3, #0]
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	200000a0 	.word	0x200000a0

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005794:	f7ff fff0 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0a9b      	lsrs	r3, r3, #10
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4903      	ldr	r1, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	0800fe64 	.word	0x0800fe64

080057b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057bc:	f7ff ffdc 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0b5b      	lsrs	r3, r3, #13
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4903      	ldr	r1, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0800fe64 	.word	0x0800fe64

080057e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e4:	b088      	sub	sp, #32
 80057e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057fc:	4bce      	ldr	r3, [pc, #824]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b0c      	cmp	r3, #12
 8005806:	f200 818d 	bhi.w	8005b24 <HAL_RCC_GetSysClockFreq+0x344>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <HAL_RCC_GetSysClockFreq+0x30>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005845 	.word	0x08005845
 8005814:	08005b25 	.word	0x08005b25
 8005818:	08005b25 	.word	0x08005b25
 800581c:	08005b25 	.word	0x08005b25
 8005820:	0800584b 	.word	0x0800584b
 8005824:	08005b25 	.word	0x08005b25
 8005828:	08005b25 	.word	0x08005b25
 800582c:	08005b25 	.word	0x08005b25
 8005830:	08005851 	.word	0x08005851
 8005834:	08005b25 	.word	0x08005b25
 8005838:	08005b25 	.word	0x08005b25
 800583c:	08005b25 	.word	0x08005b25
 8005840:	080059c5 	.word	0x080059c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4bbd      	ldr	r3, [pc, #756]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005846:	61bb      	str	r3, [r7, #24]
       break;
 8005848:	e16f      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584a:	4bbd      	ldr	r3, [pc, #756]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x360>)
 800584c:	61bb      	str	r3, [r7, #24]
      break;
 800584e:	e16c      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005850:	4bb9      	ldr	r3, [pc, #740]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585a:	4bb7      	ldr	r3, [pc, #732]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d053      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4bb4      	ldr	r3, [pc, #720]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005876:	f04f 0100 	mov.w	r1, #0
 800587a:	ea02 0400 	and.w	r4, r2, r0
 800587e:	603c      	str	r4, [r7, #0]
 8005880:	400b      	ands	r3, r1
 8005882:	607b      	str	r3, [r7, #4]
 8005884:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005888:	4620      	mov	r0, r4
 800588a:	4629      	mov	r1, r5
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	014b      	lsls	r3, r1, #5
 8005896:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800589a:	0142      	lsls	r2, r0, #5
 800589c:	4610      	mov	r0, r2
 800589e:	4619      	mov	r1, r3
 80058a0:	4623      	mov	r3, r4
 80058a2:	1ac0      	subs	r0, r0, r3
 80058a4:	462b      	mov	r3, r5
 80058a6:	eb61 0103 	sbc.w	r1, r1, r3
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	018b      	lsls	r3, r1, #6
 80058b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058b8:	0182      	lsls	r2, r0, #6
 80058ba:	1a12      	subs	r2, r2, r0
 80058bc:	eb63 0301 	sbc.w	r3, r3, r1
 80058c0:	f04f 0000 	mov.w	r0, #0
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	00d9      	lsls	r1, r3, #3
 80058ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ce:	00d0      	lsls	r0, r2, #3
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4621      	mov	r1, r4
 80058d6:	1852      	adds	r2, r2, r1
 80058d8:	4629      	mov	r1, r5
 80058da:	eb43 0101 	adc.w	r1, r3, r1
 80058de:	460b      	mov	r3, r1
 80058e0:	f04f 0000 	mov.w	r0, #0
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	0259      	lsls	r1, r3, #9
 80058ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ee:	0250      	lsls	r0, r2, #9
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	f7fb f86e 	bl	80009e0 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4613      	mov	r3, r2
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e04c      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590e:	4b8a      	ldr	r3, [pc, #552]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	461a      	mov	r2, r3
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	ea02 0a00 	and.w	sl, r2, r0
 8005926:	ea03 0b01 	and.w	fp, r3, r1
 800592a:	4650      	mov	r0, sl
 800592c:	4659      	mov	r1, fp
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	014b      	lsls	r3, r1, #5
 8005938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800593c:	0142      	lsls	r2, r0, #5
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	ebb0 000a 	subs.w	r0, r0, sl
 8005946:	eb61 010b 	sbc.w	r1, r1, fp
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	018b      	lsls	r3, r1, #6
 8005954:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005958:	0182      	lsls	r2, r0, #6
 800595a:	1a12      	subs	r2, r2, r0
 800595c:	eb63 0301 	sbc.w	r3, r3, r1
 8005960:	f04f 0000 	mov.w	r0, #0
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	00d9      	lsls	r1, r3, #3
 800596a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596e:	00d0      	lsls	r0, r2, #3
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	eb12 020a 	adds.w	r2, r2, sl
 8005978:	eb43 030b 	adc.w	r3, r3, fp
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	0299      	lsls	r1, r3, #10
 8005986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800598a:	0290      	lsls	r0, r2, #10
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	f7fb f820 	bl	80009e0 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a8:	4b63      	ldr	r3, [pc, #396]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	61bb      	str	r3, [r7, #24]
      break;
 80059c2:	e0b2      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c4:	4b5c      	ldr	r3, [pc, #368]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ce:	4b5a      	ldr	r3, [pc, #360]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04d      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b57      	ldr	r3, [pc, #348]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	ea02 0800 	and.w	r8, r2, r0
 80059f2:	ea03 0901 	and.w	r9, r3, r1
 80059f6:	4640      	mov	r0, r8
 80059f8:	4649      	mov	r1, r9
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	014b      	lsls	r3, r1, #5
 8005a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a08:	0142      	lsls	r2, r0, #5
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8005a12:	eb61 0109 	sbc.w	r1, r1, r9
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a24:	0182      	lsls	r2, r0, #6
 8005a26:	1a12      	subs	r2, r2, r0
 8005a28:	eb63 0301 	sbc.w	r3, r3, r1
 8005a2c:	f04f 0000 	mov.w	r0, #0
 8005a30:	f04f 0100 	mov.w	r1, #0
 8005a34:	00d9      	lsls	r1, r3, #3
 8005a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a3a:	00d0      	lsls	r0, r2, #3
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	eb12 0208 	adds.w	r2, r2, r8
 8005a44:	eb43 0309 	adc.w	r3, r3, r9
 8005a48:	f04f 0000 	mov.w	r0, #0
 8005a4c:	f04f 0100 	mov.w	r1, #0
 8005a50:	0259      	lsls	r1, r3, #9
 8005a52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a56:	0250      	lsls	r0, r2, #9
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	f7fa ffba 	bl	80009e0 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4613      	mov	r3, r2
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e04a      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	ea02 0400 	and.w	r4, r2, r0
 8005a8e:	ea03 0501 	and.w	r5, r3, r1
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	014b      	lsls	r3, r1, #5
 8005aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005aa4:	0142      	lsls	r2, r0, #5
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	1b00      	subs	r0, r0, r4
 8005aac:	eb61 0105 	sbc.w	r1, r1, r5
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	018b      	lsls	r3, r1, #6
 8005aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005abe:	0182      	lsls	r2, r0, #6
 8005ac0:	1a12      	subs	r2, r2, r0
 8005ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	00d9      	lsls	r1, r3, #3
 8005ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad4:	00d0      	lsls	r0, r2, #3
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	1912      	adds	r2, r2, r4
 8005adc:	eb45 0303 	adc.w	r3, r5, r3
 8005ae0:	f04f 0000 	mov.w	r0, #0
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	0299      	lsls	r1, r3, #10
 8005aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005aee:	0290      	lsls	r0, r2, #10
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	f7fa ff6e 	bl	80009e0 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4613      	mov	r3, r2
 8005b0a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	0f1b      	lsrs	r3, r3, #28
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	61bb      	str	r3, [r7, #24]
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b26:	61bb      	str	r3, [r7, #24]
      break;
 8005b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	007a1200 	.word	0x007a1200

08005b44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e34b      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b0f      	cmp	r3, #15
 8005b5c:	d904      	bls.n	8005b68 <HAL_RCC_OscConfig+0x24>
 8005b5e:	f640 5112 	movw	r1, #3346	; 0xd12
 8005b62:	48a5      	ldr	r0, [pc, #660]	; (8005df8 <HAL_RCC_OscConfig+0x2b4>)
 8005b64:	f7fc fc73 	bl	800244e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8096 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00e      	beq.n	8005b9c <HAL_RCC_OscConfig+0x58>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d009      	beq.n	8005b9c <HAL_RCC_OscConfig+0x58>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b90:	d004      	beq.n	8005b9c <HAL_RCC_OscConfig+0x58>
 8005b92:	f640 5117 	movw	r1, #3351	; 0xd17
 8005b96:	4898      	ldr	r0, [pc, #608]	; (8005df8 <HAL_RCC_OscConfig+0x2b4>)
 8005b98:	f7fc fc59 	bl	800244e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b9c:	4b97      	ldr	r3, [pc, #604]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d019      	beq.n	8005bdc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ba8:	4b94      	ldr	r3, [pc, #592]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bb4:	4b91      	ldr	r3, [pc, #580]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc0:	d00c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc2:	4b8e      	ldr	r3, [pc, #568]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d112      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bce:	4b8b      	ldr	r3, [pc, #556]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	4b87      	ldr	r3, [pc, #540]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05b      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x15c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d157      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e2fc      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCC_OscConfig+0xc8>
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a7e      	ldr	r2, [pc, #504]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e01d      	b.n	8005c48 <HAL_RCC_OscConfig+0x104>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0xec>
 8005c16:	4b79      	ldr	r3, [pc, #484]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a78      	ldr	r2, [pc, #480]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	4b76      	ldr	r3, [pc, #472]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a75      	ldr	r2, [pc, #468]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCC_OscConfig+0x104>
 8005c30:	4b72      	ldr	r3, [pc, #456]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a71      	ldr	r2, [pc, #452]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6e      	ldr	r2, [pc, #440]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fd f9b6 	bl	8002fc0 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fd f9b2 	bl	8002fc0 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e2c1      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	4b64      	ldr	r3, [pc, #400]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x114>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fd f9a2 	bl	8002fc0 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fd f99e 	bl	8002fc0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e2ad      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	4b5a      	ldr	r3, [pc, #360]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x13c>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8086 	beq.w	8005dbc <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_OscConfig+0x186>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d004      	beq.n	8005cca <HAL_RCC_OscConfig+0x186>
 8005cc0:	f640 514f 	movw	r1, #3407	; 0xd4f
 8005cc4:	484c      	ldr	r0, [pc, #304]	; (8005df8 <HAL_RCC_OscConfig+0x2b4>)
 8005cc6:	f7fc fbc2 	bl	800244e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b1f      	cmp	r3, #31
 8005cd0:	d904      	bls.n	8005cdc <HAL_RCC_OscConfig+0x198>
 8005cd2:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8005cd6:	4848      	ldr	r0, [pc, #288]	; (8005df8 <HAL_RCC_OscConfig+0x2b4>)
 8005cd8:	f7fc fbb9 	bl	800244e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cdc:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d017      	beq.n	8005d18 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ce8:	4b44      	ldr	r3, [pc, #272]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d105      	bne.n	8005d00 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cf4:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d00:	4b3e      	ldr	r3, [pc, #248]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d11c      	bne.n	8005d46 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d18:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_OscConfig+0x1ec>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e25e      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d30:	4b32      	ldr	r3, [pc, #200]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	492f      	ldr	r1, [pc, #188]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d44:	e03a      	b.n	8005dbc <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d020      	beq.n	8005d90 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <HAL_RCC_OscConfig+0x2bc>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fd f934 	bl	8002fc0 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5c:	f7fd f930 	bl	8002fc0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e23f      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	491c      	ldr	r1, [pc, #112]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]
 8005d8e:	e015      	b.n	8005dbc <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x2bc>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd f913 	bl	8002fc0 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd f90f 	bl	8002fc0 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e21e      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_RCC_OscConfig+0x2b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f0      	bne.n	8005d9e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d045      	beq.n	8005e54 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RCC_OscConfig+0x29e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d004      	beq.n	8005de2 <HAL_RCC_OscConfig+0x29e>
 8005dd8:	f640 5196 	movw	r1, #3478	; 0xd96
 8005ddc:	4806      	ldr	r0, [pc, #24]	; (8005df8 <HAL_RCC_OscConfig+0x2b4>)
 8005dde:	f7fc fb36 	bl	800244e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01e      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_RCC_OscConfig+0x2c0>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fd f8e6 	bl	8002fc0 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df6:	e010      	b.n	8005e1a <HAL_RCC_OscConfig+0x2d6>
 8005df8:	0800fcd4 	.word	0x0800fcd4
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	42470000 	.word	0x42470000
 8005e04:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e08:	f7fd f8da 	bl	8002fc0 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e1e9      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1a:	4ba4      	ldr	r3, [pc, #656]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f0      	beq.n	8005e08 <HAL_RCC_OscConfig+0x2c4>
 8005e26:	e015      	b.n	8005e54 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e28:	4ba1      	ldr	r3, [pc, #644]	; (80060b0 <HAL_RCC_OscConfig+0x56c>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fd f8c7 	bl	8002fc0 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fd f8c3 	bl	8002fc0 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1d2      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e48:	4b98      	ldr	r3, [pc, #608]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80a8 	beq.w	8005fb2 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <HAL_RCC_OscConfig+0x344>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d008      	beq.n	8005e88 <HAL_RCC_OscConfig+0x344>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d004      	beq.n	8005e88 <HAL_RCC_OscConfig+0x344>
 8005e7e:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8005e82:	488c      	ldr	r0, [pc, #560]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 8005e84:	f7fc fae3 	bl	800244e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e88:	4b88      	ldr	r3, [pc, #544]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10f      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	4b84      	ldr	r3, [pc, #528]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	4a83      	ldr	r2, [pc, #524]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea4:	4b81      	ldr	r3, [pc, #516]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb4:	4b80      	ldr	r3, [pc, #512]	; (80060b8 <HAL_RCC_OscConfig+0x574>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d118      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec0:	4b7d      	ldr	r3, [pc, #500]	; (80060b8 <HAL_RCC_OscConfig+0x574>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a7c      	ldr	r2, [pc, #496]	; (80060b8 <HAL_RCC_OscConfig+0x574>)
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ecc:	f7fd f878 	bl	8002fc0 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed4:	f7fd f874 	bl	8002fc0 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e183      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee6:	4b74      	ldr	r3, [pc, #464]	; (80060b8 <HAL_RCC_OscConfig+0x574>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x3c4>
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a6b      	ldr	r2, [pc, #428]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	e01c      	b.n	8005f42 <HAL_RCC_OscConfig+0x3fe>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d10c      	bne.n	8005f2a <HAL_RCC_OscConfig+0x3e6>
 8005f10:	4b66      	ldr	r3, [pc, #408]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	4a65      	ldr	r2, [pc, #404]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1c:	4b63      	ldr	r3, [pc, #396]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a62      	ldr	r2, [pc, #392]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	e00b      	b.n	8005f42 <HAL_RCC_OscConfig+0x3fe>
 8005f2a:	4b60      	ldr	r3, [pc, #384]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a5f      	ldr	r2, [pc, #380]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	4b5d      	ldr	r3, [pc, #372]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a5c      	ldr	r2, [pc, #368]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f3c:	f023 0304 	bic.w	r3, r3, #4
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d015      	beq.n	8005f76 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4a:	f7fd f839 	bl	8002fc0 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fd f835 	bl	8002fc0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e142      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f68:	4b50      	ldr	r3, [pc, #320]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0ee      	beq.n	8005f52 <HAL_RCC_OscConfig+0x40e>
 8005f74:	e014      	b.n	8005fa0 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f76:	f7fd f823 	bl	8002fc0 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fd f81f 	bl	8002fc0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e12c      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f94:	4b45      	ldr	r3, [pc, #276]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ee      	bne.n	8005f7e <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d105      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa6:	4b41      	ldr	r3, [pc, #260]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a40      	ldr	r2, [pc, #256]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00c      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x490>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d008      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x490>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x490>
 8005fca:	f640 6105 	movw	r1, #3589	; 0xe05
 8005fce:	4839      	ldr	r0, [pc, #228]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 8005fd0:	f7fc fa3d 	bl	800244e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8107 	beq.w	80061ec <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fde:	4b33      	ldr	r3, [pc, #204]	; (80060ac <HAL_RCC_OscConfig+0x568>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	f000 80c0 	beq.w	800616c <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f040 80a4 	bne.w	800613e <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_OscConfig+0x4ce>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006006:	d004      	beq.n	8006012 <HAL_RCC_OscConfig+0x4ce>
 8006008:	f640 610e 	movw	r1, #3598	; 0xe0e
 800600c:	4829      	ldr	r0, [pc, #164]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 800600e:	f7fc fa1e 	bl	800244e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	2b3f      	cmp	r3, #63	; 0x3f
 8006018:	d904      	bls.n	8006024 <HAL_RCC_OscConfig+0x4e0>
 800601a:	f640 610f 	movw	r1, #3599	; 0xe0f
 800601e:	4825      	ldr	r0, [pc, #148]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 8006020:	f7fc fa15 	bl	800244e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b31      	cmp	r3, #49	; 0x31
 800602a:	d904      	bls.n	8006036 <HAL_RCC_OscConfig+0x4f2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006034:	d904      	bls.n	8006040 <HAL_RCC_OscConfig+0x4fc>
 8006036:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800603a:	481e      	ldr	r0, [pc, #120]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 800603c:	f7fc fa07 	bl	800244e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	2b02      	cmp	r3, #2
 8006046:	d010      	beq.n	800606a <HAL_RCC_OscConfig+0x526>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	2b04      	cmp	r3, #4
 800604e:	d00c      	beq.n	800606a <HAL_RCC_OscConfig+0x526>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	2b06      	cmp	r3, #6
 8006056:	d008      	beq.n	800606a <HAL_RCC_OscConfig+0x526>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	2b08      	cmp	r3, #8
 800605e:	d004      	beq.n	800606a <HAL_RCC_OscConfig+0x526>
 8006060:	f640 6111 	movw	r1, #3601	; 0xe11
 8006064:	4813      	ldr	r0, [pc, #76]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 8006066:	f7fc f9f2 	bl	800244e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d903      	bls.n	800607a <HAL_RCC_OscConfig+0x536>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d904      	bls.n	8006084 <HAL_RCC_OscConfig+0x540>
 800607a:	f640 6112 	movw	r1, #3602	; 0xe12
 800607e:	480d      	ldr	r0, [pc, #52]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 8006080:	f7fc f9e5 	bl	800244e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	2b01      	cmp	r3, #1
 800608a:	d903      	bls.n	8006094 <HAL_RCC_OscConfig+0x550>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b07      	cmp	r3, #7
 8006092:	d904      	bls.n	800609e <HAL_RCC_OscConfig+0x55a>
 8006094:	f640 6113 	movw	r1, #3603	; 0xe13
 8006098:	4806      	ldr	r0, [pc, #24]	; (80060b4 <HAL_RCC_OscConfig+0x570>)
 800609a:	f7fc f9d8 	bl	800244e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <HAL_RCC_OscConfig+0x578>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fc ff8c 	bl	8002fc0 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060aa:	e012      	b.n	80060d2 <HAL_RCC_OscConfig+0x58e>
 80060ac:	40023800 	.word	0x40023800
 80060b0:	42470e80 	.word	0x42470e80
 80060b4:	0800fcd4 	.word	0x0800fcd4
 80060b8:	40007000 	.word	0x40007000
 80060bc:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fc ff7e 	bl	8002fc0 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e08d      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <HAL_RCC_OscConfig+0x6b4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	019b      	lsls	r3, r3, #6
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	3b01      	subs	r3, #1
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	071b      	lsls	r3, r3, #28
 800610a:	493b      	ldr	r1, [pc, #236]	; (80061f8 <HAL_RCC_OscConfig+0x6b4>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b3a      	ldr	r3, [pc, #232]	; (80061fc <HAL_RCC_OscConfig+0x6b8>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fc ff53 	bl	8002fc0 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611e:	f7fc ff4f 	bl	8002fc0 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05e      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCC_OscConfig+0x6b4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x5da>
 800613c:	e056      	b.n	80061ec <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <HAL_RCC_OscConfig+0x6b8>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fc ff3c 	bl	8002fc0 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614c:	f7fc ff38 	bl	8002fc0 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e047      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <HAL_RCC_OscConfig+0x6b4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x608>
 800616a:	e03f      	b.n	80061ec <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e03a      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006178:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <HAL_RCC_OscConfig+0x6b4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d030      	beq.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d129      	bne.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619e:	429a      	cmp	r2, r3
 80061a0:	d122      	bne.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061a8:	4013      	ands	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d119      	bne.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	3b01      	subs	r3, #1
 80061c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d10f      	bne.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	42470060 	.word	0x42470060

08006200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e184      	b.n	800651c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a72      	ldr	r2, [pc, #456]	; (80063e0 <HAL_SPI_Init+0x1e0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_SPI_Init+0x44>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a70      	ldr	r2, [pc, #448]	; (80063e4 <HAL_SPI_Init+0x1e4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_SPI_Init+0x44>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a6f      	ldr	r2, [pc, #444]	; (80063e8 <HAL_SPI_Init+0x1e8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_SPI_Init+0x44>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a6d      	ldr	r2, [pc, #436]	; (80063ec <HAL_SPI_Init+0x1ec>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_SPI_Init+0x44>
 800623a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800623e:	486c      	ldr	r0, [pc, #432]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 8006240:	f7fc f905 	bl	800244e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <HAL_SPI_Init+0x60>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006254:	d004      	beq.n	8006260 <HAL_SPI_Init+0x60>
 8006256:	f240 1143 	movw	r1, #323	; 0x143
 800625a:	4865      	ldr	r0, [pc, #404]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 800625c:	f7fc f8f7 	bl	800244e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <HAL_SPI_Init+0x86>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d009      	beq.n	8006286 <HAL_SPI_Init+0x86>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627a:	d004      	beq.n	8006286 <HAL_SPI_Init+0x86>
 800627c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006280:	485b      	ldr	r0, [pc, #364]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 8006282:	f7fc f8e4 	bl	800244e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628e:	d008      	beq.n	80062a2 <HAL_SPI_Init+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_SPI_Init+0xa2>
 8006298:	f240 1145 	movw	r1, #325	; 0x145
 800629c:	4854      	ldr	r0, [pc, #336]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 800629e:	f7fc f8d6 	bl	800244e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062aa:	d00d      	beq.n	80062c8 <HAL_SPI_Init+0xc8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <HAL_SPI_Init+0xc8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062bc:	d004      	beq.n	80062c8 <HAL_SPI_Init+0xc8>
 80062be:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80062c2:	484b      	ldr	r0, [pc, #300]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 80062c4:	f7fc f8c3 	bl	800244e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d020      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d01c      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d018      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b18      	cmp	r3, #24
 80062e6:	d014      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d010      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	2b28      	cmp	r3, #40	; 0x28
 80062f6:	d00c      	beq.n	8006312 <HAL_SPI_Init+0x112>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d008      	beq.n	8006312 <HAL_SPI_Init+0x112>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	2b38      	cmp	r3, #56	; 0x38
 8006306:	d004      	beq.n	8006312 <HAL_SPI_Init+0x112>
 8006308:	f240 1147 	movw	r1, #327	; 0x147
 800630c:	4838      	ldr	r0, [pc, #224]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 800630e:	f7fc f89e 	bl	800244e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_SPI_Init+0x12c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	2b80      	cmp	r3, #128	; 0x80
 8006320:	d004      	beq.n	800632c <HAL_SPI_Init+0x12c>
 8006322:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006326:	4832      	ldr	r0, [pc, #200]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 8006328:	f7fc f891 	bl	800244e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_SPI_Init+0x146>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b10      	cmp	r3, #16
 800633a:	d004      	beq.n	8006346 <HAL_SPI_Init+0x146>
 800633c:	f240 1149 	movw	r1, #329	; 0x149
 8006340:	482b      	ldr	r0, [pc, #172]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 8006342:	f7fc f884 	bl	800244e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d152      	bne.n	80063f4 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_SPI_Init+0x168>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d004      	beq.n	8006368 <HAL_SPI_Init+0x168>
 800635e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006362:	4823      	ldr	r0, [pc, #140]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 8006364:	f7fc f873 	bl	800244e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_SPI_Init+0x182>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d004      	beq.n	8006382 <HAL_SPI_Init+0x182>
 8006378:	f240 114d 	movw	r1, #333	; 0x14d
 800637c:	481c      	ldr	r0, [pc, #112]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 800637e:	f7fc f866 	bl	800244e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638a:	d125      	bne.n	80063d8 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d05a      	beq.n	800644a <HAL_SPI_Init+0x24a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d056      	beq.n	800644a <HAL_SPI_Init+0x24a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d052      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	2b18      	cmp	r3, #24
 80063aa:	d04e      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d04a      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b28      	cmp	r3, #40	; 0x28
 80063ba:	d046      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d042      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	2b38      	cmp	r3, #56	; 0x38
 80063ca:	d03e      	beq.n	800644a <HAL_SPI_Init+0x24a>
 80063cc:	f240 1151 	movw	r1, #337	; 0x151
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <HAL_SPI_Init+0x1f0>)
 80063d2:	f7fc f83c 	bl	800244e <assert_failed>
 80063d6:	e038      	b.n	800644a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
 80063de:	e034      	b.n	800644a <HAL_SPI_Init+0x24a>
 80063e0:	40013000 	.word	0x40013000
 80063e4:	40003800 	.word	0x40003800
 80063e8:	40003c00 	.word	0x40003c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	0800fd10 	.word	0x0800fd10
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_SPI_Init+0x23e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d01c      	beq.n	800643e <HAL_SPI_Init+0x23e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b10      	cmp	r3, #16
 800640a:	d018      	beq.n	800643e <HAL_SPI_Init+0x23e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	2b18      	cmp	r3, #24
 8006412:	d014      	beq.n	800643e <HAL_SPI_Init+0x23e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b20      	cmp	r3, #32
 800641a:	d010      	beq.n	800643e <HAL_SPI_Init+0x23e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	2b28      	cmp	r3, #40	; 0x28
 8006422:	d00c      	beq.n	800643e <HAL_SPI_Init+0x23e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b30      	cmp	r3, #48	; 0x30
 800642a:	d008      	beq.n	800643e <HAL_SPI_Init+0x23e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	2b38      	cmp	r3, #56	; 0x38
 8006432:	d004      	beq.n	800643e <HAL_SPI_Init+0x23e>
 8006434:	f240 115b 	movw	r1, #347	; 0x15b
 8006438:	483a      	ldr	r0, [pc, #232]	; (8006524 <HAL_SPI_Init+0x324>)
 800643a:	f7fc f808 	bl	800244e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc f919 	bl	800269c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006480:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	ea42 0103 	orr.w	r1, r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	f003 0104 	and.w	r1, r3, #4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f003 0210 	and.w	r2, r3, #16
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800650a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0800fd10 	.word	0x0800fd10

08006528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <HAL_SPI_Transmit+0x30>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654c:	d004      	beq.n	8006558 <HAL_SPI_Transmit+0x30>
 800654e:	f240 310a 	movw	r1, #778	; 0x30a
 8006552:	4893      	ldr	r0, [pc, #588]	; (80067a0 <HAL_SPI_Transmit+0x278>)
 8006554:	f7fb ff7b 	bl	800244e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_SPI_Transmit+0x3e>
 8006562:	2302      	movs	r3, #2
 8006564:	e128      	b.n	80067b8 <HAL_SPI_Transmit+0x290>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800656e:	f7fc fd27 	bl	8002fc0 <HAL_GetTick>
 8006572:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d002      	beq.n	800658a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006584:	2302      	movs	r3, #2
 8006586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006588:	e10d      	b.n	80067a6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0x6e>
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800659a:	e104      	b.n	80067a6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2203      	movs	r2, #3
 80065a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e2:	d10f      	bne.n	8006604 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006602:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d007      	beq.n	8006622 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662a:	d14b      	bne.n	80066c4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_SPI_Transmit+0x112>
 8006634:	8afb      	ldrh	r3, [r7, #22]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d13e      	bne.n	80066b8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	881a      	ldrh	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800665e:	e02b      	b.n	80066b8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d112      	bne.n	8006694 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	881a      	ldrh	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	86da      	strh	r2, [r3, #54]	; 0x36
 8006692:	e011      	b.n	80066b8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006694:	f7fc fc94 	bl	8002fc0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d803      	bhi.n	80066ac <HAL_SPI_Transmit+0x184>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d102      	bne.n	80066b2 <HAL_SPI_Transmit+0x18a>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066b6:	e076      	b.n	80067a6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ce      	bne.n	8006660 <HAL_SPI_Transmit+0x138>
 80066c2:	e04c      	b.n	800675e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x1aa>
 80066cc:	8afb      	ldrh	r3, [r7, #22]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d140      	bne.n	8006754 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066f8:	e02c      	b.n	8006754 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d113      	bne.n	8006730 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	86da      	strh	r2, [r3, #54]	; 0x36
 800672e:	e011      	b.n	8006754 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006730:	f7fc fc46 	bl	8002fc0 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d803      	bhi.n	8006748 <HAL_SPI_Transmit+0x220>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d102      	bne.n	800674e <HAL_SPI_Transmit+0x226>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006752:	e028      	b.n	80067a6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1cd      	bne.n	80066fa <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fbda 	bl	8006f1c <SPI_EndRxTxTransaction>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e002      	b.n	80067a6 <HAL_SPI_Transmit+0x27e>
 80067a0:	0800fd10 	.word	0x0800fd10
  }

error:
 80067a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	4613      	mov	r3, r2
 80067ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067dc:	d112      	bne.n	8006804 <HAL_SPI_Receive+0x44>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10e      	bne.n	8006804 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2204      	movs	r2, #4
 80067ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f8f2 	bl	80069e4 <HAL_SPI_TransmitReceive>
 8006800:	4603      	mov	r3, r0
 8006802:	e0ea      	b.n	80069da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_SPI_Receive+0x52>
 800680e:	2302      	movs	r3, #2
 8006810:	e0e3      	b.n	80069da <HAL_SPI_Receive+0x21a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681a:	f7fc fbd1 	bl	8002fc0 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d002      	beq.n	8006832 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800682c:	2302      	movs	r3, #2
 800682e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006830:	e0ca      	b.n	80069c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Receive+0x7e>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006842:	e0c1      	b.n	80069c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688a:	d10f      	bne.n	80068ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d007      	beq.n	80068ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d162      	bne.n	8006998 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068d2:	e02e      	b.n	8006932 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d115      	bne.n	800690e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f103 020c 	add.w	r2, r3, #12
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	7812      	ldrb	r2, [r2, #0]
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800690c:	e011      	b.n	8006932 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690e:	f7fc fb57 	bl	8002fc0 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d803      	bhi.n	8006926 <HAL_SPI_Receive+0x166>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d102      	bne.n	800692c <HAL_SPI_Receive+0x16c>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006930:	e04a      	b.n	80069c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1cb      	bne.n	80068d4 <HAL_SPI_Receive+0x114>
 800693c:	e031      	b.n	80069a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d113      	bne.n	8006974 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	b292      	uxth	r2, r2
 8006958:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	1c9a      	adds	r2, r3, #2
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006972:	e011      	b.n	8006998 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006974:	f7fc fb24 	bl	8002fc0 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d803      	bhi.n	800698c <HAL_SPI_Receive+0x1cc>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d102      	bne.n	8006992 <HAL_SPI_Receive+0x1d2>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006996:	e017      	b.n	80069c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1cd      	bne.n	800693e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fa52 	bl	8006e50 <SPI_EndRxTransaction>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	e000      	b.n	80069c8 <HAL_SPI_Receive+0x208>
  }

error :
 80069c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069f2:	2301      	movs	r3, #1
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <HAL_SPI_TransmitReceive+0x2a>
 8006a04:	f240 417e 	movw	r1, #1150	; 0x47e
 8006a08:	4884      	ldr	r0, [pc, #528]	; (8006c1c <HAL_SPI_TransmitReceive+0x238>)
 8006a0a:	f7fb fd20 	bl	800244e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x38>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e18d      	b.n	8006d38 <HAL_SPI_TransmitReceive+0x354>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a24:	f7fc facc 	bl	8002fc0 <HAL_GetTick>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a3a:	887b      	ldrh	r3, [r7, #2]
 8006a3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d00f      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x82>
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a4c:	d107      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x7a>
 8006a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d003      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a64:	e15e      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x94>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x94>
 8006a72:	887b      	ldrh	r3, [r7, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a7e:	e151      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d003      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2205      	movs	r2, #5
 8006a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	887a      	ldrh	r2, [r7, #2]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	887a      	ldrh	r2, [r7, #2]
 8006aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	887a      	ldrh	r2, [r7, #2]
 8006ab6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d007      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af0:	d178      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x11c>
 8006afa:	8b7b      	ldrh	r3, [r7, #26]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d166      	bne.n	8006bce <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	1c9a      	adds	r2, r3, #2
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b24:	e053      	b.n	8006bce <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d11b      	bne.n	8006b6c <HAL_SPI_TransmitReceive+0x188>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <HAL_SPI_TransmitReceive+0x188>
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d113      	bne.n	8006b6c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	1c9a      	adds	r2, r3, #2
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d119      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x1ca>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d014      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	1c9a      	adds	r2, r3, #2
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006baa:	2301      	movs	r3, #1
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bae:	f7fc fa07 	bl	8002fc0 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d807      	bhi.n	8006bce <HAL_SPI_TransmitReceive+0x1ea>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d003      	beq.n	8006bce <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bcc:	e0aa      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1a6      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x142>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1a1      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x142>
 8006be2:	e07f      	b.n	8006ce4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x20e>
 8006bec:	8b7b      	ldrh	r3, [r7, #26]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d16e      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c18:	e05a      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x2ec>
 8006c1a:	bf00      	nop
 8006c1c:	0800fd10 	.word	0x0800fd10
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d11c      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x284>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x284>
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d114      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d119      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x2c6>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d014      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006caa:	f7fc f989 	bl	8002fc0 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d803      	bhi.n	8006cc2 <HAL_SPI_TransmitReceive+0x2de>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d102      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x2e4>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cce:	e029      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1a2      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x23c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d19d      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f917 	bl	8006f1c <SPI_EndRxTxTransaction>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d00:	e010      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	e000      	b.n	8006d24 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006d22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3730      	adds	r7, #48	; 0x30
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d50:	f7fc f936 	bl	8002fc0 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d60:	f7fc f92e 	bl	8002fc0 <HAL_GetTick>
 8006d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	015b      	lsls	r3, r3, #5
 8006d6c:	0d1b      	lsrs	r3, r3, #20
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d76:	e054      	b.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d050      	beq.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d80:	f7fc f91e 	bl	8002fc0 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d902      	bls.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d13d      	bne.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dae:	d111      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db8:	d004      	beq.n	8006dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc2:	d107      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ddc:	d10f      	bne.n	8006dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e017      	b.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d19b      	bne.n	8006d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200000a0 	.word	0x200000a0

08006e50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e64:	d111      	bne.n	8006e8a <SPI_EndRxTransaction+0x3a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d004      	beq.n	8006e7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e78:	d107      	bne.n	8006e8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e92:	d12a      	bne.n	8006eea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9c:	d012      	beq.n	8006ec4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff ff49 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d02d      	beq.n	8006f10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e026      	b.n	8006f12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2101      	movs	r1, #1
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff ff36 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01a      	beq.n	8006f10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e013      	b.n	8006f12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff23 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e000      	b.n	8006f12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f28:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <SPI_EndRxTxTransaction+0x7c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <SPI_EndRxTxTransaction+0x80>)
 8006f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f32:	0d5b      	lsrs	r3, r3, #21
 8006f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f46:	d112      	bne.n	8006f6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2180      	movs	r1, #128	; 0x80
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff fef4 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e00f      	b.n	8006f8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d0f2      	beq.n	8006f6e <SPI_EndRxTxTransaction+0x52>
 8006f88:	e000      	b.n	8006f8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006f8a:	bf00      	nop
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	200000a0 	.word	0x200000a0
 8006f9c:	165e9f81 	.word	0x165e9f81

08006fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e0c5      	b.n	800713e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a64      	ldr	r2, [pc, #400]	; (8007148 <HAL_TIM_Base_Init+0x1a8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d045      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc4:	d040      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a60      	ldr	r2, [pc, #384]	; (800714c <HAL_TIM_Base_Init+0x1ac>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d03b      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a5e      	ldr	r2, [pc, #376]	; (8007150 <HAL_TIM_Base_Init+0x1b0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d036      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5d      	ldr	r2, [pc, #372]	; (8007154 <HAL_TIM_Base_Init+0x1b4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d031      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5b      	ldr	r2, [pc, #364]	; (8007158 <HAL_TIM_Base_Init+0x1b8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d02c      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a5a      	ldr	r2, [pc, #360]	; (800715c <HAL_TIM_Base_Init+0x1bc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d027      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a58      	ldr	r2, [pc, #352]	; (8007160 <HAL_TIM_Base_Init+0x1c0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d022      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a57      	ldr	r2, [pc, #348]	; (8007164 <HAL_TIM_Base_Init+0x1c4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a55      	ldr	r2, [pc, #340]	; (8007168 <HAL_TIM_Base_Init+0x1c8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a54      	ldr	r2, [pc, #336]	; (800716c <HAL_TIM_Base_Init+0x1cc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a52      	ldr	r2, [pc, #328]	; (8007170 <HAL_TIM_Base_Init+0x1d0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a51      	ldr	r2, [pc, #324]	; (8007174 <HAL_TIM_Base_Init+0x1d4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4f      	ldr	r2, [pc, #316]	; (8007178 <HAL_TIM_Base_Init+0x1d8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIM_Base_Init+0xa8>
 800703e:	f240 1113 	movw	r1, #275	; 0x113
 8007042:	484e      	ldr	r0, [pc, #312]	; (800717c <HAL_TIM_Base_Init+0x1dc>)
 8007044:	f7fb fa03 	bl	800244e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d014      	beq.n	800707a <HAL_TIM_Base_Init+0xda>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b10      	cmp	r3, #16
 8007056:	d010      	beq.n	800707a <HAL_TIM_Base_Init+0xda>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b20      	cmp	r3, #32
 800705e:	d00c      	beq.n	800707a <HAL_TIM_Base_Init+0xda>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d008      	beq.n	800707a <HAL_TIM_Base_Init+0xda>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b60      	cmp	r3, #96	; 0x60
 800706e:	d004      	beq.n	800707a <HAL_TIM_Base_Init+0xda>
 8007070:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007074:	4841      	ldr	r0, [pc, #260]	; (800717c <HAL_TIM_Base_Init+0x1dc>)
 8007076:	f7fb f9ea 	bl	800244e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <HAL_TIM_Base_Init+0x100>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d009      	beq.n	80070a0 <HAL_TIM_Base_Init+0x100>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d004      	beq.n	80070a0 <HAL_TIM_Base_Init+0x100>
 8007096:	f240 1115 	movw	r1, #277	; 0x115
 800709a:	4838      	ldr	r0, [pc, #224]	; (800717c <HAL_TIM_Base_Init+0x1dc>)
 800709c:	f7fb f9d7 	bl	800244e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_TIM_Base_Init+0x11a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d004      	beq.n	80070ba <HAL_TIM_Base_Init+0x11a>
 80070b0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80070b4:	4831      	ldr	r0, [pc, #196]	; (800717c <HAL_TIM_Base_Init+0x1dc>)
 80070b6:	f7fb f9ca 	bl	800244e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fb fc36 	bl	8002940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f001 fbb8 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40001000 	.word	0x40001000
 800715c:	40001400 	.word	0x40001400
 8007160:	40010400 	.word	0x40010400
 8007164:	40014000 	.word	0x40014000
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800
 8007170:	40001800 	.word	0x40001800
 8007174:	40001c00 	.word	0x40001c00
 8007178:	40002000 	.word	0x40002000
 800717c:	0800fd48 	.word	0x0800fd48

08007180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a51      	ldr	r2, [pc, #324]	; (80072d4 <HAL_TIM_Base_Start_IT+0x154>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d045      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d040      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a4d      	ldr	r2, [pc, #308]	; (80072d8 <HAL_TIM_Base_Start_IT+0x158>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d03b      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a4c      	ldr	r2, [pc, #304]	; (80072dc <HAL_TIM_Base_Start_IT+0x15c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d036      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a4a      	ldr	r2, [pc, #296]	; (80072e0 <HAL_TIM_Base_Start_IT+0x160>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d031      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a49      	ldr	r2, [pc, #292]	; (80072e4 <HAL_TIM_Base_Start_IT+0x164>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d02c      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a47      	ldr	r2, [pc, #284]	; (80072e8 <HAL_TIM_Base_Start_IT+0x168>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d027      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a46      	ldr	r2, [pc, #280]	; (80072ec <HAL_TIM_Base_Start_IT+0x16c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a44      	ldr	r2, [pc, #272]	; (80072f0 <HAL_TIM_Base_Start_IT+0x170>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a43      	ldr	r2, [pc, #268]	; (80072f4 <HAL_TIM_Base_Start_IT+0x174>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a41      	ldr	r2, [pc, #260]	; (80072f8 <HAL_TIM_Base_Start_IT+0x178>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a40      	ldr	r2, [pc, #256]	; (80072fc <HAL_TIM_Base_Start_IT+0x17c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a3e      	ldr	r2, [pc, #248]	; (8007300 <HAL_TIM_Base_Start_IT+0x180>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a3d      	ldr	r2, [pc, #244]	; (8007304 <HAL_TIM_Base_Start_IT+0x184>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIM_Base_Start_IT+0x9e>
 8007214:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007218:	483b      	ldr	r0, [pc, #236]	; (8007308 <HAL_TIM_Base_Start_IT+0x188>)
 800721a:	f7fb f918 	bl	800244e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	d001      	beq.n	800722e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e04e      	b.n	80072cc <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a22      	ldr	r2, [pc, #136]	; (80072d4 <HAL_TIM_Base_Start_IT+0x154>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d022      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007258:	d01d      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <HAL_TIM_Base_Start_IT+0x158>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d018      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <HAL_TIM_Base_Start_IT+0x15c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <HAL_TIM_Base_Start_IT+0x160>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00e      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <HAL_TIM_Base_Start_IT+0x16c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d009      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_TIM_Base_Start_IT+0x170>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d004      	beq.n	8007296 <HAL_TIM_Base_Start_IT+0x116>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <HAL_TIM_Base_Start_IT+0x17c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d111      	bne.n	80072ba <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d010      	beq.n	80072ca <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b8:	e007      	b.n	80072ca <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0201 	orr.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40001000 	.word	0x40001000
 80072e8:	40001400 	.word	0x40001400
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800
 80072fc:	40001800 	.word	0x40001800
 8007300:	40001c00 	.word	0x40001c00
 8007304:	40002000 	.word	0x40002000
 8007308:	0800fd48 	.word	0x0800fd48

0800730c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e0c5      	b.n	80074aa <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a64      	ldr	r2, [pc, #400]	; (80074b4 <HAL_TIM_PWM_Init+0x1a8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d045      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d040      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a60      	ldr	r2, [pc, #384]	; (80074b8 <HAL_TIM_PWM_Init+0x1ac>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d03b      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a5e      	ldr	r2, [pc, #376]	; (80074bc <HAL_TIM_PWM_Init+0x1b0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d036      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a5d      	ldr	r2, [pc, #372]	; (80074c0 <HAL_TIM_PWM_Init+0x1b4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d031      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a5b      	ldr	r2, [pc, #364]	; (80074c4 <HAL_TIM_PWM_Init+0x1b8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d02c      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5a      	ldr	r2, [pc, #360]	; (80074c8 <HAL_TIM_PWM_Init+0x1bc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d027      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a58      	ldr	r2, [pc, #352]	; (80074cc <HAL_TIM_PWM_Init+0x1c0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d022      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a57      	ldr	r2, [pc, #348]	; (80074d0 <HAL_TIM_PWM_Init+0x1c4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d01d      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a55      	ldr	r2, [pc, #340]	; (80074d4 <HAL_TIM_PWM_Init+0x1c8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d018      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a54      	ldr	r2, [pc, #336]	; (80074d8 <HAL_TIM_PWM_Init+0x1cc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a52      	ldr	r2, [pc, #328]	; (80074dc <HAL_TIM_PWM_Init+0x1d0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00e      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a51      	ldr	r2, [pc, #324]	; (80074e0 <HAL_TIM_PWM_Init+0x1d4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a4f      	ldr	r2, [pc, #316]	; (80074e4 <HAL_TIM_PWM_Init+0x1d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <HAL_TIM_PWM_Init+0xa8>
 80073aa:	f240 5129 	movw	r1, #1321	; 0x529
 80073ae:	484e      	ldr	r0, [pc, #312]	; (80074e8 <HAL_TIM_PWM_Init+0x1dc>)
 80073b0:	f7fb f84d 	bl	800244e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d014      	beq.n	80073e6 <HAL_TIM_PWM_Init+0xda>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d010      	beq.n	80073e6 <HAL_TIM_PWM_Init+0xda>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d00c      	beq.n	80073e6 <HAL_TIM_PWM_Init+0xda>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b40      	cmp	r3, #64	; 0x40
 80073d2:	d008      	beq.n	80073e6 <HAL_TIM_PWM_Init+0xda>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b60      	cmp	r3, #96	; 0x60
 80073da:	d004      	beq.n	80073e6 <HAL_TIM_PWM_Init+0xda>
 80073dc:	f240 512a 	movw	r1, #1322	; 0x52a
 80073e0:	4841      	ldr	r0, [pc, #260]	; (80074e8 <HAL_TIM_PWM_Init+0x1dc>)
 80073e2:	f7fb f834 	bl	800244e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00e      	beq.n	800740c <HAL_TIM_PWM_Init+0x100>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f6:	d009      	beq.n	800740c <HAL_TIM_PWM_Init+0x100>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007400:	d004      	beq.n	800740c <HAL_TIM_PWM_Init+0x100>
 8007402:	f240 512b 	movw	r1, #1323	; 0x52b
 8007406:	4838      	ldr	r0, [pc, #224]	; (80074e8 <HAL_TIM_PWM_Init+0x1dc>)
 8007408:	f7fb f821 	bl	800244e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_TIM_PWM_Init+0x11a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d004      	beq.n	8007426 <HAL_TIM_PWM_Init+0x11a>
 800741c:	f240 512c 	movw	r1, #1324	; 0x52c
 8007420:	4831      	ldr	r0, [pc, #196]	; (80074e8 <HAL_TIM_PWM_Init+0x1dc>)
 8007422:	f7fb f814 	bl	800244e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fb fae2 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f001 fa02 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40001000 	.word	0x40001000
 80074c8:	40001400 	.word	0x40001400
 80074cc:	40010400 	.word	0x40010400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	40001800 	.word	0x40001800
 80074e0:	40001c00 	.word	0x40001c00
 80074e4:	40002000 	.word	0x40002000
 80074e8:	0800fd48 	.word	0x0800fd48

080074ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a84      	ldr	r2, [pc, #528]	; (800770c <HAL_TIM_PWM_Start+0x220>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10f      	bne.n	8007520 <HAL_TIM_PWM_Start+0x34>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 809f 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b04      	cmp	r3, #4
 800750c:	f000 809b 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b08      	cmp	r3, #8
 8007514:	f000 8097 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b0c      	cmp	r3, #12
 800751c:	f000 8093 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d10e      	bne.n	8007548 <HAL_TIM_PWM_Start+0x5c>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 808a 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b04      	cmp	r3, #4
 8007536:	f000 8086 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b08      	cmp	r3, #8
 800753e:	f000 8082 	beq.w	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b0c      	cmp	r3, #12
 8007546:	d07e      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a70      	ldr	r2, [pc, #448]	; (8007710 <HAL_TIM_PWM_Start+0x224>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d10b      	bne.n	800756a <HAL_TIM_PWM_Start+0x7e>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d076      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d073      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d070      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b0c      	cmp	r3, #12
 8007568:	d06d      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a69      	ldr	r2, [pc, #420]	; (8007714 <HAL_TIM_PWM_Start+0x228>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d10b      	bne.n	800758c <HAL_TIM_PWM_Start+0xa0>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d065      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d062      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b08      	cmp	r3, #8
 8007584:	d05f      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b0c      	cmp	r3, #12
 800758a:	d05c      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a61      	ldr	r2, [pc, #388]	; (8007718 <HAL_TIM_PWM_Start+0x22c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d10b      	bne.n	80075ae <HAL_TIM_PWM_Start+0xc2>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d054      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d051      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d04e      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b0c      	cmp	r3, #12
 80075ac:	d04b      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a5a      	ldr	r2, [pc, #360]	; (800771c <HAL_TIM_PWM_Start+0x230>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10b      	bne.n	80075d0 <HAL_TIM_PWM_Start+0xe4>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d043      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d040      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d03d      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d03a      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a52      	ldr	r2, [pc, #328]	; (8007720 <HAL_TIM_PWM_Start+0x234>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d105      	bne.n	80075e6 <HAL_TIM_PWM_Start+0xfa>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d032      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d02f      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a4e      	ldr	r2, [pc, #312]	; (8007724 <HAL_TIM_PWM_Start+0x238>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d102      	bne.n	80075f6 <HAL_TIM_PWM_Start+0x10a>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d027      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a4b      	ldr	r2, [pc, #300]	; (8007728 <HAL_TIM_PWM_Start+0x23c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d102      	bne.n	8007606 <HAL_TIM_PWM_Start+0x11a>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01f      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a48      	ldr	r2, [pc, #288]	; (800772c <HAL_TIM_PWM_Start+0x240>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d105      	bne.n	800761c <HAL_TIM_PWM_Start+0x130>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d017      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b04      	cmp	r3, #4
 800761a:	d014      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a43      	ldr	r2, [pc, #268]	; (8007730 <HAL_TIM_PWM_Start+0x244>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d102      	bne.n	800762c <HAL_TIM_PWM_Start+0x140>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a40      	ldr	r2, [pc, #256]	; (8007734 <HAL_TIM_PWM_Start+0x248>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d102      	bne.n	800763c <HAL_TIM_PWM_Start+0x150>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <HAL_TIM_PWM_Start+0x15a>
 800763c:	f240 51af 	movw	r1, #1455	; 0x5af
 8007640:	483d      	ldr	r0, [pc, #244]	; (8007738 <HAL_TIM_PWM_Start+0x24c>)
 8007642:	f7fa ff04 	bl	800244e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_TIM_PWM_Start+0x174>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e022      	b.n	80076a6 <HAL_TIM_PWM_Start+0x1ba>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b04      	cmp	r3, #4
 8007664:	d109      	bne.n	800767a <HAL_TIM_PWM_Start+0x18e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	e015      	b.n	80076a6 <HAL_TIM_PWM_Start+0x1ba>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d109      	bne.n	8007694 <HAL_TIM_PWM_Start+0x1a8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	bf14      	ite	ne
 800768c:	2301      	movne	r3, #1
 800768e:	2300      	moveq	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	e008      	b.n	80076a6 <HAL_TIM_PWM_Start+0x1ba>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e094      	b.n	80077d8 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <HAL_TIM_PWM_Start+0x1d2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076bc:	e013      	b.n	80076e6 <HAL_TIM_PWM_Start+0x1fa>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_PWM_Start+0x1e2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076cc:	e00b      	b.n	80076e6 <HAL_TIM_PWM_Start+0x1fa>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d104      	bne.n	80076de <HAL_TIM_PWM_Start+0x1f2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076dc:	e003      	b.n	80076e6 <HAL_TIM_PWM_Start+0x1fa>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2201      	movs	r2, #1
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fc28 	bl	8008f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <HAL_TIM_PWM_Start+0x220>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_TIM_PWM_Start+0x21c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a06      	ldr	r2, [pc, #24]	; (800771c <HAL_TIM_PWM_Start+0x230>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d119      	bne.n	800773c <HAL_TIM_PWM_Start+0x250>
 8007708:	2301      	movs	r3, #1
 800770a:	e018      	b.n	800773e <HAL_TIM_PWM_Start+0x252>
 800770c:	40010000 	.word	0x40010000
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40010400 	.word	0x40010400
 8007720:	40014000 	.word	0x40014000
 8007724:	40014400 	.word	0x40014400
 8007728:	40014800 	.word	0x40014800
 800772c:	40001800 	.word	0x40001800
 8007730:	40001c00 	.word	0x40001c00
 8007734:	40002000 	.word	0x40002000
 8007738:	0800fd48 	.word	0x0800fd48
 800773c:	2300      	movs	r3, #0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a22      	ldr	r2, [pc, #136]	; (80077e0 <HAL_TIM_PWM_Start+0x2f4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d01d      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_TIM_PWM_Start+0x2f8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d018      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <HAL_TIM_PWM_Start+0x2fc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <HAL_TIM_PWM_Start+0x300>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <HAL_TIM_PWM_Start+0x304>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <HAL_TIM_PWM_Start+0x308>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x2b6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <HAL_TIM_PWM_Start+0x30c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d111      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b06      	cmp	r3, #6
 80077b2:	d010      	beq.n	80077d6 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c4:	e007      	b.n	80077d6 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0201 	orr.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40001800 	.word	0x40001800

080077fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e198      	b.n	8007b42 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a7d      	ldr	r2, [pc, #500]	; (8007a0c <HAL_TIM_Encoder_Init+0x210>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d027      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007822:	d022      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a79      	ldr	r2, [pc, #484]	; (8007a10 <HAL_TIM_Encoder_Init+0x214>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01d      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a78      	ldr	r2, [pc, #480]	; (8007a14 <HAL_TIM_Encoder_Init+0x218>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a76      	ldr	r2, [pc, #472]	; (8007a18 <HAL_TIM_Encoder_Init+0x21c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a75      	ldr	r2, [pc, #468]	; (8007a1c <HAL_TIM_Encoder_Init+0x220>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a73      	ldr	r2, [pc, #460]	; (8007a20 <HAL_TIM_Encoder_Init+0x224>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a72      	ldr	r2, [pc, #456]	; (8007a24 <HAL_TIM_Encoder_Init+0x228>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIM_Encoder_Init+0x6e>
 8007860:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007864:	4870      	ldr	r0, [pc, #448]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 8007866:	f7fa fdf2 	bl	800244e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d014      	beq.n	800789c <HAL_TIM_Encoder_Init+0xa0>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b10      	cmp	r3, #16
 8007878:	d010      	beq.n	800789c <HAL_TIM_Encoder_Init+0xa0>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b20      	cmp	r3, #32
 8007880:	d00c      	beq.n	800789c <HAL_TIM_Encoder_Init+0xa0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d008      	beq.n	800789c <HAL_TIM_Encoder_Init+0xa0>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b60      	cmp	r3, #96	; 0x60
 8007890:	d004      	beq.n	800789c <HAL_TIM_Encoder_Init+0xa0>
 8007892:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007896:	4864      	ldr	r0, [pc, #400]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 8007898:	f7fa fdd9 	bl	800244e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00e      	beq.n	80078c2 <HAL_TIM_Encoder_Init+0xc6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ac:	d009      	beq.n	80078c2 <HAL_TIM_Encoder_Init+0xc6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b6:	d004      	beq.n	80078c2 <HAL_TIM_Encoder_Init+0xc6>
 80078b8:	f640 31d3 	movw	r1, #3027	; 0xbd3
 80078bc:	485a      	ldr	r0, [pc, #360]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80078be:	f7fa fdc6 	bl	800244e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d008      	beq.n	80078dc <HAL_TIM_Encoder_Init+0xe0>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_Encoder_Init+0xe0>
 80078d2:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80078d6:	4854      	ldr	r0, [pc, #336]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80078d8:	f7fa fdb9 	bl	800244e <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d00c      	beq.n	80078fe <HAL_TIM_Encoder_Init+0x102>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d008      	beq.n	80078fe <HAL_TIM_Encoder_Init+0x102>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d004      	beq.n	80078fe <HAL_TIM_Encoder_Init+0x102>
 80078f4:	f640 31d5 	movw	r1, #3029	; 0xbd5
 80078f8:	484b      	ldr	r0, [pc, #300]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80078fa:	f7fa fda8 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d00c      	beq.n	8007920 <HAL_TIM_Encoder_Init+0x124>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d008      	beq.n	8007920 <HAL_TIM_Encoder_Init+0x124>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d004      	beq.n	8007920 <HAL_TIM_Encoder_Init+0x124>
 8007916:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800791a:	4843      	ldr	r0, [pc, #268]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 800791c:	f7fa fd97 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d00c      	beq.n	8007942 <HAL_TIM_Encoder_Init+0x146>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d008      	beq.n	8007942 <HAL_TIM_Encoder_Init+0x146>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d004      	beq.n	8007942 <HAL_TIM_Encoder_Init+0x146>
 8007938:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800793c:	483a      	ldr	r0, [pc, #232]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 800793e:	f7fa fd86 	bl	800244e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_TIM_Encoder_Init+0x160>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d004      	beq.n	800795c <HAL_TIM_Encoder_Init+0x160>
 8007952:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007956:	4834      	ldr	r0, [pc, #208]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 8007958:	f7fa fd79 	bl	800244e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_TIM_Encoder_Init+0x17a>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d004      	beq.n	8007976 <HAL_TIM_Encoder_Init+0x17a>
 800796c:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007970:	482d      	ldr	r0, [pc, #180]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 8007972:	f7fa fd6c 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <HAL_TIM_Encoder_Init+0x1a4>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d00c      	beq.n	80079a0 <HAL_TIM_Encoder_Init+0x1a4>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b08      	cmp	r3, #8
 800798c:	d008      	beq.n	80079a0 <HAL_TIM_Encoder_Init+0x1a4>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d004      	beq.n	80079a0 <HAL_TIM_Encoder_Init+0x1a4>
 8007996:	f640 31da 	movw	r1, #3034	; 0xbda
 800799a:	4823      	ldr	r0, [pc, #140]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 800799c:	f7fa fd57 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d010      	beq.n	80079ca <HAL_TIM_Encoder_Init+0x1ce>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d00c      	beq.n	80079ca <HAL_TIM_Encoder_Init+0x1ce>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d008      	beq.n	80079ca <HAL_TIM_Encoder_Init+0x1ce>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	2b0c      	cmp	r3, #12
 80079be:	d004      	beq.n	80079ca <HAL_TIM_Encoder_Init+0x1ce>
 80079c0:	f640 31db 	movw	r1, #3035	; 0xbdb
 80079c4:	4818      	ldr	r0, [pc, #96]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80079c6:	f7fa fd42 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b0f      	cmp	r3, #15
 80079d0:	d904      	bls.n	80079dc <HAL_TIM_Encoder_Init+0x1e0>
 80079d2:	f640 31dc 	movw	r1, #3036	; 0xbdc
 80079d6:	4814      	ldr	r0, [pc, #80]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80079d8:	f7fa fd39 	bl	800244e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d904      	bls.n	80079ee <HAL_TIM_Encoder_Init+0x1f2>
 80079e4:	f640 31dd 	movw	r1, #3037	; 0xbdd
 80079e8:	480f      	ldr	r0, [pc, #60]	; (8007a28 <HAL_TIM_Encoder_Init+0x22c>)
 80079ea:	f7fa fd30 	bl	800244e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d118      	bne.n	8007a2c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fb f826 	bl	8002a54 <HAL_TIM_Encoder_MspInit>
 8007a08:	e010      	b.n	8007a2c <HAL_TIM_Encoder_Init+0x230>
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40010400 	.word	0x40010400
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40001800 	.word	0x40001800
 8007a28:	0800fd48 	.word	0x0800fd48
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f000 ff02 	bl	800885c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a80:	f023 0303 	bic.w	r3, r3, #3
 8007a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	4313      	orrs	r3, r2
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a9e:	f023 030c 	bic.w	r3, r3, #12
 8007aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	4313      	orrs	r3, r2
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007adc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ae4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	4313      	orrs	r3, r2
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0202 	mvn.w	r2, #2
 8007b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fe46 	bl	8008820 <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fe38 	bl	800880c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fe49 	bl	8008834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d122      	bne.n	8007bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d11b      	bne.n	8007bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0204 	mvn.w	r2, #4
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fe1c 	bl	8008820 <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fe0e 	bl	800880c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fe1f 	bl	8008834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b08      	cmp	r3, #8
 8007c08:	d122      	bne.n	8007c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d11b      	bne.n	8007c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0208 	mvn.w	r2, #8
 8007c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2204      	movs	r2, #4
 8007c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fdf2 	bl	8008820 <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fde4 	bl	800880c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fdf5 	bl	8008834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d122      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	d11b      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0210 	mvn.w	r2, #16
 8007c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fdc8 	bl	8008820 <HAL_TIM_IC_CaptureCallback>
 8007c90:	e005      	b.n	8007c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fdba 	bl	800880c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fdcb 	bl	8008834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d10e      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d107      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0201 	mvn.w	r2, #1
 8007cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7f9 f9ee 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cda:	2b80      	cmp	r3, #128	; 0x80
 8007cdc:	d10e      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce8:	2b80      	cmp	r3, #128	; 0x80
 8007cea:	d107      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 fb5c 	bl	80093b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd90 	bl	8008848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0220 	mvn.w	r2, #32
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fb26 	bl	80093a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d00d      	beq.n	8007d94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d00a      	beq.n	8007d94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d007      	beq.n	8007d94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b3c      	cmp	r3, #60	; 0x3c
 8007d88:	d004      	beq.n	8007d94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007d8a:	f241 0177 	movw	r1, #4215	; 0x1077
 8007d8e:	4883      	ldr	r0, [pc, #524]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007d90:	f7fa fb5d 	bl	800244e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b60      	cmp	r3, #96	; 0x60
 8007d9a:	d008      	beq.n	8007dae <HAL_TIM_PWM_ConfigChannel+0x52>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b70      	cmp	r3, #112	; 0x70
 8007da2:	d004      	beq.n	8007dae <HAL_TIM_PWM_ConfigChannel+0x52>
 8007da4:	f241 0178 	movw	r1, #4216	; 0x1078
 8007da8:	487c      	ldr	r0, [pc, #496]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007daa:	f7fa fb50 	bl	800244e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007dbe:	f241 0179 	movw	r1, #4217	; 0x1079
 8007dc2:	4876      	ldr	r0, [pc, #472]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007dc4:	f7fa fb43 	bl	800244e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d004      	beq.n	8007de2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007dd8:	f241 017a 	movw	r1, #4218	; 0x107a
 8007ddc:	486f      	ldr	r0, [pc, #444]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007dde:	f7fa fb36 	bl	800244e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x94>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e17c      	b.n	80080ea <HAL_TIM_PWM_ConfigChannel+0x38e>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	f200 816d 	bhi.w	80080da <HAL_TIM_PWM_ConfigChannel+0x37e>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e3d 	.word	0x08007e3d
 8007e0c:	080080db 	.word	0x080080db
 8007e10:	080080db 	.word	0x080080db
 8007e14:	080080db 	.word	0x080080db
 8007e18:	08007eff 	.word	0x08007eff
 8007e1c:	080080db 	.word	0x080080db
 8007e20:	080080db 	.word	0x080080db
 8007e24:	080080db 	.word	0x080080db
 8007e28:	08007fcd 	.word	0x08007fcd
 8007e2c:	080080db 	.word	0x080080db
 8007e30:	080080db 	.word	0x080080db
 8007e34:	080080db 	.word	0x080080db
 8007e38:	08008053 	.word	0x08008053
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a57      	ldr	r2, [pc, #348]	; (8007fa0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d03b      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4e:	d036      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a53      	ldr	r2, [pc, #332]	; (8007fa4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d031      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a52      	ldr	r2, [pc, #328]	; (8007fa8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d02c      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a50      	ldr	r2, [pc, #320]	; (8007fac <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d027      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a4f      	ldr	r2, [pc, #316]	; (8007fb0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d022      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a4d      	ldr	r2, [pc, #308]	; (8007fb4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01d      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a4c      	ldr	r2, [pc, #304]	; (8007fb8 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d018      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a4a      	ldr	r2, [pc, #296]	; (8007fbc <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a49      	ldr	r2, [pc, #292]	; (8007fc0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a47      	ldr	r2, [pc, #284]	; (8007fc4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a46      	ldr	r2, [pc, #280]	; (8007fc8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x162>
 8007eb4:	f241 0184 	movw	r1, #4228	; 0x1084
 8007eb8:	4838      	ldr	r0, [pc, #224]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007eba:	f7fa fac8 	bl	800244e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fd69 	bl	800899c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0208 	orr.w	r2, r2, #8
 8007ed8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0204 	bic.w	r2, r2, #4
 8007ee8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6999      	ldr	r1, [r3, #24]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	619a      	str	r2, [r3, #24]
      break;
 8007efc:	e0f0      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a27      	ldr	r2, [pc, #156]	; (8007fa0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d027      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f10:	d022      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a23      	ldr	r2, [pc, #140]	; (8007fa4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d01d      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a20      	ldr	r2, [pc, #128]	; (8007fac <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007f4e:	f241 0195 	movw	r1, #4245	; 0x1095
 8007f52:	4812      	ldr	r0, [pc, #72]	; (8007f9c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007f54:	f7fa fa7b 	bl	800244e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fdb6 	bl	8008ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6999      	ldr	r1, [r3, #24]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	619a      	str	r2, [r3, #24]
      break;
 8007f98:	e0a2      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x384>
 8007f9a:	bf00      	nop
 8007f9c:	0800fd48 	.word	0x0800fd48
 8007fa0:	40010000 	.word	0x40010000
 8007fa4:	40000400 	.word	0x40000400
 8007fa8:	40000800 	.word	0x40000800
 8007fac:	40000c00 	.word	0x40000c00
 8007fb0:	40010400 	.word	0x40010400
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	40014400 	.word	0x40014400
 8007fbc:	40014800 	.word	0x40014800
 8007fc0:	40001800 	.word	0x40001800
 8007fc4:	40001c00 	.word	0x40001c00
 8007fc8:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a48      	ldr	r2, [pc, #288]	; (80080f4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d01d      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fde:	d018      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a44      	ldr	r2, [pc, #272]	; (80080f8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a43      	ldr	r2, [pc, #268]	; (80080fc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00e      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a41      	ldr	r2, [pc, #260]	; (8008100 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d009      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a40      	ldr	r2, [pc, #256]	; (8008104 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d004      	beq.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8008008:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800800c:	483e      	ldr	r0, [pc, #248]	; (8008108 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800800e:	f7fa fa1e 	bl	800244e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fdf7 	bl	8008c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0208 	orr.w	r2, r2, #8
 800802c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0204 	bic.w	r2, r2, #4
 800803c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69d9      	ldr	r1, [r3, #28]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	61da      	str	r2, [r3, #28]
      break;
 8008050:	e046      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a27      	ldr	r2, [pc, #156]	; (80080f4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d01d      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008064:	d018      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a23      	ldr	r2, [pc, #140]	; (80080f8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d013      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a21      	ldr	r2, [pc, #132]	; (80080fc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00e      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a20      	ldr	r2, [pc, #128]	; (8008100 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d009      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800808e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008092:	481d      	ldr	r0, [pc, #116]	; (8008108 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008094:	f7fa f9db 	bl	800244e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fe52 	bl	8008d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69da      	ldr	r2, [r3, #28]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69da      	ldr	r2, [r3, #28]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69d9      	ldr	r1, [r3, #28]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	021a      	lsls	r2, r3, #8
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	61da      	str	r2, [r3, #28]
      break;
 80080d8:	e002      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
      break;
 80080de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40000400 	.word	0x40000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	40010400 	.word	0x40010400
 8008108:	0800fd48 	.word	0x0800fd48

0800810c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIM_ConfigClockSource+0x1c>
 8008124:	2302      	movs	r3, #2
 8008126:	e35c      	b.n	80087e2 <HAL_TIM_ConfigClockSource+0x6d6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008140:	d029      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814a:	d024      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d020      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d01c      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b20      	cmp	r3, #32
 8008162:	d018      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b30      	cmp	r3, #48	; 0x30
 800816a:	d014      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d010      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b50      	cmp	r3, #80	; 0x50
 800817a:	d00c      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b60      	cmp	r3, #96	; 0x60
 8008182:	d008      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b70      	cmp	r3, #112	; 0x70
 800818a:	d004      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0x8a>
 800818c:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8008190:	4893      	ldr	r0, [pc, #588]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008192:	f7fa f95c 	bl	800244e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	f000 812b 	beq.w	8008418 <HAL_TIM_ConfigClockSource+0x30c>
 80081c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c6:	f200 82ff 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d02e      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x122>
 80081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d4:	f200 82f8 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 80081d8:	2b70      	cmp	r3, #112	; 0x70
 80081da:	f000 8082 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1d6>
 80081de:	2b70      	cmp	r3, #112	; 0x70
 80081e0:	f200 82f2 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 80081e4:	2b60      	cmp	r3, #96	; 0x60
 80081e6:	f000 81e8 	beq.w	80085ba <HAL_TIM_ConfigClockSource+0x4ae>
 80081ea:	2b60      	cmp	r3, #96	; 0x60
 80081ec:	f200 82ec 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 80081f0:	2b50      	cmp	r3, #80	; 0x50
 80081f2:	f000 8182 	beq.w	80084fa <HAL_TIM_ConfigClockSource+0x3ee>
 80081f6:	2b50      	cmp	r3, #80	; 0x50
 80081f8:	f200 82e6 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	f000 824d 	beq.w	800869c <HAL_TIM_ConfigClockSource+0x590>
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	f200 82e0 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	f000 82a7 	beq.w	800875c <HAL_TIM_ConfigClockSource+0x650>
 800820e:	2b30      	cmp	r3, #48	; 0x30
 8008210:	f200 82da 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008214:	2b20      	cmp	r3, #32
 8008216:	f000 82a1 	beq.w	800875c <HAL_TIM_ConfigClockSource+0x650>
 800821a:	2b20      	cmp	r3, #32
 800821c:	f200 82d4 	bhi.w	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 829b 	beq.w	800875c <HAL_TIM_ConfigClockSource+0x650>
 8008226:	2b10      	cmp	r3, #16
 8008228:	f000 8298 	beq.w	800875c <HAL_TIM_ConfigClockSource+0x650>
 800822c:	e2cc      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a6c      	ldr	r2, [pc, #432]	; (80083e4 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	f000 82ca 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008242:	f000 82c4 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a67      	ldr	r2, [pc, #412]	; (80083e8 <HAL_TIM_ConfigClockSource+0x2dc>)
 800824c:	4293      	cmp	r3, r2
 800824e:	f000 82be 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a65      	ldr	r2, [pc, #404]	; (80083ec <HAL_TIM_ConfigClockSource+0x2e0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	f000 82b8 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a63      	ldr	r2, [pc, #396]	; (80083f0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	f000 82b2 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a61      	ldr	r2, [pc, #388]	; (80083f4 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	f000 82ac 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a5f      	ldr	r2, [pc, #380]	; (80083f8 <HAL_TIM_ConfigClockSource+0x2ec>)
 800827c:	4293      	cmp	r3, r2
 800827e:	f000 82a6 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a5d      	ldr	r2, [pc, #372]	; (80083fc <HAL_TIM_ConfigClockSource+0x2f0>)
 8008288:	4293      	cmp	r3, r2
 800828a:	f000 82a0 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a5b      	ldr	r2, [pc, #364]	; (8008400 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	f000 829a 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a59      	ldr	r2, [pc, #356]	; (8008404 <HAL_TIM_ConfigClockSource+0x2f8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	f000 8294 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a57      	ldr	r2, [pc, #348]	; (8008408 <HAL_TIM_ConfigClockSource+0x2fc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	f000 828e 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a55      	ldr	r2, [pc, #340]	; (800840c <HAL_TIM_ConfigClockSource+0x300>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	f000 8288 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a53      	ldr	r2, [pc, #332]	; (8008410 <HAL_TIM_ConfigClockSource+0x304>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	f000 8282 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a51      	ldr	r2, [pc, #324]	; (8008414 <HAL_TIM_ConfigClockSource+0x308>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	f000 827c 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
 80082d6:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80082da:	4841      	ldr	r0, [pc, #260]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80082dc:	f7fa f8b7 	bl	800244e <assert_failed>
      break;
 80082e0:	e275      	b.n	80087ce <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a3f      	ldr	r2, [pc, #252]	; (80083e4 <HAL_TIM_ConfigClockSource+0x2d8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d027      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f4:	d022      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3b      	ldr	r2, [pc, #236]	; (80083e8 <HAL_TIM_ConfigClockSource+0x2dc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d01d      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a39      	ldr	r2, [pc, #228]	; (80083ec <HAL_TIM_ConfigClockSource+0x2e0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a38      	ldr	r2, [pc, #224]	; (80083f0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a38      	ldr	r2, [pc, #224]	; (80083fc <HAL_TIM_ConfigClockSource+0x2f0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a37      	ldr	r2, [pc, #220]	; (8008400 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a37      	ldr	r2, [pc, #220]	; (800840c <HAL_TIM_ConfigClockSource+0x300>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_ConfigClockSource+0x230>
 8008332:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008336:	482a      	ldr	r0, [pc, #168]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008338:	f7fa f889 	bl	800244e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x260>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834c:	d00e      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x260>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008356:	d009      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x260>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008360:	d004      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x260>
 8008362:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008366:	481e      	ldr	r0, [pc, #120]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008368:	f7fa f871 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008374:	d014      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0x294>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0x294>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00c      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0x294>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d008      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0x294>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b0a      	cmp	r3, #10
 8008394:	d004      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0x294>
 8008396:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800839a:	4811      	ldr	r0, [pc, #68]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 800839c:	f7fa f857 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b0f      	cmp	r3, #15
 80083a6:	d904      	bls.n	80083b2 <HAL_TIM_ConfigClockSource+0x2a6>
 80083a8:	f241 41d3 	movw	r1, #5331	; 0x14d3
 80083ac:	480c      	ldr	r0, [pc, #48]	; (80083e0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80083ae:	f7fa f84e 	bl	800244e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6899      	ldr	r1, [r3, #8]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f000 fd9f 	bl	8008f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	609a      	str	r2, [r3, #8]
      break;
 80083de:	e1f7      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
 80083e0:	0800fd48 	.word	0x0800fd48
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40000400 	.word	0x40000400
 80083ec:	40000800 	.word	0x40000800
 80083f0:	40000c00 	.word	0x40000c00
 80083f4:	40001000 	.word	0x40001000
 80083f8:	40001400 	.word	0x40001400
 80083fc:	40010400 	.word	0x40010400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800
 800840c:	40001800 	.word	0x40001800
 8008410:	40001c00 	.word	0x40001c00
 8008414:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a97      	ldr	r2, [pc, #604]	; (800867c <HAL_TIM_ConfigClockSource+0x570>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d01d      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d018      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a93      	ldr	r2, [pc, #588]	; (8008680 <HAL_TIM_ConfigClockSource+0x574>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a92      	ldr	r2, [pc, #584]	; (8008684 <HAL_TIM_ConfigClockSource+0x578>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00e      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a90      	ldr	r2, [pc, #576]	; (8008688 <HAL_TIM_ConfigClockSource+0x57c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a8f      	ldr	r2, [pc, #572]	; (800868c <HAL_TIM_ConfigClockSource+0x580>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d004      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x352>
 8008454:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008458:	488d      	ldr	r0, [pc, #564]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 800845a:	f7f9 fff8 	bl	800244e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x382>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	d00e      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x382>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008478:	d009      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x382>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008482:	d004      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x382>
 8008484:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008488:	4881      	ldr	r0, [pc, #516]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 800848a:	f7f9 ffe0 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008496:	d014      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x3b6>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x3b6>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x3b6>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d008      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x3b6>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b0a      	cmp	r3, #10
 80084b6:	d004      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x3b6>
 80084b8:	f241 41ea 	movw	r1, #5354	; 0x14ea
 80084bc:	4874      	ldr	r0, [pc, #464]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 80084be:	f7f9 ffc6 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d904      	bls.n	80084d4 <HAL_TIM_ConfigClockSource+0x3c8>
 80084ca:	f241 41eb 	movw	r1, #5355	; 0x14eb
 80084ce:	4870      	ldr	r0, [pc, #448]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 80084d0:	f7f9 ffbd 	bl	800244e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	6899      	ldr	r1, [r3, #8]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f000 fd0e 	bl	8008f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084f6:	609a      	str	r2, [r3, #8]
      break;
 80084f8:	e16a      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a5f      	ldr	r2, [pc, #380]	; (800867c <HAL_TIM_ConfigClockSource+0x570>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d027      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850c:	d022      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a5b      	ldr	r2, [pc, #364]	; (8008680 <HAL_TIM_ConfigClockSource+0x574>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d01d      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a59      	ldr	r2, [pc, #356]	; (8008684 <HAL_TIM_ConfigClockSource+0x578>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d018      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a58      	ldr	r2, [pc, #352]	; (8008688 <HAL_TIM_ConfigClockSource+0x57c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a56      	ldr	r2, [pc, #344]	; (800868c <HAL_TIM_ConfigClockSource+0x580>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00e      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a56      	ldr	r2, [pc, #344]	; (8008694 <HAL_TIM_ConfigClockSource+0x588>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d009      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a54      	ldr	r2, [pc, #336]	; (8008698 <HAL_TIM_ConfigClockSource+0x58c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d004      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x448>
 800854a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800854e:	4850      	ldr	r0, [pc, #320]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008550:	f7f9 ff7d 	bl	800244e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d014      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x47c>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x47c>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x47c>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d008      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x47c>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b0a      	cmp	r3, #10
 800857c:	d004      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x47c>
 800857e:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008582:	4843      	ldr	r0, [pc, #268]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008584:	f7f9 ff63 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	2b0f      	cmp	r3, #15
 800858e:	d904      	bls.n	800859a <HAL_TIM_ConfigClockSource+0x48e>
 8008590:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008594:	483e      	ldr	r0, [pc, #248]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008596:	f7f9 ff5a 	bl	800244e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6859      	ldr	r1, [r3, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	461a      	mov	r2, r3
 80085a8:	f000 fc32 	bl	8008e10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2150      	movs	r1, #80	; 0x50
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fc8b 	bl	8008ece <TIM_ITRx_SetConfig>
      break;
 80085b8:	e10a      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2f      	ldr	r2, [pc, #188]	; (800867c <HAL_TIM_ConfigClockSource+0x570>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d027      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085cc:	d022      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2b      	ldr	r2, [pc, #172]	; (8008680 <HAL_TIM_ConfigClockSource+0x574>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01d      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a29      	ldr	r2, [pc, #164]	; (8008684 <HAL_TIM_ConfigClockSource+0x578>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a28      	ldr	r2, [pc, #160]	; (8008688 <HAL_TIM_ConfigClockSource+0x57c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a26      	ldr	r2, [pc, #152]	; (800868c <HAL_TIM_ConfigClockSource+0x580>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a26      	ldr	r2, [pc, #152]	; (8008694 <HAL_TIM_ConfigClockSource+0x588>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a24      	ldr	r2, [pc, #144]	; (8008698 <HAL_TIM_ConfigClockSource+0x58c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0x508>
 800860a:	f241 510a 	movw	r1, #5386	; 0x150a
 800860e:	4820      	ldr	r0, [pc, #128]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008610:	f7f9 ff1d 	bl	800244e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800861c:	d014      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x53c>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d010      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x53c>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x53c>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d008      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x53c>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b0a      	cmp	r3, #10
 800863c:	d004      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0x53c>
 800863e:	f241 510d 	movw	r1, #5389	; 0x150d
 8008642:	4813      	ldr	r0, [pc, #76]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008644:	f7f9 ff03 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	2b0f      	cmp	r3, #15
 800864e:	d904      	bls.n	800865a <HAL_TIM_ConfigClockSource+0x54e>
 8008650:	f241 510e 	movw	r1, #5390	; 0x150e
 8008654:	480e      	ldr	r0, [pc, #56]	; (8008690 <HAL_TIM_ConfigClockSource+0x584>)
 8008656:	f7f9 fefa 	bl	800244e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6859      	ldr	r1, [r3, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	461a      	mov	r2, r3
 8008668:	f000 fc01 	bl	8008e6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2160      	movs	r1, #96	; 0x60
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fc2b 	bl	8008ece <TIM_ITRx_SetConfig>
      break;
 8008678:	e0aa      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
 800867a:	bf00      	nop
 800867c:	40010000 	.word	0x40010000
 8008680:	40000400 	.word	0x40000400
 8008684:	40000800 	.word	0x40000800
 8008688:	40000c00 	.word	0x40000c00
 800868c:	40010400 	.word	0x40010400
 8008690:	0800fd48 	.word	0x0800fd48
 8008694:	40014000 	.word	0x40014000
 8008698:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a52      	ldr	r2, [pc, #328]	; (80087ec <HAL_TIM_ConfigClockSource+0x6e0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d027      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d022      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a4e      	ldr	r2, [pc, #312]	; (80087f0 <HAL_TIM_ConfigClockSource+0x6e4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01d      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a4d      	ldr	r2, [pc, #308]	; (80087f4 <HAL_TIM_ConfigClockSource+0x6e8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d018      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a4b      	ldr	r2, [pc, #300]	; (80087f8 <HAL_TIM_ConfigClockSource+0x6ec>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d013      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a4a      	ldr	r2, [pc, #296]	; (80087fc <HAL_TIM_ConfigClockSource+0x6f0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00e      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a48      	ldr	r2, [pc, #288]	; (8008800 <HAL_TIM_ConfigClockSource+0x6f4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d009      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a47      	ldr	r2, [pc, #284]	; (8008804 <HAL_TIM_ConfigClockSource+0x6f8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d004      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x5ea>
 80086ec:	f241 511a 	movw	r1, #5402	; 0x151a
 80086f0:	4845      	ldr	r0, [pc, #276]	; (8008808 <HAL_TIM_ConfigClockSource+0x6fc>)
 80086f2:	f7f9 feac 	bl	800244e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fe:	d014      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x61e>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d010      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x61e>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x61e>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d008      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x61e>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b0a      	cmp	r3, #10
 800871e:	d004      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x61e>
 8008720:	f241 511d 	movw	r1, #5405	; 0x151d
 8008724:	4838      	ldr	r0, [pc, #224]	; (8008808 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008726:	f7f9 fe92 	bl	800244e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b0f      	cmp	r3, #15
 8008730:	d904      	bls.n	800873c <HAL_TIM_ConfigClockSource+0x630>
 8008732:	f241 511e 	movw	r1, #5406	; 0x151e
 8008736:	4834      	ldr	r0, [pc, #208]	; (8008808 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008738:	f7f9 fe89 	bl	800244e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	6859      	ldr	r1, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	461a      	mov	r2, r3
 800874a:	f000 fb61 	bl	8008e10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2140      	movs	r1, #64	; 0x40
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fbba 	bl	8008ece <TIM_ITRx_SetConfig>
      break;
 800875a:	e039      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a22      	ldr	r2, [pc, #136]	; (80087ec <HAL_TIM_ConfigClockSource+0x6e0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d027      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876e:	d022      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1e      	ldr	r2, [pc, #120]	; (80087f0 <HAL_TIM_ConfigClockSource+0x6e4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01d      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d018      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1b      	ldr	r2, [pc, #108]	; (80087f8 <HAL_TIM_ConfigClockSource+0x6ec>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <HAL_TIM_ConfigClockSource+0x6f0>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00e      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <HAL_TIM_ConfigClockSource+0x6f4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a17      	ldr	r2, [pc, #92]	; (8008804 <HAL_TIM_ConfigClockSource+0x6f8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x6aa>
 80087ac:	f241 512d 	movw	r1, #5421	; 0x152d
 80087b0:	4815      	ldr	r0, [pc, #84]	; (8008808 <HAL_TIM_ConfigClockSource+0x6fc>)
 80087b2:	f7f9 fe4c 	bl	800244e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4619      	mov	r1, r3
 80087c0:	4610      	mov	r0, r2
 80087c2:	f000 fb84 	bl	8008ece <TIM_ITRx_SetConfig>
      break;
 80087c6:	e003      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	e000      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 80087ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40010400 	.word	0x40010400
 8008800:	40014000 	.word	0x40014000
 8008804:	40001800 	.word	0x40001800
 8008808:	0800fd48 	.word	0x0800fd48

0800880c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a40      	ldr	r2, [pc, #256]	; (8008970 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887a:	d00f      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a3d      	ldr	r2, [pc, #244]	; (8008974 <TIM_Base_SetConfig+0x118>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a3c      	ldr	r2, [pc, #240]	; (8008978 <TIM_Base_SetConfig+0x11c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a3b      	ldr	r2, [pc, #236]	; (800897c <TIM_Base_SetConfig+0x120>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a3a      	ldr	r2, [pc, #232]	; (8008980 <TIM_Base_SetConfig+0x124>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d108      	bne.n	80088ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a2f      	ldr	r2, [pc, #188]	; (8008970 <TIM_Base_SetConfig+0x114>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d02b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d027      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a2c      	ldr	r2, [pc, #176]	; (8008974 <TIM_Base_SetConfig+0x118>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d023      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a2b      	ldr	r2, [pc, #172]	; (8008978 <TIM_Base_SetConfig+0x11c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d01f      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2a      	ldr	r2, [pc, #168]	; (800897c <TIM_Base_SetConfig+0x120>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a29      	ldr	r2, [pc, #164]	; (8008980 <TIM_Base_SetConfig+0x124>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d017      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a28      	ldr	r2, [pc, #160]	; (8008984 <TIM_Base_SetConfig+0x128>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a27      	ldr	r2, [pc, #156]	; (8008988 <TIM_Base_SetConfig+0x12c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00f      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a26      	ldr	r2, [pc, #152]	; (800898c <TIM_Base_SetConfig+0x130>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <TIM_Base_SetConfig+0x134>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d007      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a24      	ldr	r2, [pc, #144]	; (8008994 <TIM_Base_SetConfig+0x138>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a23      	ldr	r2, [pc, #140]	; (8008998 <TIM_Base_SetConfig+0x13c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d108      	bne.n	8008920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <TIM_Base_SetConfig+0x114>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_Base_SetConfig+0xf8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a0c      	ldr	r2, [pc, #48]	; (8008980 <TIM_Base_SetConfig+0x124>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d103      	bne.n	800895c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	615a      	str	r2, [r3, #20]
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	40010000 	.word	0x40010000
 8008974:	40000400 	.word	0x40000400
 8008978:	40000800 	.word	0x40000800
 800897c:	40000c00 	.word	0x40000c00
 8008980:	40010400 	.word	0x40010400
 8008984:	40014000 	.word	0x40014000
 8008988:	40014400 	.word	0x40014400
 800898c:	40014800 	.word	0x40014800
 8008990:	40001800 	.word	0x40001800
 8008994:	40001c00 	.word	0x40001c00
 8008998:	40002000 	.word	0x40002000

0800899c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0201 	bic.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f023 0302 	bic.w	r3, r3, #2
 80089e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a34      	ldr	r2, [pc, #208]	; (8008ac4 <TIM_OC1_SetConfig+0x128>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_OC1_SetConfig+0x64>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a33      	ldr	r2, [pc, #204]	; (8008ac8 <TIM_OC1_SetConfig+0x12c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d119      	bne.n	8008a34 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d008      	beq.n	8008a1a <TIM_OC1_SetConfig+0x7e>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d004      	beq.n	8008a1a <TIM_OC1_SetConfig+0x7e>
 8008a10:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8008a14:	482d      	ldr	r0, [pc, #180]	; (8008acc <TIM_OC1_SetConfig+0x130>)
 8008a16:	f7f9 fd1a 	bl	800244e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f023 0308 	bic.w	r3, r3, #8
 8008a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0304 	bic.w	r3, r3, #4
 8008a32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a23      	ldr	r2, [pc, #140]	; (8008ac4 <TIM_OC1_SetConfig+0x128>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC1_SetConfig+0xa8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <TIM_OC1_SetConfig+0x12c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d12d      	bne.n	8008aa0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4c:	d008      	beq.n	8008a60 <TIM_OC1_SetConfig+0xc4>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <TIM_OC1_SetConfig+0xc4>
 8008a56:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8008a5a:	481c      	ldr	r0, [pc, #112]	; (8008acc <TIM_OC1_SetConfig+0x130>)
 8008a5c:	f7f9 fcf7 	bl	800244e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a68:	d008      	beq.n	8008a7c <TIM_OC1_SetConfig+0xe0>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d004      	beq.n	8008a7c <TIM_OC1_SetConfig+0xe0>
 8008a72:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8008a76:	4815      	ldr	r0, [pc, #84]	; (8008acc <TIM_OC1_SetConfig+0x130>)
 8008a78:	f7f9 fce9 	bl	800244e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	621a      	str	r2, [r3, #32]
}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	0800fd48 	.word	0x0800fd48

08008ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f023 0210 	bic.w	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0320 	bic.w	r3, r3, #32
 8008b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a35      	ldr	r2, [pc, #212]	; (8008c00 <TIM_OC2_SetConfig+0x130>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_OC2_SetConfig+0x68>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a34      	ldr	r2, [pc, #208]	; (8008c04 <TIM_OC2_SetConfig+0x134>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d11a      	bne.n	8008b6e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <TIM_OC2_SetConfig+0x82>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d004      	beq.n	8008b52 <TIM_OC2_SetConfig+0x82>
 8008b48:	f641 3116 	movw	r1, #6934	; 0x1b16
 8008b4c:	482e      	ldr	r0, [pc, #184]	; (8008c08 <TIM_OC2_SetConfig+0x138>)
 8008b4e:	f7f9 fc7e 	bl	800244e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <TIM_OC2_SetConfig+0x130>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d003      	beq.n	8008b7e <TIM_OC2_SetConfig+0xae>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <TIM_OC2_SetConfig+0x134>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d12f      	bne.n	8008bde <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b86:	d008      	beq.n	8008b9a <TIM_OC2_SetConfig+0xca>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d004      	beq.n	8008b9a <TIM_OC2_SetConfig+0xca>
 8008b90:	f641 3124 	movw	r1, #6948	; 0x1b24
 8008b94:	481c      	ldr	r0, [pc, #112]	; (8008c08 <TIM_OC2_SetConfig+0x138>)
 8008b96:	f7f9 fc5a 	bl	800244e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba2:	d008      	beq.n	8008bb6 <TIM_OC2_SetConfig+0xe6>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <TIM_OC2_SetConfig+0xe6>
 8008bac:	f641 3125 	movw	r1, #6949	; 0x1b25
 8008bb0:	4815      	ldr	r0, [pc, #84]	; (8008c08 <TIM_OC2_SetConfig+0x138>)
 8008bb2:	f7f9 fc4c 	bl	800244e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	621a      	str	r2, [r3, #32]
}
 8008bf8:	bf00      	nop
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40010400 	.word	0x40010400
 8008c08:	0800fd48 	.word	0x0800fd48

08008c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a35      	ldr	r2, [pc, #212]	; (8008d3c <TIM_OC3_SetConfig+0x130>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_OC3_SetConfig+0x66>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a34      	ldr	r2, [pc, #208]	; (8008d40 <TIM_OC3_SetConfig+0x134>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d11a      	bne.n	8008ca8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <TIM_OC3_SetConfig+0x80>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d004      	beq.n	8008c8c <TIM_OC3_SetConfig+0x80>
 8008c82:	f641 3161 	movw	r1, #7009	; 0x1b61
 8008c86:	482f      	ldr	r0, [pc, #188]	; (8008d44 <TIM_OC3_SetConfig+0x138>)
 8008c88:	f7f9 fbe1 	bl	800244e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	021b      	lsls	r3, r3, #8
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a24      	ldr	r2, [pc, #144]	; (8008d3c <TIM_OC3_SetConfig+0x130>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_OC3_SetConfig+0xac>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a23      	ldr	r2, [pc, #140]	; (8008d40 <TIM_OC3_SetConfig+0x134>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d12f      	bne.n	8008d18 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc0:	d008      	beq.n	8008cd4 <TIM_OC3_SetConfig+0xc8>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <TIM_OC3_SetConfig+0xc8>
 8008cca:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8008cce:	481d      	ldr	r0, [pc, #116]	; (8008d44 <TIM_OC3_SetConfig+0x138>)
 8008cd0:	f7f9 fbbd 	bl	800244e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cdc:	d008      	beq.n	8008cf0 <TIM_OC3_SetConfig+0xe4>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <TIM_OC3_SetConfig+0xe4>
 8008ce6:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8008cea:	4816      	ldr	r0, [pc, #88]	; (8008d44 <TIM_OC3_SetConfig+0x138>)
 8008cec:	f7f9 fbaf 	bl	800244e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	bf00      	nop
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400
 8008d44:	0800fd48 	.word	0x0800fd48

08008d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	031b      	lsls	r3, r3, #12
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a18      	ldr	r2, [pc, #96]	; (8008e04 <TIM_OC4_SetConfig+0xbc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_OC4_SetConfig+0x68>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a17      	ldr	r2, [pc, #92]	; (8008e08 <TIM_OC4_SetConfig+0xc0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d117      	bne.n	8008de0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db8:	d008      	beq.n	8008dcc <TIM_OC4_SetConfig+0x84>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <TIM_OC4_SetConfig+0x84>
 8008dc2:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8008dc6:	4811      	ldr	r0, [pc, #68]	; (8008e0c <TIM_OC4_SetConfig+0xc4>)
 8008dc8:	f7f9 fb41 	bl	800244e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	019b      	lsls	r3, r3, #6
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010400 	.word	0x40010400
 8008e0c:	0800fd48 	.word	0x0800fd48

08008e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	f023 0201 	bic.w	r2, r3, #1
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f023 030a 	bic.w	r3, r3, #10
 8008e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	621a      	str	r2, [r3, #32]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	f023 0210 	bic.w	r2, r3, #16
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	031b      	lsls	r3, r3, #12
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	f043 0307 	orr.w	r3, r3, #7
 8008ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	609a      	str	r2, [r3, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	021a      	lsls	r2, r3, #8
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	609a      	str	r2, [r3, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	371c      	adds	r7, #28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a32      	ldr	r2, [pc, #200]	; (800901c <TIM_CCxChannelCmd+0xd8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d030      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5e:	d02c      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a2f      	ldr	r2, [pc, #188]	; (8009020 <TIM_CCxChannelCmd+0xdc>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d028      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <TIM_CCxChannelCmd+0xe0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d024      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a2d      	ldr	r2, [pc, #180]	; (8009028 <TIM_CCxChannelCmd+0xe4>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d020      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	; (800902c <TIM_CCxChannelCmd+0xe8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d01c      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4a2b      	ldr	r2, [pc, #172]	; (8009030 <TIM_CCxChannelCmd+0xec>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d018      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4a2a      	ldr	r2, [pc, #168]	; (8009034 <TIM_CCxChannelCmd+0xf0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d014      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a29      	ldr	r2, [pc, #164]	; (8009038 <TIM_CCxChannelCmd+0xf4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d010      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4a28      	ldr	r2, [pc, #160]	; (800903c <TIM_CCxChannelCmd+0xf8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00c      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4a27      	ldr	r2, [pc, #156]	; (8009040 <TIM_CCxChannelCmd+0xfc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d008      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4a26      	ldr	r2, [pc, #152]	; (8009044 <TIM_CCxChannelCmd+0x100>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d004      	beq.n	8008fba <TIM_CCxChannelCmd+0x76>
 8008fb0:	f641 5198 	movw	r1, #7576	; 0x1d98
 8008fb4:	4824      	ldr	r0, [pc, #144]	; (8009048 <TIM_CCxChannelCmd+0x104>)
 8008fb6:	f7f9 fa4a 	bl	800244e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d010      	beq.n	8008fe2 <TIM_CCxChannelCmd+0x9e>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d00d      	beq.n	8008fe2 <TIM_CCxChannelCmd+0x9e>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d00a      	beq.n	8008fe2 <TIM_CCxChannelCmd+0x9e>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b0c      	cmp	r3, #12
 8008fd0:	d007      	beq.n	8008fe2 <TIM_CCxChannelCmd+0x9e>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b3c      	cmp	r3, #60	; 0x3c
 8008fd6:	d004      	beq.n	8008fe2 <TIM_CCxChannelCmd+0x9e>
 8008fd8:	f641 5199 	movw	r1, #7577	; 0x1d99
 8008fdc:	481a      	ldr	r0, [pc, #104]	; (8009048 <TIM_CCxChannelCmd+0x104>)
 8008fde:	f7f9 fa36 	bl	800244e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	2201      	movs	r2, #1
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a1a      	ldr	r2, [r3, #32]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a1a      	ldr	r2, [r3, #32]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	431a      	orrs	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]
}
 8009014:	bf00      	nop
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40010000 	.word	0x40010000
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40010400 	.word	0x40010400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800
 800903c:	40001800 	.word	0x40001800
 8009040:	40001c00 	.word	0x40001c00
 8009044:	40002000 	.word	0x40002000
 8009048:	0800fd48 	.word	0x0800fd48

0800904c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a61      	ldr	r2, [pc, #388]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d027      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009068:	d022      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a5d      	ldr	r2, [pc, #372]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d01d      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a5b      	ldr	r2, [pc, #364]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d018      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a5a      	ldr	r2, [pc, #360]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d013      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a58      	ldr	r2, [pc, #352]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00e      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a57      	ldr	r2, [pc, #348]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d009      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a55      	ldr	r2, [pc, #340]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090a6:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80090aa:	4854      	ldr	r0, [pc, #336]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80090ac:	f7f9 f9cf 	bl	800244e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d020      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b10      	cmp	r3, #16
 80090be:	d01c      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d018      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b30      	cmp	r3, #48	; 0x30
 80090ce:	d014      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b40      	cmp	r3, #64	; 0x40
 80090d6:	d010      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b50      	cmp	r3, #80	; 0x50
 80090de:	d00c      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b60      	cmp	r3, #96	; 0x60
 80090e6:	d008      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b70      	cmp	r3, #112	; 0x70
 80090ee:	d004      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80090f0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80090f4:	4841      	ldr	r0, [pc, #260]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80090f6:	f7f9 f9aa 	bl	800244e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d008      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800910a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800910e:	483b      	ldr	r0, [pc, #236]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009110:	f7f9 f99d 	bl	800244e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800911e:	2302      	movs	r3, #2
 8009120:	e05a      	b.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1f      	ldr	r2, [pc, #124]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d022      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916e:	d01d      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d018      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a1a      	ldr	r2, [pc, #104]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d013      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00e      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a19      	ldr	r2, [pc, #100]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d009      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a18      	ldr	r2, [pc, #96]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a17      	ldr	r2, [pc, #92]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d10c      	bne.n	80091c6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40001000 	.word	0x40001000
 80091f4:	40001400 	.word	0x40001400
 80091f8:	40010400 	.word	0x40010400
 80091fc:	0800fd80 	.word	0x0800fd80
 8009200:	40014000 	.word	0x40014000
 8009204:	40001800 	.word	0x40001800

08009208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a5e      	ldr	r2, [pc, #376]	; (8009394 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a5c      	ldr	r2, [pc, #368]	; (8009398 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800922a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800922e:	485b      	ldr	r0, [pc, #364]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009230:	f7f9 f90d 	bl	800244e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800923c:	d008      	beq.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009246:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800924a:	4854      	ldr	r0, [pc, #336]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800924c:	f7f9 f8ff 	bl	800244e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009258:	d008      	beq.n	800926c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009262:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009266:	484d      	ldr	r0, [pc, #308]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009268:	f7f9 f8f1 	bl	800244e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d013      	beq.n	800929c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927c:	d00e      	beq.n	800929c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009286:	d009      	beq.n	800929c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009290:	d004      	beq.n	800929c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009292:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009296:	4841      	ldr	r0, [pc, #260]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009298:	f7f9 f8d9 	bl	800244e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2bff      	cmp	r3, #255	; 0xff
 80092a2:	d904      	bls.n	80092ae <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80092a4:	f240 71f2 	movw	r1, #2034	; 0x7f2
 80092a8:	483c      	ldr	r0, [pc, #240]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092aa:	f7f9 f8d0 	bl	800244e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b6:	d008      	beq.n	80092ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80092c0:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80092c4:	4835      	ldr	r0, [pc, #212]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092c6:	f7f9 f8c2 	bl	800244e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092da:	d004      	beq.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80092dc:	f240 71f4 	movw	r1, #2036	; 0x7f4
 80092e0:	482e      	ldr	r0, [pc, #184]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092e2:	f7f9 f8b4 	bl	800244e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092ee:	d008      	beq.n	8009302 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80092f8:	f240 71f5 	movw	r1, #2037	; 0x7f5
 80092fc:	4827      	ldr	r0, [pc, #156]	; (800939c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092fe:	f7f9 f8a6 	bl	800244e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800930c:	2302      	movs	r3, #2
 800930e:	e03d      	b.n	800938c <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	4313      	orrs	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4313      	orrs	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	4313      	orrs	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400
 800939c:	0800fd80 	.word	0x0800fd80

080093a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e0be      	b.n	8009558 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03b      	beq.n	800945a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a5e      	ldr	r2, [pc, #376]	; (8009560 <HAL_UART_Init+0x198>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d01d      	beq.n	8009428 <HAL_UART_Init+0x60>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a5c      	ldr	r2, [pc, #368]	; (8009564 <HAL_UART_Init+0x19c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d018      	beq.n	8009428 <HAL_UART_Init+0x60>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a5b      	ldr	r2, [pc, #364]	; (8009568 <HAL_UART_Init+0x1a0>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d013      	beq.n	8009428 <HAL_UART_Init+0x60>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a59      	ldr	r2, [pc, #356]	; (800956c <HAL_UART_Init+0x1a4>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00e      	beq.n	8009428 <HAL_UART_Init+0x60>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a58      	ldr	r2, [pc, #352]	; (8009570 <HAL_UART_Init+0x1a8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d009      	beq.n	8009428 <HAL_UART_Init+0x60>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a56      	ldr	r2, [pc, #344]	; (8009574 <HAL_UART_Init+0x1ac>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d004      	beq.n	8009428 <HAL_UART_Init+0x60>
 800941e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009422:	4855      	ldr	r0, [pc, #340]	; (8009578 <HAL_UART_Init+0x1b0>)
 8009424:	f7f9 f813 	bl	800244e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d037      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009438:	d032      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009442:	d02d      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800944c:	d028      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 800944e:	f240 1173 	movw	r1, #371	; 0x173
 8009452:	4849      	ldr	r0, [pc, #292]	; (8009578 <HAL_UART_Init+0x1b0>)
 8009454:	f7f8 fffb 	bl	800244e <assert_failed>
 8009458:	e022      	b.n	80094a0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a40      	ldr	r2, [pc, #256]	; (8009560 <HAL_UART_Init+0x198>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a3e      	ldr	r2, [pc, #248]	; (8009564 <HAL_UART_Init+0x19c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a3d      	ldr	r2, [pc, #244]	; (8009568 <HAL_UART_Init+0x1a0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a3b      	ldr	r2, [pc, #236]	; (800956c <HAL_UART_Init+0x1a4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a3a      	ldr	r2, [pc, #232]	; (8009570 <HAL_UART_Init+0x1a8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a38      	ldr	r2, [pc, #224]	; (8009574 <HAL_UART_Init+0x1ac>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_UART_Init+0xd8>
 8009496:	f240 1177 	movw	r1, #375	; 0x177
 800949a:	4837      	ldr	r0, [pc, #220]	; (8009578 <HAL_UART_Init+0x1b0>)
 800949c:	f7f8 ffd7 	bl	800244e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d009      	beq.n	80094bc <HAL_UART_Init+0xf4>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b0:	d004      	beq.n	80094bc <HAL_UART_Init+0xf4>
 80094b2:	f240 1179 	movw	r1, #377	; 0x179
 80094b6:	4830      	ldr	r0, [pc, #192]	; (8009578 <HAL_UART_Init+0x1b0>)
 80094b8:	f7f8 ffc9 	bl	800244e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <HAL_UART_Init+0x110>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094cc:	d004      	beq.n	80094d8 <HAL_UART_Init+0x110>
 80094ce:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80094d2:	4829      	ldr	r0, [pc, #164]	; (8009578 <HAL_UART_Init+0x1b0>)
 80094d4:	f7f8 ffbb 	bl	800244e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f9 fb83 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	; 0x24
 80094f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009508:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fc7e 	bl	8009e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800951e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800952e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800953e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40011000 	.word	0x40011000
 8009564:	40004400 	.word	0x40004400
 8009568:	40004800 	.word	0x40004800
 800956c:	40004c00 	.word	0x40004c00
 8009570:	40005000 	.word	0x40005000
 8009574:	40011400 	.word	0x40011400
 8009578:	0800fdbc 	.word	0x0800fdbc

0800957c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b0ba      	sub	sp, #232	; 0xe8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10f      	bne.n	80095e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <HAL_UART_IRQHandler+0x66>
 80095ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d2:	f003 0320 	and.w	r3, r3, #32
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb5b 	bl	8009c96 <UART_Receive_IT>
      return;
 80095e0:	e256      	b.n	8009a90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 80de 	beq.w	80097a8 <HAL_UART_IRQHandler+0x22c>
 80095ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 80d1 	beq.w	80097a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00b      	beq.n	800962a <HAL_UART_IRQHandler+0xae>
 8009612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	2b00      	cmp	r3, #0
 800961c:	d005      	beq.n	800962a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	f043 0201 	orr.w	r2, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800962a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <HAL_UART_IRQHandler+0xd2>
 8009636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	d005      	beq.n	800964e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	f043 0202 	orr.w	r2, r3, #2
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800964e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <HAL_UART_IRQHandler+0xf6>
 800965a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	f043 0204 	orr.w	r2, r3, #4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009676:	f003 0308 	and.w	r3, r3, #8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <HAL_UART_IRQHandler+0x126>
 800967e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800968a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	f043 0208 	orr.w	r2, r3, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 81ed 	beq.w	8009a86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d008      	beq.n	80096ca <HAL_UART_IRQHandler+0x14e>
 80096b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fae6 	bl	8009c96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	bf0c      	ite	eq
 80096d8:	2301      	moveq	r3, #1
 80096da:	2300      	movne	r3, #0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <HAL_UART_IRQHandler+0x17a>
 80096ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d04f      	beq.n	8009796 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f9ee 	bl	8009ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b40      	cmp	r3, #64	; 0x40
 8009708:	d141      	bne.n	800978e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3314      	adds	r3, #20
 8009710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3314      	adds	r3, #20
 8009732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800973a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800974e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1d9      	bne.n	800970a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	d013      	beq.n	8009786 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	4a7d      	ldr	r2, [pc, #500]	; (8009958 <HAL_UART_IRQHandler+0x3dc>)
 8009764:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	4618      	mov	r0, r3
 800976c:	f7fa f824 	bl	80037b8 <HAL_DMA_Abort_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d016      	beq.n	80097a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	e00e      	b.n	80097a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f990 	bl	8009aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978c:	e00a      	b.n	80097a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f98c 	bl	8009aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009794:	e006      	b.n	80097a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f988 	bl	8009aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097a2:	e170      	b.n	8009a86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	bf00      	nop
    return;
 80097a6:	e16e      	b.n	8009a86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	f040 814a 	bne.w	8009a46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8143 	beq.w	8009a46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 813c 	beq.w	8009a46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	f040 80b4 	bne.w	800995c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009800:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8140 	beq.w	8009a8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800980e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009812:	429a      	cmp	r2, r3
 8009814:	f080 8139 	bcs.w	8009a8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800981e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982a:	f000 8088 	beq.w	800993e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	330c      	adds	r3, #12
 8009834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800984c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	330c      	adds	r3, #12
 8009856:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800985a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800985e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009866:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1d9      	bne.n	800982e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3314      	adds	r3, #20
 8009880:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800988a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800988c:	f023 0301 	bic.w	r3, r3, #1
 8009890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3314      	adds	r3, #20
 800989a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800989e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e1      	bne.n	800987a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3314      	adds	r3, #20
 80098bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3314      	adds	r3, #20
 80098d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e3      	bne.n	80098b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	330c      	adds	r3, #12
 8009902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800990c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800990e:	f023 0310 	bic.w	r3, r3, #16
 8009912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	330c      	adds	r3, #12
 800991c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009920:	65ba      	str	r2, [r7, #88]	; 0x58
 8009922:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800992e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	4618      	mov	r0, r3
 800993a:	f7f9 fecd 	bl	80036d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009946:	b29b      	uxth	r3, r3
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	b29b      	uxth	r3, r3
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f8b6 	bl	8009ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009954:	e099      	b.n	8009a8a <HAL_UART_IRQHandler+0x50e>
 8009956:	bf00      	nop
 8009958:	08009b9f 	.word	0x08009b9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009964:	b29b      	uxth	r3, r3
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 808b 	beq.w	8009a8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 8086 	beq.w	8009a8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	330c      	adds	r3, #12
 8009988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099a6:	647a      	str	r2, [r7, #68]	; 0x44
 80099a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e3      	bne.n	8009982 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3314      	adds	r3, #20
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	623b      	str	r3, [r7, #32]
   return(result);
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f023 0301 	bic.w	r3, r3, #1
 80099d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3314      	adds	r3, #20
 80099da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099de:	633a      	str	r2, [r7, #48]	; 0x30
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e3      	bne.n	80099ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330c      	adds	r3, #12
 8009a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 0310 	bic.w	r3, r3, #16
 8009a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	330c      	adds	r3, #12
 8009a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a24:	61fa      	str	r2, [r7, #28]
 8009a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	69b9      	ldr	r1, [r7, #24]
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	617b      	str	r3, [r7, #20]
   return(result);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e3      	bne.n	8009a00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f83e 	bl	8009ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a44:	e023      	b.n	8009a8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <HAL_UART_IRQHandler+0x4ea>
 8009a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f8b1 	bl	8009bc6 <UART_Transmit_IT>
    return;
 8009a64:	e014      	b.n	8009a90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00e      	beq.n	8009a90 <HAL_UART_IRQHandler+0x514>
 8009a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d008      	beq.n	8009a90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8f1 	bl	8009c66 <UART_EndTransmit_IT>
    return;
 8009a84:	e004      	b.n	8009a90 <HAL_UART_IRQHandler+0x514>
    return;
 8009a86:	bf00      	nop
 8009a88:	e002      	b.n	8009a90 <HAL_UART_IRQHandler+0x514>
      return;
 8009a8a:	bf00      	nop
 8009a8c:	e000      	b.n	8009a90 <HAL_UART_IRQHandler+0x514>
      return;
 8009a8e:	bf00      	nop
  }
}
 8009a90:	37e8      	adds	r7, #232	; 0xe8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop

08009a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b095      	sub	sp, #84	; 0x54
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b00:	643a      	str	r2, [r7, #64]	; 0x40
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e5      	bne.n	8009ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3314      	adds	r3, #20
 8009b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f023 0301 	bic.w	r3, r3, #1
 8009b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3314      	adds	r3, #20
 8009b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e5      	bne.n	8009b14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d119      	bne.n	8009b84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	330c      	adds	r3, #12
 8009b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	e853 3f00 	ldrex	r3, [r3]
 8009b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f023 0310 	bic.w	r3, r3, #16
 8009b66:	647b      	str	r3, [r7, #68]	; 0x44
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b70:	61ba      	str	r2, [r7, #24]
 8009b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6979      	ldr	r1, [r7, #20]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e5      	bne.n	8009b50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b92:	bf00      	nop
 8009b94:	3754      	adds	r7, #84	; 0x54
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f7ff ff77 	bl	8009aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bbe:	bf00      	nop
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b085      	sub	sp, #20
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b21      	cmp	r3, #33	; 0x21
 8009bd8:	d13e      	bne.n	8009c58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be2:	d114      	bne.n	8009c0e <UART_Transmit_IT+0x48>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d110      	bne.n	8009c0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	1c9a      	adds	r2, r3, #2
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	621a      	str	r2, [r3, #32]
 8009c0c:	e008      	b.n	8009c20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	1c59      	adds	r1, r3, #1
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	6211      	str	r1, [r2, #32]
 8009c18:	781a      	ldrb	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10f      	bne.n	8009c54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	e000      	b.n	8009c5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c58:	2302      	movs	r3, #2
  }
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff ff06 	bl	8009a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b08c      	sub	sp, #48	; 0x30
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b22      	cmp	r3, #34	; 0x22
 8009ca8:	f040 80ab 	bne.w	8009e02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb4:	d117      	bne.n	8009ce6 <UART_Receive_IT+0x50>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d113      	bne.n	8009ce6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cde:	1c9a      	adds	r2, r3, #2
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8009ce4:	e026      	b.n	8009d34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cec:	2300      	movs	r3, #0
 8009cee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf8:	d007      	beq.n	8009d0a <UART_Receive_IT+0x74>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <UART_Receive_IT+0x82>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e008      	b.n	8009d2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	4619      	mov	r1, r3
 8009d42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d15a      	bne.n	8009dfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f022 0220 	bic.w	r2, r2, #32
 8009d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0201 	bic.w	r2, r2, #1
 8009d76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d135      	bne.n	8009df4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f023 0310 	bic.w	r3, r3, #16
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	330c      	adds	r3, #12
 8009dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dae:	623a      	str	r2, [r7, #32]
 8009db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	69f9      	ldr	r1, [r7, #28]
 8009db4:	6a3a      	ldr	r2, [r7, #32]
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e5      	bne.n	8009d8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b10      	cmp	r3, #16
 8009dce:	d10a      	bne.n	8009de6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fe67 	bl	8009ac0 <HAL_UARTEx_RxEventCallback>
 8009df2:	e002      	b.n	8009dfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7f7 f94f 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e002      	b.n	8009e04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e000      	b.n	8009e04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e02:	2302      	movs	r3, #2
  }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3730      	adds	r7, #48	; 0x30
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	b09f      	sub	sp, #124	; 0x7c
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	4b9b      	ldr	r3, [pc, #620]	; (800a088 <UART_SetConfig+0x27c>)
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d904      	bls.n	8009e2a <UART_SetConfig+0x1e>
 8009e20:	f640 6156 	movw	r1, #3670	; 0xe56
 8009e24:	4899      	ldr	r0, [pc, #612]	; (800a08c <UART_SetConfig+0x280>)
 8009e26:	f7f8 fb12 	bl	800244e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <UART_SetConfig+0x3a>
 8009e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e3a:	d004      	beq.n	8009e46 <UART_SetConfig+0x3a>
 8009e3c:	f640 6157 	movw	r1, #3671	; 0xe57
 8009e40:	4892      	ldr	r0, [pc, #584]	; (800a08c <UART_SetConfig+0x280>)
 8009e42:	f7f8 fb04 	bl	800244e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <UART_SetConfig+0x60>
 8009e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e56:	d009      	beq.n	8009e6c <UART_SetConfig+0x60>
 8009e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009e60:	d004      	beq.n	8009e6c <UART_SetConfig+0x60>
 8009e62:	f640 6158 	movw	r1, #3672	; 0xe58
 8009e66:	4889      	ldr	r0, [pc, #548]	; (800a08c <UART_SetConfig+0x280>)
 8009e68:	f7f8 faf1 	bl	800244e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6e:	695a      	ldr	r2, [r3, #20]
 8009e70:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009e74:	4013      	ands	r3, r2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d103      	bne.n	8009e82 <UART_SetConfig+0x76>
 8009e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <UART_SetConfig+0x80>
 8009e82:	f640 6159 	movw	r1, #3673	; 0xe59
 8009e86:	4881      	ldr	r0, [pc, #516]	; (800a08c <UART_SetConfig+0x280>)
 8009e88:	f7f8 fae1 	bl	800244e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e98:	68d9      	ldr	r1, [r3, #12]
 8009e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	ea40 0301 	orr.w	r3, r0, r1
 8009ea2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	431a      	orrs	r2, r3
 8009eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ec6:	f021 010c 	bic.w	r1, r1, #12
 8009eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee0:	6999      	ldr	r1, [r3, #24]
 8009ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	ea40 0301 	orr.w	r3, r0, r1
 8009eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b67      	ldr	r3, [pc, #412]	; (800a090 <UART_SetConfig+0x284>)
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d004      	beq.n	8009f00 <UART_SetConfig+0xf4>
 8009ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b66      	ldr	r3, [pc, #408]	; (800a094 <UART_SetConfig+0x288>)
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d103      	bne.n	8009f08 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f00:	f7fb fc5a 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 8009f04:	6778      	str	r0, [r7, #116]	; 0x74
 8009f06:	e002      	b.n	8009f0e <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f08:	f7fb fc42 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8009f0c:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f16:	f040 80c1 	bne.w	800a09c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	f04f 0500 	mov.w	r5, #0
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	1891      	adds	r1, r2, r2
 8009f28:	6439      	str	r1, [r7, #64]	; 0x40
 8009f2a:	415b      	adcs	r3, r3
 8009f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f32:	1912      	adds	r2, r2, r4
 8009f34:	eb45 0303 	adc.w	r3, r5, r3
 8009f38:	f04f 0000 	mov.w	r0, #0
 8009f3c:	f04f 0100 	mov.w	r1, #0
 8009f40:	00d9      	lsls	r1, r3, #3
 8009f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f46:	00d0      	lsls	r0, r2, #3
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	1911      	adds	r1, r2, r4
 8009f4e:	6639      	str	r1, [r7, #96]	; 0x60
 8009f50:	416b      	adcs	r3, r5
 8009f52:	667b      	str	r3, [r7, #100]	; 0x64
 8009f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	1891      	adds	r1, r2, r2
 8009f60:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f62:	415b      	adcs	r3, r3
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f6a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009f6e:	f7f6 fd37 	bl	80009e0 <__aeabi_uldivmod>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4b48      	ldr	r3, [pc, #288]	; (800a098 <UART_SetConfig+0x28c>)
 8009f78:	fba3 2302 	umull	r2, r3, r3, r2
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	011e      	lsls	r6, r3, #4
 8009f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f82:	461c      	mov	r4, r3
 8009f84:	f04f 0500 	mov.w	r5, #0
 8009f88:	4622      	mov	r2, r4
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	1891      	adds	r1, r2, r2
 8009f8e:	6339      	str	r1, [r7, #48]	; 0x30
 8009f90:	415b      	adcs	r3, r3
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f98:	1912      	adds	r2, r2, r4
 8009f9a:	eb45 0303 	adc.w	r3, r5, r3
 8009f9e:	f04f 0000 	mov.w	r0, #0
 8009fa2:	f04f 0100 	mov.w	r1, #0
 8009fa6:	00d9      	lsls	r1, r3, #3
 8009fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009fac:	00d0      	lsls	r0, r2, #3
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	1911      	adds	r1, r2, r4
 8009fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fb6:	416b      	adcs	r3, r5
 8009fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	1891      	adds	r1, r2, r2
 8009fc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8009fc8:	415b      	adcs	r3, r3
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fd0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009fd4:	f7f6 fd04 	bl	80009e0 <__aeabi_uldivmod>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4b2e      	ldr	r3, [pc, #184]	; (800a098 <UART_SetConfig+0x28c>)
 8009fde:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe2:	095b      	lsrs	r3, r3, #5
 8009fe4:	2164      	movs	r1, #100	; 0x64
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	3332      	adds	r3, #50	; 0x32
 8009ff0:	4a29      	ldr	r2, [pc, #164]	; (800a098 <UART_SetConfig+0x28c>)
 8009ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff6:	095b      	lsrs	r3, r3, #5
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ffe:	441e      	add	r6, r3
 800a000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a002:	4618      	mov	r0, r3
 800a004:	f04f 0100 	mov.w	r1, #0
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	1894      	adds	r4, r2, r2
 800a00e:	623c      	str	r4, [r7, #32]
 800a010:	415b      	adcs	r3, r3
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
 800a014:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a018:	1812      	adds	r2, r2, r0
 800a01a:	eb41 0303 	adc.w	r3, r1, r3
 800a01e:	f04f 0400 	mov.w	r4, #0
 800a022:	f04f 0500 	mov.w	r5, #0
 800a026:	00dd      	lsls	r5, r3, #3
 800a028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a02c:	00d4      	lsls	r4, r2, #3
 800a02e:	4622      	mov	r2, r4
 800a030:	462b      	mov	r3, r5
 800a032:	1814      	adds	r4, r2, r0
 800a034:	653c      	str	r4, [r7, #80]	; 0x50
 800a036:	414b      	adcs	r3, r1
 800a038:	657b      	str	r3, [r7, #84]	; 0x54
 800a03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	461a      	mov	r2, r3
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	1891      	adds	r1, r2, r2
 800a046:	61b9      	str	r1, [r7, #24]
 800a048:	415b      	adcs	r3, r3
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a050:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a054:	f7f6 fcc4 	bl	80009e0 <__aeabi_uldivmod>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <UART_SetConfig+0x28c>)
 800a05e:	fba3 1302 	umull	r1, r3, r3, r2
 800a062:	095b      	lsrs	r3, r3, #5
 800a064:	2164      	movs	r1, #100	; 0x64
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	3332      	adds	r3, #50	; 0x32
 800a070:	4a09      	ldr	r2, [pc, #36]	; (800a098 <UART_SetConfig+0x28c>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	f003 0207 	and.w	r2, r3, #7
 800a07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4432      	add	r2, r6
 800a082:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a084:	e0c4      	b.n	800a210 <UART_SetConfig+0x404>
 800a086:	bf00      	nop
 800a088:	00a037a0 	.word	0x00a037a0
 800a08c:	0800fdbc 	.word	0x0800fdbc
 800a090:	40011000 	.word	0x40011000
 800a094:	40011400 	.word	0x40011400
 800a098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a09c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a09e:	461c      	mov	r4, r3
 800a0a0:	f04f 0500 	mov.w	r5, #0
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	1891      	adds	r1, r2, r2
 800a0aa:	6139      	str	r1, [r7, #16]
 800a0ac:	415b      	adcs	r3, r3
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a0b4:	1912      	adds	r2, r2, r4
 800a0b6:	eb45 0303 	adc.w	r3, r5, r3
 800a0ba:	f04f 0000 	mov.w	r0, #0
 800a0be:	f04f 0100 	mov.w	r1, #0
 800a0c2:	00d9      	lsls	r1, r3, #3
 800a0c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0c8:	00d0      	lsls	r0, r2, #3
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	eb12 0804 	adds.w	r8, r2, r4
 800a0d2:	eb43 0905 	adc.w	r9, r3, r5
 800a0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f04f 0100 	mov.w	r1, #0
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	008b      	lsls	r3, r1, #2
 800a0ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a0ee:	0082      	lsls	r2, r0, #2
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	f7f6 fc74 	bl	80009e0 <__aeabi_uldivmod>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4b47      	ldr	r3, [pc, #284]	; (800a21c <UART_SetConfig+0x410>)
 800a0fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a102:	095b      	lsrs	r3, r3, #5
 800a104:	011e      	lsls	r6, r3, #4
 800a106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a108:	4618      	mov	r0, r3
 800a10a:	f04f 0100 	mov.w	r1, #0
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	1894      	adds	r4, r2, r2
 800a114:	60bc      	str	r4, [r7, #8]
 800a116:	415b      	adcs	r3, r3
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a11e:	1812      	adds	r2, r2, r0
 800a120:	eb41 0303 	adc.w	r3, r1, r3
 800a124:	f04f 0400 	mov.w	r4, #0
 800a128:	f04f 0500 	mov.w	r5, #0
 800a12c:	00dd      	lsls	r5, r3, #3
 800a12e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a132:	00d4      	lsls	r4, r2, #3
 800a134:	4622      	mov	r2, r4
 800a136:	462b      	mov	r3, r5
 800a138:	1814      	adds	r4, r2, r0
 800a13a:	64bc      	str	r4, [r7, #72]	; 0x48
 800a13c:	414b      	adcs	r3, r1
 800a13e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	4618      	mov	r0, r3
 800a146:	f04f 0100 	mov.w	r1, #0
 800a14a:	f04f 0200 	mov.w	r2, #0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	008b      	lsls	r3, r1, #2
 800a154:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a158:	0082      	lsls	r2, r0, #2
 800a15a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a15e:	f7f6 fc3f 	bl	80009e0 <__aeabi_uldivmod>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <UART_SetConfig+0x410>)
 800a168:	fba3 1302 	umull	r1, r3, r3, r2
 800a16c:	095b      	lsrs	r3, r3, #5
 800a16e:	2164      	movs	r1, #100	; 0x64
 800a170:	fb01 f303 	mul.w	r3, r1, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	3332      	adds	r3, #50	; 0x32
 800a17a:	4a28      	ldr	r2, [pc, #160]	; (800a21c <UART_SetConfig+0x410>)
 800a17c:	fba2 2303 	umull	r2, r3, r2, r3
 800a180:	095b      	lsrs	r3, r3, #5
 800a182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a186:	441e      	add	r6, r3
 800a188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a18a:	4618      	mov	r0, r3
 800a18c:	f04f 0100 	mov.w	r1, #0
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	1894      	adds	r4, r2, r2
 800a196:	603c      	str	r4, [r7, #0]
 800a198:	415b      	adcs	r3, r3
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a0:	1812      	adds	r2, r2, r0
 800a1a2:	eb41 0303 	adc.w	r3, r1, r3
 800a1a6:	f04f 0400 	mov.w	r4, #0
 800a1aa:	f04f 0500 	mov.w	r5, #0
 800a1ae:	00dd      	lsls	r5, r3, #3
 800a1b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a1b4:	00d4      	lsls	r4, r2, #3
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	eb12 0a00 	adds.w	sl, r2, r0
 800a1be:	eb43 0b01 	adc.w	fp, r3, r1
 800a1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f04f 0100 	mov.w	r1, #0
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	008b      	lsls	r3, r1, #2
 800a1d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1da:	0082      	lsls	r2, r0, #2
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f6 fbfe 	bl	80009e0 <__aeabi_uldivmod>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <UART_SetConfig+0x410>)
 800a1ea:	fba3 1302 	umull	r1, r3, r3, r2
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	2164      	movs	r1, #100	; 0x64
 800a1f2:	fb01 f303 	mul.w	r3, r1, r3
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	3332      	adds	r3, #50	; 0x32
 800a1fc:	4a07      	ldr	r2, [pc, #28]	; (800a21c <UART_SetConfig+0x410>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4432      	add	r2, r6
 800a20e:	609a      	str	r2, [r3, #8]
}
 800a210:	bf00      	nop
 800a212:	377c      	adds	r7, #124	; 0x7c
 800a214:	46bd      	mov	sp, r7
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	bf00      	nop
 800a21c:	51eb851f 	.word	0x51eb851f

0800a220 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d105      	bne.n	800a240 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a234:	2101      	movs	r1, #1
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 f824 	bl	800b284 <VL53L1_data_init>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]
 800a254:	e012      	b.n	800a27c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d112      	bne.n	800a284 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	b29b      	uxth	r3, r3
 800a262:	2201      	movs	r2, #1
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fbd3 	bl	800aa12 <VL53L1_SetLimitCheckEnable>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461a      	mov	r2, r3
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	4313      	orrs	r3, r2
 800a274:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	3301      	adds	r3, #1
 800a27a:	73bb      	strb	r3, [r7, #14]
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d9e9      	bls.n	800a256 <VL53L1_DataInit+0x36>
 800a282:	e000      	b.n	800a286 <VL53L1_DataInit+0x66>
		else
			break;
 800a284:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a2a6:	2320      	movs	r3, #32
 800a2a8:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7bba      	ldrb	r2, [r7, #14]
 800a2ae:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800a2b0:	2108      	movs	r1, #8
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f8f9 	bl	800a4aa <VL53L1_SetPresetMode>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800a2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800a2dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f004 ffe0 	bl	800f2a6 <VL53L1_poll_for_boot_completion>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800a2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	603a      	str	r2, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	460b      	mov	r3, r1
 800a306:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800a30c:	4a2c      	ldr	r2, [pc, #176]	; (800a3c0 <ComputeDevicePresetMode+0xc8>)
 800a30e:	f107 0310 	add.w	r3, r7, #16
 800a312:	6812      	ldr	r2, [r2, #0]
 800a314:	4611      	mov	r1, r2
 800a316:	8019      	strh	r1, [r3, #0]
 800a318:	3302      	adds	r3, #2
 800a31a:	0c12      	lsrs	r2, r2, #16
 800a31c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800a31e:	4a29      	ldr	r2, [pc, #164]	; (800a3c4 <ComputeDevicePresetMode+0xcc>)
 800a320:	f107 030c 	add.w	r3, r7, #12
 800a324:	6812      	ldr	r2, [r2, #0]
 800a326:	4611      	mov	r1, r2
 800a328:	8019      	strh	r1, [r3, #0]
 800a32a:	3302      	adds	r3, #2
 800a32c:	0c12      	lsrs	r2, r2, #16
 800a32e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800a330:	4a25      	ldr	r2, [pc, #148]	; (800a3c8 <ComputeDevicePresetMode+0xd0>)
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	4611      	mov	r1, r2
 800a33a:	8019      	strh	r1, [r3, #0]
 800a33c:	3302      	adds	r3, #2
 800a33e:	0c12      	lsrs	r2, r2, #16
 800a340:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2201      	movs	r2, #1
 800a346:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800a348:	79bb      	ldrb	r3, [r7, #6]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d002      	beq.n	800a354 <ComputeDevicePresetMode+0x5c>
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d003      	beq.n	800a35a <ComputeDevicePresetMode+0x62>
 800a352:	e005      	b.n	800a360 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	75bb      	strb	r3, [r7, #22]
		break;
 800a358:	e004      	b.n	800a364 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800a35a:	2301      	movs	r3, #1
 800a35c:	75bb      	strb	r3, [r7, #22]
		break;
 800a35e:	e001      	b.n	800a364 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800a360:	2302      	movs	r3, #2
 800a362:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b08      	cmp	r3, #8
 800a368:	d017      	beq.n	800a39a <ComputeDevicePresetMode+0xa2>
 800a36a:	2b08      	cmp	r3, #8
 800a36c:	dc1e      	bgt.n	800a3ac <ComputeDevicePresetMode+0xb4>
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d00a      	beq.n	800a388 <ComputeDevicePresetMode+0x90>
 800a372:	2b04      	cmp	r3, #4
 800a374:	d11a      	bne.n	800a3ac <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800a376:	7dbb      	ldrb	r3, [r7, #22]
 800a378:	f107 0218 	add.w	r2, r7, #24
 800a37c:	4413      	add	r3, r2
 800a37e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	701a      	strb	r2, [r3, #0]
		break;
 800a386:	e013      	b.n	800a3b0 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800a388:	7dbb      	ldrb	r3, [r7, #22]
 800a38a:	f107 0218 	add.w	r2, r7, #24
 800a38e:	4413      	add	r3, r2
 800a390:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	701a      	strb	r2, [r3, #0]
		break;
 800a398:	e00a      	b.n	800a3b0 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800a39a:	7dbb      	ldrb	r3, [r7, #22]
 800a39c:	f107 0218 	add.w	r2, r7, #24
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	701a      	strb	r2, [r3, #0]
		break;
 800a3aa:	e001      	b.n	800a3b0 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a3ac:	23f8      	movs	r3, #248	; 0xf8
 800a3ae:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800a3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	0800fe24 	.word	0x0800fe24
 800a3c4:	0800fe28 	.word	0x0800fe28
 800a3c8:	0800fe2c 	.word	0x0800fe2c

0800a3cc <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800a3cc:	b5b0      	push	{r4, r5, r7, lr}
 800a3ce:	b08e      	sub	sp, #56	; 0x38
 800a3d0:	af04      	add	r7, sp, #16
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	72fb      	strb	r3, [r7, #11]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d002      	beq.n	800a400 <SetPresetMode+0x34>
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d103      	bne.n	800a408 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a406:	e002      	b.n	800a40e <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a408:	2320      	movs	r3, #32
 800a40a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800a40e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800a412:	7ab9      	ldrb	r1, [r7, #10]
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ff6e 	bl	800a2f8 <ComputeDevicePresetMode>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a426:	2b00      	cmp	r3, #0
 800a428:	d112      	bne.n	800a450 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800a42a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800a42e:	f107 001c 	add.w	r0, r7, #28
 800a432:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800a436:	f107 0314 	add.w	r3, r7, #20
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	f107 0318 	add.w	r3, r7, #24
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	4603      	mov	r3, r0
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f001 f9dd 	bl	800b804 <VL53L1_get_preset_mode_timing_cfg>
 800a44a:	4603      	mov	r3, r0
 800a44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800a450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a454:	2b00      	cmp	r3, #0
 800a456:	d112      	bne.n	800a47e <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800a458:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800a45c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a45e:	69fd      	ldr	r5, [r7, #28]
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	9102      	str	r1, [sp, #8]
 800a468:	9201      	str	r2, [sp, #4]
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	462b      	mov	r3, r5
 800a46e:	4622      	mov	r2, r4
 800a470:	4601      	mov	r1, r0
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f001 fa70 	bl	800b958 <VL53L1_set_preset_mode>
 800a478:	4603      	mov	r3, r0
 800a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a482:	2b00      	cmp	r3, #0
 800a484:	d103      	bne.n	800a48e <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a48c:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a48e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a492:	2b00      	cmp	r3, #0
 800a494:	d103      	bne.n	800a49e <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	7afa      	ldrb	r2, [r7, #11]
 800a49a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800a49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3728      	adds	r7, #40	; 0x28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a4aa <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f003 fd2c 	bl	800df1c <VL53L1_low_power_auto_data_init>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800a4c8:	7bba      	ldrb	r2, [r7, #14]
 800a4ca:	78f9      	ldrb	r1, [r7, #3]
 800a4cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7ff ff7b 	bl	800a3cc <SetPresetMode>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800a4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d117      	bne.n	800a512 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d005      	beq.n	800a4f4 <VL53L1_SetPresetMode+0x4a>
 800a4e8:	78fb      	ldrb	r3, [r7, #3]
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d002      	beq.n	800a4f4 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d107      	bne.n	800a504 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a4f4:	f24a 0128 	movw	r1, #41000	; 0xa028
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f891 	bl	800a620 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
 800a502:	e006      	b.n	800a512 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a504:	f248 2135 	movw	r1, #33333	; 0x8235
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f889 	bl	800a620 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800a51a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fa0a 	bl	800a938 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a540:	2300      	movs	r3, #0
 800a542:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a556:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d008      	beq.n	800a570 <VL53L1_SetDistanceMode+0x3c>
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d005      	beq.n	800a570 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d002      	beq.n	800a570 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800a56a:	f06f 0303 	mvn.w	r3, #3
 800a56e:	e052      	b.n	800a616 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800a570:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d107      	bne.n	800a588 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800a578:	f107 0308 	add.w	r3, r7, #8
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 f8e9 	bl	800b756 <VL53L1_get_user_zone>
 800a584:	4603      	mov	r3, r0
 800a586:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a58e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10a      	bne.n	800a5ac <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	f107 0210 	add.w	r2, r7, #16
 800a59e:	f107 010c 	add.w	r1, r7, #12
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f001 f812 	bl	800b5cc <VL53L1_get_timeouts_us>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a5ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800a5b4:	78fa      	ldrb	r2, [r7, #3]
 800a5b6:	7fb9      	ldrb	r1, [r7, #30]
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff ff06 	bl	800a3cc <SetPresetMode>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800a5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a5d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10e      	bne.n	800a5fa <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a5dc:	68f9      	ldr	r1, [r7, #12]
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 ffba 	bl	800b55c <VL53L1_set_timeouts_us>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a5ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a5fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d107      	bne.n	800a612 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800a602:	f107 0308 	add.w	r3, r7, #8
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 f881 	bl	800b710 <VL53L1_set_user_zone>
 800a60e:	4603      	mov	r3, r0
 800a610:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800a612:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08c      	sub	sp, #48	; 0x30
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800a644:	4b64      	ldr	r3, [pc, #400]	; (800a7d8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800a646:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	4a64      	ldr	r2, [pc, #400]	; (800a7dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d902      	bls.n	800a656 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a650:	23fc      	movs	r3, #252	; 0xfc
 800a652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800a656:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d109      	bne.n	800a672 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a65e:	f107 031a 	add.w	r3, r7, #26
 800a662:	461a      	mov	r2, r3
 800a664:	2105      	movs	r1, #5
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa8d 	bl	800ab86 <VL53L1_GetSequenceStepEnable>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a672:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a67a:	f107 0319 	add.w	r3, r7, #25
 800a67e:	461a      	mov	r2, r3
 800a680:	2106      	movs	r1, #6
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fa7f 	bl	800ab86 <VL53L1_GetSequenceStepEnable>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a68e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800a696:	f107 0314 	add.w	r3, r7, #20
 800a69a:	f107 0210 	add.w	r2, r7, #16
 800a69e:	f107 010c 	add.w	r1, r7, #12
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 ff92 	bl	800b5cc <VL53L1_get_timeouts_us>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800a6ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 8081 	bne.w	800a7ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a6be:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800a6c8:	7efb      	ldrb	r3, [r7, #27]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d026      	beq.n	800a71c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	dc43      	bgt.n	800a75a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d00f      	beq.n	800a6f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d13f      	bne.n	800a75a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a6da:	7ebb      	ldrb	r3, [r7, #26]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d002      	beq.n	800a6e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800a6e0:	7e7b      	ldrb	r3, [r7, #25]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d103      	bne.n	800a6ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800a6e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800a6ec:	e038      	b.n	800a760 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800a6ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a6f4:	e034      	b.n	800a760 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a6fc:	7ebb      	ldrb	r3, [r7, #26]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d002      	beq.n	800a708 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800a702:	7e7b      	ldrb	r3, [r7, #25]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d103      	bne.n	800a710 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800a708:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800a70c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a70e:	e002      	b.n	800a716 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800a710:	f245 4360 	movw	r3, #21600	; 0x5460
 800a714:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800a716:	2302      	movs	r3, #2
 800a718:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a71a:	e021      	b.n	800a760 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a722:	23f5      	movs	r3, #245	; 0xf5
 800a724:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	461a      	mov	r2, r3
 800a72c:	f248 0136 	movw	r1, #32822	; 0x8036
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 ff75 	bl	800c620 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	dd07      	ble.n	800a74c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	22f5      	movs	r2, #245	; 0xf5
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	461a      	mov	r2, r3
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	4413      	add	r3, r2
 800a74a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800a754:	2302      	movs	r3, #2
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a758:	e002      	b.n	800a760 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a75a:	23f8      	movs	r3, #248	; 0xf8
 800a75c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	429a      	cmp	r2, r3
 800a766:	d803      	bhi.n	800a770 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800a768:	23fc      	movs	r3, #252	; 0xfc
 800a76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a76e:	e003      	b.n	800a778 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800a776:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800a778:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d11c      	bne.n	800a7ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	429a      	cmp	r2, r3
 800a786:	d203      	bcs.n	800a790 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800a788:	23fc      	movs	r3, #252	; 0xfc
 800a78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a78e:	e00d      	b.n	800a7ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	fbb2 f3f3 	udiv	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800a79a:	68f9      	ldr	r1, [r7, #12]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fedb 	bl	800b55c <VL53L1_set_timeouts_us>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800a7ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800a7ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d103      	bne.n	800a7ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3730      	adds	r7, #48	; 0x30
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	00086470 	.word	0x00086470
 800a7dc:	00989680 	.word	0x00989680

0800a7e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08c      	sub	sp, #48	; 0x30
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800a80e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a812:	2b00      	cmp	r3, #0
 800a814:	d109      	bne.n	800a82a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a816:	f107 031b 	add.w	r3, r7, #27
 800a81a:	461a      	mov	r2, r3
 800a81c:	2105      	movs	r1, #5
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9b1 	bl	800ab86 <VL53L1_GetSequenceStepEnable>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a82a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a832:	f107 031a 	add.w	r3, r7, #26
 800a836:	461a      	mov	r2, r3
 800a838:	2106      	movs	r1, #6
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f9a3 	bl	800ab86 <VL53L1_GetSequenceStepEnable>
 800a840:	4603      	mov	r3, r0
 800a842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a846:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10b      	bne.n	800a866 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800a84e:	f107 0310 	add.w	r3, r7, #16
 800a852:	f107 0214 	add.w	r2, r7, #20
 800a856:	f107 010c 	add.w	r1, r7, #12
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 feb6 	bl	800b5cc <VL53L1_get_timeouts_us>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800a866:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d156      	bne.n	800a91c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800a878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d02a      	beq.n	800a8d6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800a880:	2b08      	cmp	r3, #8
 800a882:	dc47      	bgt.n	800a914 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800a884:	2b03      	cmp	r3, #3
 800a886:	d012      	beq.n	800a8ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d143      	bne.n	800a914 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a88c:	7efb      	ldrb	r3, [r7, #27]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d002      	beq.n	800a898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800a892:	7ebb      	ldrb	r3, [r7, #26]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d105      	bne.n	800a8a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a89e:	3308      	adds	r3, #8
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800a8a2:	e03c      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a8aa:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a8ac:	e037      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a8ae:	7efb      	ldrb	r3, [r7, #27]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d002      	beq.n	800a8ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800a8b4:	7ebb      	ldrb	r3, [r7, #26]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d106      	bne.n	800a8c8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800a8c0:	3334      	adds	r3, #52	; 0x34
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800a8c6:	e02a      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800a8ce:	3330      	adds	r3, #48	; 0x30
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a8d4:	e023      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a8d6:	23f5      	movs	r3, #245	; 0xf5
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f248 0136 	movw	r1, #32822	; 0x8036
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 fe9b 	bl	800c620 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd07      	ble.n	800a900 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	22f5      	movs	r2, #245	; 0xf5
 800a8f4:	fb02 f303 	mul.w	r3, r2, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	4413      	add	r3, r2
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a906:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	4413      	add	r3, r2
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a912:	e004      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a914:	23f8      	movs	r3, #248	; 0xf8
 800a916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a91a:	e000      	b.n	800a91e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800a91c:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800a91e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a92a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a92c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a930:	4618      	mov	r0, r3
 800a932:	3730      	adds	r7, #48	; 0x30
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	019b      	lsls	r3, r3, #6
 800a94e:	4a09      	ldr	r2, [pc, #36]	; (800a974 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800a950:	fba2 2303 	umull	r2, r3, r2, r3
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	4413      	add	r3, r2
 800a95a:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fdad 	bl	800b4be <VL53L1_set_inter_measurement_period_ms>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800a968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	10624dd3 	.word	0x10624dd3

0800a978 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800a986:	f107 0308 	add.w	r3, r7, #8
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fdbf 	bl	800b510 <VL53L1_get_inter_measurement_period_ms>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	019b      	lsls	r3, r3, #6
 800a99c:	4907      	ldr	r1, [pc, #28]	; (800a9bc <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800a99e:	fba1 1303 	umull	r1, r3, r1, r3
 800a9a2:	099b      	lsrs	r3, r3, #6
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800a9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	10624dd3 	.word	0x10624dd3

0800a9c0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a9d2:	897b      	ldrh	r3, [r7, #10]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SetLimitValue+0x1e>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d009      	beq.n	800a9f0 <SetLimitValue+0x30>
 800a9dc:	e011      	b.n	800aa02 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	0b9b      	lsrs	r3, r3, #14
 800a9e2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800a9e4:	8abb      	ldrh	r3, [r7, #20]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f001 f941 	bl	800bc70 <VL53L1_set_lite_sigma_threshold>
		break;
 800a9ee:	e00a      	b.n	800aa06 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800a9f6:	8abb      	ldrh	r3, [r7, #20]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f001 f964 	bl	800bcc8 <VL53L1_set_lite_min_count_rate>
		break;
 800aa00:	e001      	b.n	800aa06 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aa02:	23fc      	movs	r3, #252	; 0xfc
 800aa04:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	807b      	strh	r3, [r7, #2]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aa2a:	887b      	ldrh	r3, [r7, #2]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d902      	bls.n	800aa36 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aa30:	23fc      	movs	r3, #252	; 0xfc
 800aa32:	73fb      	strb	r3, [r7, #15]
 800aa34:	e014      	b.n	800aa60 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800aa36:	787b      	ldrb	r3, [r7, #1]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d102      	bne.n	800aa42 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60bb      	str	r3, [r7, #8]
 800aa40:	e006      	b.n	800aa50 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aa42:	887b      	ldrh	r3, [r7, #2]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	33e0      	adds	r3, #224	; 0xe0
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800aa50:	887b      	ldrh	r3, [r7, #2]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff ffb2 	bl	800a9c0 <SetLimitValue>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800aa60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10c      	bne.n	800aa82 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800aa68:	787b      	ldrb	r3, [r7, #1]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bf14      	ite	ne
 800aa6e:	2301      	movne	r3, #1
 800aa70:	2300      	moveq	r3, #0
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	887b      	ldrh	r3, [r7, #2]
 800aa76:	4611      	mov	r1, r2
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	460a      	mov	r2, r1
 800aa7e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800aa82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b087      	sub	sp, #28
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	460b      	mov	r3, r1
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aaa0:	897b      	ldrh	r3, [r7, #10]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d905      	bls.n	800aab2 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aaa6:	23fc      	movs	r3, #252	; 0xfc
 800aaa8:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e008      	b.n	800aac4 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800aab2:	897b      	ldrh	r3, [r7, #10]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800aabc:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7dba      	ldrb	r2, [r7, #22]
 800aac2:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800aac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	460b      	mov	r3, r1
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800aaea:	897b      	ldrh	r3, [r7, #10]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <VL53L1_GetLimitCheckValue+0x22>
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d00c      	beq.n	800ab0e <VL53L1_GetLimitCheckValue+0x3a>
 800aaf4:	e017      	b.n	800ab26 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800aaf6:	f107 0314 	add.w	r3, r7, #20
 800aafa:	4619      	mov	r1, r3
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f001 f8a1 	bl	800bc44 <VL53L1_get_lite_sigma_threshold>
 800ab02:	4603      	mov	r3, r0
 800ab04:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800ab06:	8abb      	ldrh	r3, [r7, #20]
 800ab08:	039b      	lsls	r3, r3, #14
 800ab0a:	61bb      	str	r3, [r7, #24]
		break;
 800ab0c:	e00d      	b.n	800ab2a <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800ab0e:	f107 0316 	add.w	r3, r7, #22
 800ab12:	4619      	mov	r1, r3
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f001 f8c1 	bl	800bc9c <VL53L1_get_lite_min_count_rate>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800ab1e:	8afb      	ldrh	r3, [r7, #22]
 800ab20:	025b      	lsls	r3, r3, #9
 800ab22:	61bb      	str	r3, [r7, #24]
		break;
 800ab24:	e001      	b.n	800ab2a <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ab26:	23fc      	movs	r3, #252	; 0xfc
 800ab28:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ab2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d123      	bne.n	800ab7a <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d110      	bne.n	800ab5a <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800ab38:	897b      	ldrh	r3, [r7, #10]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	33e0      	adds	r3, #224	; 0xe0
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ab4c:	897b      	ldrh	r3, [r7, #10]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800ab58:	e00f      	b.n	800ab7a <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ab60:	897b      	ldrh	r3, [r7, #10]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	33e0      	adds	r3, #224	; 0xe0
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ab6e:	897b      	ldrh	r3, [r7, #10]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800ab7a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b086      	sub	sp, #24
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab94:	2300      	movs	r3, #0
 800ab96:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800ab98:	7afb      	ldrb	r3, [r7, #11]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fd7f 	bl	800b6a2 <VL53L1_get_sequence_config_bit>
 800aba4:	4603      	mov	r3, r0
 800aba6:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800aba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	789b      	ldrb	r3, [r3, #2]
 800abc4:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800abc6:	7dbb      	ldrb	r3, [r7, #22]
 800abc8:	2b40      	cmp	r3, #64	; 0x40
 800abca:	d002      	beq.n	800abd2 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fa6b 	bl	800b0a8 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800abd8:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800abda:	7d7b      	ldrb	r3, [r7, #21]
 800abdc:	2b63      	cmp	r3, #99	; 0x63
 800abde:	dc12      	bgt.n	800ac06 <VL53L1_StartMeasurement+0x52>
 800abe0:	2b62      	cmp	r3, #98	; 0x62
 800abe2:	da0d      	bge.n	800ac00 <VL53L1_StartMeasurement+0x4c>
 800abe4:	2b05      	cmp	r3, #5
 800abe6:	dc0e      	bgt.n	800ac06 <VL53L1_StartMeasurement+0x52>
 800abe8:	2b04      	cmp	r3, #4
 800abea:	da09      	bge.n	800ac00 <VL53L1_StartMeasurement+0x4c>
 800abec:	2b02      	cmp	r3, #2
 800abee:	dc02      	bgt.n	800abf6 <VL53L1_StartMeasurement+0x42>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	da05      	bge.n	800ac00 <VL53L1_StartMeasurement+0x4c>
 800abf4:	e007      	b.n	800ac06 <VL53L1_StartMeasurement+0x52>
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d105      	bne.n	800ac06 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75fb      	strb	r3, [r7, #23]
		break;
 800abfe:	e004      	b.n	800ac0a <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800ac00:	23f2      	movs	r3, #242	; 0xf2
 800ac02:	75fb      	strb	r3, [r7, #23]
		break;
 800ac04:	e001      	b.n	800ac0a <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800ac06:	23fd      	movs	r3, #253	; 0xfd
 800ac08:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800ac0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d11f      	bne.n	800ac52 <VL53L1_StartMeasurement+0x9e>
 800ac12:	7dbb      	ldrb	r3, [r7, #22]
 800ac14:	2b40      	cmp	r3, #64	; 0x40
 800ac16:	d11c      	bne.n	800ac52 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800ac18:	f107 0310 	add.w	r3, r7, #16
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff fdde 	bl	800a7e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800ac24:	4603      	mov	r3, r0
 800ac26:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <VL53L1_StartMeasurement+0xd4>)
 800ac2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac30:	099b      	lsrs	r3, r3, #6
 800ac32:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800ac34:	f107 030c 	add.w	r3, r7, #12
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fe9c 	bl	800a978 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800ac40:	4603      	mov	r3, r0
 800ac42:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d901      	bls.n	800ac52 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800ac4e:	23fc      	movs	r3, #252	; 0xfc
 800ac50:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800ac52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d107      	bne.n	800ac6a <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800ac5a:	7dbb      	ldrb	r3, [r7, #22]
 800ac5c:	2206      	movs	r2, #6
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 f867 	bl	800bd34 <VL53L1_init_and_start_range>
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800ac6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800ac7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	10624dd3 	.word	0x10624dd3

0800ac8c <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	789b      	ldrb	r3, [r3, #2]
 800ac9c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fb87 	bl	800c3b6 <VL53L1_clear_interrupt_and_enable_next_range>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800acac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800acc4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f004 fb18 	bl	800f2fe <VL53L1_poll_for_range_completion>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800acd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b08d      	sub	sp, #52	; 0x34
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	603a      	str	r2, [r7, #0]
 800acea:	71fb      	strb	r3, [r7, #7]
 800acec:	460b      	mov	r3, r1
 800acee:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800acf0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800acf4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800acf6:	231e      	movs	r3, #30
 800acf8:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800acfa:	4b33      	ldr	r3, [pc, #204]	; (800adc8 <ComputeRQL+0xe8>)
 800acfc:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800acfe:	4b33      	ldr	r3, [pc, #204]	; (800adcc <ComputeRQL+0xec>)
 800ad00:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800ad02:	f641 139a 	movw	r3, #6554	; 0x199a
 800ad06:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <ComputeRQL+0x36>
		returnvalue = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad14:	e04f      	b.n	800adb6 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800ad16:	79bb      	ldrb	r3, [r7, #6]
 800ad18:	2b07      	cmp	r3, #7
 800ad1a:	d103      	bne.n	800ad24 <ComputeRQL+0x44>
		returnvalue = 50;
 800ad1c:	2332      	movs	r3, #50	; 0x32
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad22:	e048      	b.n	800adb6 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad2a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	dd03      	ble.n	800ad3a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800ad32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad38:	e007      	b.n	800ad4a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad40:	461a      	mov	r2, r3
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	fb02 f303 	mul.w	r3, r2, r3
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d020      	beq.n	800ad92 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ad54:	461a      	mov	r2, r3
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
 800ad5c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	085b      	lsrs	r3, r3, #1
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	4413      	add	r3, r2
 800ad66:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad70:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	041b      	lsls	r3, r3, #16
 800ad76:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d804      	bhi.n	800ad8a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad88:	e006      	b.n	800ad98 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800ad8a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800ad8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad90:	e002      	b.n	800ad98 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800ad92:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	2b32      	cmp	r3, #50	; 0x32
 800ada2:	d905      	bls.n	800adb0 <ComputeRQL+0xd0>
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b64      	cmp	r3, #100	; 0x64
 800ada8:	bf28      	it	cs
 800adaa:	2364      	movcs	r3, #100	; 0x64
 800adac:	b2db      	uxtb	r3, r3
 800adae:	e000      	b.n	800adb2 <ComputeRQL+0xd2>
 800adb0:	2332      	movs	r3, #50	; 0x32
 800adb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800adb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3734      	adds	r7, #52	; 0x34
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	0075b333 	.word	0x0075b333
 800adcc:	0030cccd 	.word	0x0030cccd

0800add0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	3b04      	subs	r3, #4
 800adde:	2b0f      	cmp	r3, #15
 800ade0:	d83d      	bhi.n	800ae5e <ConvertStatusLite+0x8e>
 800ade2:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <ConvertStatusLite+0x18>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800ae3b 	.word	0x0800ae3b
 800adec:	0800ae35 	.word	0x0800ae35
 800adf0:	0800ae41 	.word	0x0800ae41
 800adf4:	0800ae47 	.word	0x0800ae47
 800adf8:	0800ae53 	.word	0x0800ae53
 800adfc:	0800ae59 	.word	0x0800ae59
 800ae00:	0800ae5f 	.word	0x0800ae5f
 800ae04:	0800ae5f 	.word	0x0800ae5f
 800ae08:	0800ae4d 	.word	0x0800ae4d
 800ae0c:	0800ae5f 	.word	0x0800ae5f
 800ae10:	0800ae5f 	.word	0x0800ae5f
 800ae14:	0800ae5f 	.word	0x0800ae5f
 800ae18:	0800ae5f 	.word	0x0800ae5f
 800ae1c:	0800ae5f 	.word	0x0800ae5f
 800ae20:	0800ae29 	.word	0x0800ae29
 800ae24:	0800ae2f 	.word	0x0800ae2f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800ae28:	230a      	movs	r3, #10
 800ae2a:	73fb      	strb	r3, [r7, #15]
		break;
 800ae2c:	e019      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800ae2e:	2306      	movs	r3, #6
 800ae30:	73fb      	strb	r3, [r7, #15]
		break;
 800ae32:	e016      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800ae34:	2304      	movs	r3, #4
 800ae36:	73fb      	strb	r3, [r7, #15]
		break;
 800ae38:	e013      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	73fb      	strb	r3, [r7, #15]
		break;
 800ae3e:	e010      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
		break;
 800ae44:	e00d      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800ae46:	2307      	movs	r3, #7
 800ae48:	73fb      	strb	r3, [r7, #15]
		break;
 800ae4a:	e00a      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800ae4c:	2309      	movs	r3, #9
 800ae4e:	73fb      	strb	r3, [r7, #15]
		break;
 800ae50:	e007      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800ae52:	2303      	movs	r3, #3
 800ae54:	73fb      	strb	r3, [r7, #15]
		break;
 800ae56:	e004      	b.n	800ae62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
		break;
 800ae5c:	e001      	b.n	800ae62 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800ae5e:	23ff      	movs	r3, #255	; 0xff
 800ae60:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08c      	sub	sp, #48	; 0x30
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	607b      	str	r3, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	72fb      	strb	r3, [r7, #11]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae96:	f003 031f 	and.w	r3, r3, #31
 800ae9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800ae9e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff ff1a 	bl	800ace0 <ComputeRQL>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aeb8:	025b      	lsls	r3, r3, #9
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec0:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800aec6:	025b      	lsls	r3, r3, #9
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aedc:	025b      	lsls	r3, r3, #9
 800aede:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	6a3a      	ldr	r2, [r7, #32]
 800aee4:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800aef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef2:	2200      	movs	r2, #0
 800aef4:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800aef6:	7abb      	ldrb	r3, [r7, #10]
 800aef8:	2b11      	cmp	r3, #17
 800aefa:	d009      	beq.n	800af10 <SetSimpleData+0xa0>
 800aefc:	2b11      	cmp	r3, #17
 800aefe:	dc0f      	bgt.n	800af20 <SetSimpleData+0xb0>
 800af00:	2b03      	cmp	r3, #3
 800af02:	dc02      	bgt.n	800af0a <SetSimpleData+0x9a>
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc03      	bgt.n	800af10 <SetSimpleData+0xa0>
 800af08:	e00a      	b.n	800af20 <SetSimpleData+0xb0>
 800af0a:	2b0d      	cmp	r3, #13
 800af0c:	d004      	beq.n	800af18 <SetSimpleData+0xa8>
 800af0e:	e007      	b.n	800af20 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	2205      	movs	r2, #5
 800af14:	76da      	strb	r2, [r3, #27]
		break;
 800af16:	e006      	b.n	800af26 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	220d      	movs	r2, #13
 800af1c:	76da      	strb	r2, [r3, #27]
		break;
 800af1e:	e002      	b.n	800af26 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	2200      	movs	r2, #0
 800af24:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	7edb      	ldrb	r3, [r3, #27]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d108      	bne.n	800af40 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800af2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff ff4c 	bl	800add0 <ConvertStatusLite>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800af44:	025b      	lsls	r3, r3, #9
 800af46:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a3a      	ldr	r2, [r7, #32]
 800af4c:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af54:	025b      	lsls	r3, r3, #9
 800af56:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6a3a      	ldr	r2, [r7, #32]
 800af5c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	461a      	mov	r2, r3
 800af66:	2100      	movs	r1, #0
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7ff fdb3 	bl	800aad4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800af6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af72:	2b06      	cmp	r3, #6
 800af74:	bf0c      	ite	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	2300      	movne	r3, #0
 800af7a:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800af7c:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800af7e:	f107 0319 	add.w	r3, r7, #25
 800af82:	461a      	mov	r2, r3
 800af84:	2100      	movs	r1, #0
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff fd81 	bl	800aa8e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800af8c:	7e7b      	ldrb	r3, [r7, #25]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d104      	bne.n	800af9c <SetSimpleData+0x12c>
 800af92:	7ffb      	ldrb	r3, [r7, #31]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <SetSimpleData+0x12c>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <SetSimpleData+0x12e>
 800af9c:	2300      	movs	r3, #0
 800af9e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	7fba      	ldrb	r2, [r7, #30]
 800afa4:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800afa8:	f107 0314 	add.w	r3, r7, #20
 800afac:	461a      	mov	r2, r3
 800afae:	2101      	movs	r1, #1
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fd8f 	bl	800aad4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800afb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800afba:	2b04      	cmp	r3, #4
 800afbc:	bf0c      	ite	eq
 800afbe:	2301      	moveq	r3, #1
 800afc0:	2300      	movne	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800afc4:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800afc6:	f107 0319 	add.w	r3, r7, #25
 800afca:	461a      	mov	r2, r3
 800afcc:	2101      	movs	r1, #1
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff fd5d 	bl	800aa8e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800afd4:	7e7b      	ldrb	r3, [r7, #25]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d104      	bne.n	800afe4 <SetSimpleData+0x174>
 800afda:	7f7b      	ldrb	r3, [r7, #29]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <SetSimpleData+0x174>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <SetSimpleData+0x176>
 800afe4:	2300      	movs	r3, #0
 800afe6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	7fba      	ldrb	r2, [r7, #30]
 800afec:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	8b1b      	ldrh	r3, [r3, #24]
 800aff4:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	7edb      	ldrb	r3, [r3, #27]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d110      	bne.n	800b020 <SetSimpleData+0x1b0>
 800affe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b002:	2b00      	cmp	r3, #0
 800b004:	da0c      	bge.n	800b020 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b006:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b00a:	4b08      	ldr	r3, [pc, #32]	; (800b02c <SetSimpleData+0x1bc>)
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	da03      	bge.n	800b01a <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b014:	220e      	movs	r2, #14
 800b016:	76da      	strb	r2, [r3, #27]
 800b018:	e002      	b.n	800b020 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	2200      	movs	r2, #0
 800b01e:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b020:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b024:	4618      	mov	r0, r3
 800b026:	3730      	adds	r7, #48	; 0x30
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200000ac 	.word	0x200000ac

0800b030 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b0a8      	sub	sp, #160	; 0xa0
 800b034:	af02      	add	r7, sp, #8
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b048:	221c      	movs	r2, #28
 800b04a:	21ff      	movs	r1, #255	; 0xff
 800b04c:	6838      	ldr	r0, [r7, #0]
 800b04e:	f004 fd89 	bl	800fb64 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b052:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b056:	2102      	movs	r1, #2
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 f93c 	bl	800c2d6 <VL53L1_get_device_results>
 800b05e:	4603      	mov	r3, r0
 800b060:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b064:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d117      	bne.n	800b09c <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b06c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b070:	789a      	ldrb	r2, [r3, #2]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b076:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b07a:	3304      	adds	r3, #4
 800b07c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b084:	78da      	ldrb	r2, [r3, #3]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b08e:	2101      	movs	r1, #1
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff feed 	bl	800ae70 <SetSimpleData>
 800b096:	4603      	mov	r3, r0
 800b098:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b09c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3798      	adds	r7, #152	; 0x98
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b0c6      	sub	sp, #280	; 0x118
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b0be:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d108      	bne.n	800b0d8 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b0c6:	1d3b      	adds	r3, r7, #4
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2185      	movs	r1, #133	; 0x85
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	f004 f9f1 	bl	800f4b4 <VL53L1_WrByte>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b0d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d103      	bne.n	800b0e8 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b0e0:	1d3b      	adds	r3, r7, #4
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	f002 fce1 	bl	800daaa <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b0e8:	4b65      	ldr	r3, [pc, #404]	; (800b280 <VL53L1_LoadPatch+0x1d8>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b0f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d81b      	bhi.n	800b130 <VL53L1_LoadPatch+0x88>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <VL53L1_LoadPatch+0x58>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b111 	.word	0x0800b111
 800b104:	0800b119 	.word	0x0800b119
 800b108:	0800b121 	.word	0x0800b121
 800b10c:	0800b129 	.word	0x0800b129

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b110:	2300      	movs	r3, #0
 800b112:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b116:	e00e      	b.n	800b136 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b118:	2310      	movs	r3, #16
 800b11a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b11e:	e00a      	b.n	800b136 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b120:	2320      	movs	r3, #32
 800b122:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b126:	e006      	b.n	800b136 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b12e:	e002      	b.n	800b136 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b130:	2300      	movs	r3, #0
 800b132:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b136:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d125      	bne.n	800b18a <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b13e:	f107 030c 	add.w	r3, r7, #12
 800b142:	2229      	movs	r2, #41	; 0x29
 800b144:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	22c9      	movs	r2, #201	; 0xc9
 800b14c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b14e:	f107 030c 	add.w	r3, r7, #12
 800b152:	220e      	movs	r2, #14
 800b154:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b156:	f107 030c 	add.w	r3, r7, #12
 800b15a:	2240      	movs	r2, #64	; 0x40
 800b15c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b15e:	f107 030c 	add.w	r3, r7, #12
 800b162:	2228      	movs	r2, #40	; 0x28
 800b164:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	f107 030c 	add.w	r3, r7, #12
 800b170:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b172:	f107 020c 	add.w	r2, r7, #12
 800b176:	1d38      	adds	r0, r7, #4
 800b178:	2306      	movs	r3, #6
 800b17a:	f240 4176 	movw	r1, #1142	; 0x476
 800b17e:	6800      	ldr	r0, [r0, #0]
 800b180:	f004 f92c 	bl	800f3dc <VL53L1_WriteMulti>
 800b184:	4603      	mov	r3, r0
 800b186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b18a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d123      	bne.n	800b1da <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b192:	f107 030c 	add.w	r3, r7, #12
 800b196:	2203      	movs	r2, #3
 800b198:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	226d      	movs	r2, #109	; 0x6d
 800b1a0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b1a2:	f107 030c 	add.w	r3, r7, #12
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b1aa:	f107 030c 	add.w	r3, r7, #12
 800b1ae:	226f      	movs	r2, #111	; 0x6f
 800b1b0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b1b2:	f107 030c 	add.w	r3, r7, #12
 800b1b6:	2207      	movs	r2, #7
 800b1b8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b1ba:	f107 030c 	add.w	r3, r7, #12
 800b1be:	2229      	movs	r2, #41	; 0x29
 800b1c0:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b1c2:	f107 020c 	add.w	r2, r7, #12
 800b1c6:	1d38      	adds	r0, r7, #4
 800b1c8:	2306      	movs	r3, #6
 800b1ca:	f240 4196 	movw	r1, #1174	; 0x496
 800b1ce:	6800      	ldr	r0, [r0, #0]
 800b1d0:	f004 f904 	bl	800f3dc <VL53L1_WriteMulti>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b1da:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d113      	bne.n	800b20a <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b1e2:	f107 030c 	add.w	r3, r7, #12
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	2207      	movs	r2, #7
 800b1f0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b1f2:	f107 020c 	add.w	r2, r7, #12
 800b1f6:	1d38      	adds	r0, r7, #4
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	f240 4172 	movw	r1, #1138	; 0x472
 800b1fe:	6800      	ldr	r0, [r0, #0]
 800b200:	f004 f8ec 	bl	800f3dc <VL53L1_WriteMulti>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b20a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d113      	bne.n	800b23a <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b212:	f107 030c 	add.w	r3, r7, #12
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b21a:	f107 030c 	add.w	r3, r7, #12
 800b21e:	2207      	movs	r2, #7
 800b220:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b222:	f107 020c 	add.w	r2, r7, #12
 800b226:	1d38      	adds	r0, r7, #4
 800b228:	2302      	movs	r3, #2
 800b22a:	f240 4174 	movw	r1, #1140	; 0x474
 800b22e:	6800      	ldr	r0, [r0, #0]
 800b230:	f004 f8d4 	bl	800f3dc <VL53L1_WriteMulti>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b23a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d109      	bne.n	800b256 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b242:	1d3b      	adds	r3, r7, #4
 800b244:	2201      	movs	r2, #1
 800b246:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b24a:	6818      	ldr	r0, [r3, #0]
 800b24c:	f004 f932 	bl	800f4b4 <VL53L1_WrByte>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b256:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d108      	bne.n	800b270 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b25e:	1d3b      	adds	r3, r7, #4
 800b260:	2201      	movs	r2, #1
 800b262:	2185      	movs	r1, #133	; 0x85
 800b264:	6818      	ldr	r0, [r3, #0]
 800b266:	f004 f925 	bl	800f4b4 <VL53L1_WrByte>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b270:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b274:	4618      	mov	r0, r3
 800b276:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	200000ac 	.word	0x200000ac

0800b284 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800b284:	b5b0      	push	{r4, r5, r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af04      	add	r7, sp, #16
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800b298:	2162      	movs	r1, #98	; 0x62
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f002 f8bf 	bl	800d41e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2c4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b2cc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b2d4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2264      	movs	r2, #100	; 0x64
 800b2da:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b2e2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f240 72db 	movw	r2, #2011	; 0x7db
 800b2f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f002 f875 	bl	800d3e6 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <VL53L1_data_init+0x90>
 800b302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d104      	bne.n	800b314 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f857 	bl	800b3be <VL53L1_read_p2p_data>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 fba4 	bl	800ca68 <VL53L1_init_refspadchar_config_struct>
 800b320:	4603      	mov	r3, r0
 800b322:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 fbc0 	bl	800cab0 <VL53L1_init_ssc_config_struct>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f001 fbd5 	bl	800caf2 <VL53L1_init_xtalk_config_struct>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b352:	4618      	mov	r0, r3
 800b354:	f001 fc2f 	bl	800cbb6 <VL53L1_init_offset_cal_config_struct>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	33a4      	adds	r3, #164	; 0xa4
 800b360:	4618      	mov	r0, r3
 800b362:	f001 fc4f 	bl	800cc04 <VL53L1_init_tuning_parm_storage_struct>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800b36a:	2120      	movs	r1, #32
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fcc1 	bl	800bcf4 <VL53L1_set_vhv_loopbound>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800b376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d116      	bne.n	800b3ac <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	7858      	ldrb	r0, [r3, #1]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	8b1c      	ldrh	r4, [r3, #24]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	689d      	ldr	r5, [r3, #8]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	6912      	ldr	r2, [r2, #16]
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	6949      	ldr	r1, [r1, #20]
 800b396:	9102      	str	r1, [sp, #8]
 800b398:	9201      	str	r2, [sp, #4]
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	462b      	mov	r3, r5
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fad8 	bl	800b958 <VL53L1_set_preset_mode>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f002 fdb5 	bl	800df1c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800b3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bdb0      	pop	{r4, r5, r7, pc}

0800b3be <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d108      	bne.n	800b3e8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f002 ff39 	bl	800e256 <VL53L1_get_static_nvm_managed>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800b3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d107      	bne.n	800b400 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	3342      	adds	r3, #66	; 0x42
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f003 f86b 	bl	800e4d2 <VL53L1_get_customer_nvm_managed>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800b400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d115      	bne.n	800b434 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f003 ff1d 	bl	800f250 <VL53L1_get_nvm_copy_data>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800b41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d108      	bne.n	800b434 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	33f0      	adds	r3, #240	; 0xf0
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f002 f957 	bl	800d6e2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800b434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b442:	461a      	mov	r2, r3
 800b444:	21de      	movs	r1, #222	; 0xde
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f004 f892 	bl	800f570 <VL53L1_RdWord>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45a:	d204      	bcs.n	800b466 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800b462:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800b466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d107      	bne.n	800b47e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	339e      	adds	r3, #158	; 0x9e
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f990 	bl	800b79a <VL53L1_get_mode_mitigation_roi>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d114      	bne.n	800b4b2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10f      	bne.n	800b4b2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b498:	011b      	lsls	r3, r3, #4
 800b49a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b4da:	23f1      	movs	r3, #241	; 0xf1
 800b4dc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800b4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10c      	bne.n	800b500 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b4f2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800b500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b52c:	23f1      	movs	r3, #241	; 0xf1
 800b52e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800b530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d109      	bne.n	800b54c <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800b544:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800b54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b57c:	23f1      	movs	r3, #241	; 0xf1
 800b57e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800b580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11b      	bne.n	800b5c0 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800b5ac:	9201      	str	r2, [sp, #4]
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	68b8      	ldr	r0, [r7, #8]
 800b5b8:	f002 fbe2 	bl	800dd80 <VL53L1_calc_timeout_register_values>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b5f4:	23f1      	movs	r3, #241	; 0xf1
 800b5f6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800b5f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d14a      	bne.n	800b696 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f002 fa5d 	bl	800dace <VL53L1_calc_macro_period_us>
 800b614:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800b61c:	6979      	ldr	r1, [r7, #20]
 800b61e:	4618      	mov	r0, r3
 800b620:	f002 fb15 	bl	800dc4e <VL53L1_calc_timeout_us>
 800b624:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800b630:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b632:	8a7b      	ldrh	r3, [r7, #18]
 800b634:	021b      	lsls	r3, r3, #8
 800b636:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800b63e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b640:	4413      	add	r3, r2
 800b642:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b644:	8a7b      	ldrh	r3, [r7, #18]
 800b646:	6979      	ldr	r1, [r7, #20]
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 fb3e 	bl	800dcca <VL53L1_calc_decoded_timeout_us>
 800b64e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800b65a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b65c:	8a7b      	ldrh	r3, [r7, #18]
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800b668:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b66a:	4413      	add	r3, r2
 800b66c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b66e:	8a7b      	ldrh	r3, [r7, #18]
 800b670:	6979      	ldr	r1, [r7, #20]
 800b672:	4618      	mov	r0, r3
 800b674:	f002 fb29 	bl	800dcca <VL53L1_calc_decoded_timeout_us>
 800b678:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b696:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b087      	sub	sp, #28
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
 800b6be:	2b07      	cmp	r3, #7
 800b6c0:	d81c      	bhi.n	800b6fc <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800b6c8:	7afb      	ldrb	r3, [r7, #11]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800b6d8:	7dbb      	ldrb	r3, [r7, #22]
 800b6da:	4013      	ands	r3, r2
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00b      	beq.n	800b700 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	7afb      	ldrb	r3, [r7, #11]
 800b6f0:	fa42 f303 	asr.w	r3, r2, r3
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e001      	b.n	800b700 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b6fc:	23fc      	movs	r3, #252	; 0xfc
 800b6fe:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800b700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b704:	4618      	mov	r0, r3
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	7858      	ldrb	r0, [r3, #1]
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	7819      	ldrb	r1, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800b730:	461a      	mov	r2, r3
 800b732:	f002 fb9e 	bl	800de72 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	7898      	ldrb	r0, [r3, #2]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	78d9      	ldrb	r1, [r3, #3]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800b744:	461a      	mov	r2, r3
 800b746:	f002 fbd3 	bl	800def0 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800b74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	3301      	adds	r3, #1
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	4619      	mov	r1, r3
 800b776:	f002 fc8a 	bl	800e08e <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	1c99      	adds	r1, r3, #2
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	3303      	adds	r3, #3
 800b788:	461a      	mov	r2, r3
 800b78a:	f002 fb99 	bl	800dec0 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800b78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b086      	sub	sp, #24
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800b7be:	f107 020e 	add.w	r2, r7, #14
 800b7c2:	f107 010d 	add.w	r1, r7, #13
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f002 fc61 	bl	800e08e <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800b7cc:	7bba      	ldrb	r2, [r7, #14]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800b7d2:	7b7a      	ldrb	r2, [r7, #13]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800b7de:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	091b      	lsrs	r3, r3, #4
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
 800b7ec:	f003 030f 	and.w	r3, r3, #15
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800b7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	460b      	mov	r3, r1
 800b812:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b814:	2300      	movs	r3, #0
 800b816:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3b01      	subs	r3, #1
 800b820:	2b25      	cmp	r3, #37	; 0x25
 800b822:	f200 808e 	bhi.w	800b942 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800b826:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b8c5 	.word	0x0800b8c5
 800b830:	0800b8c5 	.word	0x0800b8c5
 800b834:	0800b8c5 	.word	0x0800b8c5
 800b838:	0800b8c5 	.word	0x0800b8c5
 800b83c:	0800b8c5 	.word	0x0800b8c5
 800b840:	0800b8ef 	.word	0x0800b8ef
 800b844:	0800b8ef 	.word	0x0800b8ef
 800b848:	0800b8ef 	.word	0x0800b8ef
 800b84c:	0800b943 	.word	0x0800b943
 800b850:	0800b943 	.word	0x0800b943
 800b854:	0800b943 	.word	0x0800b943
 800b858:	0800b943 	.word	0x0800b943
 800b85c:	0800b943 	.word	0x0800b943
 800b860:	0800b943 	.word	0x0800b943
 800b864:	0800b943 	.word	0x0800b943
 800b868:	0800b943 	.word	0x0800b943
 800b86c:	0800b8c5 	.word	0x0800b8c5
 800b870:	0800b8ef 	.word	0x0800b8ef
 800b874:	0800b943 	.word	0x0800b943
 800b878:	0800b943 	.word	0x0800b943
 800b87c:	0800b943 	.word	0x0800b943
 800b880:	0800b943 	.word	0x0800b943
 800b884:	0800b943 	.word	0x0800b943
 800b888:	0800b943 	.word	0x0800b943
 800b88c:	0800b943 	.word	0x0800b943
 800b890:	0800b943 	.word	0x0800b943
 800b894:	0800b943 	.word	0x0800b943
 800b898:	0800b943 	.word	0x0800b943
 800b89c:	0800b943 	.word	0x0800b943
 800b8a0:	0800b943 	.word	0x0800b943
 800b8a4:	0800b943 	.word	0x0800b943
 800b8a8:	0800b943 	.word	0x0800b943
 800b8ac:	0800b943 	.word	0x0800b943
 800b8b0:	0800b943 	.word	0x0800b943
 800b8b4:	0800b943 	.word	0x0800b943
 800b8b8:	0800b919 	.word	0x0800b919
 800b8bc:	0800b919 	.word	0x0800b919
 800b8c0:	0800b919 	.word	0x0800b919
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	601a      	str	r2, [r3, #0]
	break;
 800b8ec:	e02c      	b.n	800b948 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	601a      	str	r2, [r3, #0]
	break;
 800b916:	e017      	b.n	800b948 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	601a      	str	r2, [r3, #0]
	break;
 800b940:	e002      	b.n	800b948 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b942:	23fc      	movs	r3, #252	; 0xfc
 800b944:	75fb      	strb	r3, [r7, #23]
		break;
 800b946:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	371c      	adds	r7, #28
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b092      	sub	sp, #72	; 0x48
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	72fb      	strb	r3, [r7, #11]
 800b966:	4613      	mov	r3, r2
 800b968:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b97a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800b992:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b996:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b99a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	33a4      	adds	r3, #164	; 0xa4
 800b9a0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800b9a8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	7afa      	ldrb	r2, [r7, #11]
 800b9ae:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ba:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9c0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800b9c2:	2103      	movs	r1, #3
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f001 fd2a 	bl	800d41e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	2b25      	cmp	r3, #37	; 0x25
 800b9d0:	f200 810c 	bhi.w	800bbec <VL53L1_set_preset_mode+0x294>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <VL53L1_set_preset_mode+0x84>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800ba75 	.word	0x0800ba75
 800b9e0:	0800ba91 	.word	0x0800ba91
 800b9e4:	0800baad 	.word	0x0800baad
 800b9e8:	0800bac9 	.word	0x0800bac9
 800b9ec:	0800bae5 	.word	0x0800bae5
 800b9f0:	0800bb01 	.word	0x0800bb01
 800b9f4:	0800bb1d 	.word	0x0800bb1d
 800b9f8:	0800bb39 	.word	0x0800bb39
 800b9fc:	0800bbed 	.word	0x0800bbed
 800ba00:	0800bbed 	.word	0x0800bbed
 800ba04:	0800bbed 	.word	0x0800bbed
 800ba08:	0800bbed 	.word	0x0800bbed
 800ba0c:	0800bbed 	.word	0x0800bbed
 800ba10:	0800bbed 	.word	0x0800bbed
 800ba14:	0800bbed 	.word	0x0800bbed
 800ba18:	0800bbed 	.word	0x0800bbed
 800ba1c:	0800bb55 	.word	0x0800bb55
 800ba20:	0800bb71 	.word	0x0800bb71
 800ba24:	0800bbed 	.word	0x0800bbed
 800ba28:	0800bbed 	.word	0x0800bbed
 800ba2c:	0800bbed 	.word	0x0800bbed
 800ba30:	0800bbed 	.word	0x0800bbed
 800ba34:	0800bbed 	.word	0x0800bbed
 800ba38:	0800bbed 	.word	0x0800bbed
 800ba3c:	0800bbed 	.word	0x0800bbed
 800ba40:	0800bbed 	.word	0x0800bbed
 800ba44:	0800bbed 	.word	0x0800bbed
 800ba48:	0800bbed 	.word	0x0800bbed
 800ba4c:	0800bbed 	.word	0x0800bbed
 800ba50:	0800bbed 	.word	0x0800bbed
 800ba54:	0800bbed 	.word	0x0800bbed
 800ba58:	0800bbed 	.word	0x0800bbed
 800ba5c:	0800bbed 	.word	0x0800bbed
 800ba60:	0800bbed 	.word	0x0800bbed
 800ba64:	0800bbed 	.word	0x0800bbed
 800ba68:	0800bb8d 	.word	0x0800bb8d
 800ba6c:	0800bbad 	.word	0x0800bbad
 800ba70:	0800bbcd 	.word	0x0800bbcd

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba84:	f001 f94d 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800ba8e:	e0b1      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baa0:	f001 fa5d 	bl	800cf5e <VL53L1_preset_mode_standard_ranging_short_range>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800baaa:	e0a3      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800babc:	f001 fa90 	bl	800cfe0 <VL53L1_preset_mode_standard_ranging_long_range>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bac6:	e095      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bad8:	f001 fac3 	bl	800d062 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bae2:	e087      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf4:	f001 fada 	bl	800d0ac <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bafe:	e079      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb10:	f001 faf1 	bl	800d0f6 <VL53L1_preset_mode_timed_ranging>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bb1a:	e06b      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb2c:	f001 fb1d 	bl	800d16a <VL53L1_preset_mode_timed_ranging_short_range>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bb36:	e05d      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb48:	f001 fb49 	bl	800d1de <VL53L1_preset_mode_timed_ranging_long_range>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bb52:	e04f      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb64:	f001 fc1d 	bl	800d3a2 <VL53L1_preset_mode_olt>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bb6e:	e041      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb80:	f001 fbd9 	bl	800d336 <VL53L1_preset_mode_singleshot_ranging>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bb8a:	e033      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	9302      	str	r3, [sp, #8]
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bba0:	f001 fb7d 	bl	800d29e <VL53L1_preset_mode_low_power_auto_short_ranging>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bbaa:	e023      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	9302      	str	r3, [sp, #8]
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbc0:	f001 fb47 	bl	800d252 <VL53L1_preset_mode_low_power_auto_ranging>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bbca:	e013      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	9302      	str	r3, [sp, #8]
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbe0:	f001 fb83 	bl	800d2ea <VL53L1_preset_mode_low_power_auto_long_ranging>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bbea:	e003      	b.n	800bbf4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bbec:	23fc      	movs	r3, #252	; 0xfc
 800bbee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800bbf2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800bbf4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d105      	bne.n	800bc08 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	893a      	ldrh	r2, [r7, #8]
 800bc00:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	893a      	ldrh	r2, [r7, #8]
 800bc06:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800bc08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d108      	bne.n	800bc22 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800bc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fca0 	bl	800b55c <VL53L1_set_timeouts_us>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800bc22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800bc2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7ff fc46 	bl	800b4be <VL53L1_set_inter_measurement_period_ms>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800bc38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3738      	adds	r7, #56	; 0x38
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800bc60:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	887a      	ldrh	r2, [r7, #2]
 800bc88:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800bc8c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800bcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	887a      	ldrh	r2, [r7, #2]
 800bce0:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800bce4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	78fb      	ldrb	r3, [r7, #3]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800bd24:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b0d0      	sub	sp, #320	; 0x140
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	1d3b      	adds	r3, r7, #4
 800bd3c:	6018      	str	r0, [r3, #0]
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	1cfb      	adds	r3, r7, #3
 800bd44:	4602      	mov	r2, r0
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	1cbb      	adds	r3, r7, #2
 800bd4a:	460a      	mov	r2, r1
 800bd4c:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd54:	1d3b      	adds	r3, r7, #4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800bd5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bd64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800bd68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd6c:	3342      	adds	r3, #66	; 0x42
 800bd6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800bd72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800bd7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd82:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bd86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800bd8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd8e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800bd92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800bd96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd9a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800bd9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800bda2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bda6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bdaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800bdae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdb2:	332c      	adds	r3, #44	; 0x2c
 800bdb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800bdd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bddc:	1cfa      	adds	r2, r7, #3
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800bde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde6:	791b      	ldrb	r3, [r3, #4]
 800bde8:	b25b      	sxtb	r3, r3
 800bdea:	f003 030f 	and.w	r3, r3, #15
 800bdee:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800bdf0:	1cfb      	adds	r3, r7, #3
 800bdf2:	f993 3000 	ldrsb.w	r3, [r3]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800bdfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be00:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800be02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be06:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800be0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be0e:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800be12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be16:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800be1a:	2bff      	cmp	r3, #255	; 0xff
 800be1c:	d104      	bne.n	800be28 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800be1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be22:	2200      	movs	r2, #0
 800be24:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800be28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be2c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800be30:	2b01      	cmp	r3, #1
 800be32:	d133      	bne.n	800be9c <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800be34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be38:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12d      	bne.n	800be9c <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800be40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be44:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800be48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be4c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800be50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be54:	2220      	movs	r2, #32
 800be56:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800be5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be5e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800be62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10c      	bne.n	800be84 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800be6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be6e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800be72:	b29b      	uxth	r3, r3
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	b29b      	uxth	r3, r3
 800be78:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800be7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800be82:	e004      	b.n	800be8e <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800be84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be88:	2200      	movs	r2, #0
 800be8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800be8e:	1cbb      	adds	r3, r7, #2
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b04      	cmp	r3, #4
 800be94:	d802      	bhi.n	800be9c <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800be96:	1cbb      	adds	r3, r7, #2
 800be98:	2205      	movs	r2, #5
 800be9a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800be9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bea0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d110      	bne.n	800beca <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800bea8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800beac:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d10a      	bne.n	800beca <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800beb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800beb8:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800bebc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bec0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800bec4:	1cbb      	adds	r3, r7, #2
 800bec6:	2206      	movs	r2, #6
 800bec8:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800beca:	1cbb      	adds	r3, r7, #2
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	3b01      	subs	r3, #1
 800bed0:	2b05      	cmp	r3, #5
 800bed2:	d827      	bhi.n	800bf24 <VL53L1_init_and_start_range+0x1f0>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <VL53L1_init_and_start_range+0x1a8>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bf1d 	.word	0x0800bf1d
 800bee0:	0800bf15 	.word	0x0800bf15
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf05 	.word	0x0800bf05
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bef5 	.word	0x0800bef5
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800befa:	e017      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800befc:	230d      	movs	r3, #13
 800befe:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf02:	e013      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800bf04:	2324      	movs	r3, #36	; 0x24
 800bf06:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf0a:	e00f      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800bf0c:	2344      	movs	r3, #68	; 0x44
 800bf0e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf12:	e00b      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800bf14:	235a      	movs	r3, #90	; 0x5a
 800bf16:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf1a:	e007      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800bf1c:	2371      	movs	r3, #113	; 0x71
 800bf1e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf22:	e003      	b.n	800bf2c <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800bf24:	2383      	movs	r3, #131	; 0x83
 800bf26:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800bf2a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800bf2c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bf30:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800bf34:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800bf38:	f107 030c 	add.w	r3, r7, #12
 800bf3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800bf46:	e00b      	b.n	800bf60 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800bf48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800bf52:	2200      	movs	r2, #0
 800bf54:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800bf56:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800bf60:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800bf64:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d3ed      	bcc.n	800bf48 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800bf6c:	1cbb      	adds	r3, r7, #2
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b05      	cmp	r3, #5
 800bf72:	d917      	bls.n	800bfa4 <VL53L1_init_and_start_range+0x270>
 800bf74:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d113      	bne.n	800bfa4 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bf7c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bf80:	f1c3 0301 	rsb	r3, r3, #1
 800bf84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bf88:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800bf8c:	f107 020c 	add.w	r2, r7, #12
 800bf90:	4413      	add	r3, r2
 800bf92:	461a      	mov	r2, r3
 800bf94:	210b      	movs	r1, #11
 800bf96:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800bf9a:	f002 f8a7 	bl	800e0ec <VL53L1_i2c_encode_static_nvm_managed>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800bfa4:	1cbb      	adds	r3, r7, #2
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d917      	bls.n	800bfdc <VL53L1_init_and_start_range+0x2a8>
 800bfac:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d113      	bne.n	800bfdc <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bfb4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bfb8:	f1c3 030d 	rsb	r3, r3, #13
 800bfbc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bfc0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800bfc4:	f107 020c 	add.w	r2, r7, #12
 800bfc8:	4413      	add	r3, r2
 800bfca:	461a      	mov	r2, r3
 800bfcc:	2117      	movs	r1, #23
 800bfce:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bfd2:	f002 f967 	bl	800e2a4 <VL53L1_i2c_encode_customer_nvm_managed>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800bfdc:	1cbb      	adds	r3, r7, #2
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d917      	bls.n	800c014 <VL53L1_init_and_start_range+0x2e0>
 800bfe4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d113      	bne.n	800c014 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bfec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bff0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800bff4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bff8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800bffc:	f107 020c 	add.w	r2, r7, #12
 800c000:	4413      	add	r3, r2
 800c002:	461a      	mov	r2, r3
 800c004:	2120      	movs	r1, #32
 800c006:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c00a:	f002 fa89 	bl	800e520 <VL53L1_i2c_encode_static_config>
 800c00e:	4603      	mov	r3, r0
 800c010:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c014:	1cbb      	adds	r3, r7, #2
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d917      	bls.n	800c04c <VL53L1_init_and_start_range+0x318>
 800c01c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c020:	2b00      	cmp	r3, #0
 800c022:	d113      	bne.n	800c04c <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c024:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c028:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c02c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c030:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c034:	f107 020c 	add.w	r2, r7, #12
 800c038:	4413      	add	r3, r2
 800c03a:	461a      	mov	r2, r3
 800c03c:	2116      	movs	r1, #22
 800c03e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c042:	f002 fb50 	bl	800e6e6 <VL53L1_i2c_encode_general_config>
 800c046:	4603      	mov	r3, r0
 800c048:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c04c:	1cbb      	adds	r3, r7, #2
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d917      	bls.n	800c084 <VL53L1_init_and_start_range+0x350>
 800c054:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d113      	bne.n	800c084 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c05c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c060:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c064:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c068:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c06c:	f107 020c 	add.w	r2, r7, #12
 800c070:	4413      	add	r3, r2
 800c072:	461a      	mov	r2, r3
 800c074:	2117      	movs	r1, #23
 800c076:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c07a:	f002 fbb8 	bl	800e7ee <VL53L1_i2c_encode_timing_config>
 800c07e:	4603      	mov	r3, r0
 800c080:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c084:	1cbb      	adds	r3, r7, #2
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d036      	beq.n	800c0fa <VL53L1_init_and_start_range+0x3c6>
 800c08c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c090:	2b00      	cmp	r3, #0
 800c092:	d132      	bne.n	800c0fa <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c094:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c098:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c09c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a4:	791b      	ldrb	r3, [r3, #4]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d017      	beq.n	800c0de <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c0ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0b2:	789b      	ldrb	r3, [r3, #2]
 800c0b4:	f043 0301 	orr.w	r3, r3, #1
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c0be:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c0c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0c4:	789b      	ldrb	r3, [r3, #2]
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c0d0:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c0d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0d6:	789a      	ldrb	r2, [r3, #2]
 800c0d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c0dc:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c0de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c0e2:	f107 020c 	add.w	r2, r7, #12
 800c0e6:	4413      	add	r3, r2
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	2112      	movs	r1, #18
 800c0ec:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c0f0:	f002 fbff 	bl	800e8f2 <VL53L1_i2c_encode_dynamic_config>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c0fa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d113      	bne.n	800c12a <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c102:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c106:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c10a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c10e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c112:	f107 020c 	add.w	r2, r7, #12
 800c116:	4413      	add	r3, r2
 800c118:	461a      	mov	r2, r3
 800c11a:	2105      	movs	r1, #5
 800c11c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c120:	f002 fc6c 	bl	800e9fc <VL53L1_i2c_encode_system_control>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c12a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10c      	bne.n	800c14c <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c132:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c136:	f107 020c 	add.w	r2, r7, #12
 800c13a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c13e:	1d38      	adds	r0, r7, #4
 800c140:	6800      	ldr	r0, [r0, #0]
 800c142:	f003 f94b 	bl	800f3dc <VL53L1_WriteMulti>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c14c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c150:	2b00      	cmp	r3, #0
 800c152:	d106      	bne.n	800c162 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c154:	1d3b      	adds	r3, r7, #4
 800c156:	6818      	ldr	r0, [r3, #0]
 800c158:	f001 f98a 	bl	800d470 <VL53L1_update_ll_driver_rd_state>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c162:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c16a:	1d3b      	adds	r3, r7, #4
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f001 fa52 	bl	800d616 <VL53L1_update_ll_driver_cfg_state>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c178:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop

0800c188 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b0c8      	sub	sp, #288	; 0x120
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	1d3b      	adds	r3, r7, #4
 800c190:	6018      	str	r0, [r3, #0]
 800c192:	460a      	mov	r2, r1
 800c194:	1cfb      	adds	r3, r7, #3
 800c196:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c19e:	1d3b      	adds	r3, r7, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c1a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c1aa:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c1ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c1b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c1b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c1ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c1be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c1c2:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c1c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c1ca:	2388      	movs	r3, #136	; 0x88
 800c1cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c1dc:	1cfb      	adds	r3, r7, #3
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d008      	beq.n	800c1f6 <VL53L1_get_measurement_results+0x6e>
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d10d      	bne.n	800c204 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c1e8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c1ec:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c1f0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c1f4:	e00a      	b.n	800c20c <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c1f6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c1fa:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c1fe:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c202:	e003      	b.n	800c20c <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c204:	232c      	movs	r3, #44	; 0x2c
 800c206:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c20a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c20c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10c      	bne.n	800c22e <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c214:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c218:	f107 0208 	add.w	r2, r7, #8
 800c21c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c220:	1d38      	adds	r0, r7, #4
 800c222:	6800      	ldr	r0, [r0, #0]
 800c224:	f003 f910 	bl	800f448 <VL53L1_ReadMulti>
 800c228:	4603      	mov	r3, r0
 800c22a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c22e:	1cfb      	adds	r3, r7, #3
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d917      	bls.n	800c266 <VL53L1_get_measurement_results+0xde>
 800c236:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d113      	bne.n	800c266 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c23e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c242:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c246:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c24a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c24e:	f107 0208 	add.w	r2, r7, #8
 800c252:	4413      	add	r3, r2
 800c254:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c258:	4619      	mov	r1, r3
 800c25a:	2038      	movs	r0, #56	; 0x38
 800c25c:	f002 fd60 	bl	800ed20 <VL53L1_i2c_decode_debug_results>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c266:	1cfb      	adds	r3, r7, #3
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d017      	beq.n	800c29e <VL53L1_get_measurement_results+0x116>
 800c26e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c272:	2b00      	cmp	r3, #0
 800c274:	d113      	bne.n	800c29e <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c276:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c27a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c27e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c282:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800c286:	f107 0208 	add.w	r2, r7, #8
 800c28a:	4413      	add	r3, r2
 800c28c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c290:	4619      	mov	r1, r3
 800c292:	2021      	movs	r0, #33	; 0x21
 800c294:	f002 fce3 	bl	800ec5e <VL53L1_i2c_decode_core_results>
 800c298:	4603      	mov	r3, r0
 800c29a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800c29e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d110      	bne.n	800c2c8 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c2ac:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800c2b0:	f107 0208 	add.w	r2, r7, #8
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	202c      	movs	r0, #44	; 0x2c
 800c2be:	f002 fbd8 	bl	800ea72 <VL53L1_i2c_decode_system_results>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c2c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b088      	sub	sp, #32
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	607a      	str	r2, [r7, #4]
 800c2e2:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800c2f2:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c2f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d106      	bne.n	800c30e <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	4619      	mov	r1, r3
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f7ff ff3f 	bl	800c188 <VL53L1_get_measurement_results>
 800c30a:	4603      	mov	r3, r0
 800c30c:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800c30e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d10c      	bne.n	800c330 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800c31c:	4618      	mov	r0, r3
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f000 f85e 	bl	800c3ec <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c336:	2b01      	cmp	r3, #1
 800c338:	d11f      	bne.n	800c37a <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800c33a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10e      	bne.n	800c360 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d109      	bne.n	800c360 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f001 fe32 	bl	800dfb6 <VL53L1_low_power_auto_setup_manual_calibration>
 800c352:	4603      	mov	r3, r0
 800c354:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800c35e:	e00c      	b.n	800c37a <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c360:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d108      	bne.n	800c37a <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d103      	bne.n	800c37a <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2202      	movs	r2, #2
 800c376:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800c38e:	2284      	movs	r2, #132	; 0x84
 800c390:	6939      	ldr	r1, [r7, #16]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f003 fbd8 	bl	800fb48 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800c398:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d104      	bne.n	800c3aa <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f001 f8ed 	bl	800d580 <VL53L1_check_ll_driver_rd_state>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c3aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3720      	adds	r7, #32
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d107      	bne.n	800c3de <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800c3ce:	78fb      	ldrb	r3, [r7, #3]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff fcad 	bl	800bd34 <VL53L1_init_and_start_range>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b089      	sub	sp, #36	; 0x24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	78da      	ldrb	r2, [r3, #3]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	3304      	adds	r3, #4
 800c412:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800c414:	2300      	movs	r3, #0
 800c416:	77fb      	strb	r3, [r7, #31]
 800c418:	e0d0      	b.n	800c5bc <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	7ffa      	ldrb	r2, [r7, #31]
 800c41e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	2200      	movs	r2, #0
 800c424:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	78db      	ldrb	r3, [r3, #3]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800c436:	2b09      	cmp	r3, #9
 800c438:	d104      	bne.n	800c444 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2213      	movs	r2, #19
 800c43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c442:	e007      	b.n	800c454 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	f003 031f 	and.w	r3, r3, #31
 800c44c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800c454:	7ffb      	ldrb	r3, [r7, #31]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d05d      	beq.n	800c51a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800c45e:	e0a7      	b.n	800c5b0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	789b      	ldrb	r3, [r3, #2]
 800c464:	2b07      	cmp	r3, #7
 800c466:	d104      	bne.n	800c472 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	821a      	strh	r2, [r3, #16]
 800c470:	e00c      	b.n	800c48c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	789b      	ldrb	r3, [r3, #2]
 800c476:	2b08      	cmp	r3, #8
 800c478:	d104      	bne.n	800c484 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	821a      	strh	r2, [r3, #16]
 800c482:	e003      	b.n	800c48c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	895b      	ldrh	r3, [r3, #10]
 800c4a8:	015b      	lsls	r3, r3, #5
 800c4aa:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b2:	d302      	bcc.n	800c4ba <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800c4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4b8:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800c4ce:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	fb02 f303 	mul.w	r3, r2, r3
 800c4d8:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	da01      	bge.n	800c4ec <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800c4e8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c4ec:	12db      	asrs	r3, r3, #11
 800c4ee:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	b21a      	sxth	r2, r3
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	621a      	str	r2, [r3, #32]

			break;
 800c518:	e04a      	b.n	800c5b0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c530:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	8bdb      	ldrh	r3, [r3, #30]
 800c53e:	015b      	lsls	r3, r3, #5
 800c540:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c548:	d302      	bcc.n	800c550 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800c54a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c54e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	b29a      	uxth	r2, r3
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800c564:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	fb02 f303 	mul.w	r3, r2, r3
 800c56e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c576:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	da01      	bge.n	800c582 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800c57e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c582:	12db      	asrs	r3, r3, #11
 800c584:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	b21a      	sxth	r2, r3
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	621a      	str	r2, [r3, #32]

			break;
 800c5ae:	bf00      	nop
		}

		pdata++;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	3340      	adds	r3, #64	; 0x40
 800c5b4:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800c5b6:	7ffb      	ldrb	r3, [r7, #31]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	77fb      	strb	r3, [r7, #31]
 800c5bc:	7ffb      	ldrb	r3, [r7, #31]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	f67f af2b 	bls.w	800c41a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	785b      	ldrb	r3, [r3, #1]
 800c5ce:	f003 031f 	and.w	r3, r3, #31
 800c5d2:	2b11      	cmp	r3, #17
 800c5d4:	bf8c      	ite	hi
 800c5d6:	2201      	movhi	r2, #1
 800c5d8:	2200      	movls	r2, #0
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	2a00      	cmp	r2, #0
 800c5de:	d116      	bne.n	800c60e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	409a      	lsls	r2, r3
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00b      	beq.n	800c60e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	785b      	ldrb	r3, [r3, #1]
 800c5fa:	f003 031f 	and.w	r3, r3, #31
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800c60c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800c60e:	bf00      	nop
 800c610:	3724      	adds	r7, #36	; 0x24
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	0002200e 	.word	0x0002200e

0800c620 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	460b      	mov	r3, r1
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c62e:	2300      	movs	r3, #0
 800c630:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800c636:	897b      	ldrh	r3, [r7, #10]
 800c638:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800c63c:	2b38      	cmp	r3, #56	; 0x38
 800c63e:	f200 8204 	bhi.w	800ca4a <VL53L1_get_tuning_parm+0x42a>
 800c642:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <VL53L1_get_tuning_parm+0x28>)
 800c644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c648:	0800c72d 	.word	0x0800c72d
 800c64c:	0800c73b 	.word	0x0800c73b
 800c650:	0800c749 	.word	0x0800c749
 800c654:	0800c757 	.word	0x0800c757
 800c658:	0800c765 	.word	0x0800c765
 800c65c:	0800c773 	.word	0x0800c773
 800c660:	0800c781 	.word	0x0800c781
 800c664:	0800c78f 	.word	0x0800c78f
 800c668:	0800c79d 	.word	0x0800c79d
 800c66c:	0800c7ab 	.word	0x0800c7ab
 800c670:	0800c7b9 	.word	0x0800c7b9
 800c674:	0800c7c7 	.word	0x0800c7c7
 800c678:	0800c7d5 	.word	0x0800c7d5
 800c67c:	0800c7e3 	.word	0x0800c7e3
 800c680:	0800c7f1 	.word	0x0800c7f1
 800c684:	0800c7ff 	.word	0x0800c7ff
 800c688:	0800c80d 	.word	0x0800c80d
 800c68c:	0800c81b 	.word	0x0800c81b
 800c690:	0800c829 	.word	0x0800c829
 800c694:	0800c837 	.word	0x0800c837
 800c698:	0800c845 	.word	0x0800c845
 800c69c:	0800c853 	.word	0x0800c853
 800c6a0:	0800c861 	.word	0x0800c861
 800c6a4:	0800c86f 	.word	0x0800c86f
 800c6a8:	0800c87d 	.word	0x0800c87d
 800c6ac:	0800c88b 	.word	0x0800c88b
 800c6b0:	0800c899 	.word	0x0800c899
 800c6b4:	0800c8a7 	.word	0x0800c8a7
 800c6b8:	0800c8b5 	.word	0x0800c8b5
 800c6bc:	0800c8c3 	.word	0x0800c8c3
 800c6c0:	0800c8d1 	.word	0x0800c8d1
 800c6c4:	0800c8df 	.word	0x0800c8df
 800c6c8:	0800c8ed 	.word	0x0800c8ed
 800c6cc:	0800c8fb 	.word	0x0800c8fb
 800c6d0:	0800c909 	.word	0x0800c909
 800c6d4:	0800c917 	.word	0x0800c917
 800c6d8:	0800c925 	.word	0x0800c925
 800c6dc:	0800c933 	.word	0x0800c933
 800c6e0:	0800c941 	.word	0x0800c941
 800c6e4:	0800c94f 	.word	0x0800c94f
 800c6e8:	0800c95d 	.word	0x0800c95d
 800c6ec:	0800c96b 	.word	0x0800c96b
 800c6f0:	0800c979 	.word	0x0800c979
 800c6f4:	0800c987 	.word	0x0800c987
 800c6f8:	0800c995 	.word	0x0800c995
 800c6fc:	0800c9a3 	.word	0x0800c9a3
 800c700:	0800c9b1 	.word	0x0800c9b1
 800c704:	0800c9bf 	.word	0x0800c9bf
 800c708:	0800c9cd 	.word	0x0800c9cd
 800c70c:	0800c9db 	.word	0x0800c9db
 800c710:	0800c9e9 	.word	0x0800c9e9
 800c714:	0800c9f7 	.word	0x0800c9f7
 800c718:	0800ca05 	.word	0x0800ca05
 800c71c:	0800ca13 	.word	0x0800ca13
 800c720:	0800ca21 	.word	0x0800ca21
 800c724:	0800ca2f 	.word	0x0800ca2f
 800c728:	0800ca3d 	.word	0x0800ca3d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c732:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]
	break;
 800c738:	e18e      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800c740:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
	break;
 800c746:	e187      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c74e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]
	break;
 800c754:	e180      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c75c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	601a      	str	r2, [r3, #0]
	break;
 800c762:	e179      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c76a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	601a      	str	r2, [r3, #0]
	break;
 800c770:	e172      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c778:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	601a      	str	r2, [r3, #0]
	break;
 800c77e:	e16b      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c786:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	601a      	str	r2, [r3, #0]
	break;
 800c78c:	e164      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c794:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	601a      	str	r2, [r3, #0]
	break;
 800c79a:	e15d      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c7a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]
	break;
 800c7a8:	e156      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800c7b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
	break;
 800c7b6:	e14f      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800c7be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	601a      	str	r2, [r3, #0]
	break;
 800c7c4:	e148      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800c7cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	601a      	str	r2, [r3, #0]
	break;
 800c7d2:	e141      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c7da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	601a      	str	r2, [r3, #0]
	break;
 800c7e0:	e13a      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800c7e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	601a      	str	r2, [r3, #0]
	break;
 800c7ee:	e133      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c7f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	601a      	str	r2, [r3, #0]
	break;
 800c7fc:	e12c      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800c804:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
	break;
 800c80a:	e125      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800c812:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	601a      	str	r2, [r3, #0]
	break;
 800c818:	e11e      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800c820:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	601a      	str	r2, [r3, #0]
	break;
 800c826:	e117      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800c82e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	601a      	str	r2, [r3, #0]
	break;
 800c834:	e110      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800c83c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
	break;
 800c842:	e109      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c84a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]
	break;
 800c850:	e102      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800c858:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
	break;
 800c85e:	e0fb      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800c866:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	601a      	str	r2, [r3, #0]
	break;
 800c86c:	e0f4      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800c874:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
	break;
 800c87a:	e0ed      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c882:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	601a      	str	r2, [r3, #0]
	break;
 800c888:	e0e6      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	601a      	str	r2, [r3, #0]
	break;
 800c896:	e0df      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800c89e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	601a      	str	r2, [r3, #0]
	break;
 800c8a4:	e0d8      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800c8ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	601a      	str	r2, [r3, #0]
	break;
 800c8b2:	e0d1      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800c8ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	601a      	str	r2, [r3, #0]
	break;
 800c8c0:	e0ca      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c8c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	601a      	str	r2, [r3, #0]
	break;
 800c8ce:	e0c3      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c8d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]
	break;
 800c8dc:	e0bc      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800c8e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	601a      	str	r2, [r3, #0]
	break;
 800c8ea:	e0b5      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c8f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]
	break;
 800c8f8:	e0ae      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800c900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
	break;
 800c906:	e0a7      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800c90e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]
	break;
 800c914:	e0a0      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800c91c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	601a      	str	r2, [r3, #0]
	break;
 800c922:	e099      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c92a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]
	break;
 800c930:	e092      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	601a      	str	r2, [r3, #0]
	break;
 800c93e:	e08b      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c946:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	601a      	str	r2, [r3, #0]
	break;
 800c94c:	e084      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	601a      	str	r2, [r3, #0]
	break;
 800c95a:	e07d      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800c962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	601a      	str	r2, [r3, #0]
	break;
 800c968:	e076      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800c970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]
	break;
 800c976:	e06f      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800c97e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	601a      	str	r2, [r3, #0]
	break;
 800c984:	e068      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800c98c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	601a      	str	r2, [r3, #0]
	break;
 800c992:	e061      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800c99a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	601a      	str	r2, [r3, #0]
	break;
 800c9a0:	e05a      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800c9a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	601a      	str	r2, [r3, #0]
	break;
 800c9ae:	e053      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800c9b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	601a      	str	r2, [r3, #0]
	break;
 800c9bc:	e04c      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800c9c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	601a      	str	r2, [r3, #0]
	break;
 800c9ca:	e045      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c9d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
	break;
 800c9d8:	e03e      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c9e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	601a      	str	r2, [r3, #0]
	break;
 800c9e6:	e037      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c9ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	601a      	str	r2, [r3, #0]
	break;
 800c9f4:	e030      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c9fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]
	break;
 800ca02:	e029      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ca0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	601a      	str	r2, [r3, #0]
	break;
 800ca10:	e022      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	601a      	str	r2, [r3, #0]
	break;
 800ca1e:	e01b      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800ca26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	601a      	str	r2, [r3, #0]
	break;
 800ca2c:	e014      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	601a      	str	r2, [r3, #0]
	break;
 800ca3a:	e00d      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ca42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	601a      	str	r2, [r3, #0]
	break;
 800ca48:	e006      	b.n	800ca58 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ca50:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800ca52:	23fc      	movs	r3, #252	; 0xfc
 800ca54:	75fb      	strb	r3, [r7, #23]
	break;
 800ca56:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800ca58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2208      	movs	r2, #8
 800ca78:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	220b      	movs	r2, #11
 800ca7e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca86:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ca8e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ca96:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ca9e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800caa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2212      	movs	r2, #18
 800cac6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	220f      	movs	r2, #15
 800cacc:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2202      	movs	r2, #2
 800cad2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800cada:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	220c      	movs	r2, #12
 800cae0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800cae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	895b      	ldrh	r3, [r3, #10]
 800cb04:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	895b      	ldrh	r3, [r3, #10]
 800cb22:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2240      	movs	r2, #64	; 0x40
 800cb46:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10d      	bne.n	800cb6c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d108      	bne.n	800cb6c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d103      	bne.n	800cb6c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2200      	movs	r2, #0
 800cb68:	741a      	strb	r2, [r3, #16]
 800cb6a:	e002      	b.n	800cb72 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800cb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d114      	bne.n	800cba4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d110      	bne.n	800cba4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	7d1b      	ldrb	r3, [r3, #20]
 800cb96:	f000 ffc9 	bl	800db2c <VL53L1_calc_range_ignore_threshold>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	82da      	strh	r2, [r3, #22]
 800cba2:	e002      	b.n	800cbaa <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2200      	movs	r2, #0
 800cba8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b085      	sub	sp, #20
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cbc8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbd0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cbd8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cbe0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2208      	movs	r2, #8
 800cbe6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2228      	movs	r2, #40	; 0x28
 800cbec:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2209      	movs	r2, #9
 800cbf2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800cbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3714      	adds	r7, #20
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f248 0203 	movw	r2, #32771	; 0x8003
 800cc16:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f248 0201 	movw	r2, #32769	; 0x8001
 800cc1e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f248 0241 	movw	r2, #32833	; 0x8041
 800cc26:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	220e      	movs	r2, #14
 800cc2c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	220a      	movs	r2, #10
 800cc32:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2206      	movs	r2, #6
 800cc38:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	220e      	movs	r2, #14
 800cc3e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	220a      	movs	r2, #10
 800cc44:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2206      	movs	r2, #6
 800cc4a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2202      	movs	r2, #2
 800cc50:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2221      	movs	r2, #33	; 0x21
 800cc56:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cc6a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cc72:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cc7a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	22c0      	movs	r2, #192	; 0xc0
 800cc80:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	22c0      	movs	r2, #192	; 0xc0
 800cc86:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	22c0      	movs	r2, #192	; 0xc0
 800cc8c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2208      	movs	r2, #8
 800cc92:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2210      	movs	r2, #16
 800cc98:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2202      	movs	r2, #2
 800cca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ccc8:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ccd0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f248 0230 	movw	r2, #32816	; 0x8030
 800ccd8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cce0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cce8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800ccf8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cd00:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800cd08:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd10:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800cd12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3714      	adds	r7, #20
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cd22:	b480      	push	{r7}
 800cd24:	b087      	sub	sp, #28
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cd3a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2211      	movs	r2, #17
 800cd7c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2202      	movs	r2, #2
 800cd82:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2208      	movs	r2, #8
 800cd94:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	22ff      	movs	r2, #255	; 0xff
 800cdd2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2220      	movs	r2, #32
 800ce06:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	220b      	movs	r2, #11
 800ce0c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	220d      	movs	r2, #13
 800ce20:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2201      	movs	r2, #1
 800ce34:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800ce48:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2238      	movs	r2, #56	; 0x38
 800ce54:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	22ff      	movs	r2, #255	; 0xff
 800ce5a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	221a      	movs	r2, #26
 800ce6c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2220      	movs	r2, #32
 800ce78:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	22cc      	movs	r2, #204	; 0xcc
 800ce84:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	220b      	movs	r2, #11
 800ce8a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	22f5      	movs	r2, #245	; 0xf5
 800ce96:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2209      	movs	r2, #9
 800ce9c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2208      	movs	r2, #8
 800ceb2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2278      	movs	r2, #120	; 0x78
 800ceb8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2201      	movs	r2, #1
 800ceca:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2200      	movs	r2, #0
 800ced0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2200      	movs	r2, #0
 800ced6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	220b      	movs	r2, #11
 800ceec:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2209      	movs	r2, #9
 800cef2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	2201      	movs	r2, #1
 800cf08:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	22c7      	movs	r2, #199	; 0xc7
 800cf22:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	22ff      	movs	r2, #255	; 0xff
 800cf28:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	22db      	movs	r2, #219	; 0xdb
 800cf2e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	2202      	movs	r2, #2
 800cf34:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	2201      	movs	r2, #1
 800cf46:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	2221      	movs	r2, #33	; 0x21
 800cf4c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800cf4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	371c      	adds	r7, #28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b088      	sub	sp, #32
 800cf62:	af02      	add	r7, sp, #8
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	60b9      	str	r1, [r7, #8]
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	9301      	str	r3, [sp, #4]
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7ff fecf 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800cf84:	4603      	mov	r3, r0
 800cf86:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cf88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d121      	bne.n	800cfd4 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2207      	movs	r2, #7
 800cf94:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2205      	movs	r2, #5
 800cf9a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2208      	movs	r2, #8
 800cfb0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2238      	movs	r2, #56	; 0x38
 800cfb6:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2207      	movs	r2, #7
 800cfbc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2205      	movs	r2, #5
 800cfc2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af02      	add	r7, sp, #8
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfee:	2300      	movs	r3, #0
 800cff0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	68b9      	ldr	r1, [r7, #8]
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f7ff fe8e 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d006:	4603      	mov	r3, r0
 800d008:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d00a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d121      	bne.n	800d056 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	220f      	movs	r2, #15
 800d016:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	220d      	movs	r2, #13
 800d01c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2208      	movs	r2, #8
 800d032:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	22b8      	movs	r2, #184	; 0xb8
 800d038:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	220f      	movs	r2, #15
 800d03e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	220d      	movs	r2, #13
 800d044:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b088      	sub	sp, #32
 800d066:	af02      	add	r7, sp, #8
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
 800d06e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d070:	2300      	movs	r3, #0
 800d072:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	68b9      	ldr	r1, [r7, #8]
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff fe4d 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d088:	4603      	mov	r3, r0
 800d08a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d105      	bne.n	800d0a0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2202      	movs	r2, #2
 800d098:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	223b      	movs	r2, #59	; 0x3b
 800d09e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af02      	add	r7, sp, #8
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f7ff fe28 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	225b      	movs	r2, #91	; 0x5b
 800d0e8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b088      	sub	sp, #32
 800d0fa:	af02      	add	r7, sp, #8
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	607a      	str	r2, [r7, #4]
 800d102:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d104:	2300      	movs	r3, #0
 800d106:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	9301      	str	r3, [sp, #4]
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7ff fe03 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d11c:	4603      	mov	r3, r0
 800d11e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d11a      	bne.n	800d15e <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2200      	movs	r2, #0
 800d12c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	22b1      	movs	r2, #177	; 0xb1
 800d138:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	22d4      	movs	r2, #212	; 0xd4
 800d144:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d14c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	2240      	movs	r2, #64	; 0x40
 800d15c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b088      	sub	sp, #32
 800d16e:	af02      	add	r7, sp, #8
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	60b9      	str	r1, [r7, #8]
 800d174:	607a      	str	r2, [r7, #4]
 800d176:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d178:	2300      	movs	r3, #0
 800d17a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fee7 	bl	800cf5e <VL53L1_preset_mode_standard_ranging_short_range>
 800d190:	4603      	mov	r3, r0
 800d192:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d11a      	bne.n	800d1d2 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2284      	movs	r2, #132	; 0x84
 800d1ac:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	22b1      	movs	r2, #177	; 0xb1
 800d1b8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d1c0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2240      	movs	r2, #64	; 0x40
 800d1d0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b088      	sub	sp, #32
 800d1e2:	af02      	add	r7, sp, #8
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	607a      	str	r2, [r7, #4]
 800d1ea:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	9301      	str	r3, [sp, #4]
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f7ff feee 	bl	800cfe0 <VL53L1_preset_mode_standard_ranging_long_range>
 800d204:	4603      	mov	r3, r0
 800d206:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d11a      	bne.n	800d246 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2200      	movs	r2, #0
 800d214:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2297      	movs	r2, #151	; 0x97
 800d220:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	22b1      	movs	r2, #177	; 0xb1
 800d22c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d234:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2240      	movs	r2, #64	; 0x40
 800d244:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b088      	sub	sp, #32
 800d256:	af02      	add	r7, sp, #8
 800d258:	60f8      	str	r0, [r7, #12]
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	607a      	str	r2, [r7, #4]
 800d25e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d260:	2300      	movs	r3, #0
 800d262:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	68b9      	ldr	r1, [r7, #8]
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f7ff ff3f 	bl	800d0f6 <VL53L1_preset_mode_timed_ranging>
 800d278:	4603      	mov	r3, r0
 800d27a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d27c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	68b8      	ldr	r0, [r7, #8]
 800d28a:	f000 fe7b 	bl	800df84 <VL53L1_config_low_power_auto_mode>
 800d28e:	4603      	mov	r3, r0
 800d290:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b088      	sub	sp, #32
 800d2a2:	af02      	add	r7, sp, #8
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	68b9      	ldr	r1, [r7, #8]
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f7ff ff53 	bl	800d16a <VL53L1_preset_mode_timed_ranging_short_range>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d2c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	68b8      	ldr	r0, [r7, #8]
 800d2d6:	f000 fe55 	bl	800df84 <VL53L1_config_low_power_auto_mode>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b088      	sub	sp, #32
 800d2ee:	af02      	add	r7, sp, #8
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
 800d2f6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	68b9      	ldr	r1, [r7, #8]
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	f7ff ff67 	bl	800d1de <VL53L1_preset_mode_timed_ranging_long_range>
 800d310:	4603      	mov	r3, r0
 800d312:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d106      	bne.n	800d32a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	68b8      	ldr	r0, [r7, #8]
 800d322:	f000 fe2f 	bl	800df84 <VL53L1_config_low_power_auto_mode>
 800d326:	4603      	mov	r3, r0
 800d328:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b088      	sub	sp, #32
 800d33a:	af02      	add	r7, sp, #8
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
 800d342:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d344:	2300      	movs	r3, #0
 800d346:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7ff fce3 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d116      	bne.n	800d396 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2200      	movs	r2, #0
 800d36c:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	22b1      	movs	r2, #177	; 0xb1
 800d378:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	22d4      	movs	r2, #212	; 0xd4
 800d384:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	2210      	movs	r2, #16
 800d394:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b088      	sub	sp, #32
 800d3a6:	af02      	add	r7, sp, #8
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
 800d3ae:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	68b9      	ldr	r1, [r7, #8]
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff fcad 	bl	800cd22 <VL53L1_preset_mode_standard_ranging>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d3cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3718      	adds	r7, #24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b085      	sub	sp, #20
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	220d      	movs	r2, #13
 800d406:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f640 028e 	movw	r2, #2190	; 0x88e
 800d410:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d412:	bf00      	nop
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800d41e:	b480      	push	{r7}
 800d420:	b085      	sub	sp, #20
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	460b      	mov	r3, r1
 800d428:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	332c      	adds	r3, #44	; 0x2c
 800d432:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	78fa      	ldrb	r2, [r7, #3]
 800d438:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2200      	movs	r2, #0
 800d43e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2202      	movs	r2, #2
 800d444:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2200      	movs	r2, #0
 800d44a:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2200      	movs	r2, #0
 800d456:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2202      	movs	r2, #2
 800d45c:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2200      	movs	r2, #0
 800d462:	71da      	strb	r2, [r3, #7]

}
 800d464:	bf00      	nop
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800d478:	2300      	movs	r3, #0
 800d47a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	332c      	adds	r3, #44	; 0x2c
 800d484:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10c      	bne.n	800d4ae <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2203      	movs	r2, #3
 800d498:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	71da      	strb	r2, [r3, #7]
 800d4ac:	e060      	b.n	800d570 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	795b      	ldrb	r3, [r3, #5]
 800d4b2:	2bff      	cmp	r3, #255	; 0xff
 800d4b4:	d103      	bne.n	800d4be <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2280      	movs	r2, #128	; 0x80
 800d4ba:	715a      	strb	r2, [r3, #5]
 800d4bc:	e005      	b.n	800d4ca <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	795b      	ldrb	r3, [r3, #5]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	799b      	ldrb	r3, [r3, #6]
 800d4ce:	f083 0302 	eor.w	r3, r3, #2
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	791b      	ldrb	r3, [r3, #4]
 800d4dc:	3b03      	subs	r3, #3
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d839      	bhi.n	800d556 <VL53L1_update_ll_driver_rd_state+0xe6>
 800d4e2:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d501 	.word	0x0800d501
 800d4ec:	0800d557 	.word	0x0800d557
 800d4f0:	0800d557 	.word	0x0800d557
 800d4f4:	0800d52b 	.word	0x0800d52b
 800d4f8:	0800d539 	.word	0x0800d539
 800d4fc:	0800d541 	.word	0x0800d541

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dd03      	ble.n	800d516 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2206      	movs	r2, #6
 800d512:	711a      	strb	r2, [r3, #4]
 800d514:	e002      	b.n	800d51c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2208      	movs	r2, #8
 800d51a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	71da      	strb	r2, [r3, #7]

		break;
 800d528:	e022      	b.n	800d570 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2208      	movs	r2, #8
 800d534:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d536:	e01b      	b.n	800d570 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2208      	movs	r2, #8
 800d53c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d53e:	e017      	b.n	800d570 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	79db      	ldrb	r3, [r3, #7]
 800d544:	f083 0301 	eor.w	r3, r3, #1
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2208      	movs	r2, #8
 800d552:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d554:	e00c      	b.n	800d570 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2203      	movs	r2, #3
 800d55a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2202      	movs	r2, #2
 800d566:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	71da      	strb	r2, [r3, #7]

		break;
 800d56e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d570:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d574:	4618      	mov	r0, r3
 800d576:	371c      	adds	r7, #28
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d580:	b480      	push	{r7}
 800d582:	b089      	sub	sp, #36	; 0x24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d588:	2300      	movs	r3, #0
 800d58a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	332c      	adds	r3, #44	; 0x2c
 800d594:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800d59c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d5ae:	f003 031f 	and.w	r3, r3, #31
 800d5b2:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	78db      	ldrb	r3, [r3, #3]
 800d5b8:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d5be:	111b      	asrs	r3, r3, #4
 800d5c0:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d5c2:	f003 0302 	and.w	r3, r3, #2
 800d5c6:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d5ce:	f003 0320 	and.w	r3, r3, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d017      	beq.n	800d606 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	791b      	ldrb	r3, [r3, #4]
 800d5da:	2b06      	cmp	r3, #6
 800d5dc:	d105      	bne.n	800d5ea <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	2b12      	cmp	r3, #18
 800d5e2:	d010      	beq.n	800d606 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800d5e4:	23ef      	movs	r3, #239	; 0xef
 800d5e6:	77fb      	strb	r3, [r7, #31]
 800d5e8:	e00d      	b.n	800d606 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	795b      	ldrb	r3, [r3, #5]
 800d5ee:	7bba      	ldrb	r2, [r7, #14]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d001      	beq.n	800d5f8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d5f4:	23ee      	movs	r3, #238	; 0xee
 800d5f6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	799b      	ldrb	r3, [r3, #6]
 800d5fc:	7b7a      	ldrb	r2, [r7, #13]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d001      	beq.n	800d606 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800d602:	23ed      	movs	r3, #237	; 0xed
 800d604:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800d606:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3724      	adds	r7, #36	; 0x24
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800d616:	b480      	push	{r7}
 800d618:	b087      	sub	sp, #28
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d61e:	2300      	movs	r3, #0
 800d620:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	332c      	adds	r3, #44	; 0x2c
 800d62a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10c      	bne.n	800d654 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2203      	movs	r2, #3
 800d63e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2200      	movs	r2, #0
 800d644:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2202      	movs	r2, #2
 800d64a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	70da      	strb	r2, [r3, #3]
 800d652:	e03e      	b.n	800d6d2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	785b      	ldrb	r3, [r3, #1]
 800d658:	2bff      	cmp	r3, #255	; 0xff
 800d65a:	d103      	bne.n	800d664 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2280      	movs	r2, #128	; 0x80
 800d660:	705a      	strb	r2, [r3, #1]
 800d662:	e005      	b.n	800d670 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	3301      	adds	r3, #1
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	789b      	ldrb	r3, [r3, #2]
 800d674:	f083 0302 	eor.w	r3, r3, #2
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	2b03      	cmp	r3, #3
 800d684:	d002      	beq.n	800d68c <VL53L1_update_ll_driver_cfg_state+0x76>
 800d686:	2b04      	cmp	r3, #4
 800d688:	d00e      	beq.n	800d6a8 <VL53L1_update_ll_driver_cfg_state+0x92>
 800d68a:	e015      	b.n	800d6b8 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	78db      	ldrb	r3, [r3, #3]
 800d690:	f083 0301 	eor.w	r3, r3, #1
 800d694:	b2da      	uxtb	r2, r3
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2201      	movs	r2, #1
 800d69e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	701a      	strb	r2, [r3, #0]
		break;
 800d6a6:	e014      	b.n	800d6d2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	78db      	ldrb	r3, [r3, #3]
 800d6ac:	f083 0301 	eor.w	r3, r3, #1
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	70da      	strb	r2, [r3, #3]

		break;
 800d6b6:	e00c      	b.n	800d6d2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2203      	movs	r2, #3
 800d6bc:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	70da      	strb	r2, [r3, #3]

		break;
 800d6d0:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	371c      	adds	r7, #28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d6e2:	b480      	push	{r7}
 800d6e4:	b083      	sub	sp, #12
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7c1a      	ldrb	r2, [r3, #16]
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	7c52      	ldrb	r2, [r2, #17]
 800d6fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	3302      	adds	r3, #2
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	7c92      	ldrb	r2, [r2, #18]
 800d706:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	3303      	adds	r3, #3
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	7cd2      	ldrb	r2, [r2, #19]
 800d710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	3304      	adds	r3, #4
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	7d12      	ldrb	r2, [r2, #20]
 800d71a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	3305      	adds	r3, #5
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	7d52      	ldrb	r2, [r2, #21]
 800d724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	3306      	adds	r3, #6
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	7d92      	ldrb	r2, [r2, #22]
 800d72e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	3307      	adds	r3, #7
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	7dd2      	ldrb	r2, [r2, #23]
 800d738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	7e12      	ldrb	r2, [r2, #24]
 800d742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	3309      	adds	r3, #9
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	7e52      	ldrb	r2, [r2, #25]
 800d74c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	330a      	adds	r3, #10
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	7e92      	ldrb	r2, [r2, #26]
 800d756:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	330b      	adds	r3, #11
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7ed2      	ldrb	r2, [r2, #27]
 800d760:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	330c      	adds	r3, #12
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	7f12      	ldrb	r2, [r2, #28]
 800d76a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	330d      	adds	r3, #13
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	7f52      	ldrb	r2, [r2, #29]
 800d774:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	330e      	adds	r3, #14
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	7f92      	ldrb	r2, [r2, #30]
 800d77e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	330f      	adds	r3, #15
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	7fd2      	ldrb	r2, [r2, #31]
 800d788:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	3310      	adds	r3, #16
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d794:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	3311      	adds	r3, #17
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d7a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	3312      	adds	r3, #18
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d7ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	3313      	adds	r3, #19
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d7b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	3314      	adds	r3, #20
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d7c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	3315      	adds	r3, #21
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d7d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	3316      	adds	r3, #22
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d7dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	3317      	adds	r3, #23
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d7e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	3318      	adds	r3, #24
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d7f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	3319      	adds	r3, #25
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d800:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	331a      	adds	r3, #26
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d80c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	331b      	adds	r3, #27
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d818:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	331c      	adds	r3, #28
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d824:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	331d      	adds	r3, #29
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d830:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	331e      	adds	r3, #30
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d83c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	331f      	adds	r3, #31
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d848:	701a      	strb	r2, [r3, #0]
}
 800d84a:	bf00      	nop
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d856:	b480      	push	{r7}
 800d858:	b085      	sub	sp, #20
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	4603      	mov	r3, r0
 800d85e:	603a      	str	r2, [r7, #0]
 800d860:	80fb      	strh	r3, [r7, #6]
 800d862:	460b      	mov	r3, r1
 800d864:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d86e:	88fb      	ldrh	r3, [r7, #6]
 800d870:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d872:	2300      	movs	r3, #0
 800d874:	81fb      	strh	r3, [r7, #14]
 800d876:	e00e      	b.n	800d896 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d878:	88ba      	ldrh	r2, [r7, #4]
 800d87a:	89fb      	ldrh	r3, [r7, #14]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	3b01      	subs	r3, #1
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	4413      	add	r3, r2
 800d884:	89ba      	ldrh	r2, [r7, #12]
 800d886:	b2d2      	uxtb	r2, r2
 800d888:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d88a:	89bb      	ldrh	r3, [r7, #12]
 800d88c:	0a1b      	lsrs	r3, r3, #8
 800d88e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d890:	89fb      	ldrh	r3, [r7, #14]
 800d892:	3301      	adds	r3, #1
 800d894:	81fb      	strh	r3, [r7, #14]
 800d896:	89fa      	ldrh	r2, [r7, #14]
 800d898:	88bb      	ldrh	r3, [r7, #4]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d3ec      	bcc.n	800d878 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	6039      	str	r1, [r7, #0]
 800d8b6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800d8bc:	e00a      	b.n	800d8d4 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800d8be:	89fb      	ldrh	r3, [r7, #14]
 800d8c0:	021b      	lsls	r3, r3, #8
 800d8c2:	b21a      	sxth	r2, r3
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	1c59      	adds	r1, r3, #1
 800d8c8:	6039      	str	r1, [r7, #0]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	b21b      	sxth	r3, r3
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	b21b      	sxth	r3, r3
 800d8d2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d8d4:	88fb      	ldrh	r3, [r7, #6]
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	80fa      	strh	r2, [r7, #6]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1ef      	bne.n	800d8be <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800d8de:	89fb      	ldrh	r3, [r7, #14]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	603a      	str	r2, [r7, #0]
 800d8f6:	80fb      	strh	r3, [r7, #6]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800d900:	2300      	movs	r3, #0
 800d902:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d904:	88fb      	ldrh	r3, [r7, #6]
 800d906:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d908:	2300      	movs	r3, #0
 800d90a:	81fb      	strh	r3, [r7, #14]
 800d90c:	e00f      	b.n	800d92e <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d90e:	88ba      	ldrh	r2, [r7, #4]
 800d910:	89fb      	ldrh	r3, [r7, #14]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	3b01      	subs	r3, #1
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	4413      	add	r3, r2
 800d91a:	89ba      	ldrh	r2, [r7, #12]
 800d91c:	b2d2      	uxtb	r2, r2
 800d91e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d920:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d924:	121b      	asrs	r3, r3, #8
 800d926:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d928:	89fb      	ldrh	r3, [r7, #14]
 800d92a:	3301      	adds	r3, #1
 800d92c:	81fb      	strh	r3, [r7, #14]
 800d92e:	89fa      	ldrh	r2, [r7, #14]
 800d930:	88bb      	ldrh	r3, [r7, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	d3eb      	bcc.n	800d90e <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800d936:	bf00      	nop
 800d938:	bf00      	nop
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	6039      	str	r1, [r7, #0]
 800d94e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800d950:	2300      	movs	r3, #0
 800d952:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	b25b      	sxtb	r3, r3
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	da0e      	bge.n	800d97c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800d95e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d962:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800d964:	e00a      	b.n	800d97c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800d966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d96a:	021b      	lsls	r3, r3, #8
 800d96c:	b21a      	sxth	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	1c59      	adds	r1, r3, #1
 800d972:	6039      	str	r1, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	b21b      	sxth	r3, r3
 800d978:	4313      	orrs	r3, r2
 800d97a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d97c:	88fb      	ldrh	r3, [r7, #6]
 800d97e:	1e5a      	subs	r2, r3, #1
 800d980:	80fa      	strh	r2, [r7, #6]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1ef      	bne.n	800d966 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800d986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d996:	b480      	push	{r7}
 800d998:	b087      	sub	sp, #28
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	607a      	str	r2, [r7, #4]
 800d9a2:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	82fb      	strh	r3, [r7, #22]
 800d9b4:	e00e      	b.n	800d9d4 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d9b6:	897a      	ldrh	r2, [r7, #10]
 800d9b8:	8afb      	ldrh	r3, [r7, #22]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	b2d2      	uxtb	r2, r2
 800d9c6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	0a1b      	lsrs	r3, r3, #8
 800d9cc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800d9ce:	8afb      	ldrh	r3, [r7, #22]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	82fb      	strh	r3, [r7, #22]
 800d9d4:	8afa      	ldrh	r2, [r7, #22]
 800d9d6:	897b      	ldrh	r3, [r7, #10]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d3ec      	bcc.n	800d9b6 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	6039      	str	r1, [r7, #0]
 800d9f4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800d9fa:	e007      	b.n	800da0c <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	021a      	lsls	r2, r3, #8
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	1c59      	adds	r1, r3, #1
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	4313      	orrs	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800da0c:	88fb      	ldrh	r3, [r7, #6]
 800da0e:	1e5a      	subs	r2, r3, #1
 800da10:	80fa      	strh	r2, [r7, #6]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1f2      	bne.n	800d9fc <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800da16:	68fb      	ldr	r3, [r7, #12]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	6039      	str	r1, [r7, #0]
 800da2e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	b25b      	sxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	da0b      	bge.n	800da56 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800da3e:	f04f 33ff 	mov.w	r3, #4294967295
 800da42:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800da44:	e007      	b.n	800da56 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	021a      	lsls	r2, r3, #8
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	1c59      	adds	r1, r3, #1
 800da4e:	6039      	str	r1, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800da56:	88fb      	ldrh	r3, [r7, #6]
 800da58:	1e5a      	subs	r2, r3, #1
 800da5a:	80fa      	strh	r2, [r7, #6]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1f2      	bne.n	800da46 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800da60:	68fb      	ldr	r3, [r7, #12]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800da90:	461a      	mov	r2, r3
 800da92:	2183      	movs	r1, #131	; 0x83
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f001 fd0d 	bl	800f4b4 <VL53L1_WrByte>
 800da9a:	4603      	mov	r3, r0
 800da9c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800da9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800dab6:	2101      	movs	r1, #1
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7ff ffd8 	bl	800da6e <VL53L1_set_powerforce_register>
 800dabe:	4603      	mov	r3, r0
 800dac0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b086      	sub	sp, #24
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	4603      	mov	r3, r0
 800dad6:	460a      	mov	r2, r1
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	4613      	mov	r3, r2
 800dadc:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800daea:	88fb      	ldrh	r3, [r7, #6]
 800daec:	4618      	mov	r0, r3
 800daee:	f000 faa7 	bl	800e040 <VL53L1_calc_pll_period_us>
 800daf2:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800daf4:	797b      	ldrb	r3, [r7, #5]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 fab6 	bl	800e068 <VL53L1_decode_vcsel_period>
 800dafc:	4603      	mov	r3, r0
 800dafe:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800db00:	697a      	ldr	r2, [r7, #20]
 800db02:	4613      	mov	r3, r2
 800db04:	00db      	lsls	r3, r3, #3
 800db06:	4413      	add	r3, r2
 800db08:	021b      	lsls	r3, r3, #8
 800db0a:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	099b      	lsrs	r3, r3, #6
 800db10:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800db12:	7cfa      	ldrb	r2, [r7, #19]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	fb02 f303 	mul.w	r3, r2, r3
 800db1a:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	099b      	lsrs	r3, r3, #6
 800db20:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800db22:	68fb      	ldr	r3, [r7, #12]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b089      	sub	sp, #36	; 0x24
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	4608      	mov	r0, r1
 800db36:	4611      	mov	r1, r2
 800db38:	461a      	mov	r2, r3
 800db3a:	4603      	mov	r3, r0
 800db3c:	817b      	strh	r3, [r7, #10]
 800db3e:	460b      	mov	r3, r1
 800db40:	813b      	strh	r3, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800db56:	2300      	movs	r3, #0
 800db58:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	011b      	lsls	r3, r3, #4
 800db5e:	4a23      	ldr	r2, [pc, #140]	; (800dbec <VL53L1_calc_range_ignore_threshold+0xc0>)
 800db60:	fb82 1203 	smull	r1, r2, r2, r3
 800db64:	1192      	asrs	r2, r2, #6
 800db66:	17db      	asrs	r3, r3, #31
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800db6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db70:	2b00      	cmp	r3, #0
 800db72:	da03      	bge.n	800db7c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800db74:	897b      	ldrh	r3, [r7, #10]
 800db76:	425b      	negs	r3, r3
 800db78:	b29b      	uxth	r3, r3
 800db7a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800db7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	da03      	bge.n	800db8c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800db84:	893b      	ldrh	r3, [r7, #8]
 800db86:	425b      	negs	r3, r3
 800db88:	b29b      	uxth	r3, r3
 800db8a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800db8c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800db90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800db94:	4413      	add	r3, r2
 800db96:	015b      	lsls	r3, r3, #5
 800db98:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	4a13      	ldr	r2, [pc, #76]	; (800dbec <VL53L1_calc_range_ignore_threshold+0xc0>)
 800db9e:	fb82 1203 	smull	r1, r2, r2, r3
 800dba2:	1192      	asrs	r2, r2, #6
 800dba4:	17db      	asrs	r3, r3, #31
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	4413      	add	r3, r2
 800dbb0:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800dbb2:	79fa      	ldrb	r2, [r7, #7]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	fb02 f303 	mul.w	r3, r2, r3
 800dbba:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	3310      	adds	r3, #16
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	da00      	bge.n	800dbc6 <VL53L1_calc_range_ignore_threshold+0x9a>
 800dbc4:	331f      	adds	r3, #31
 800dbc6:	115b      	asrs	r3, r3, #5
 800dbc8:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd0:	db03      	blt.n	800dbda <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800dbd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbd6:	83fb      	strh	r3, [r7, #30]
 800dbd8:	e001      	b.n	800dbde <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800dbde:	8bfb      	ldrh	r3, [r7, #30]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3724      	adds	r7, #36	; 0x24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	10624dd3 	.word	0x10624dd3

0800dbf0 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	031a      	lsls	r2, r3, #12
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	441a      	add	r2, r3
	timeout_mclks   =
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc0e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800dc10:	68fb      	ldr	r3, [r7, #12]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b084      	sub	sp, #16
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff ffdc 	bl	800dbf0 <VL53L1_calc_timeout_mclks>
 800dc38:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f000 f85e 	bl	800dcfc <VL53L1_encode_timeout>
 800dc40:	4603      	mov	r3, r0
 800dc42:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800dc44:	897b      	ldrh	r3, [r7, #10]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800dc4e:	b4f0      	push	{r4, r5, r6, r7}
 800dc50:	b086      	sub	sp, #24
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800dc5c:	f04f 0200 	mov.w	r2, #0
 800dc60:	f04f 0300 	mov.w	r3, #0
 800dc64:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f04f 0100 	mov.w	r1, #0
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f04f 0300 	mov.w	r3, #0
 800dc78:	fb02 fc01 	mul.w	ip, r2, r1
 800dc7c:	fb00 f603 	mul.w	r6, r0, r3
 800dc80:	4466      	add	r6, ip
 800dc82:	fba0 2302 	umull	r2, r3, r0, r2
 800dc86:	18f1      	adds	r1, r6, r3
 800dc88:	460b      	mov	r3, r1
 800dc8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800dc8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800dc92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc96:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800dc9a:	f143 0500 	adc.w	r5, r3, #0
 800dc9e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800dca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dca6:	f04f 0200 	mov.w	r2, #0
 800dcaa:	f04f 0300 	mov.w	r3, #0
 800dcae:	0b02      	lsrs	r2, r0, #12
 800dcb0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800dcb4:	0b0b      	lsrs	r3, r1, #12
 800dcb6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800dcbe:	697b      	ldr	r3, [r7, #20]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bcf0      	pop	{r4, r5, r6, r7}
 800dcc8:	4770      	bx	lr

0800dcca <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	6039      	str	r1, [r7, #0]
 800dcd4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800dcde:	88fb      	ldrh	r3, [r7, #6]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 f837 	bl	800dd54 <VL53L1_decode_timeout>
 800dce6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f7ff ffaf 	bl	800dc4e <VL53L1_calc_timeout_us>
 800dcf0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d017      	beq.n	800dd46 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dd1c:	e005      	b.n	800dd2a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	085b      	lsrs	r3, r3, #1
 800dd22:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800dd24:	89fb      	ldrh	r3, [r7, #14]
 800dd26:	3301      	adds	r3, #1
 800dd28:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1f4      	bne.n	800dd1e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800dd34:	89fb      	ldrh	r3, [r7, #14]
 800dd36:	021b      	lsls	r3, r3, #8
 800dd38:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800dd42:	4413      	add	r3, r2
 800dd44:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800dd46:	8afb      	ldrh	r3, [r7, #22]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	371c      	adds	r7, #28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800dd62:	88fb      	ldrh	r3, [r7, #6]
 800dd64:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800dd66:	88fa      	ldrh	r2, [r7, #6]
 800dd68:	0a12      	lsrs	r2, r2, #8
 800dd6a:	b292      	uxth	r2, r2
 800dd6c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800dd6e:	3301      	adds	r3, #1
 800dd70:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800dd72:	68fb      	ldr	r3, [r7, #12]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800dd9e:	887b      	ldrh	r3, [r7, #2]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dda4:	23f1      	movs	r3, #241	; 0xf1
 800dda6:	77fb      	strb	r3, [r7, #31]
 800dda8:	e05d      	b.n	800de66 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	799a      	ldrb	r2, [r3, #6]
 800ddae:	887b      	ldrh	r3, [r7, #2]
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff fe8b 	bl	800dace <VL53L1_calc_macro_period_us>
 800ddb8:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800ddba:	6979      	ldr	r1, [r7, #20]
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff ff17 	bl	800dbf0 <VL53L1_calc_timeout_mclks>
 800ddc2:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	2bff      	cmp	r3, #255	; 0xff
 800ddc8:	d901      	bls.n	800ddce <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800ddca:	23ff      	movs	r3, #255	; 0xff
 800ddcc:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800ddd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd4:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ddd6:	6979      	ldr	r1, [r7, #20]
 800ddd8:	68b8      	ldr	r0, [r7, #8]
 800ddda:	f7ff ff20 	bl	800dc1e <VL53L1_calc_encoded_timeout>
 800ddde:	4603      	mov	r3, r0
 800dde0:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800dde2:	8a7b      	ldrh	r3, [r7, #18]
 800dde4:	0a1b      	lsrs	r3, r3, #8
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ddee:	8a7b      	ldrh	r3, [r7, #18]
 800ddf0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ddf6:	6979      	ldr	r1, [r7, #20]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff ff10 	bl	800dc1e <VL53L1_calc_encoded_timeout>
 800ddfe:	4603      	mov	r3, r0
 800de00:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800de02:	8a7b      	ldrh	r3, [r7, #18]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	b29b      	uxth	r3, r3
 800de08:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800de0e:	8a7b      	ldrh	r3, [r7, #18]
 800de10:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800de12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de14:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800de16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de18:	7a5a      	ldrb	r2, [r3, #9]
 800de1a:	887b      	ldrh	r3, [r7, #2]
 800de1c:	4611      	mov	r1, r2
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff fe55 	bl	800dace <VL53L1_calc_macro_period_us>
 800de24:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800de26:	6979      	ldr	r1, [r7, #20]
 800de28:	68b8      	ldr	r0, [r7, #8]
 800de2a:	f7ff fef8 	bl	800dc1e <VL53L1_calc_encoded_timeout>
 800de2e:	4603      	mov	r3, r0
 800de30:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800de32:	8a7b      	ldrh	r3, [r7, #18]
 800de34:	0a1b      	lsrs	r3, r3, #8
 800de36:	b29b      	uxth	r3, r3
 800de38:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800de3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800de3e:	8a7b      	ldrh	r3, [r7, #18]
 800de40:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de44:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800de46:	6979      	ldr	r1, [r7, #20]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff fee8 	bl	800dc1e <VL53L1_calc_encoded_timeout>
 800de4e:	4603      	mov	r3, r0
 800de50:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800de52:	8a7b      	ldrh	r3, [r7, #18]
 800de54:	0a1b      	lsrs	r3, r3, #8
 800de56:	b29b      	uxth	r3, r3
 800de58:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800de5e:	8a7b      	ldrh	r3, [r7, #18]
 800de60:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800de66:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	4603      	mov	r3, r0
 800de7a:	603a      	str	r2, [r7, #0]
 800de7c:	71fb      	strb	r3, [r7, #7]
 800de7e:	460b      	mov	r3, r1
 800de80:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	2b07      	cmp	r3, #7
 800de86:	d90a      	bls.n	800de9e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800de88:	79bb      	ldrb	r3, [r7, #6]
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	b2db      	uxtb	r3, r3
 800de94:	3b71      	subs	r3, #113	; 0x71
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800de9c:	e00a      	b.n	800deb4 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800de9e:	79bb      	ldrb	r3, [r7, #6]
 800dea0:	f1c3 030f 	rsb	r3, r3, #15
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	4413      	add	r3, r2
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	701a      	strb	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	4603      	mov	r3, r0
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
 800ded0:	091b      	lsrs	r3, r3, #4
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800ded8:	7bfb      	ldrb	r3, [r7, #15]
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	701a      	strb	r2, [r3, #0]

}
 800dee4:	bf00      	nop
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	603a      	str	r2, [r7, #0]
 800defa:	71fb      	strb	r3, [r7, #7]
 800defc:	460b      	mov	r3, r1
 800defe:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800df00:	79bb      	ldrb	r3, [r7, #6]
 800df02:	011b      	lsls	r3, r3, #4
 800df04:	b2da      	uxtb	r2, r3
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	4413      	add	r3, r2
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	701a      	strb	r2, [r3, #0]

}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2203      	movs	r2, #3
 800df30:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	2200      	movs	r2, #0
 800df58:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2200      	movs	r2, #0
 800df68:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2200      	movs	r2, #0
 800df70:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800df74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800df84:	b480      	push	{r7}
 800df86:	b087      	sub	sp, #28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df90:	2300      	movs	r3, #0
 800df92:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	229b      	movs	r2, #155	; 0x9b
 800dfa4:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800dfa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	371c      	adds	r7, #28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800dfe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dff6:	f003 0303 	and.w	r3, r3, #3
 800dffa:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e006:	4413      	add	r3, r2
 800e008:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e030:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e04e:	88fb      	ldrh	r3, [r7, #6]
 800e050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e054:	fb92 f3f3 	sdiv	r3, r2, r3
 800e058:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e05a:	68fb      	ldr	r3, [r7, #12]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	4603      	mov	r3, r0
 800e070:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	3301      	adds	r3, #1
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e080:	7bfb      	ldrb	r3, [r7, #15]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e08e:	b480      	push	{r7}
 800e090:	b085      	sub	sp, #20
 800e092:	af00      	add	r7, sp, #0
 800e094:	4603      	mov	r3, r0
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da10      	bge.n	800e0c6 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	43db      	mvns	r3, r3
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	f003 0307 	and.w	r3, r3, #7
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	3b80      	subs	r3, #128	; 0x80
 800e0bc:	10db      	asrs	r3, r3, #3
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e0c4:	e00c      	b.n	800e0e0 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e0c6:	7bfb      	ldrb	r3, [r7, #15]
 800e0c8:	f003 0307 	and.w	r3, r3, #7
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e0d8:	10db      	asrs	r3, r3, #3
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	701a      	strb	r2, [r3, #0]
}
 800e0e0:	bf00      	nop
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e0fe:	897b      	ldrh	r3, [r7, #10]
 800e100:	2b0a      	cmp	r3, #10
 800e102:	d802      	bhi.n	800e10a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e104:	f06f 0309 	mvn.w	r3, #9
 800e108:	e047      	b.n	800e19a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e112:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e120:	f002 020f 	and.w	r2, r2, #15
 800e124:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e126:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e134:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e136:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e140:	f002 0203 	and.w	r2, r2, #3
 800e144:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e146:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e154:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e156:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	88d8      	ldrh	r0, [r3, #6]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3305      	adds	r3, #5
 800e160:	461a      	mov	r2, r3
 800e162:	2102      	movs	r1, #2
 800e164:	f7ff fb77 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e170:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e17a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e184:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e188:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e18a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e194:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b086      	sub	sp, #24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e1b4:	89fb      	ldrh	r3, [r7, #14]
 800e1b6:	2b0a      	cmp	r3, #10
 800e1b8:	d802      	bhi.n	800e1c0 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e1ba:	f06f 0309 	mvn.w	r3, #9
 800e1be:	e046      	b.n	800e24e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1c8:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	f003 030f 	and.w	r3, r3, #15
 800e1d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	3303      	adds	r3, #3
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	f003 0303 	and.w	r3, r3, #3
 800e1f8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	3304      	adds	r3, #4
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e208:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	3305      	adds	r3, #5
 800e212:	4619      	mov	r1, r3
 800e214:	2002      	movs	r0, #2
 800e216:	f7ff fb49 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800e21a:	4603      	mov	r3, r0
 800e21c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	79da      	ldrb	r2, [r3, #7]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	7a1a      	ldrb	r2, [r3, #8]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	3309      	adds	r3, #9
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e23c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	7a9a      	ldrb	r2, [r3, #10]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e24a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b086      	sub	sp, #24
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e260:	2300      	movs	r3, #0
 800e262:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d108      	bne.n	800e27e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e26c:	f107 020c 	add.w	r2, r7, #12
 800e270:	230b      	movs	r3, #11
 800e272:	2101      	movs	r1, #1
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f001 f8e7 	bl	800f448 <VL53L1_ReadMulti>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e27e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d108      	bne.n	800e298 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e286:	f107 030c 	add.w	r3, r7, #12
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	4619      	mov	r1, r3
 800e28e:	200b      	movs	r0, #11
 800e290:	f7ff ff87 	bl	800e1a2 <VL53L1_i2c_decode_static_nvm_managed>
 800e294:	4603      	mov	r3, r0
 800e296:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e2b6:	897b      	ldrh	r3, [r7, #10]
 800e2b8:	2b16      	cmp	r3, #22
 800e2ba:	d802      	bhi.n	800e2c2 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e2bc:	f06f 0309 	mvn.w	r3, #9
 800e2c0:	e076      	b.n	800e3b0 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e2d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e2dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e2e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e2f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e2fa:	f002 020f 	and.w	r2, r2, #15
 800e2fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e300:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e30a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e314:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e318:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e31a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e324:	f002 0203 	and.w	r2, r2, #3
 800e328:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e32a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	8958      	ldrh	r0, [r3, #10]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3309      	adds	r3, #9
 800e334:	461a      	mov	r2, r3
 800e336:	2102      	movs	r1, #2
 800e338:	f7ff fa8d 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	330b      	adds	r3, #11
 800e346:	461a      	mov	r2, r3
 800e348:	2102      	movs	r1, #2
 800e34a:	f7ff facf 	bl	800d8ec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	330d      	adds	r3, #13
 800e358:	461a      	mov	r2, r3
 800e35a:	2102      	movs	r1, #2
 800e35c:	f7ff fac6 	bl	800d8ec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	8a18      	ldrh	r0, [r3, #16]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	330f      	adds	r3, #15
 800e368:	461a      	mov	r2, r3
 800e36a:	2102      	movs	r1, #2
 800e36c:	f7ff fa73 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800e376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e37a:	b218      	sxth	r0, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3311      	adds	r3, #17
 800e380:	461a      	mov	r2, r3
 800e382:	2102      	movs	r1, #2
 800e384:	f7ff fab2 	bl	800d8ec <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3313      	adds	r3, #19
 800e392:	461a      	mov	r2, r3
 800e394:	2102      	movs	r1, #2
 800e396:	f7ff faa9 	bl	800d8ec <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3315      	adds	r3, #21
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	2102      	movs	r1, #2
 800e3a8:	f7ff faa0 	bl	800d8ec <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e3ca:	89fb      	ldrh	r3, [r7, #14]
 800e3cc:	2b16      	cmp	r3, #22
 800e3ce:	d802      	bhi.n	800e3d6 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e3d0:	f06f 0309 	mvn.w	r3, #9
 800e3d4:	e079      	b.n	800e4ca <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	785a      	ldrb	r2, [r3, #1]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	789a      	ldrb	r2, [r3, #2]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	78da      	ldrb	r2, [r3, #3]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	791a      	ldrb	r2, [r3, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	3305      	adds	r3, #5
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	f003 030f 	and.w	r3, r3, #15
 800e408:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	799a      	ldrb	r2, [r3, #6]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	3307      	adds	r3, #7
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e420:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	3308      	adds	r3, #8
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	3309      	adds	r3, #9
 800e43a:	4619      	mov	r1, r3
 800e43c:	2002      	movs	r0, #2
 800e43e:	f7ff fa35 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800e442:	4603      	mov	r3, r0
 800e444:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	330b      	adds	r3, #11
 800e44e:	4619      	mov	r1, r3
 800e450:	2002      	movs	r0, #2
 800e452:	f7ff fa77 	bl	800d944 <VL53L1_i2c_decode_int16_t>
 800e456:	4603      	mov	r3, r0
 800e458:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	330d      	adds	r3, #13
 800e462:	4619      	mov	r1, r3
 800e464:	2002      	movs	r0, #2
 800e466:	f7ff fa6d 	bl	800d944 <VL53L1_i2c_decode_int16_t>
 800e46a:	4603      	mov	r3, r0
 800e46c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	330f      	adds	r3, #15
 800e476:	4619      	mov	r1, r3
 800e478:	2002      	movs	r0, #2
 800e47a:	f7ff fa17 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800e47e:	4603      	mov	r3, r0
 800e480:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	3311      	adds	r3, #17
 800e48a:	4619      	mov	r1, r3
 800e48c:	2002      	movs	r0, #2
 800e48e:	f7ff fa59 	bl	800d944 <VL53L1_i2c_decode_int16_t>
 800e492:	4603      	mov	r3, r0
 800e494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e498:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	3313      	adds	r3, #19
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	2002      	movs	r0, #2
 800e4a6:	f7ff fa4d 	bl	800d944 <VL53L1_i2c_decode_int16_t>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	3315      	adds	r3, #21
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	2002      	movs	r0, #2
 800e4ba:	f7ff fa43 	bl	800d944 <VL53L1_i2c_decode_int16_t>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e4c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b088      	sub	sp, #32
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e4e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d108      	bne.n	800e4fa <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e4e8:	f107 0208 	add.w	r2, r7, #8
 800e4ec:	2317      	movs	r3, #23
 800e4ee:	210d      	movs	r1, #13
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 ffa9 	bl	800f448 <VL53L1_ReadMulti>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e4fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d108      	bne.n	800e514 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800e502:	f107 0308 	add.w	r3, r7, #8
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	4619      	mov	r1, r3
 800e50a:	2017      	movs	r0, #23
 800e50c:	f7ff ff54 	bl	800e3b8 <VL53L1_i2c_decode_customer_nvm_managed>
 800e510:	4603      	mov	r3, r0
 800e512:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e514:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3720      	adds	r7, #32
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	460b      	mov	r3, r1
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e52e:	2300      	movs	r3, #0
 800e530:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e532:	897b      	ldrh	r3, [r7, #10]
 800e534:	2b1f      	cmp	r3, #31
 800e536:	d802      	bhi.n	800e53e <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e538:	f06f 0309 	mvn.w	r3, #9
 800e53c:	e0cf      	b.n	800e6de <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	2102      	movs	r1, #2
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff f985 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800e554:	f002 0201 	and.w	r2, r2, #1
 800e558:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e55a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800e564:	f002 020f 	and.w	r2, r2, #15
 800e568:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e56a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800e574:	f002 020f 	and.w	r2, r2, #15
 800e578:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e57a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800e584:	f002 021f 	and.w	r2, r2, #31
 800e588:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e58a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e598:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e59a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800e5a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e5aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800e5b4:	f002 0201 	and.w	r2, r2, #1
 800e5b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e5ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800e5c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e5ce:	f002 0201 	and.w	r2, r2, #1
 800e5d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e5d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e5de:	f002 0203 	and.w	r2, r2, #3
 800e5e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e5e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e5ee:	f002 021f 	and.w	r2, r2, #31
 800e5f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e5f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800e5fe:	f002 0203 	and.w	r2, r2, #3
 800e602:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e604:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800e60e:	f002 0203 	and.w	r2, r2, #3
 800e612:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800e614:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e61e:	f002 0207 	and.w	r2, r2, #7
 800e622:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800e624:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e62e:	f002 021f 	and.w	r2, r2, #31
 800e632:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800e634:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e63e:	f002 0201 	and.w	r2, r2, #1
 800e642:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e644:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e64e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e658:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e662:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e66c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800e676:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800e67c:	68fa      	ldr	r2, [r7, #12]
 800e67e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800e680:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	8b18      	ldrh	r0, [r3, #24]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3318      	adds	r3, #24
 800e68a:	461a      	mov	r2, r3
 800e68c:	2102      	movs	r1, #2
 800e68e:	f7ff f8e2 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800e69a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800e6a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800e6ae:	f002 020f 	and.w	r2, r2, #15
 800e6b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800e6b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800e6be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800e6c8:	f002 020f 	and.w	r2, r2, #15
 800e6cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800e6ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800e6d8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b086      	sub	sp, #24
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	607a      	str	r2, [r7, #4]
 800e6f2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e6f8:	897b      	ldrh	r3, [r7, #10]
 800e6fa:	2b15      	cmp	r3, #21
 800e6fc:	d802      	bhi.n	800e704 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e6fe:	f06f 0309 	mvn.w	r3, #9
 800e702:	e070      	b.n	800e7e6 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e714:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e71e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800e728:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e72c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e72e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800e734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e738:	b298      	uxth	r0, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	3304      	adds	r3, #4
 800e73e:	461a      	mov	r2, r3
 800e740:	2102      	movs	r1, #2
 800e742:	f7ff f888 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800e74e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e752:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e754:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800e75e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e768:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800e772:	f002 0201 	and.w	r2, r2, #1
 800e776:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e778:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800e782:	f002 0207 	and.w	r2, r2, #7
 800e786:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e788:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	8998      	ldrh	r0, [r3, #12]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	330c      	adds	r3, #12
 800e792:	461a      	mov	r2, r3
 800e794:	2102      	movs	r1, #2
 800e796:	f7ff f85e 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	89d8      	ldrh	r0, [r3, #14]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	330e      	adds	r3, #14
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	2102      	movs	r1, #2
 800e7a6:	f7ff f856 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	8a18      	ldrh	r0, [r3, #16]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	3310      	adds	r3, #16
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	2102      	movs	r1, #2
 800e7b6:	f7ff f84e 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e7c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e7cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e7d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e7e0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3718      	adds	r7, #24
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b086      	sub	sp, #24
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	607a      	str	r2, [r7, #4]
 800e7fa:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e800:	897b      	ldrh	r3, [r7, #10]
 800e802:	2b16      	cmp	r3, #22
 800e804:	d802      	bhi.n	800e80c <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e806:	f06f 0309 	mvn.w	r3, #9
 800e80a:	e06e      	b.n	800e8ea <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 030f 	and.w	r3, r3, #15
 800e814:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e822:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e82c:	f002 020f 	and.w	r2, r2, #15
 800e830:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e832:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e83c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e846:	f002 020f 	and.w	r2, r2, #15
 800e84a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e84c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800e856:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800e860:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e864:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e866:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e870:	f002 020f 	and.w	r2, r2, #15
 800e874:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e880:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800e88a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e88e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e890:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	8958      	ldrh	r0, [r3, #10]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	330a      	adds	r3, #10
 800e89a:	461a      	mov	r2, r3
 800e89c:	2102      	movs	r1, #2
 800e89e:	f7fe ffda 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	8998      	ldrh	r0, [r3, #12]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	2102      	movs	r1, #2
 800e8ae:	f7fe ffd2 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800e8ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800e8c4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6918      	ldr	r0, [r3, #16]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3312      	adds	r3, #18
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	2104      	movs	r1, #4
 800e8d2:	f7ff f860 	bl	800d996 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800e8de:	f002 0201 	and.w	r2, r2, #1
 800e8e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800e8e4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3718      	adds	r7, #24
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b086      	sub	sp, #24
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	60f8      	str	r0, [r7, #12]
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	607a      	str	r2, [r7, #4]
 800e8fe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e900:	2300      	movs	r3, #0
 800e902:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e904:	897b      	ldrh	r3, [r7, #10]
 800e906:	2b11      	cmp	r3, #17
 800e908:	d802      	bhi.n	800e910 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e90a:	f06f 0309 	mvn.w	r3, #9
 800e90e:	e071      	b.n	800e9f4 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 0303 	and.w	r3, r3, #3
 800e918:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	8858      	ldrh	r0, [r3, #2]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3301      	adds	r3, #1
 800e926:	461a      	mov	r2, r3
 800e928:	2102      	movs	r1, #2
 800e92a:	f7fe ff94 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	8898      	ldrh	r0, [r3, #4]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3303      	adds	r3, #3
 800e936:	461a      	mov	r2, r3
 800e938:	2102      	movs	r1, #2
 800e93a:	f7fe ff8c 	bl	800d856 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800e946:	f002 0201 	and.w	r2, r2, #1
 800e94a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e94c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800e956:	f002 0207 	and.w	r2, r2, #7
 800e95a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e95c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e970:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800e97a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e97e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e980:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800e98a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e98e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e990:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800e99a:	f002 0203 	and.w	r2, r2, #3
 800e99e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e9a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800e9aa:	f002 0203 	and.w	r2, r2, #3
 800e9ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e9b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800e9ba:	f002 020f 	and.w	r2, r2, #15
 800e9be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e9c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800e9ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800e9d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800e9de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800e9e8:	f002 0203 	and.w	r2, r2, #3
 800e9ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e9ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e9f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b087      	sub	sp, #28
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	460b      	mov	r3, r1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800ea0e:	897b      	ldrh	r3, [r7, #10]
 800ea10:	2b04      	cmp	r3, #4
 800ea12:	d802      	bhi.n	800ea1a <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea14:	f06f 0309 	mvn.w	r3, #9
 800ea18:	e025      	b.n	800ea66 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800ea30:	f002 0201 	and.w	r2, r2, #1
 800ea34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ea36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800ea40:	f002 0201 	and.w	r2, r2, #1
 800ea44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ea46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800ea50:	f002 0203 	and.w	r2, r2, #3
 800ea54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ea56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ea60:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ea62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	371c      	adds	r7, #28
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b086      	sub	sp, #24
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	4603      	mov	r3, r0
 800ea7a:	60b9      	str	r1, [r7, #8]
 800ea7c:	607a      	str	r2, [r7, #4]
 800ea7e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea80:	2300      	movs	r3, #0
 800ea82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ea84:	89fb      	ldrh	r3, [r7, #14]
 800ea86:	2b2b      	cmp	r3, #43	; 0x2b
 800ea88:	d802      	bhi.n	800ea90 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea8a:	f06f 0309 	mvn.w	r3, #9
 800ea8e:	e0e2      	b.n	800ec56 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea98:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	785a      	ldrb	r2, [r3, #1]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3302      	adds	r3, #2
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	f003 030f 	and.w	r3, r3, #15
 800eab0:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	78da      	ldrb	r2, [r3, #3]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	3304      	adds	r3, #4
 800eac2:	4619      	mov	r1, r3
 800eac4:	2002      	movs	r0, #2
 800eac6:	f7fe fef1 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	3306      	adds	r3, #6
 800ead6:	4619      	mov	r1, r3
 800ead8:	2002      	movs	r0, #2
 800eada:	f7fe fee7 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eade:	4603      	mov	r3, r0
 800eae0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	3308      	adds	r3, #8
 800eaea:	4619      	mov	r1, r3
 800eaec:	2002      	movs	r0, #2
 800eaee:	f7fe fedd 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	330a      	adds	r3, #10
 800eafe:	4619      	mov	r1, r3
 800eb00:	2002      	movs	r0, #2
 800eb02:	f7fe fed3 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	330c      	adds	r3, #12
 800eb12:	4619      	mov	r1, r3
 800eb14:	2002      	movs	r0, #2
 800eb16:	f7fe fec9 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	330e      	adds	r3, #14
 800eb26:	4619      	mov	r1, r3
 800eb28:	2002      	movs	r0, #2
 800eb2a:	f7fe febf 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	3310      	adds	r3, #16
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	2002      	movs	r0, #2
 800eb3e:	f7fe feb5 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb42:	4603      	mov	r3, r0
 800eb44:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	3312      	adds	r3, #18
 800eb4e:	4619      	mov	r1, r3
 800eb50:	2002      	movs	r0, #2
 800eb52:	f7fe feab 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb56:	4603      	mov	r3, r0
 800eb58:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	3314      	adds	r3, #20
 800eb62:	4619      	mov	r1, r3
 800eb64:	2002      	movs	r0, #2
 800eb66:	f7fe fea1 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	3316      	adds	r3, #22
 800eb76:	4619      	mov	r1, r3
 800eb78:	2002      	movs	r0, #2
 800eb7a:	f7fe fe97 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	3318      	adds	r3, #24
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	2002      	movs	r0, #2
 800eb8e:	f7fe fe8d 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eb92:	4603      	mov	r3, r0
 800eb94:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	331a      	adds	r3, #26
 800eb9e:	4619      	mov	r1, r3
 800eba0:	2002      	movs	r0, #2
 800eba2:	f7fe fe83 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800eba6:	4603      	mov	r3, r0
 800eba8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	331c      	adds	r3, #28
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	2002      	movs	r0, #2
 800ebb6:	f7fe fe79 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	331e      	adds	r3, #30
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	2002      	movs	r0, #2
 800ebca:	f7fe fe6f 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	3320      	adds	r3, #32
 800ebda:	4619      	mov	r1, r3
 800ebdc:	2002      	movs	r0, #2
 800ebde:	f7fe fe65 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	3322      	adds	r3, #34	; 0x22
 800ebee:	4619      	mov	r1, r3
 800ebf0:	2002      	movs	r0, #2
 800ebf2:	f7fe fe5b 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	3324      	adds	r3, #36	; 0x24
 800ec02:	4619      	mov	r1, r3
 800ec04:	2002      	movs	r0, #2
 800ec06:	f7fe fe51 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	3326      	adds	r3, #38	; 0x26
 800ec16:	4619      	mov	r1, r3
 800ec18:	2002      	movs	r0, #2
 800ec1a:	f7fe fe47 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	3328      	adds	r3, #40	; 0x28
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	2002      	movs	r0, #2
 800ec2e:	f7fe fe3d 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800ec52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b086      	sub	sp, #24
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	4603      	mov	r3, r0
 800ec66:	60b9      	str	r1, [r7, #8]
 800ec68:	607a      	str	r2, [r7, #4]
 800ec6a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ec70:	89fb      	ldrh	r3, [r7, #14]
 800ec72:	2b20      	cmp	r3, #32
 800ec74:	d802      	bhi.n	800ec7c <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec76:	f06f 0309 	mvn.w	r3, #9
 800ec7a:	e04d      	b.n	800ed18 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800ec7c:	68b9      	ldr	r1, [r7, #8]
 800ec7e:	2004      	movs	r0, #4
 800ec80:	f7fe feb3 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800ec84:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	4619      	mov	r1, r3
 800ec90:	2004      	movs	r0, #4
 800ec92:	f7fe feaa 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800ec96:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	3308      	adds	r3, #8
 800eca0:	4619      	mov	r1, r3
 800eca2:	2004      	movs	r0, #4
 800eca4:	f7fe febe 	bl	800da24 <VL53L1_i2c_decode_int32_t>
 800eca8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	330c      	adds	r3, #12
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	2004      	movs	r0, #4
 800ecb6:	f7fe fe98 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800ecba:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	3310      	adds	r3, #16
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2004      	movs	r0, #4
 800ecc8:	f7fe fe8f 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800eccc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	3314      	adds	r3, #20
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	2004      	movs	r0, #4
 800ecda:	f7fe fe86 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800ecde:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	3318      	adds	r3, #24
 800ece8:	4619      	mov	r1, r3
 800ecea:	2004      	movs	r0, #4
 800ecec:	f7fe fe9a 	bl	800da24 <VL53L1_i2c_decode_int32_t>
 800ecf0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	331c      	adds	r3, #28
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	2004      	movs	r0, #4
 800ecfe:	f7fe fe74 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800ed02:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ed14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ed32:	89fb      	ldrh	r3, [r7, #14]
 800ed34:	2b37      	cmp	r3, #55	; 0x37
 800ed36:	d802      	bhi.n	800ed3e <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed38:	f06f 0309 	mvn.w	r3, #9
 800ed3c:	e15e      	b.n	800effc <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	2002      	movs	r0, #2
 800ed42:	f7fe fdb3 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ed46:	4603      	mov	r3, r0
 800ed48:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	3302      	adds	r3, #2
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed58:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	3303      	adds	r3, #3
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed68:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	3304      	adds	r3, #4
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 0303 	and.w	r3, r3, #3
 800ed78:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	3305      	adds	r3, #5
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	3306      	adds	r3, #6
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed98:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	3307      	adds	r3, #7
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eda8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	3308      	adds	r3, #8
 800edb2:	4619      	mov	r1, r3
 800edb4:	2002      	movs	r0, #2
 800edb6:	f7fe fd79 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800edba:	4603      	mov	r3, r0
 800edbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800edc0:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	330a      	adds	r3, #10
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	f003 0303 	and.w	r3, r3, #3
 800edd0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	330b      	adds	r3, #11
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f003 0303 	and.w	r3, r3, #3
 800ede0:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	330c      	adds	r3, #12
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	330d      	adds	r3, #13
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	f003 0307 	and.w	r3, r3, #7
 800ee00:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	330e      	adds	r3, #14
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	330f      	adds	r3, #15
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f003 0303 	and.w	r3, r3, #3
 800ee20:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	7c1a      	ldrb	r2, [r3, #16]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	7c5a      	ldrb	r2, [r3, #17]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	3312      	adds	r3, #18
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	2002      	movs	r0, #2
 800ee3e:	f7fe fd35 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ee42:	4603      	mov	r3, r0
 800ee44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee48:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	3316      	adds	r3, #22
 800ee52:	4619      	mov	r1, r3
 800ee54:	2002      	movs	r0, #2
 800ee56:	f7fe fd29 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	3318      	adds	r3, #24
 800ee66:	4619      	mov	r1, r3
 800ee68:	2002      	movs	r0, #2
 800ee6a:	f7fe fd1f 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	331a      	adds	r3, #26
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	f003 0301 	and.w	r3, r3, #1
 800ee80:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	331b      	adds	r3, #27
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0307 	and.w	r3, r3, #7
 800ee90:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	7f1a      	ldrb	r2, [r3, #28]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	7f5a      	ldrb	r2, [r3, #29]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	331e      	adds	r3, #30
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeb0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	331f      	adds	r3, #31
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eec0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	3320      	adds	r3, #32
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	f003 0303 	and.w	r3, r3, #3
 800eed0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	3321      	adds	r3, #33	; 0x21
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	f003 030f 	and.w	r3, r3, #15
 800eee0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	3325      	adds	r3, #37	; 0x25
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	3326      	adds	r3, #38	; 0x26
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	f003 0303 	and.w	r3, r3, #3
 800ef26:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	3327      	adds	r3, #39	; 0x27
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 031f 	and.w	r3, r3, #31
 800ef38:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	3328      	adds	r3, #40	; 0x28
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 031f 	and.w	r3, r3, #31
 800ef4a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	3329      	adds	r3, #41	; 0x29
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	f003 031f 	and.w	r3, r3, #31
 800ef5c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	332a      	adds	r3, #42	; 0x2a
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	f003 0301 	and.w	r3, r3, #1
 800ef6e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	332b      	adds	r3, #43	; 0x2b
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	332c      	adds	r3, #44	; 0x2c
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	f003 0303 	and.w	r3, r3, #3
 800ef92:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	332d      	adds	r3, #45	; 0x2d
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efa4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	332e      	adds	r3, #46	; 0x2e
 800efb0:	4619      	mov	r1, r3
 800efb2:	2004      	movs	r0, #4
 800efb4:	f7fe fd19 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800efb8:	4603      	mov	r3, r0
 800efba:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	3332      	adds	r3, #50	; 0x32
 800efc6:	4619      	mov	r1, r3
 800efc8:	2004      	movs	r0, #4
 800efca:	f7fe fd0e 	bl	800d9ea <VL53L1_i2c_decode_uint32_t>
 800efce:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	3336      	adds	r3, #54	; 0x36
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	3337      	adds	r3, #55	; 0x37
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800eff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	4603      	mov	r3, r0
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f012:	2300      	movs	r3, #0
 800f014:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f016:	89fb      	ldrh	r3, [r7, #14]
 800f018:	2b30      	cmp	r3, #48	; 0x30
 800f01a:	d802      	bhi.n	800f022 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f01c:	f06f 0309 	mvn.w	r3, #9
 800f020:	e112      	b.n	800f248 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	785a      	ldrb	r2, [r3, #1]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	789a      	ldrb	r2, [r3, #2]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	3303      	adds	r3, #3
 800f03e:	4619      	mov	r1, r3
 800f040:	2002      	movs	r0, #2
 800f042:	f7fe fc33 	bl	800d8ac <VL53L1_i2c_decode_uint16_t>
 800f046:	4603      	mov	r3, r0
 800f048:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	3305      	adds	r3, #5
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f058:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	3306      	adds	r3, #6
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	f003 0307 	and.w	r3, r3, #7
 800f068:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	3307      	adds	r3, #7
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	f003 0307 	and.w	r3, r3, #7
 800f078:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	3308      	adds	r3, #8
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f088:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	3309      	adds	r3, #9
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f098:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	330a      	adds	r3, #10
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	330b      	adds	r3, #11
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	330c      	adds	r3, #12
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	330d      	adds	r3, #13
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0d8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	330e      	adds	r3, #14
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0e8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	7bda      	ldrb	r2, [r3, #15]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	7c1a      	ldrb	r2, [r3, #16]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	7c5a      	ldrb	r2, [r3, #17]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	7c9a      	ldrb	r2, [r3, #18]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	7cda      	ldrb	r2, [r3, #19]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	7d1a      	ldrb	r2, [r3, #20]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	7d5a      	ldrb	r2, [r3, #21]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	7d9a      	ldrb	r2, [r3, #22]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	7dda      	ldrb	r2, [r3, #23]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	7e1a      	ldrb	r2, [r3, #24]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	7e5a      	ldrb	r2, [r3, #25]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	7e9a      	ldrb	r2, [r3, #26]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	7eda      	ldrb	r2, [r3, #27]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	7f1a      	ldrb	r2, [r3, #28]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	7f5a      	ldrb	r2, [r3, #29]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	7f9a      	ldrb	r2, [r3, #30]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	7fda      	ldrb	r2, [r3, #31]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b090      	sub	sp, #64	; 0x40
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f25a:	2300      	movs	r3, #0
 800f25c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f260:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10a      	bne.n	800f27e <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f268:	f107 020c 	add.w	r2, r7, #12
 800f26c:	2331      	movs	r3, #49	; 0x31
 800f26e:	f240 110f 	movw	r1, #271	; 0x10f
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f8e8 	bl	800f448 <VL53L1_ReadMulti>
 800f278:	4603      	mov	r3, r0
 800f27a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f27e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f282:	2b00      	cmp	r3, #0
 800f284:	d109      	bne.n	800f29a <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f286:	f107 030c 	add.w	r3, r7, #12
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	4619      	mov	r1, r3
 800f28e:	2031      	movs	r0, #49	; 0x31
 800f290:	f7ff feb8 	bl	800f004 <VL53L1_i2c_decode_nvm_copy_data>
 800f294:	4603      	mov	r3, r0
 800f296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f29a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3740      	adds	r7, #64	; 0x40
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b086      	sub	sp, #24
 800f2aa:	af02      	add	r7, sp, #8
 800f2ac:	6078      	str	r0, [r7, #4]
 800f2ae:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f2b4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f9b9 	bl	800f630 <VL53L1_WaitUs>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10b      	bne.n	800f2e2 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	22e5      	movs	r2, #229	; 0xe5
 800f2d6:	6839      	ldr	r1, [r7, #0]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 f9bf 	bl	800f65c <VL53L1_WaitValueMaskEx>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d103      	bne.n	800f2f2 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f2ea:	2103      	movs	r1, #3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7fe f896 	bl	800d41e <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b088      	sub	sp, #32
 800f302:	af02      	add	r7, sp, #8
 800f304:	6078      	str	r0, [r7, #4]
 800f306:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f308:	2300      	movs	r3, #0
 800f30a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800f310:	2300      	movs	r3, #0
 800f312:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800f31e:	f003 0310 	and.w	r3, r3, #16
 800f322:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800f32a:	2301      	movs	r3, #1
 800f32c:	75fb      	strb	r3, [r7, #23]
 800f32e:	e001      	b.n	800f334 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800f330:	2300      	movs	r3, #0
 800f332:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800f334:	7dfb      	ldrb	r3, [r7, #23]
 800f336:	2201      	movs	r2, #1
 800f338:	9201      	str	r2, [sp, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	9200      	str	r2, [sp, #0]
 800f33e:	2231      	movs	r2, #49	; 0x31
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f98a 	bl	800f65c <VL53L1_WaitValueMaskEx>
 800f348:	4603      	mov	r3, r0
 800f34a:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800f34c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3718      	adds	r7, #24
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	330a      	adds	r3, #10
 800f368:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f376:	b299      	uxth	r1, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4613      	mov	r3, r2
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	f7f5 f9b0 	bl	80046e8 <HAL_I2C_Master_Transmit>
 800f388:	4603      	mov	r3, r0
 800f38a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f38c:	693b      	ldr	r3, [r7, #16]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3718      	adds	r7, #24
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f396:	b580      	push	{r7, lr}
 800f398:	b088      	sub	sp, #32
 800f39a:	af02      	add	r7, sp, #8
 800f39c:	60f8      	str	r0, [r7, #12]
 800f39e:	60b9      	str	r1, [r7, #8]
 800f3a0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	330a      	adds	r3, #10
 800f3a6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f3b4:	f043 0301 	orr.w	r3, r3, #1
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	b299      	uxth	r1, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	f7f5 fa8c 	bl	80048e4 <HAL_I2C_Master_Receive>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f3d0:	693b      	ldr	r3, [r7, #16]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3718      	adds	r7, #24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
	...

0800f3dc <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	2bff      	cmp	r3, #255	; 0xff
 800f3f4:	d902      	bls.n	800f3fc <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800f3f6:	f06f 0303 	mvn.w	r3, #3
 800f3fa:	e01d      	b.n	800f438 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800f3fc:	897b      	ldrh	r3, [r7, #10]
 800f3fe:	0a1b      	lsrs	r3, r3, #8
 800f400:	b29b      	uxth	r3, r3
 800f402:	b2da      	uxtb	r2, r3
 800f404:	4b0e      	ldr	r3, [pc, #56]	; (800f440 <VL53L1_WriteMulti+0x64>)
 800f406:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f408:	897b      	ldrh	r3, [r7, #10]
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	4b0c      	ldr	r3, [pc, #48]	; (800f440 <VL53L1_WriteMulti+0x64>)
 800f40e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	480b      	ldr	r0, [pc, #44]	; (800f444 <VL53L1_WriteMulti+0x68>)
 800f416:	f000 fb97 	bl	800fb48 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3302      	adds	r3, #2
 800f41e:	461a      	mov	r2, r3
 800f420:	4907      	ldr	r1, [pc, #28]	; (800f440 <VL53L1_WriteMulti+0x64>)
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff ff98 	bl	800f358 <_I2CWrite>
 800f428:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f430:	23f3      	movs	r3, #243	; 0xf3
 800f432:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	200005c4 	.word	0x200005c4
 800f444:	200005c6 	.word	0x200005c6

0800f448 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	607a      	str	r2, [r7, #4]
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	460b      	mov	r3, r1
 800f456:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f458:	2300      	movs	r3, #0
 800f45a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f45c:	897b      	ldrh	r3, [r7, #10]
 800f45e:	0a1b      	lsrs	r3, r3, #8
 800f460:	b29b      	uxth	r3, r3
 800f462:	b2da      	uxtb	r2, r3
 800f464:	4b12      	ldr	r3, [pc, #72]	; (800f4b0 <VL53L1_ReadMulti+0x68>)
 800f466:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f468:	897b      	ldrh	r3, [r7, #10]
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	4b10      	ldr	r3, [pc, #64]	; (800f4b0 <VL53L1_ReadMulti+0x68>)
 800f46e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f470:	2202      	movs	r2, #2
 800f472:	490f      	ldr	r1, [pc, #60]	; (800f4b0 <VL53L1_ReadMulti+0x68>)
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f7ff ff6f 	bl	800f358 <_I2CWrite>
 800f47a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f482:	23f3      	movs	r3, #243	; 0xf3
 800f484:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f486:	e00c      	b.n	800f4a2 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7ff ff82 	bl	800f396 <_I2CRead>
 800f492:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d002      	beq.n	800f4a0 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f49a:	23f3      	movs	r3, #243	; 0xf3
 800f49c:	75fb      	strb	r3, [r7, #23]
 800f49e:	e000      	b.n	800f4a2 <VL53L1_ReadMulti+0x5a>
    }
done:
 800f4a0:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800f4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3718      	adds	r7, #24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200005c4 	.word	0x200005c4

0800f4b4 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	807b      	strh	r3, [r7, #2]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f4c8:	887b      	ldrh	r3, [r7, #2]
 800f4ca:	0a1b      	lsrs	r3, r3, #8
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	b2da      	uxtb	r2, r3
 800f4d0:	4b0c      	ldr	r3, [pc, #48]	; (800f504 <VL53L1_WrByte+0x50>)
 800f4d2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f4d4:	887b      	ldrh	r3, [r7, #2]
 800f4d6:	b2da      	uxtb	r2, r3
 800f4d8:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <VL53L1_WrByte+0x50>)
 800f4da:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800f4dc:	4a09      	ldr	r2, [pc, #36]	; (800f504 <VL53L1_WrByte+0x50>)
 800f4de:	787b      	ldrb	r3, [r7, #1]
 800f4e0:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f4e2:	2203      	movs	r2, #3
 800f4e4:	4907      	ldr	r1, [pc, #28]	; (800f504 <VL53L1_WrByte+0x50>)
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ff36 	bl	800f358 <_I2CWrite>
 800f4ec:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f4f4:	23f3      	movs	r3, #243	; 0xf3
 800f4f6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	200005c4 	.word	0x200005c4

0800f508 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	460b      	mov	r3, r1
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f516:	2300      	movs	r3, #0
 800f518:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800f51a:	897b      	ldrh	r3, [r7, #10]
 800f51c:	0a1b      	lsrs	r3, r3, #8
 800f51e:	b29b      	uxth	r3, r3
 800f520:	b2da      	uxtb	r2, r3
 800f522:	4b12      	ldr	r3, [pc, #72]	; (800f56c <VL53L1_RdByte+0x64>)
 800f524:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800f526:	897b      	ldrh	r3, [r7, #10]
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	4b10      	ldr	r3, [pc, #64]	; (800f56c <VL53L1_RdByte+0x64>)
 800f52c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f52e:	2202      	movs	r2, #2
 800f530:	490e      	ldr	r1, [pc, #56]	; (800f56c <VL53L1_RdByte+0x64>)
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f7ff ff10 	bl	800f358 <_I2CWrite>
 800f538:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f540:	23f3      	movs	r3, #243	; 0xf3
 800f542:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f544:	e00c      	b.n	800f560 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800f546:	2201      	movs	r2, #1
 800f548:	6879      	ldr	r1, [r7, #4]
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff ff23 	bl	800f396 <_I2CRead>
 800f550:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f558:	23f3      	movs	r3, #243	; 0xf3
 800f55a:	75fb      	strb	r3, [r7, #23]
 800f55c:	e000      	b.n	800f560 <VL53L1_RdByte+0x58>
    }
done:
 800f55e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800f560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	200005c4 	.word	0x200005c4

0800f570 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	460b      	mov	r3, r1
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f57e:	2300      	movs	r3, #0
 800f580:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f582:	897b      	ldrh	r3, [r7, #10]
 800f584:	0a1b      	lsrs	r3, r3, #8
 800f586:	b29b      	uxth	r3, r3
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	4b18      	ldr	r3, [pc, #96]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f58c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800f58e:	897b      	ldrh	r3, [r7, #10]
 800f590:	b2da      	uxtb	r2, r3
 800f592:	4b16      	ldr	r3, [pc, #88]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f594:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f596:	2202      	movs	r2, #2
 800f598:	4914      	ldr	r1, [pc, #80]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f7ff fedc 	bl	800f358 <_I2CWrite>
 800f5a0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f5a8:	23f3      	movs	r3, #243	; 0xf3
 800f5aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f5ac:	e017      	b.n	800f5de <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	490e      	ldr	r1, [pc, #56]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f7ff feef 	bl	800f396 <_I2CRead>
 800f5b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d002      	beq.n	800f5c6 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f5c0:	23f3      	movs	r3, #243	; 0xf3
 800f5c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f5c4:	e00b      	b.n	800f5de <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800f5c6:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	021b      	lsls	r3, r3, #8
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	4b06      	ldr	r3, [pc, #24]	; (800f5ec <VL53L1_RdWord+0x7c>)
 800f5d2:	785b      	ldrb	r3, [r3, #1]
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	4413      	add	r3, r2
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800f5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3718      	adds	r7, #24
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	200005c4 	.word	0x200005c4

0800f5f0 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800f602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800f612:	b580      	push	{r7, lr}
 800f614:	b082      	sub	sp, #8
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	4618      	mov	r0, r3
 800f620:	f7f3 fcda 	bl	8002fd8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
	...

0800f630 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	4a06      	ldr	r2, [pc, #24]	; (800f658 <VL53L1_WaitUs+0x28>)
 800f63e:	fb82 1203 	smull	r1, r2, r2, r3
 800f642:	1192      	asrs	r2, r2, #6
 800f644:	17db      	asrs	r3, r3, #31
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	4618      	mov	r0, r3
 800f64a:	f7f3 fcc5 	bl	8002fd8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	10624dd3 	.word	0x10624dd3

0800f65c <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800f662:	af00      	add	r7, sp, #0
 800f664:	f107 040c 	add.w	r4, r7, #12
 800f668:	6020      	str	r0, [r4, #0]
 800f66a:	f107 0008 	add.w	r0, r7, #8
 800f66e:	6001      	str	r1, [r0, #0]
 800f670:	4619      	mov	r1, r3
 800f672:	1dbb      	adds	r3, r7, #6
 800f674:	801a      	strh	r2, [r3, #0]
 800f676:	1d7b      	adds	r3, r7, #5
 800f678:	460a      	mov	r2, r1
 800f67a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800f67c:	2300      	movs	r3, #0
 800f67e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800f688:	2300      	movs	r3, #0
 800f68a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800f694:	2300      	movs	r3, #0
 800f696:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800f6a0:	f107 0310 	add.w	r3, r7, #16
 800f6a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f6a8:	4935      	ldr	r1, [pc, #212]	; (800f780 <VL53L1_WaitValueMaskEx+0x124>)
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 fa62 	bl	800fb74 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800f6b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff ff9b 	bl	800f5f0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800f6ba:	e03f      	b.n	800f73c <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800f6bc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10b      	bne.n	800f6dc <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800f6c4:	f207 2213 	addw	r2, r7, #531	; 0x213
 800f6c8:	1dbb      	adds	r3, r7, #6
 800f6ca:	8819      	ldrh	r1, [r3, #0]
 800f6cc:	f107 030c 	add.w	r3, r7, #12
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f7ff ff19 	bl	800f508 <VL53L1_RdByte>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800f6dc:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800f6e0:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	1d7a      	adds	r2, r7, #5
 800f6ea:	7812      	ldrb	r2, [r2, #0]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d102      	bne.n	800f6f6 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800f6f6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d112      	bne.n	800f724 <VL53L1_WaitValueMaskEx+0xc8>
 800f6fe:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10e      	bne.n	800f724 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800f706:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800f70e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800f712:	f107 030c 	add.w	r3, r7, #12
 800f716:	4611      	mov	r1, r2
 800f718:	6818      	ldr	r0, [r3, #0]
 800f71a:	f7ff ff7a 	bl	800f612 <VL53L1_WaitMs>
 800f71e:	4603      	mov	r3, r0
 800f720:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800f724:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff ff61 	bl	800f5f0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800f72e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f732:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800f73c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10a      	bne.n	800f75a <VL53L1_WaitValueMaskEx+0xfe>
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d203      	bcs.n	800f75a <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800f752:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800f756:	2b00      	cmp	r3, #0
 800f758:	d0b0      	beq.n	800f6bc <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800f75a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d106      	bne.n	800f770 <VL53L1_WaitValueMaskEx+0x114>
 800f762:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800f766:	2b00      	cmp	r3, #0
 800f768:	d102      	bne.n	800f770 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800f76a:	23f9      	movs	r3, #249	; 0xf9
 800f76c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800f770:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800f774:	4618      	mov	r0, r3
 800f776:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd90      	pop	{r4, r7, pc}
 800f77e:	bf00      	nop
 800f780:	0800fe30 	.word	0x0800fe30

0800f784 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b0a4      	sub	sp, #144	; 0x90
 800f788:	af00      	add	r7, sp, #0
 800f78a:	4603      	mov	r3, r0
 800f78c:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f78e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]
 800f796:	605a      	str	r2, [r3, #4]
 800f798:	609a      	str	r2, [r3, #8]
 800f79a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f79c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800f7a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	605a      	str	r2, [r3, #4]
 800f7b0:	609a      	str	r2, [r3, #8]
 800f7b2:	60da      	str	r2, [r3, #12]
 800f7b4:	611a      	str	r2, [r3, #16]
 800f7b6:	615a      	str	r2, [r3, #20]
 800f7b8:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800f7d8:	e009      	b.n	800f7ee <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800f7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7de:	005b      	lsls	r3, r3, #1
 800f7e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800f7e4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800f7ee:	79fa      	ldrb	r2, [r7, #7]
 800f7f0:	494d      	ldr	r1, [pc, #308]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	440b      	add	r3, r1
 800f7fc:	3310      	adds	r3, #16
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800f804:	429a      	cmp	r2, r3
 800f806:	d3e8      	bcc.n	800f7da <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800f808:	79fa      	ldrb	r2, [r7, #7]
 800f80a:	4947      	ldr	r1, [pc, #284]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	440b      	add	r3, r1
 800f816:	3308      	adds	r3, #8
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	4b43      	ldr	r3, [pc, #268]	; (800f92c <DC_MOTOR_Init+0x1a8>)
 800f81e:	fb03 f302 	mul.w	r3, r3, r2
 800f822:	4618      	mov	r0, r3
 800f824:	79fa      	ldrb	r2, [r7, #7]
 800f826:	4940      	ldr	r1, [pc, #256]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f828:	4613      	mov	r3, r2
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	440b      	add	r3, r1
 800f832:	330c      	adds	r3, #12
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f83a:	fb02 f303 	mul.w	r3, r2, r3
 800f83e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800f846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f84a:	3b01      	subs	r3, #1
 800f84c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800f850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f854:	3b02      	subs	r3, #2
 800f856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800f85a:	79fa      	ldrb	r2, [r7, #7]
 800f85c:	4932      	ldr	r1, [pc, #200]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f85e:	4613      	mov	r3, r2
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4413      	add	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	440b      	add	r3, r1
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800f86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f870:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800f872:	2360      	movs	r3, #96	; 0x60
 800f874:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800f876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f87a:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f87c:	2300      	movs	r3, #0
 800f87e:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f880:	2380      	movs	r3, #128	; 0x80
 800f882:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800f884:	f107 0308 	add.w	r3, r7, #8
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f7 fb89 	bl	8006fa0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f88e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f892:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800f894:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f898:	f107 0308 	add.w	r3, r7, #8
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f8 fc34 	bl	800810c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800f8a4:	f107 0308 	add.w	r3, r7, #8
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f7 fd2f 	bl	800730c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800f8b6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	4611      	mov	r1, r2
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7f9 fbc3 	bl	800904c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f8c6:	2360      	movs	r3, #96	; 0x60
 800f8c8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800f8d6:	79fa      	ldrb	r2, [r7, #7]
 800f8d8:	4913      	ldr	r1, [pc, #76]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	440b      	add	r3, r1
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f8ec:	f107 0308 	add.w	r3, r7, #8
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f8 fa33 	bl	8007d5c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f3 f8f2 	bl	8002ae4 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	4909      	ldr	r1, [pc, #36]	; (800f928 <DC_MOTOR_Init+0x1a4>)
 800f904:	4613      	mov	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	440b      	add	r3, r1
 800f90e:	3304      	adds	r3, #4
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	f107 0308 	add.w	r3, r7, #8
 800f916:	4611      	mov	r1, r2
 800f918:	4618      	mov	r0, r3
 800f91a:	f7f7 fde7 	bl	80074ec <HAL_TIM_PWM_Start>
}
 800f91e:	bf00      	nop
 800f920:	3790      	adds	r7, #144	; 0x90
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	0800fe74 	.word	0x0800fe74
 800f92c:	000f4240 	.word	0x000f4240

0800f930 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	4603      	mov	r3, r0
 800f938:	460a      	mov	r2, r1
 800f93a:	71fb      	strb	r3, [r7, #7]
 800f93c:	4613      	mov	r3, r2
 800f93e:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800f940:	79fa      	ldrb	r2, [r7, #7]
 800f942:	4928      	ldr	r1, [pc, #160]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f944:	4613      	mov	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4413      	add	r3, r2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	440b      	add	r3, r1
 800f94e:	3304      	adds	r3, #4
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d10a      	bne.n	800f96c <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800f956:	79fa      	ldrb	r2, [r7, #7]
 800f958:	4922      	ldr	r1, [pc, #136]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f95a:	4613      	mov	r3, r2
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	440b      	add	r3, r1
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	88ba      	ldrh	r2, [r7, #4]
 800f968:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800f96a:	e035      	b.n	800f9d8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800f96c:	79fa      	ldrb	r2, [r7, #7]
 800f96e:	491d      	ldr	r1, [pc, #116]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f970:	4613      	mov	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	440b      	add	r3, r1
 800f97a:	3304      	adds	r3, #4
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b04      	cmp	r3, #4
 800f980:	d10a      	bne.n	800f998 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800f982:	79fa      	ldrb	r2, [r7, #7]
 800f984:	4917      	ldr	r1, [pc, #92]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f986:	4613      	mov	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	4413      	add	r3, r2
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	440b      	add	r3, r1
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	88ba      	ldrh	r2, [r7, #4]
 800f994:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f996:	e01f      	b.n	800f9d8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800f998:	79fa      	ldrb	r2, [r7, #7]
 800f99a:	4912      	ldr	r1, [pc, #72]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f99c:	4613      	mov	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	4413      	add	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	440b      	add	r3, r1
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b08      	cmp	r3, #8
 800f9ac:	d10a      	bne.n	800f9c4 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800f9ae:	79fa      	ldrb	r2, [r7, #7]
 800f9b0:	490c      	ldr	r1, [pc, #48]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	440b      	add	r3, r1
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	88ba      	ldrh	r2, [r7, #4]
 800f9c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f9c2:	e009      	b.n	800f9d8 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800f9c4:	79fa      	ldrb	r2, [r7, #7]
 800f9c6:	4907      	ldr	r1, [pc, #28]	; (800f9e4 <DC_MOTOR_Start+0xb4>)
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	440b      	add	r3, r1
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	88ba      	ldrh	r2, [r7, #4]
 800f9d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	0800fe74 	.word	0x0800fe74

0800f9e8 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	460a      	mov	r2, r1
 800f9f2:	71fb      	strb	r3, [r7, #7]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800f9f8:	79fa      	ldrb	r2, [r7, #7]
 800f9fa:	4928      	ldr	r1, [pc, #160]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	4413      	add	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	440b      	add	r3, r1
 800fa06:	3304      	adds	r3, #4
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d10a      	bne.n	800fa24 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800fa0e:	79fa      	ldrb	r2, [r7, #7]
 800fa10:	4922      	ldr	r1, [pc, #136]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa12:	4613      	mov	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	4413      	add	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	440b      	add	r3, r1
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	88ba      	ldrh	r2, [r7, #4]
 800fa20:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800fa22:	e035      	b.n	800fa90 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800fa24:	79fa      	ldrb	r2, [r7, #7]
 800fa26:	491d      	ldr	r1, [pc, #116]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa28:	4613      	mov	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	440b      	add	r3, r1
 800fa32:	3304      	adds	r3, #4
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b04      	cmp	r3, #4
 800fa38:	d10a      	bne.n	800fa50 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800fa3a:	79fa      	ldrb	r2, [r7, #7]
 800fa3c:	4917      	ldr	r1, [pc, #92]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa3e:	4613      	mov	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	440b      	add	r3, r1
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	88ba      	ldrh	r2, [r7, #4]
 800fa4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fa4e:	e01f      	b.n	800fa90 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800fa50:	79fa      	ldrb	r2, [r7, #7]
 800fa52:	4912      	ldr	r1, [pc, #72]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa54:	4613      	mov	r3, r2
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	440b      	add	r3, r1
 800fa5e:	3304      	adds	r3, #4
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b08      	cmp	r3, #8
 800fa64:	d10a      	bne.n	800fa7c <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800fa66:	79fa      	ldrb	r2, [r7, #7]
 800fa68:	490c      	ldr	r1, [pc, #48]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	440b      	add	r3, r1
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	88ba      	ldrh	r2, [r7, #4]
 800fa78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fa7a:	e009      	b.n	800fa90 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800fa7c:	79fa      	ldrb	r2, [r7, #7]
 800fa7e:	4907      	ldr	r1, [pc, #28]	; (800fa9c <DC_MOTOR_Set_Speed+0xb4>)
 800fa80:	4613      	mov	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	440b      	add	r3, r1
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	88ba      	ldrh	r2, [r7, #4]
 800fa8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	0800fe74 	.word	0x0800fe74

0800faa0 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800faa4:	4b14      	ldr	r3, [pc, #80]	; (800faf8 <DWT_Delay_Init+0x58>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	4a13      	ldr	r2, [pc, #76]	; (800faf8 <DWT_Delay_Init+0x58>)
 800faaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800faae:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800fab0:	4b11      	ldr	r3, [pc, #68]	; (800faf8 <DWT_Delay_Init+0x58>)
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	4a10      	ldr	r2, [pc, #64]	; (800faf8 <DWT_Delay_Init+0x58>)
 800fab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800faba:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800fabc:	4b0f      	ldr	r3, [pc, #60]	; (800fafc <DWT_Delay_Init+0x5c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a0e      	ldr	r2, [pc, #56]	; (800fafc <DWT_Delay_Init+0x5c>)
 800fac2:	f023 0301 	bic.w	r3, r3, #1
 800fac6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800fac8:	4b0c      	ldr	r3, [pc, #48]	; (800fafc <DWT_Delay_Init+0x5c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a0b      	ldr	r2, [pc, #44]	; (800fafc <DWT_Delay_Init+0x5c>)
 800face:	f043 0301 	orr.w	r3, r3, #1
 800fad2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800fad4:	4b09      	ldr	r3, [pc, #36]	; (800fafc <DWT_Delay_Init+0x5c>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800fada:	bf00      	nop
    __ASM volatile ("NOP");
 800fadc:	bf00      	nop
    __ASM volatile ("NOP");
 800fade:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800fae0:	4b06      	ldr	r3, [pc, #24]	; (800fafc <DWT_Delay_Init+0x5c>)
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d001      	beq.n	800faec <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800fae8:	2300      	movs	r3, #0
 800faea:	e000      	b.n	800faee <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800faec:	2301      	movs	r3, #1
    }
}
 800faee:	4618      	mov	r0, r3
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	e000edf0 	.word	0xe000edf0
 800fafc:	e0001000 	.word	0xe0001000

0800fb00 <__libc_init_array>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	4d0d      	ldr	r5, [pc, #52]	; (800fb38 <__libc_init_array+0x38>)
 800fb04:	4c0d      	ldr	r4, [pc, #52]	; (800fb3c <__libc_init_array+0x3c>)
 800fb06:	1b64      	subs	r4, r4, r5
 800fb08:	10a4      	asrs	r4, r4, #2
 800fb0a:	2600      	movs	r6, #0
 800fb0c:	42a6      	cmp	r6, r4
 800fb0e:	d109      	bne.n	800fb24 <__libc_init_array+0x24>
 800fb10:	4d0b      	ldr	r5, [pc, #44]	; (800fb40 <__libc_init_array+0x40>)
 800fb12:	4c0c      	ldr	r4, [pc, #48]	; (800fb44 <__libc_init_array+0x44>)
 800fb14:	f000 f842 	bl	800fb9c <_init>
 800fb18:	1b64      	subs	r4, r4, r5
 800fb1a:	10a4      	asrs	r4, r4, #2
 800fb1c:	2600      	movs	r6, #0
 800fb1e:	42a6      	cmp	r6, r4
 800fb20:	d105      	bne.n	800fb2e <__libc_init_array+0x2e>
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb28:	4798      	blx	r3
 800fb2a:	3601      	adds	r6, #1
 800fb2c:	e7ee      	b.n	800fb0c <__libc_init_array+0xc>
 800fb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb32:	4798      	blx	r3
 800fb34:	3601      	adds	r6, #1
 800fb36:	e7f2      	b.n	800fb1e <__libc_init_array+0x1e>
 800fb38:	0800fea4 	.word	0x0800fea4
 800fb3c:	0800fea4 	.word	0x0800fea4
 800fb40:	0800fea4 	.word	0x0800fea4
 800fb44:	0800fea8 	.word	0x0800fea8

0800fb48 <memcpy>:
 800fb48:	440a      	add	r2, r1
 800fb4a:	4291      	cmp	r1, r2
 800fb4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb50:	d100      	bne.n	800fb54 <memcpy+0xc>
 800fb52:	4770      	bx	lr
 800fb54:	b510      	push	{r4, lr}
 800fb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb5e:	4291      	cmp	r1, r2
 800fb60:	d1f9      	bne.n	800fb56 <memcpy+0xe>
 800fb62:	bd10      	pop	{r4, pc}

0800fb64 <memset>:
 800fb64:	4402      	add	r2, r0
 800fb66:	4603      	mov	r3, r0
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d100      	bne.n	800fb6e <memset+0xa>
 800fb6c:	4770      	bx	lr
 800fb6e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb72:	e7f9      	b.n	800fb68 <memset+0x4>

0800fb74 <strncpy>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	3901      	subs	r1, #1
 800fb78:	4603      	mov	r3, r0
 800fb7a:	b132      	cbz	r2, 800fb8a <strncpy+0x16>
 800fb7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb80:	f803 4b01 	strb.w	r4, [r3], #1
 800fb84:	3a01      	subs	r2, #1
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	d1f7      	bne.n	800fb7a <strncpy+0x6>
 800fb8a:	441a      	add	r2, r3
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d100      	bne.n	800fb94 <strncpy+0x20>
 800fb92:	bd10      	pop	{r4, pc}
 800fb94:	f803 1b01 	strb.w	r1, [r3], #1
 800fb98:	e7f9      	b.n	800fb8e <strncpy+0x1a>
	...

0800fb9c <_init>:
 800fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9e:	bf00      	nop
 800fba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fba2:	bc08      	pop	{r3}
 800fba4:	469e      	mov	lr, r3
 800fba6:	4770      	bx	lr

0800fba8 <_fini>:
 800fba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbaa:	bf00      	nop
 800fbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbae:	bc08      	pop	{r3}
 800fbb0:	469e      	mov	lr, r3
 800fbb2:	4770      	bx	lr
