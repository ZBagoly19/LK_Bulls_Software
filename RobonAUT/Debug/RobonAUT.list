
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c114  0800c114  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c11c  0800c11c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800c124  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e78  200001c8  0800c2ec  000201c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a040  0800c2ec  0002a040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017045  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ea  00000000  00000000  0003723d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00039b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002624a  00000000  00000000  0003c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e72e  00000000  00000000  0006238a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebdc1  00000000  00000000  00080ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  0016c8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001c8 	.word	0x200001c8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800be50 	.word	0x0800be50

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001cc 	.word	0x200001cc
 8000204:	0800be50 	.word	0x0800be50

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96e 	b.w	8000e88 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	4604      	mov	r4, r0
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8083 	bne.w	8000cda <__udivmoddi4+0x116>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d947      	bls.n	8000c6a <__udivmoddi4+0xa6>
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	b142      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000be0:	f1c2 0020 	rsb	r0, r2, #32
 8000be4:	fa24 f000 	lsr.w	r0, r4, r0
 8000be8:	4091      	lsls	r1, r2
 8000bea:	4097      	lsls	r7, r2
 8000bec:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf0:	4094      	lsls	r4, r2
 8000bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bfc:	fa1f fe87 	uxth.w	lr, r7
 8000c00:	fb08 c116 	mls	r1, r8, r6, ip
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f10e 	mul.w	r1, r6, lr
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x60>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 8119 	bcs.w	8000e4c <__udivmoddi4+0x288>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 8116 	bls.w	8000e4c <__udivmoddi4+0x288>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	443b      	add	r3, r7
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x8c>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	f080 8105 	bcs.w	8000e50 <__udivmoddi4+0x28c>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f240 8102 	bls.w	8000e50 <__udivmoddi4+0x28c>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	443c      	add	r4, r7
 8000c50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c54:	eba4 040e 	sub.w	r4, r4, lr
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa0>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xaa>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d150      	bne.n	8000d18 <__udivmoddi4+0x154>
 8000c76:	1bcb      	subs	r3, r1, r7
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	2601      	movs	r6, #1
 8000c82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c86:	0c21      	lsrs	r1, r4, #16
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb08 f30c 	mul.w	r3, r8, ip
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xe4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0xe2>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f200 80e9 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1ac9      	subs	r1, r1, r3
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x10c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x10a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80d9 	bhi.w	8000e80 <__udivmoddi4+0x2bc>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e7bf      	b.n	8000c5a <__udivmoddi4+0x96>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d909      	bls.n	8000cf2 <__udivmoddi4+0x12e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <__udivmoddi4+0x282>
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cea:	4630      	mov	r0, r6
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	fab3 f683 	clz	r6, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d14a      	bne.n	8000d90 <__udivmoddi4+0x1cc>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0x140>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 80b8 	bhi.w	8000e74 <__udivmoddi4+0x2b0>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0a8      	beq.n	8000c64 <__udivmoddi4+0xa0>
 8000d12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d20:	4097      	lsls	r7, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2a:	40d9      	lsrs	r1, r3
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d40:	fb06 f108 	mul.w	r1, r6, r8
 8000d44:	4299      	cmp	r1, r3
 8000d46:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x19c>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d52:	f080 808d 	bcs.w	8000e70 <__udivmoddi4+0x2ac>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 808a 	bls.w	8000e70 <__udivmoddi4+0x2ac>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	443b      	add	r3, r7
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b281      	uxth	r1, r0
 8000d64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb00 f308 	mul.w	r3, r0, r8
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1c4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7e:	d273      	bcs.n	8000e68 <__udivmoddi4+0x2a4>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d971      	bls.n	8000e68 <__udivmoddi4+0x2a4>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4439      	add	r1, r7
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8e:	e778      	b.n	8000c82 <__udivmoddi4+0xbe>
 8000d90:	f1c6 0c20 	rsb	ip, r6, #32
 8000d94:	fa03 f406 	lsl.w	r4, r3, r6
 8000d98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da2:	fa01 f306 	lsl.w	r3, r1, r6
 8000da6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	0c3b      	lsrs	r3, r7, #16
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fa1f f884 	uxth.w	r8, r4
 8000dba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x220>
 8000dd2:	1861      	adds	r1, r4, r1
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d248      	bcs.n	8000e6c <__udivmoddi4+0x2a8>
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	d946      	bls.n	8000e6c <__udivmoddi4+0x2a8>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	4421      	add	r1, r4
 8000de4:	eba1 010a 	sub.w	r1, r1, sl
 8000de8:	b2bf      	uxth	r7, r7
 8000dea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df6:	fb00 f808 	mul.w	r8, r0, r8
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x24a>
 8000dfe:	19e7      	adds	r7, r4, r7
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d22e      	bcs.n	8000e64 <__udivmoddi4+0x2a0>
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d92c      	bls.n	8000e64 <__udivmoddi4+0x2a0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4427      	add	r7, r4
 8000e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e12:	eba7 0708 	sub.w	r7, r7, r8
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	454f      	cmp	r7, r9
 8000e1c:	46c6      	mov	lr, r8
 8000e1e:	4649      	mov	r1, r9
 8000e20:	d31a      	bcc.n	8000e58 <__udivmoddi4+0x294>
 8000e22:	d017      	beq.n	8000e54 <__udivmoddi4+0x290>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x27a>
 8000e26:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e32:	40f2      	lsrs	r2, r6
 8000e34:	ea4c 0202 	orr.w	r2, ip, r2
 8000e38:	40f7      	lsrs	r7, r6
 8000e3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	462e      	mov	r6, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fd      	b.n	8000c50 <__udivmoddi4+0x8c>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d2e5      	bcs.n	8000e24 <__udivmoddi4+0x260>
 8000e58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e60:	3801      	subs	r0, #1
 8000e62:	e7df      	b.n	8000e24 <__udivmoddi4+0x260>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e7d2      	b.n	8000e0e <__udivmoddi4+0x24a>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	e78d      	b.n	8000d88 <__udivmoddi4+0x1c4>
 8000e6c:	4681      	mov	r9, r0
 8000e6e:	e7b9      	b.n	8000de4 <__udivmoddi4+0x220>
 8000e70:	4666      	mov	r6, ip
 8000e72:	e775      	b.n	8000d60 <__udivmoddi4+0x19c>
 8000e74:	4630      	mov	r0, r6
 8000e76:	e74a      	b.n	8000d0e <__udivmoddi4+0x14a>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	4439      	add	r1, r7
 8000e7e:	e713      	b.n	8000ca8 <__udivmoddi4+0xe4>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	e724      	b.n	8000cd0 <__udivmoddi4+0x10c>
 8000e86:	bf00      	nop

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b0a8      	sub	sp, #160	; 0xa0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000ece:	f00a ff63 	bl	800bd98 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4aaa      	ldr	r2, [pc, #680]	; (8001180 <SERVO_Init+0x2f4>)
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	4413      	add	r3, r2
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fad4 	bl	800048c <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4ba6      	ldr	r3, [pc, #664]	; (8001184 <SERVO_Init+0x2f8>)
 8000eea:	f7ff fc73 	bl	80007d4 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddd 	bl	8000ab4 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a9f      	ldr	r2, [pc, #636]	; (8001180 <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fabd 	bl	800048c <__aeabi_ui2d>
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
 8000f16:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f1a:	f7ff fab7 	bl	800048c <__aeabi_ui2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b99      	ldr	r3, [pc, #612]	; (8001188 <SERVO_Init+0x2fc>)
 8000f24:	f7ff f976 	bl	8000214 <__adddf3>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b95      	ldr	r3, [pc, #596]	; (800118c <SERVO_Init+0x300>)
 8000f36:	f7ff fb23 	bl	8000580 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc47 	bl	80007d4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <SERVO_Init+0x2fc>)
 8000f54:	f7ff f95c 	bl	8000210 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fda8 	bl	8000ab4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f6a:	2313      	movs	r3, #19
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f70:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4a81      	ldr	r2, [pc, #516]	; (8001180 <SERVO_Init+0x2f4>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a82      	ldr	r2, [pc, #520]	; (8001190 <SERVO_Init+0x304>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	; (8001194 <SERVO_Init+0x308>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <SERVO_Init+0x308>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	e046      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a75      	ldr	r2, [pc, #468]	; (8001180 <SERVO_Init+0x2f4>)
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10e      	bne.n	8000fd8 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <SERVO_Init+0x308>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <SERVO_Init+0x308>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e02e      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a69      	ldr	r2, [pc, #420]	; (8001180 <SERVO_Init+0x2f4>)
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <SERVO_Init+0x30c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b69      	ldr	r3, [pc, #420]	; (8001194 <SERVO_Init+0x308>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a68      	ldr	r2, [pc, #416]	; (8001194 <SERVO_Init+0x308>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <SERVO_Init+0x308>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	e016      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <SERVO_Init+0x2f4>)
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4413      	add	r3, r2
 8001010:	3308      	adds	r3, #8
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <SERVO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <SERVO_Init+0x308>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <SERVO_Init+0x308>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <SERVO_Init+0x308>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <SERVO_Init+0x2f4>)
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	4413      	add	r3, r2
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8001044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001048:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 800104e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fb61 	bl	8008728 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800106e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fc0b 	bl	8009894 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fd06 	bl	8008a94 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001094:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fb98 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4a32      	ldr	r2, [pc, #200]	; (8001180 <SERVO_Init+0x2f4>)
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	4413      	add	r3, r2
 80010bc:	3310      	adds	r3, #16
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fa0b 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010d2:	f7ff f9db 	bl	800048c <__aeabi_ui2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <SERVO_Init+0x2f4>)
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	4413      	add	r3, r2
 80010e2:	3318      	adds	r3, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9f2 	bl	80004d0 <__aeabi_f2d>
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SERVO_Init+0x314>)
 80010f2:	f7ff fb6f 	bl	80007d4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fa3f 	bl	8000580 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	88fc      	ldrh	r4, [r7, #6]
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcd2 	bl	8000ab4 <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SERVO_Init+0x318>)
 8001116:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800111a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800111e:	f7ff f9b5 	bl	800048c <__aeabi_ui2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SERVO_Init+0x31c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9d1 	bl	80004d0 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SERVO_Init+0x314>)
 8001134:	f7ff fb4e 	bl	80007d4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa1e 	bl	8000580 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	88fc      	ldrh	r4, [r7, #6]
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b299      	uxth	r1, r3
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SERVO_Init+0x318>)
 8001158:	00a3      	lsls	r3, r4, #2
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SERVO_Init+0x2f4>)
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	4413      	add	r3, r2
 8001168:	3310      	adds	r3, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fd7e 	bl	8008c74 <HAL_TIM_PWM_Start>

}
 8001178:	bf00      	nop
 800117a:	37a0      	adds	r7, #160	; 0xa0
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	0800c0ac 	.word	0x0800c0ac
 8001184:	41490000 	.word	0x41490000
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	40490000 	.word	0x40490000
 8001190:	40001800 	.word	0x40001800
 8001194:	40023800 	.word	0x40023800
 8001198:	40000400 	.word	0x40000400
 800119c:	40000800 	.word	0x40000800
 80011a0:	40340000 	.word	0x40340000
 80011a4:	200001e4 	.word	0x200001e4
 80011a8:	40066666 	.word	0x40066666

080011ac <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	ed87 0a00 	vstr	s0, [r7]
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <SERVO_MoveTo+0x94>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SERVO_MoveTo+0x94>)
 80011ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f972 	bl	80004d0 <__aeabi_f2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SERVO_MoveTo+0x98>)
 80011f2:	f7ff faef 	bl	80007d4 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SERVO_MoveTo+0x94>)
 8001202:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f950 	bl	80004ac <__aeabi_i2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7fe fffe 	bl	8000214 <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc48 	bl	8000ab4 <__aeabi_d2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SERVO_MoveTo+0x9c>)
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	4413      	add	r3, r2
 8001230:	330c      	adds	r3, #12
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	200001e4 	.word	0x200001e4
 8001244:	40668000 	.word	0x40668000
 8001248:	0800c0ac 	.word	0x0800c0ac

0800124c <HAL_UART_RxCpltCallback>:
void Kapukbol_iranyok(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	olvasok = true;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_UART_RxCpltCallback+0xb4>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &temp_radio, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <HAL_UART_RxCpltCallback+0xbc>)
 8001260:	f009 fd50 	bl	800ad04 <HAL_UART_Receive_IT>
	if(temp_radio == 0x30)
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b30      	cmp	r3, #48	; 0x30
 800126a:	d102      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x26>
		letsGo = true;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_UART_RxCpltCallback+0xc0>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	if(temp_radio < 0x60 && 0x40 < temp_radio) {
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b5f      	cmp	r3, #95	; 0x5f
 8001278:	d824      	bhi.n	80012c4 <HAL_UART_RxCpltCallback+0x78>
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b40      	cmp	r3, #64	; 0x40
 8001280:	d920      	bls.n	80012c4 <HAL_UART_RxCpltCallback+0x78>
		if(temp_radio != kapuk[0]) {
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d006      	beq.n	800129c <HAL_UART_RxCpltCallback+0x50>
			uj_kapu = true;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
			letsGo = true;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_UART_RxCpltCallback+0xc0>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e002      	b.n	80012a2 <HAL_UART_RxCpltCallback+0x56>
		} else {
			uj_kapu = false;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		}
		radio_i = 0;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < 6; j++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e007      	b.n	80012be <HAL_UART_RxCpltCallback+0x72>
			kapuk[j] = '-';
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	222d      	movs	r2, #45	; 0x2d
 80012b6:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < 6; j++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	ddf4      	ble.n	80012ae <HAL_UART_RxCpltCallback+0x62>
	}
	kapuk[radio_i] = temp_radio;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 80012cc:	7819      	ldrb	r1, [r3, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 80012d0:	5499      	strb	r1, [r3, r2]
	radio_i++;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012dc:	701a      	strb	r2, [r3, #0]

	if(uj_kapu == true && temp_radio == '\n') {
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_UART_RxCpltCallback+0xa6>
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d101      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0xa6>
		Kapukbol_iranyok();
 80012ee:	f002 f961 	bl	80035b4 <Kapukbol_iranyok>
	}
	olvasok = false;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_UART_RxCpltCallback+0xb4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000265 	.word	0x20000265
 8001304:	2000015e 	.word	0x2000015e
 8001308:	20000564 	.word	0x20000564
 800130c:	20000260 	.word	0x20000260
 8001310:	20000158 	.word	0x20000158
 8001314:	20000262 	.word	0x20000262
 8001318:	20000261 	.word	0x20000261

0800131c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	if (olvasok == false) {
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d023      	beq.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
		if (htim == &htim2) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11f      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
			timer_counter += 1;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001344:	701a      	strb	r2, [r3, #0]
			if(9 < timer_counter) {
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b09      	cmp	r3, #9
 800134c:	d915      	bls.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
				Vonalas_tombok_torlese();
 800134e:	f001 faa1 	bl	8002894 <Vonalas_tombok_torlese>
				Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001352:	490f      	ldr	r1, [pc, #60]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001356:	f000 fe27 	bl	8001fa8 <Vonalszenzor_operal>
				Vonalas_tombok_feltoltese();
 800135a:	f001 faf1 	bl	8002940 <Vonalas_tombok_feltoltese>
				Irany_valaszto();
 800135e:	f001 fc1b 	bl	8002b98 <Irany_valaszto>
				Kovetendo_vonal_valaszto(&vonal_kovetni_e, &vonal_kovetni_h, aktualis_irany);
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800136c:	f001 fcfc 	bl	8002d68 <Kovetendo_vonal_valaszto>
				Szervo_szog_beallit();
 8001370:	f001 ff6e 	bl	8003250 <Szervo_szog_beallit>
				timer_counter = 0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			bluetooth_i++;
			bluetooth_len = strlen(bluetooth_buffer);
			//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);*/
		}
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000265 	.word	0x20000265
 8001388:	20001748 	.word	0x20001748
 800138c:	20000264 	.word	0x20000264
 8001390:	20000210 	.word	0x20000210
 8001394:	200001ec 	.word	0x200001ec
 8001398:	2000013d 	.word	0x2000013d
 800139c:	20000238 	.word	0x20000238
 80013a0:	20000240 	.word	0x20000240

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f003 ffba 	bl	8005320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f8ce 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 fd1e 	bl	8001df0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b4:	f000 fcd2 	bl	8001d5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013b8:	f000 f93a 	bl	8001630 <MX_I2C1_Init>
  MX_SPI2_Init();
 80013bc:	f000 f9f8 	bl	80017b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80013c0:	f000 fa2c 	bl	800181c <MX_SPI3_Init>
  MX_TIM3_Init();
 80013c4:	f000 faac 	bl	8001920 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013c8:	f000 fb04 	bl	80019d4 <MX_TIM4_Init>
  MX_UART4_Init();
 80013cc:	f000 fc72 	bl	8001cb4 <MX_UART4_Init>
  MX_TIM8_Init();
 80013d0:	f000 fb54 	bl	8001a7c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013d4:	f000 fc98 	bl	8001d08 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 80013d8:	f000 fbfc 	bl	8001bd4 <MX_TIM12_Init>
  MX_DMA_Init();
 80013dc:	f000 fce8 	bl	8001db0 <MX_DMA_Init>
  MX_TIM2_Init();
 80013e0:	f000 fa52 	bl	8001888 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013e4:	f000 f9ae 	bl	8001744 <MX_SPI1_Init>
  MX_I2C2_Init();
 80013e8:	f000 f950 	bl	800168c <MX_I2C2_Init>
  MX_I2C3_Init();
 80013ec:	f000 f97c 	bl	80016e8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fd4b 	bl	8000e8c <SERVO_Init>
	SERVO_MoveTo(SZERVO, 90);
 80013f6:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800150c <main+0x168>
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fed6 	bl	80011ac <SERVO_MoveTo>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 8001400:	2000      	movs	r0, #0
 8001402:	f00a fb3b 	bl	800ba7c <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001406:	2001      	movs	r0, #1
 8001408:	f00a fb38 	bl	800ba7c <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f00a fc0a 	bl	800bc28 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	2001      	movs	r0, #1
 8001418:	f00a fc06 	bl	800bc28 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001422:	483b      	ldr	r0, [pc, #236]	; (8001510 <main+0x16c>)
 8001424:	f005 f960 	bl	80066e8 <HAL_GPIO_WritePin>
	motvez_k = motvez_d / 2;   									//455
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <main+0x170>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0fda      	lsrs	r2, r3, #31
 800142e:	4413      	add	r3, r2
 8001430:	105b      	asrs	r3, r3, #1
 8001432:	461a      	mov	r2, r3
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <main+0x174>)
 8001436:	601a      	str	r2, [r3, #0]

	Vonalszenzor_minta_kuldes(leszed);
 8001438:	4838      	ldr	r0, [pc, #224]	; (800151c <main+0x178>)
 800143a:	f001 fa03 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(teszt_minta);		//csak hogy lassuk, hogy bekapcsolt
 800143e:	4838      	ldr	r0, [pc, #224]	; (8001520 <main+0x17c>)
 8001440:	f001 fa00 	bl	8002844 <Vonalszenzor_minta_kuldes>
	HAL_Delay(100);
 8001444:	2064      	movs	r0, #100	; 0x64
 8001446:	f003 ffdd 	bl	8005404 <HAL_Delay>
	Vonalszenzor_minta_kuldes(leszed);
 800144a:	4834      	ldr	r0, [pc, #208]	; (800151c <main+0x178>)
 800144c:	f001 f9fa 	bl	8002844 <Vonalszenzor_minta_kuldes>
	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001450:	4834      	ldr	r0, [pc, #208]	; (8001524 <main+0x180>)
 8001452:	f007 fa59 	bl	8008908 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001456:	2104      	movs	r1, #4
 8001458:	4833      	ldr	r0, [pc, #204]	; (8001528 <main+0x184>)
 800145a:	f007 fc0b 	bl	8008c74 <HAL_TIM_PWM_Start>

	//Vonalszenzor inicializacio
	Vonalszenzor_Init();
 800145e:	f000 fd91 	bl	8001f84 <Vonalszenzor_Init>

	Graf_irany_feltolt();
 8001462:	f002 fbd5 	bl	8003c10 <Graf_irany_feltolt>
	//Kapukbol_iranyok();
	HAL_UART_Receive_IT(&huart1, &temp_radio, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	4930      	ldr	r1, [pc, #192]	; (800152c <main+0x188>)
 800146a:	4831      	ldr	r0, [pc, #196]	; (8001530 <main+0x18c>)
 800146c:	f009 fc4a 	bl	800ad04 <HAL_UART_Receive_IT>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );
		VL53L1_ClearInterruptAndStartMeasurement( Dev );*/

		if (btnEnable == 1) {
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <main+0x190>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d128      	bne.n	80014ca <main+0x126>
			if (motvezEnable == 1) {
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <main+0x194>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d1f7      	bne.n	8001470 <main+0xcc>
				if(8 < sotetek) {
					motvez_k = motvez_d / 2;
					tolatas = true;
					kormanyzas_agresszivitas = 0.7;
				}*/
				if(letsGo == true){
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <main+0x198>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <main+0xfe>
					if(tolatas == true) {
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <main+0x19c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <main+0xf6>
						motvez_k = 570;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <main+0x174>)
 8001492:	f240 223a 	movw	r2, #570	; 0x23a
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e003      	b.n	80014a2 <main+0xfe>
					} else {
						motvez_k = 443;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <main+0x174>)
 800149c:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014a0:	601a      	str	r2, [r3, #0]
					}
				}
				//if (motvez_d /2 > motvez_k) {							// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_k); 		// ha pwm1 nagyobb, hatramenet
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <main+0x174>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	2000      	movs	r0, #0
 80014ac:	f00a fc18 	bl	800bce0 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - motvez_k);
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <main+0x170>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <main+0x174>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	2001      	movs	r0, #1
 80014c4:	f00a fc0c 	bl	800bce0 <DC_MOTOR_Set_Speed>
 80014c8:	e7d2      	b.n	8001470 <main+0xcc>
				//}
			}
		} else {
			veretesi_cnt = 0;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <main+0x1a0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
			fekezes_cnt = 0;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <main+0x1a4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
			//SERVO_MoveTo(SZERVO, 90);
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);	// ez a ketto a megallas
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <main+0x170>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0fda      	lsrs	r2, r3, #31
 80014dc:	4413      	add	r3, r2
 80014de:	105b      	asrs	r3, r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	2000      	movs	r0, #0
 80014e6:	f00a fbfb 	bl	800bce0 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <main+0x170>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0fda      	lsrs	r2, r3, #31
 80014f0:	4413      	add	r3, r2
 80014f2:	105b      	asrs	r3, r3, #1
 80014f4:	425b      	negs	r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <main+0x170>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4413      	add	r3, r2
 8001500:	b29b      	uxth	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	2001      	movs	r0, #1
 8001506:	f00a fbeb 	bl	800bce0 <DC_MOTOR_Set_Speed>
		if (btnEnable == 1) {
 800150a:	e7b1      	b.n	8001470 <main+0xcc>
 800150c:	42b40000 	.word	0x42b40000
 8001510:	40020400 	.word	0x40020400
 8001514:	20000150 	.word	0x20000150
 8001518:	20000154 	.word	0x20000154
 800151c:	20000004 	.word	0x20000004
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20001748 	.word	0x20001748
 8001528:	200017d4 	.word	0x200017d4
 800152c:	2000015e 	.word	0x2000015e
 8001530:	20000564 	.word	0x20000564
 8001534:	200001e8 	.word	0x200001e8
 8001538:	20000001 	.word	0x20000001
 800153c:	20000260 	.word	0x20000260
 8001540:	2000024c 	.word	0x2000024c
 8001544:	20000258 	.word	0x20000258
 8001548:	2000025c 	.word	0x2000025c

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	2234      	movs	r2, #52	; 0x34
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f00a fc70 	bl	800be40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <SystemClock_Config+0xdc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <SystemClock_Config+0xdc>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <SystemClock_Config+0xdc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <SystemClock_Config+0xe0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a25      	ldr	r2, [pc, #148]	; (800162c <SystemClock_Config+0xe0>)
 8001596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <SystemClock_Config+0xe0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015c0:	23b4      	movs	r3, #180	; 0xb4
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fe79 	bl	80072cc <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015e0:	f003 f922 	bl	8004828 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015e4:	f005 fa96 	bl	8006b14 <HAL_PWREx_EnableOverDrive>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015ee:	f003 f91b 	bl	8004828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80015fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2105      	movs	r1, #5
 8001610:	4618      	mov	r0, r3
 8001612:	f005 facf 	bl	8006bb4 <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800161c:	f003 f904 	bl	8004828 <Error_Handler>
  }
}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	; 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C1_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C1_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C1_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C1_Init+0x50>)
 800166e:	f005 f885 	bl	800677c <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001678:	f003 f8d6 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200003bc 	.word	0x200003bc
 8001684:	40005400 	.word	0x40005400
 8001688:	000186a0 	.word	0x000186a0

0800168c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C2_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_I2C2_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_I2C2_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_I2C2_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C2_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C2_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_I2C2_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_I2C2_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C2_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_I2C2_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C2_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C2_Init+0x50>)
 80016ca:	f005 f857 	bl	800677c <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f003 f8a8 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000410 	.word	0x20000410
 80016e0:	40005800 	.word	0x40005800
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_I2C3_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <MX_I2C3_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_I2C3_Init+0x50>)
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <MX_I2C3_Init+0x58>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_I2C3_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_I2C3_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_I2C3_Init+0x50>)
 8001706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_I2C3_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_I2C3_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_I2C3_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_I2C3_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_I2C3_Init+0x50>)
 8001726:	f005 f829 	bl	800677c <HAL_I2C_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001730:	f003 f87a 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000280 	.word	0x20000280
 800173c:	40005c00 	.word	0x40005c00
 8001740:	000186a0 	.word	0x000186a0

08001744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_SPI1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001778:	2220      	movs	r2, #32
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001796:	f006 f8f7 	bl	8007988 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f003 f842 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200016f0 	.word	0x200016f0
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI2_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_SPI2_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI2_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI2_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI2_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI2_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI2_Init+0x64>)
 80017e4:	2218      	movs	r2, #24
 80017e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI2_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_SPI2_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI2_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_SPI2_Init+0x64>)
 8001802:	f006 f8c1 	bl	8007988 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800180c:	f003 f80c 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200002d4 	.word	0x200002d4
 8001818:	40003800 	.word	0x40003800

0800181c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_SPI3_Init+0x64>)
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <MX_SPI3_Init+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_SPI3_Init+0x64>)
 8001828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800182c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_SPI3_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_SPI3_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_SPI3_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_SPI3_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_SPI3_Init+0x64>)
 8001848:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800184c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_SPI3_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_SPI3_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_SPI3_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_SPI3_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_SPI3_Init+0x64>)
 8001868:	220a      	movs	r2, #10
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_SPI3_Init+0x64>)
 800186e:	f006 f88b 	bl	8007988 <HAL_SPI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001878:	f002 ffd6 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200004ac 	.word	0x200004ac
 8001884:	40003c00 	.word	0x40003c00

08001888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_TIM2_Init+0x94>)
 80018a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_TIM2_Init+0x94>)
 80018ae:	222c      	movs	r2, #44	; 0x2c
 80018b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_TIM2_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_TIM2_Init+0x94>)
 80018ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_TIM2_Init+0x94>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_TIM2_Init+0x94>)
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_TIM2_Init+0x94>)
 80018ce:	f006 ff2b 	bl	8008728 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018d8:	f002 ffa6 	bl	8004828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_TIM2_Init+0x94>)
 80018ea:	f007 ffd3 	bl	8009894 <HAL_TIM_ConfigClockSource>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018f4:	f002 ff98 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_TIM2_Init+0x94>)
 8001906:	f008 ff65 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001910:	f002 ff8a 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20001748 	.word	0x20001748

08001920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <MX_TIM3_Init+0xac>)
 8001944:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <MX_TIM3_Init+0xb0>)
 8001946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MX_TIM3_Init+0xac>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <MX_TIM3_Init+0xac>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM3_Init+0xac>)
 8001956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_TIM3_Init+0xac>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM3_Init+0xac>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <MX_TIM3_Init+0xac>)
 800196a:	f007 f893 	bl	8008a94 <HAL_TIM_PWM_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001974:	f002 ff58 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4619      	mov	r1, r3
 8001986:	4811      	ldr	r0, [pc, #68]	; (80019cc <MX_TIM3_Init+0xac>)
 8001988:	f008 ff24 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001992:	f002 ff49 	bl	8004828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001996:	2360      	movs	r3, #96	; 0x60
 8001998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM3_Init+0xac>)
 80019ae:	f007 fd99 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019b8:	f002 ff36 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM3_Init+0xac>)
 80019be:	f003 fa8b 	bl	8004ed8 <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000464 	.word	0x20000464
 80019d0:	40000400 	.word	0x40000400

080019d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a fa2c 	bl	800be40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MX_TIM4_Init+0xa0>)
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <MX_TIM4_Init+0xa4>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_TIM4_Init+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM4_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM4_Init+0xa0>)
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM4_Init+0xa0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM4_Init+0xa0>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM4_Init+0xa0>)
 8001a42:	f007 fa9f 	bl	8008f84 <HAL_TIM_Encoder_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f002 feec 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM4_Init+0xa0>)
 8001a5e:	f008 feb9 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a68:	f002 fede 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000374 	.word	0x20000374
 8001a78:	40000800 	.word	0x40000800

08001a7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	; 0x58
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00a f9c3 	bl	800be40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001abc:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <MX_TIM8_Init+0x154>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ac8:	2260      	movs	r2, #96	; 0x60
 8001aca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ae6:	4839      	ldr	r0, [pc, #228]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001ae8:	f006 fe1e 	bl	8008728 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001af2:	f002 fe99 	bl	8004828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b00:	4619      	mov	r1, r3
 8001b02:	4832      	ldr	r0, [pc, #200]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001b04:	f007 fec6 	bl	8009894 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b0e:	f002 fe8b 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001b14:	f006 ffbe 	bl	8008a94 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b1e:	f002 fe83 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4826      	ldr	r0, [pc, #152]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001b32:	f008 fe4f 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b3c:	f002 fe74 	bl	8004828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2204      	movs	r2, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4819      	ldr	r0, [pc, #100]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001b66:	f007 fcbd 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001b70:	f002 fe5a 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001b7e:	f007 fcb1 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b88:	f002 fe4e 	bl	8004828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001bb0:	f008 feee 	bl	800a990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001bba:	f002 fe35 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM8_Init+0x150>)
 8001bc0:	f003 f98a 	bl	8004ed8 <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3758      	adds	r7, #88	; 0x58
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000032c 	.word	0x2000032c
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001bfc:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <MX_TIM12_Init+0xdc>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c02:	2213      	movs	r2, #19
 8001c04:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c0e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c12:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c20:	4822      	ldr	r0, [pc, #136]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c22:	f006 fd81 	bl	8008728 <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f002 fdfc 	bl	8004828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c34:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c3e:	f007 fe29 	bl	8009894 <HAL_TIM_ConfigClockSource>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001c48:	f002 fdee 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c4e:	f006 ff21 	bl	8008a94 <HAL_TIM_PWM_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001c58:	f002 fde6 	bl	8004828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5c:	2360      	movs	r3, #96	; 0x60
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	480e      	ldr	r0, [pc, #56]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c74:	f007 fc36 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001c7e:	f002 fdd3 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2204      	movs	r2, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c8a:	f007 fc2b 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001c94:	f002 fdc8 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001c9a:	f006 fe35 	bl	8008908 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM12_Init+0xd8>)
 8001ca0:	f003 f91a 	bl	8004ed8 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3730      	adds	r7, #48	; 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200017d4 	.word	0x200017d4
 8001cb0:	40001800 	.word	0x40001800

08001cb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_UART4_Init+0x50>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_UART4_Init+0x4c>)
 8001cec:	f008 ff30 	bl	800ab50 <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001cf6:	f002 fd97 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200016ac 	.word	0x200016ac
 8001d04:	40004c00 	.word	0x40004c00

08001d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <MX_USART1_UART_Init+0x50>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d40:	f008 ff06 	bl	800ab50 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4a:	f002 fd6d 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000564 	.word	0x20000564
 8001d58:	40011000 	.word	0x40011000

08001d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <MX_USART2_UART_Init+0x50>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d94:	f008 fedc 	bl	800ab50 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d9e:	f002 fd43 	bl	8004828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20001790 	.word	0x20001790
 8001dac:	40004400 	.word	0x40004400

08001db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_DMA_Init+0x3c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <MX_DMA_Init+0x3c>)
 8001dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_DMA_Init+0x3c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f003 fc28 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f003 fc51 	bl	8005684 <HAL_NVIC_EnableIRQ>

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b48      	ldr	r3, [pc, #288]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a43      	ldr	r2, [pc, #268]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a3c      	ldr	r2, [pc, #240]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <MX_GPIO_Init+0x180>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001e92:	2200      	movs	r2, #0
 8001e94:	213d      	movs	r1, #61	; 0x3d
 8001e96:	4837      	ldr	r0, [pc, #220]	; (8001f74 <MX_GPIO_Init+0x184>)
 8001e98:	f004 fc26 	bl	80066e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f641 0102 	movw	r1, #6146	; 0x1802
 8001ea2:	4835      	ldr	r0, [pc, #212]	; (8001f78 <MX_GPIO_Init+0x188>)
 8001ea4:	f004 fc20 	bl	80066e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f241 0126 	movw	r1, #4134	; 0x1026
 8001eae:	4833      	ldr	r0, [pc, #204]	; (8001f7c <MX_GPIO_Init+0x18c>)
 8001eb0:	f004 fc1a 	bl	80066e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	482a      	ldr	r0, [pc, #168]	; (8001f74 <MX_GPIO_Init+0x184>)
 8001ecc:	f004 f8e8 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ed0:	233d      	movs	r3, #61	; 0x3d
 8001ed2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4823      	ldr	r0, [pc, #140]	; (8001f74 <MX_GPIO_Init+0x184>)
 8001ee8:	f004 f8da 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001eec:	f641 0302 	movw	r3, #6146	; 0x1802
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	481c      	ldr	r0, [pc, #112]	; (8001f78 <MX_GPIO_Init+0x188>)
 8001f06:	f004 f8cb 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4816      	ldr	r0, [pc, #88]	; (8001f78 <MX_GPIO_Init+0x188>)
 8001f1e:	f004 f8bf 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001f22:	f241 0326 	movw	r3, #4134	; 0x1026
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4810      	ldr	r0, [pc, #64]	; (8001f7c <MX_GPIO_Init+0x18c>)
 8001f3c:	f004 f8b0 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f40:	2304      	movs	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <MX_GPIO_Init+0x190>)
 8001f54:	f004 f8a4 	bl	80060a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8001f58:	2202      	movs	r2, #2
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2028      	movs	r0, #40	; 0x28
 8001f5e:	f003 fb65 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f62:	2028      	movs	r0, #40	; 0x28
 8001f64:	f003 fb8e 	bl	8005684 <HAL_NVIC_EnableIRQ>

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <Vonalszenzor_Init+0x1c>)
 8001f8e:	f004 fbab 	bl	80066e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001f92:	2200      	movs	r2, #0
 8001f94:	2120      	movs	r1, #32
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <Vonalszenzor_Init+0x20>)
 8001f98:	f004 fba6 	bl	80066e8 <HAL_GPIO_WritePin>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001fb2:	48be      	ldr	r0, [pc, #760]	; (80022ac <Vonalszenzor_operal+0x304>)
 8001fb4:	f000 fc46 	bl	8002844 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8001fb8:	2370      	movs	r3, #112	; 0x70
 8001fba:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8001fbc:	48bc      	ldr	r0, [pc, #752]	; (80022b0 <Vonalszenzor_operal+0x308>)
 8001fbe:	f000 fc41 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001fc2:	4bbc      	ldr	r3, [pc, #752]	; (80022b4 <Vonalszenzor_operal+0x30c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f107 020c 	add.w	r2, r7, #12
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fc99 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0] - 5;
 8001fd2:	7b3a      	ldrb	r2, [r7, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3320      	adds	r3, #32
 8001fd8:	3a05      	subs	r2, #5
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8001fde:	4bb6      	ldr	r3, [pc, #728]	; (80022b8 <Vonalszenzor_operal+0x310>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f107 020c 	add.w	r2, r7, #12
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fc8b 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0] - 2;
 8001fee:	7b3a      	ldrb	r2, [r7, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	331c      	adds	r3, #28
 8001ff4:	3a02      	subs	r2, #2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001ffa:	48ac      	ldr	r0, [pc, #688]	; (80022ac <Vonalszenzor_operal+0x304>)
 8001ffc:	f000 fc22 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002000:	48ae      	ldr	r0, [pc, #696]	; (80022bc <Vonalszenzor_operal+0x314>)
 8002002:	f000 fc1f 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002006:	4bab      	ldr	r3, [pc, #684]	; (80022b4 <Vonalszenzor_operal+0x30c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fc77 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3318      	adds	r3, #24
 800201a:	7b3a      	ldrb	r2, [r7, #12]
 800201c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800201e:	4ba6      	ldr	r3, [pc, #664]	; (80022b8 <Vonalszenzor_operal+0x310>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f107 020c 	add.w	r2, r7, #12
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fc6b 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3314      	adds	r3, #20
 8002032:	7b3a      	ldrb	r2, [r7, #12]
 8002034:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002036:	489d      	ldr	r0, [pc, #628]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002038:	f000 fc04 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 800203c:	48a0      	ldr	r0, [pc, #640]	; (80022c0 <Vonalszenzor_operal+0x318>)
 800203e:	f000 fc01 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002042:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <Vonalszenzor_operal+0x30c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fc59 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3310      	adds	r3, #16
 8002056:	7b3a      	ldrb	r2, [r7, #12]
 8002058:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800205a:	4b97      	ldr	r3, [pc, #604]	; (80022b8 <Vonalszenzor_operal+0x310>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc4d 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	330c      	adds	r3, #12
 800206e:	7b3a      	ldrb	r2, [r7, #12]
 8002070:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002072:	488e      	ldr	r0, [pc, #568]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002074:	f000 fbe6 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 8002078:	4892      	ldr	r0, [pc, #584]	; (80022c4 <Vonalszenzor_operal+0x31c>)
 800207a:	f000 fbe3 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800207e:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <Vonalszenzor_operal+0x30c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc3b 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3308      	adds	r3, #8
 8002092:	7b3a      	ldrb	r2, [r7, #12]
 8002094:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <Vonalszenzor_operal+0x310>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fc2f 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	7b3a      	ldrb	r2, [r7, #12]
 80020ac:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80020ae:	487f      	ldr	r0, [pc, #508]	; (80022ac <Vonalszenzor_operal+0x304>)
 80020b0:	f000 fbc8 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 80020b4:	4884      	ldr	r0, [pc, #528]	; (80022c8 <Vonalszenzor_operal+0x320>)
 80020b6:	f000 fbc5 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020ba:	4b84      	ldr	r3, [pc, #528]	; (80022cc <Vonalszenzor_operal+0x324>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fc1d 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	331f      	adds	r3, #31
 80020ce:	7b3a      	ldrb	r2, [r7, #12]
 80020d0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <Vonalszenzor_operal+0x328>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fc11 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	331b      	adds	r3, #27
 80020e6:	7b3a      	ldrb	r2, [r7, #12]
 80020e8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020ea:	4870      	ldr	r0, [pc, #448]	; (80022ac <Vonalszenzor_operal+0x304>)
 80020ec:	f000 fbaa 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 80020f0:	4878      	ldr	r0, [pc, #480]	; (80022d4 <Vonalszenzor_operal+0x32c>)
 80020f2:	f000 fba7 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020f6:	4b75      	ldr	r3, [pc, #468]	; (80022cc <Vonalszenzor_operal+0x324>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fbff 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3317      	adds	r3, #23
 800210a:	7b3a      	ldrb	r2, [r7, #12]
 800210c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <Vonalszenzor_operal+0x328>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fbf3 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3313      	adds	r3, #19
 8002122:	7b3a      	ldrb	r2, [r7, #12]
 8002124:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002126:	4861      	ldr	r0, [pc, #388]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002128:	f000 fb8c 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 800212c:	486a      	ldr	r0, [pc, #424]	; (80022d8 <Vonalszenzor_operal+0x330>)
 800212e:	f000 fb89 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002132:	4b66      	ldr	r3, [pc, #408]	; (80022cc <Vonalszenzor_operal+0x324>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fbe1 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	330f      	adds	r3, #15
 8002146:	7b3a      	ldrb	r2, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <Vonalszenzor_operal+0x328>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f107 020c 	add.w	r2, r7, #12
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fbd5 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330b      	adds	r3, #11
 800215e:	7b3a      	ldrb	r2, [r7, #12]
 8002160:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002162:	4852      	ldr	r0, [pc, #328]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002164:	f000 fb6e 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 8002168:	485c      	ldr	r0, [pc, #368]	; (80022dc <Vonalszenzor_operal+0x334>)
 800216a:	f000 fb6b 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <Vonalszenzor_operal+0x324>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fbc3 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3307      	adds	r3, #7
 8002182:	7b3a      	ldrb	r2, [r7, #12]
 8002184:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <Vonalszenzor_operal+0x328>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fbb7 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3303      	adds	r3, #3
 800219a:	7b3a      	ldrb	r2, [r7, #12]
 800219c:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800219e:	4843      	ldr	r0, [pc, #268]	; (80022ac <Vonalszenzor_operal+0x304>)
 80021a0:	f000 fb50 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 80021a4:	484e      	ldr	r0, [pc, #312]	; (80022e0 <Vonalszenzor_operal+0x338>)
 80021a6:	f000 fb4d 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <Vonalszenzor_operal+0x33c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fba5 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	331e      	adds	r3, #30
 80021be:	7b3a      	ldrb	r2, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <Vonalszenzor_operal+0x340>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fb99 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0] + 1;
 80021d2:	7b3a      	ldrb	r2, [r7, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331a      	adds	r3, #26
 80021d8:	3201      	adds	r2, #1
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021de:	4833      	ldr	r0, [pc, #204]	; (80022ac <Vonalszenzor_operal+0x304>)
 80021e0:	f000 fb30 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 80021e4:	4841      	ldr	r0, [pc, #260]	; (80022ec <Vonalszenzor_operal+0x344>)
 80021e6:	f000 fb2d 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <Vonalszenzor_operal+0x33c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f107 020c 	add.w	r2, r7, #12
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fb85 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3316      	adds	r3, #22
 80021fe:	7b3a      	ldrb	r2, [r7, #12]
 8002200:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <Vonalszenzor_operal+0x340>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fb79 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3312      	adds	r3, #18
 8002216:	7b3a      	ldrb	r2, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <Vonalszenzor_operal+0x304>)
 800221c:	f000 fb12 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 8002220:	4833      	ldr	r0, [pc, #204]	; (80022f0 <Vonalszenzor_operal+0x348>)
 8002222:	f000 fb0f 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <Vonalszenzor_operal+0x33c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f107 020c 	add.w	r2, r7, #12
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fb67 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	330e      	adds	r3, #14
 800223a:	7b3a      	ldrb	r2, [r7, #12]
 800223c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <Vonalszenzor_operal+0x340>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f107 020c 	add.w	r2, r7, #12
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fb5b 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	330a      	adds	r3, #10
 8002252:	7b3a      	ldrb	r2, [r7, #12]
 8002254:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002256:	4815      	ldr	r0, [pc, #84]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002258:	f000 faf4 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 800225c:	4825      	ldr	r0, [pc, #148]	; (80022f4 <Vonalszenzor_operal+0x34c>)
 800225e:	f000 faf1 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <Vonalszenzor_operal+0x33c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fb49 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3306      	adds	r3, #6
 8002276:	7b3a      	ldrb	r2, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <Vonalszenzor_operal+0x340>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fb3d 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3302      	adds	r3, #2
 800228e:	7b3a      	ldrb	r2, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <Vonalszenzor_operal+0x304>)
 8002294:	f000 fad6 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002298:	4817      	ldr	r0, [pc, #92]	; (80022f8 <Vonalszenzor_operal+0x350>)
 800229a:	f000 fad3 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <Vonalszenzor_operal+0x354>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	e029      	b.n	8002300 <Vonalszenzor_operal+0x358>
 80022ac:	20000004 	.word	0x20000004
 80022b0:	2000008c 	.word	0x2000008c
 80022b4:	200001e9 	.word	0x200001e9
 80022b8:	20000115 	.word	0x20000115
 80022bc:	20000084 	.word	0x20000084
 80022c0:	2000007c 	.word	0x2000007c
 80022c4:	20000074 	.word	0x20000074
 80022c8:	2000006c 	.word	0x2000006c
 80022cc:	20000112 	.word	0x20000112
 80022d0:	20000116 	.word	0x20000116
 80022d4:	20000064 	.word	0x20000064
 80022d8:	2000005c 	.word	0x2000005c
 80022dc:	20000054 	.word	0x20000054
 80022e0:	2000004c 	.word	0x2000004c
 80022e4:	20000113 	.word	0x20000113
 80022e8:	20000117 	.word	0x20000117
 80022ec:	20000044 	.word	0x20000044
 80022f0:	2000003c 	.word	0x2000003c
 80022f4:	20000034 	.word	0x20000034
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000114 	.word	0x20000114
 8002300:	f000 fb00 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	331d      	adds	r3, #29
 8002308:	7b3a      	ldrb	r2, [r7, #12]
 800230a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800230c:	4bbd      	ldr	r3, [pc, #756]	; (8002604 <Vonalszenzor_operal+0x65c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f107 020c 	add.w	r2, r7, #12
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 faf4 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3319      	adds	r3, #25
 8002320:	7b3a      	ldrb	r2, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002324:	48b8      	ldr	r0, [pc, #736]	; (8002608 <Vonalszenzor_operal+0x660>)
 8002326:	f000 fa8d 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 800232a:	48b8      	ldr	r0, [pc, #736]	; (800260c <Vonalszenzor_operal+0x664>)
 800232c:	f000 fa8a 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002330:	4bb7      	ldr	r3, [pc, #732]	; (8002610 <Vonalszenzor_operal+0x668>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f107 020c 	add.w	r2, r7, #12
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fae2 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3315      	adds	r3, #21
 8002344:	7b3a      	ldrb	r2, [r7, #12]
 8002346:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002348:	4bae      	ldr	r3, [pc, #696]	; (8002604 <Vonalszenzor_operal+0x65c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f107 020c 	add.w	r2, r7, #12
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fad6 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3311      	adds	r3, #17
 800235c:	7b3a      	ldrb	r2, [r7, #12]
 800235e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002360:	48a9      	ldr	r0, [pc, #676]	; (8002608 <Vonalszenzor_operal+0x660>)
 8002362:	f000 fa6f 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 8002366:	48ab      	ldr	r0, [pc, #684]	; (8002614 <Vonalszenzor_operal+0x66c>)
 8002368:	f000 fa6c 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800236c:	4ba8      	ldr	r3, [pc, #672]	; (8002610 <Vonalszenzor_operal+0x668>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fac4 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	330d      	adds	r3, #13
 8002380:	7b3a      	ldrb	r2, [r7, #12]
 8002382:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002384:	4b9f      	ldr	r3, [pc, #636]	; (8002604 <Vonalszenzor_operal+0x65c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fab8 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3309      	adds	r3, #9
 8002398:	7b3a      	ldrb	r2, [r7, #12]
 800239a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800239c:	489a      	ldr	r0, [pc, #616]	; (8002608 <Vonalszenzor_operal+0x660>)
 800239e:	f000 fa51 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 80023a2:	489d      	ldr	r0, [pc, #628]	; (8002618 <Vonalszenzor_operal+0x670>)
 80023a4:	f000 fa4e 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023a8:	4b99      	ldr	r3, [pc, #612]	; (8002610 <Vonalszenzor_operal+0x668>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f107 020c 	add.w	r2, r7, #12
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 faa6 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3305      	adds	r3, #5
 80023bc:	7b3a      	ldrb	r2, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023c0:	4b90      	ldr	r3, [pc, #576]	; (8002604 <Vonalszenzor_operal+0x65c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fa9a 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	7b3a      	ldrb	r2, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80023d8:	488b      	ldr	r0, [pc, #556]	; (8002608 <Vonalszenzor_operal+0x660>)
 80023da:	f000 fa33 	bl	8002844 <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 80023de:	488f      	ldr	r0, [pc, #572]	; (800261c <Vonalszenzor_operal+0x674>)
 80023e0:	f000 fa30 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80023e4:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <Vonalszenzor_operal+0x678>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f107 020c 	add.w	r2, r7, #12
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fa88 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0] - 4;
 80023f4:	7b3a      	ldrb	r2, [r7, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	3a04      	subs	r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002400:	4b88      	ldr	r3, [pc, #544]	; (8002624 <Vonalszenzor_operal+0x67c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f107 020c 	add.w	r2, r7, #12
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa7a 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3305      	adds	r3, #5
 8002414:	7b3a      	ldrb	r2, [r7, #12]
 8002416:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002418:	487b      	ldr	r0, [pc, #492]	; (8002608 <Vonalszenzor_operal+0x660>)
 800241a:	f000 fa13 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 800241e:	4882      	ldr	r0, [pc, #520]	; (8002628 <Vonalszenzor_operal+0x680>)
 8002420:	f000 fa10 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <Vonalszenzor_operal+0x678>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f107 020c 	add.w	r2, r7, #12
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fa68 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3309      	adds	r3, #9
 8002438:	7b3a      	ldrb	r2, [r7, #12]
 800243a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800243c:	4b79      	ldr	r3, [pc, #484]	; (8002624 <Vonalszenzor_operal+0x67c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f107 020c 	add.w	r2, r7, #12
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fa5c 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	330d      	adds	r3, #13
 8002450:	7b3a      	ldrb	r2, [r7, #12]
 8002452:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002454:	486c      	ldr	r0, [pc, #432]	; (8002608 <Vonalszenzor_operal+0x660>)
 8002456:	f000 f9f5 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 800245a:	4874      	ldr	r0, [pc, #464]	; (800262c <Vonalszenzor_operal+0x684>)
 800245c:	f000 f9f2 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <Vonalszenzor_operal+0x678>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fa4a 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	3311      	adds	r3, #17
 8002474:	7b3a      	ldrb	r2, [r7, #12]
 8002476:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <Vonalszenzor_operal+0x67c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f107 020c 	add.w	r2, r7, #12
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fa3e 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3315      	adds	r3, #21
 800248c:	7b3a      	ldrb	r2, [r7, #12]
 800248e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002490:	485d      	ldr	r0, [pc, #372]	; (8002608 <Vonalszenzor_operal+0x660>)
 8002492:	f000 f9d7 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 8002496:	4866      	ldr	r0, [pc, #408]	; (8002630 <Vonalszenzor_operal+0x688>)
 8002498:	f000 f9d4 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800249c:	4b60      	ldr	r3, [pc, #384]	; (8002620 <Vonalszenzor_operal+0x678>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fa2c 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3319      	adds	r3, #25
 80024b0:	7b3a      	ldrb	r2, [r7, #12]
 80024b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024b4:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <Vonalszenzor_operal+0x67c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f107 020c 	add.w	r2, r7, #12
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fa20 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	331d      	adds	r3, #29
 80024c8:	7b3a      	ldrb	r2, [r7, #12]
 80024ca:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80024cc:	484e      	ldr	r0, [pc, #312]	; (8002608 <Vonalszenzor_operal+0x660>)
 80024ce:	f000 f9b9 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 80024d2:	4858      	ldr	r0, [pc, #352]	; (8002634 <Vonalszenzor_operal+0x68c>)
 80024d4:	f000 f9b6 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80024d8:	4b57      	ldr	r3, [pc, #348]	; (8002638 <Vonalszenzor_operal+0x690>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fa0e 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3302      	adds	r3, #2
 80024ec:	7b3a      	ldrb	r2, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80024f0:	4b52      	ldr	r3, [pc, #328]	; (800263c <Vonalszenzor_operal+0x694>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fa02 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002500:	7b3a      	ldrb	r2, [r7, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	3306      	adds	r3, #6
 8002506:	3202      	adds	r2, #2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800250c:	483e      	ldr	r0, [pc, #248]	; (8002608 <Vonalszenzor_operal+0x660>)
 800250e:	f000 f999 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002512:	484b      	ldr	r0, [pc, #300]	; (8002640 <Vonalszenzor_operal+0x698>)
 8002514:	f000 f996 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <Vonalszenzor_operal+0x690>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9ee 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	330a      	adds	r3, #10
 800252c:	7b3a      	ldrb	r2, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <Vonalszenzor_operal+0x694>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f107 020c 	add.w	r2, r7, #12
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f9e2 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0] +1;
 8002540:	7b3a      	ldrb	r2, [r7, #12]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	330e      	adds	r3, #14
 8002546:	3201      	adds	r2, #1
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800254c:	482e      	ldr	r0, [pc, #184]	; (8002608 <Vonalszenzor_operal+0x660>)
 800254e:	f000 f979 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 8002552:	483c      	ldr	r0, [pc, #240]	; (8002644 <Vonalszenzor_operal+0x69c>)
 8002554:	f000 f976 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <Vonalszenzor_operal+0x690>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f9ce 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3312      	adds	r3, #18
 800256c:	7b3a      	ldrb	r2, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <Vonalszenzor_operal+0x694>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f9c2 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3316      	adds	r3, #22
 8002584:	7b3a      	ldrb	r2, [r7, #12]
 8002586:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002588:	481f      	ldr	r0, [pc, #124]	; (8002608 <Vonalszenzor_operal+0x660>)
 800258a:	f000 f95b 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 800258e:	482e      	ldr	r0, [pc, #184]	; (8002648 <Vonalszenzor_operal+0x6a0>)
 8002590:	f000 f958 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <Vonalszenzor_operal+0x690>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f107 020c 	add.w	r2, r7, #12
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f9b0 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	331a      	adds	r3, #26
 80025a8:	7b3a      	ldrb	r2, [r7, #12]
 80025aa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <Vonalszenzor_operal+0x694>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f9a4 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	331e      	adds	r3, #30
 80025c0:	7b3a      	ldrb	r2, [r7, #12]
 80025c2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <Vonalszenzor_operal+0x660>)
 80025c6:	f000 f93d 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 80025ca:	4820      	ldr	r0, [pc, #128]	; (800264c <Vonalszenzor_operal+0x6a4>)
 80025cc:	f000 f93a 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <Vonalszenzor_operal+0x6a8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f107 020c 	add.w	r2, r7, #12
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f992 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3303      	adds	r3, #3
 80025e4:	7b3a      	ldrb	r2, [r7, #12]
 80025e6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <Vonalszenzor_operal+0x6ac>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f986 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3307      	adds	r3, #7
 80025fc:	7b3a      	ldrb	r2, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e02a      	b.n	8002658 <Vonalszenzor_operal+0x6b0>
 8002602:	bf00      	nop
 8002604:	20000118 	.word	0x20000118
 8002608:	20000004 	.word	0x20000004
 800260c:	20000024 	.word	0x20000024
 8002610:	20000114 	.word	0x20000114
 8002614:	2000001c 	.word	0x2000001c
 8002618:	20000014 	.word	0x20000014
 800261c:	2000010c 	.word	0x2000010c
 8002620:	200001e9 	.word	0x200001e9
 8002624:	20000115 	.word	0x20000115
 8002628:	20000104 	.word	0x20000104
 800262c:	200000fc 	.word	0x200000fc
 8002630:	200000f4 	.word	0x200000f4
 8002634:	200000ec 	.word	0x200000ec
 8002638:	20000112 	.word	0x20000112
 800263c:	20000116 	.word	0x20000116
 8002640:	200000e4 	.word	0x200000e4
 8002644:	200000dc 	.word	0x200000dc
 8002648:	200000d4 	.word	0x200000d4
 800264c:	200000cc 	.word	0x200000cc
 8002650:	20000113 	.word	0x20000113
 8002654:	20000117 	.word	0x20000117
	Vonalszenzor_minta_kuldes(leszed);
 8002658:	486e      	ldr	r0, [pc, #440]	; (8002814 <Vonalszenzor_operal+0x86c>)
 800265a:	f000 f8f3 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 800265e:	486e      	ldr	r0, [pc, #440]	; (8002818 <Vonalszenzor_operal+0x870>)
 8002660:	f000 f8f0 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <Vonalszenzor_operal+0x874>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f948 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	330b      	adds	r3, #11
 8002678:	7b3a      	ldrb	r2, [r7, #12]
 800267a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800267c:	4b68      	ldr	r3, [pc, #416]	; (8002820 <Vonalszenzor_operal+0x878>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f93c 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0] +2;
 800268c:	7b3a      	ldrb	r2, [r7, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	330f      	adds	r3, #15
 8002692:	3202      	adds	r2, #2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002698:	485e      	ldr	r0, [pc, #376]	; (8002814 <Vonalszenzor_operal+0x86c>)
 800269a:	f000 f8d3 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 800269e:	4861      	ldr	r0, [pc, #388]	; (8002824 <Vonalszenzor_operal+0x87c>)
 80026a0:	f000 f8d0 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <Vonalszenzor_operal+0x874>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f928 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3313      	adds	r3, #19
 80026b8:	7b3a      	ldrb	r2, [r7, #12]
 80026ba:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026bc:	4b58      	ldr	r3, [pc, #352]	; (8002820 <Vonalszenzor_operal+0x878>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	f107 020c 	add.w	r2, r7, #12
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f91c 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3317      	adds	r3, #23
 80026d0:	7b3a      	ldrb	r2, [r7, #12]
 80026d2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026d4:	484f      	ldr	r0, [pc, #316]	; (8002814 <Vonalszenzor_operal+0x86c>)
 80026d6:	f000 f8b5 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 80026da:	4853      	ldr	r0, [pc, #332]	; (8002828 <Vonalszenzor_operal+0x880>)
 80026dc:	f000 f8b2 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026e0:	4b4e      	ldr	r3, [pc, #312]	; (800281c <Vonalszenzor_operal+0x874>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f90a 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	331b      	adds	r3, #27
 80026f4:	7b3a      	ldrb	r2, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026f8:	4b49      	ldr	r3, [pc, #292]	; (8002820 <Vonalszenzor_operal+0x878>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f8fe 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	331f      	adds	r3, #31
 800270c:	7b3a      	ldrb	r2, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002710:	4840      	ldr	r0, [pc, #256]	; (8002814 <Vonalszenzor_operal+0x86c>)
 8002712:	f000 f897 	bl	8002844 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002716:	4845      	ldr	r0, [pc, #276]	; (800282c <Vonalszenzor_operal+0x884>)
 8002718:	f000 f894 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800271c:	4b44      	ldr	r3, [pc, #272]	; (8002830 <Vonalszenzor_operal+0x888>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f107 020c 	add.w	r2, r7, #12
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f8ec 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3304      	adds	r3, #4
 8002730:	7b3a      	ldrb	r2, [r7, #12]
 8002732:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002734:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <Vonalszenzor_operal+0x88c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f107 020c 	add.w	r2, r7, #12
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8e0 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002744:	7b3a      	ldrb	r2, [r7, #12]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3308      	adds	r3, #8
 800274a:	3202      	adds	r2, #2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002750:	4830      	ldr	r0, [pc, #192]	; (8002814 <Vonalszenzor_operal+0x86c>)
 8002752:	f000 f877 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 8002756:	4838      	ldr	r0, [pc, #224]	; (8002838 <Vonalszenzor_operal+0x890>)
 8002758:	f000 f874 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <Vonalszenzor_operal+0x888>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f107 020c 	add.w	r2, r7, #12
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f8cc 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	7b3a      	ldrb	r2, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <Vonalszenzor_operal+0x88c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	f107 020c 	add.w	r2, r7, #12
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f8c0 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3310      	adds	r3, #16
 8002788:	7b3a      	ldrb	r2, [r7, #12]
 800278a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800278c:	4821      	ldr	r0, [pc, #132]	; (8002814 <Vonalszenzor_operal+0x86c>)
 800278e:	f000 f859 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 8002792:	482a      	ldr	r0, [pc, #168]	; (800283c <Vonalszenzor_operal+0x894>)
 8002794:	f000 f856 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <Vonalszenzor_operal+0x888>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	f107 020c 	add.w	r2, r7, #12
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f8ae 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	7b3a      	ldrb	r2, [r7, #12]
 80027ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <Vonalszenzor_operal+0x88c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	f107 020c 	add.w	r2, r7, #12
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f8a2 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	3318      	adds	r3, #24
 80027c4:	7b3a      	ldrb	r2, [r7, #12]
 80027c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027c8:	4812      	ldr	r0, [pc, #72]	; (8002814 <Vonalszenzor_operal+0x86c>)
 80027ca:	f000 f83b 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80027ce:	481c      	ldr	r0, [pc, #112]	; (8002840 <Vonalszenzor_operal+0x898>)
 80027d0:	f000 f838 	bl	8002844 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <Vonalszenzor_operal+0x888>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f107 020c 	add.w	r2, r7, #12
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f890 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	331c      	adds	r3, #28
 80027e8:	7b3a      	ldrb	r2, [r7, #12]
 80027ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <Vonalszenzor_operal+0x88c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f107 020c 	add.w	r2, r7, #12
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f884 	bl	8002904 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3320      	adds	r3, #32
 8002800:	7b3a      	ldrb	r2, [r7, #12]
 8002802:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <Vonalszenzor_operal+0x86c>)
 8002806:	f000 f81d 	bl	8002844 <Vonalszenzor_minta_kuldes>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000004 	.word	0x20000004
 8002818:	200000c4 	.word	0x200000c4
 800281c:	20000113 	.word	0x20000113
 8002820:	20000117 	.word	0x20000117
 8002824:	200000bc 	.word	0x200000bc
 8002828:	200000b4 	.word	0x200000b4
 800282c:	200000ac 	.word	0x200000ac
 8002830:	20000114 	.word	0x20000114
 8002834:	20000118 	.word	0x20000118
 8002838:	200000a4 	.word	0x200000a4
 800283c:	2000009c 	.word	0x2000009c
 8002840:	20000094 	.word	0x20000094

08002844 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <Vonalszenzor_minta_kuldes+0x44>)
 8002852:	f003 ff49 	bl	80066e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 8002856:	2200      	movs	r2, #0
 8002858:	2102      	movs	r1, #2
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <Vonalszenzor_minta_kuldes+0x48>)
 800285c:	f003 ff44 	bl	80066e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	2206      	movs	r2, #6
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	480a      	ldr	r0, [pc, #40]	; (8002890 <Vonalszenzor_minta_kuldes+0x4c>)
 8002868:	f005 fa22 	bl	8007cb0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 800286c:	2201      	movs	r2, #1
 800286e:	2110      	movs	r1, #16
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <Vonalszenzor_minta_kuldes+0x44>)
 8002872:	f003 ff39 	bl	80066e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 8002876:	2201      	movs	r2, #1
 8002878:	2102      	movs	r1, #2
 800287a:	4804      	ldr	r0, [pc, #16]	; (800288c <Vonalszenzor_minta_kuldes+0x48>)
 800287c:	f003 ff34 	bl	80066e8 <HAL_GPIO_WritePin>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020800 	.word	0x40020800
 800288c:	40020400 	.word	0x40020400
 8002890:	200002d4 	.word	0x200002d4

08002894 <Vonalas_tombok_torlese>:

void Vonalas_tombok_torlese(void) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	e00c      	b.n	80028ba <Vonalas_tombok_torlese+0x26>
		vonalak_h[i] = '-';
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <Vonalas_tombok_torlese+0x60>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	222d      	movs	r2, #45	; 0x2d
 80028a8:	701a      	strb	r2, [r3, #0]
		vonalak_e[i] = '-';
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <Vonalas_tombok_torlese+0x64>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	222d      	movs	r2, #45	; 0x2d
 80028b2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3301      	adds	r3, #1
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	ddef      	ble.n	80028a0 <Vonalas_tombok_torlese+0xc>
	}
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80028c0:	2301      	movs	r3, #1
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	e00c      	b.n	80028e0 <Vonalas_tombok_torlese+0x4c>
		vonal_eredmeny_h[i] = 0;
 80028c6:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <Vonalas_tombok_torlese+0x68>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
		vonal_eredmeny_e[i] = 0;
 80028d0:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <Vonalas_tombok_torlese+0x6c>)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	ddef      	ble.n	80028c6 <Vonalas_tombok_torlese+0x32>
	}
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	20000130 	.word	0x20000130
 80028f8:	20000138 	.word	0x20000138
 80028fc:	200001ec 	.word	0x200001ec
 8002900:	20000210 	.word	0x20000210

08002904 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	733b      	strb	r3, [r7, #12]
 8002914:	2300      	movs	r3, #0
 8002916:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002918:	f107 010c 	add.w	r1, r7, #12
 800291c:	2364      	movs	r3, #100	; 0x64
 800291e:	2202      	movs	r2, #2
 8002920:	4806      	ldr	r0, [pc, #24]	; (800293c <Vonalszenzor_meres_kiolvasas+0x38>)
 8002922:	f005 f9c5 	bl	8007cb0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 8002926:	2364      	movs	r3, #100	; 0x64
 8002928:	2202      	movs	r2, #2
 800292a:	6839      	ldr	r1, [r7, #0]
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <Vonalszenzor_meres_kiolvasas+0x38>)
 800292e:	f005 fb0b 	bl	8007f48 <HAL_SPI_Receive>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200016f0 	.word	0x200016f0

08002940 <Vonalas_tombok_feltoltese>:

void Vonalas_tombok_feltoltese(void) {
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
	for(int poz=1; poz < 33-1; poz++) {
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e10c      	b.n	8002b66 <Vonalas_tombok_feltoltese+0x226>
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
		if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz]) {
 800294c:	4a8a      	ldr	r2, [pc, #552]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fda9 	bl	80004ac <__aeabi_i2d>
 800295a:	4b88      	ldr	r3, [pc, #544]	; (8002b7c <Vonalas_tombok_feltoltese+0x23c>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fe f89e 	bl	8000aa0 <__aeabi_dcmpgt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d075      	beq.n	8002a56 <Vonalas_tombok_feltoltese+0x116>
			if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz+1]) {
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	4a82      	ldr	r2, [pc, #520]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fd9a 	bl	80004ac <__aeabi_i2d>
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <Vonalas_tombok_feltoltese+0x23c>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fe f88f 	bl	8000aa0 <__aeabi_dcmpgt>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d022      	beq.n	80029ce <Vonalas_tombok_feltoltese+0x8e>
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a7a      	ldr	r2, [pc, #488]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fd8b 	bl	80004ac <__aeabi_i2d>
 8002996:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <Vonalas_tombok_feltoltese+0x23c>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fe f86c 	bl	8000a78 <__aeabi_dcmple>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d057      	beq.n	8002a56 <Vonalas_tombok_feltoltese+0x116>
					int i = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 80029aa:	e002      	b.n	80029b2 <Vonalas_tombok_feltoltese+0x72>
						i++;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3301      	adds	r3, #1
 80029b0:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 80029b2:	4a73      	ldr	r2, [pc, #460]	; (8002b80 <Vonalas_tombok_feltoltese+0x240>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b2d      	cmp	r3, #45	; 0x2d
 80029bc:	d1f6      	bne.n	80029ac <Vonalas_tombok_feltoltese+0x6c>
					}
					vonalak_e[i] = poz;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	4a6f      	ldr	r2, [pc, #444]	; (8002b80 <Vonalas_tombok_feltoltese+0x240>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	460a      	mov	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e043      	b.n	8002a56 <Vonalas_tombok_feltoltese+0x116>
				}
			} else {
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd68 	bl	80004ac <__aeabi_i2d>
 80029dc:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <Vonalas_tombok_feltoltese+0x23c>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fe f849 	bl	8000a78 <__aeabi_dcmple>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d034      	beq.n	8002a56 <Vonalas_tombok_feltoltese+0x116>
					if(VONAL_THRESHOLD_E + 1 < vonal_eredmeny_e[poz-1] + vonal_eredmeny_e[poz+1]) {
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <Vonalas_tombok_feltoltese+0x23c>)
 80029ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <Vonalas_tombok_feltoltese+0x244>)
 80029f8:	f7fd fc0c 	bl	8000214 <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <Vonalas_tombok_feltoltese+0x238>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	440b      	add	r3, r1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd47 	bl	80004ac <__aeabi_i2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fe f81d 	bl	8000a64 <__aeabi_dcmplt>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <Vonalas_tombok_feltoltese+0x116>
						int j = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002a34:	e002      	b.n	8002a3c <Vonalas_tombok_feltoltese+0xfc>
							j++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <Vonalas_tombok_feltoltese+0x240>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b2d      	cmp	r3, #45	; 0x2d
 8002a46:	d1f6      	bne.n	8002a36 <Vonalas_tombok_feltoltese+0xf6>
						}
						vonalak_e[j] = poz;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	b2d9      	uxtb	r1, r3
 8002a4c:	4a4c      	ldr	r2, [pc, #304]	; (8002b80 <Vonalas_tombok_feltoltese+0x240>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	460a      	mov	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz]) {
 8002a56:	4a4c      	ldr	r2, [pc, #304]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd24 	bl	80004ac <__aeabi_i2d>
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <Vonalas_tombok_feltoltese+0x24c>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fe f819 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d075      	beq.n	8002b60 <Vonalas_tombok_feltoltese+0x220>
			if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz+1]) {
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a43      	ldr	r2, [pc, #268]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd15 	bl	80004ac <__aeabi_i2d>
 8002a82:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <Vonalas_tombok_feltoltese+0x24c>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fe f80a 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d022      	beq.n	8002ad8 <Vonalas_tombok_feltoltese+0x198>
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd06 	bl	80004ac <__aeabi_i2d>
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <Vonalas_tombok_feltoltese+0x24c>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd ffe7 	bl	8000a78 <__aeabi_dcmple>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d057      	beq.n	8002b60 <Vonalas_tombok_feltoltese+0x220>
					int k = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002ab4:	e002      	b.n	8002abc <Vonalas_tombok_feltoltese+0x17c>
						k++;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002abc:	4a34      	ldr	r2, [pc, #208]	; (8002b90 <Vonalas_tombok_feltoltese+0x250>)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8002ac6:	d1f6      	bne.n	8002ab6 <Vonalas_tombok_feltoltese+0x176>
					}
					vonalak_h[k] = poz;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	b2d9      	uxtb	r1, r3
 8002acc:	4a30      	ldr	r2, [pc, #192]	; (8002b90 <Vonalas_tombok_feltoltese+0x250>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e043      	b.n	8002b60 <Vonalas_tombok_feltoltese+0x220>
				}
			} else {
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fce3 	bl	80004ac <__aeabi_i2d>
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <Vonalas_tombok_feltoltese+0x24c>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd ffc4 	bl	8000a78 <__aeabi_dcmple>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d034      	beq.n	8002b60 <Vonalas_tombok_feltoltese+0x220>
					if(VONAL_THRESHOLD_H + 1 < vonal_eredmeny_h[poz-1] + vonal_eredmeny_h[poz+1]) {
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <Vonalas_tombok_feltoltese+0x24c>)
 8002af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <Vonalas_tombok_feltoltese+0x244>)
 8002b02:	f7fd fb87 	bl	8000214 <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461d      	mov	r5, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	4619      	mov	r1, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <Vonalas_tombok_feltoltese+0x248>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	440b      	add	r3, r1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fcc2 	bl	80004ac <__aeabi_i2d>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd ff98 	bl	8000a64 <__aeabi_dcmplt>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <Vonalas_tombok_feltoltese+0x220>
						int l = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002b3e:	e002      	b.n	8002b46 <Vonalas_tombok_feltoltese+0x206>
							l++;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <Vonalas_tombok_feltoltese+0x250>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b2d      	cmp	r3, #45	; 0x2d
 8002b50:	d1f6      	bne.n	8002b40 <Vonalas_tombok_feltoltese+0x200>
						}
						vonalak_h[l] = poz;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	b2d9      	uxtb	r1, r3
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <Vonalas_tombok_feltoltese+0x250>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
	for(int poz=1; poz < 33-1; poz++) {
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b1f      	cmp	r3, #31
 8002b6a:	f77f aeef 	ble.w	800294c <Vonalas_tombok_feltoltese+0xc>
	}
	/*for(int poz=1; poz < 33-1; poz++) {
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele

	}*/
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bdb0      	pop	{r4, r5, r7, pc}
 8002b78:	20000210 	.word	0x20000210
 8002b7c:	20000128 	.word	0x20000128
 8002b80:	20000138 	.word	0x20000138
 8002b84:	3ff00000 	.word	0x3ff00000
 8002b88:	200001ec 	.word	0x200001ec
 8002b8c:	20000120 	.word	0x20000120
 8002b90:	20000130 	.word	0x20000130
 8002b94:	00000000 	.word	0x00000000

08002b98 <Irany_valaszto>:

void Irany_valaszto(void) {
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	if(keresztezodesben == false) {
 8002b9e:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <Irany_valaszto+0x190>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8099 	beq.w	8002ce0 <Irany_valaszto+0x148>
		if(vonalak_e[1] < 33) {
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <Irany_valaszto+0x194>)
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	f200 80a5 	bhi.w	8002d02 <Irany_valaszto+0x16a>
			bool ok = true;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	71fb      	strb	r3, [r7, #7]
			int i = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002bc0:	e03e      	b.n	8002c40 <Irany_valaszto+0xa8>
				if((-8 > vonal_kovetni_e - (vonalak_e[i] - 16))  ||  (vonal_kovetni_e - (vonalak_e[i] - 16) > 8)) {
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <Irany_valaszto+0x198>)
 8002bc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <Irany_valaszto+0x194>)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3b10      	subs	r3, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc6a 	bl	80004ac <__aeabi_i2d>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fb16 	bl	8000210 <__aeabi_dsub>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <Irany_valaszto+0x19c>)
 8002bf2:	f7fd ff37 	bl	8000a64 <__aeabi_dcmplt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11c      	bne.n	8002c36 <Irany_valaszto+0x9e>
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <Irany_valaszto+0x198>)
 8002bfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c02:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <Irany_valaszto+0x194>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3b10      	subs	r3, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc4d 	bl	80004ac <__aeabi_i2d>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4620      	mov	r0, r4
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f7fd faf9 	bl	8000210 <__aeabi_dsub>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <Irany_valaszto+0x1a0>)
 8002c2c:	f7fd ff38 	bl	8000aa0 <__aeabi_dcmpgt>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <Irany_valaszto+0xa2>
					//if((-9.5 > vonal_kovetni_h - (vonalak_h[i] - 16))  ||  (vonal_kovetni_h - (vonalak_h[i] - 16) > 9.5)) {
				// ha barhol van olyan vonal, ami tul messze van az aktualisan kovetettol
						ok = false;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
					//}
				}
				i++;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002c40:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <Irany_valaszto+0x194>)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d9ba      	bls.n	8002bc2 <Irany_valaszto+0x2a>
			}
			if(egyenes_cnt < 50)
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b31      	cmp	r3, #49	; 0x31
 8002c52:	d801      	bhi.n	8002c58 <Irany_valaszto+0xc0>
				ok = false;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71fb      	strb	r3, [r7, #7]
			if(ok == true) {
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d051      	beq.n	8002d02 <Irany_valaszto+0x16a>
				kereszt_cnt++;
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <Irany_valaszto+0x1a8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <Irany_valaszto+0x1a8>)
 8002c68:	701a      	strb	r2, [r3, #0]
				if(9 < kereszt_cnt) {
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <Irany_valaszto+0x1a8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	d947      	bls.n	8002d02 <Irany_valaszto+0x16a>
					keresztezodesben = true;
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <Irany_valaszto+0x190>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
					tolatas = false;
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <Irany_valaszto+0x1ac>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
					aktualis_irany = iranyok[keresztezodes_szam];
 8002c7e:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <Irany_valaszto+0x1b0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <Irany_valaszto+0x1b4>)
 8002c86:	5c9a      	ldrb	r2, [r3, r2]
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <Irany_valaszto+0x1b8>)
 8002c8a:	701a      	strb	r2, [r3, #0]
					egyenes_cnt = 0;
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
					kovi_irany = iranyok[keresztezodes_szam + 1];
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <Irany_valaszto+0x1b0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <Irany_valaszto+0x1b4>)
 8002c9a:	5cd2      	ldrb	r2, [r2, r3]
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <Irany_valaszto+0x1bc>)
 8002c9e:	701a      	strb	r2, [r3, #0]
					if(aktualis_irany == 9) {
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <Irany_valaszto+0x1b8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d10b      	bne.n	8002cc0 <Irany_valaszto+0x128>
						motvez_k = motvez_d / 2;	// ez a megallas
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <Irany_valaszto+0x1c0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0fda      	lsrs	r2, r3, #31
 8002cae:	4413      	add	r3, r2
 8002cb0:	105b      	asrs	r3, r3, #1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <Irany_valaszto+0x1c4>)
 8002cb6:	601a      	str	r2, [r3, #0]
						letsGo = false;
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <Irany_valaszto+0x1c8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e020      	b.n	8002d02 <Irany_valaszto+0x16a>
					} else {
						//motvez_k = motvez_d / 2;	// ez a megallas
						keresztezodes_szam++;
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <Irany_valaszto+0x1b0>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <Irany_valaszto+0x1b0>)
 8002cca:	701a      	strb	r2, [r3, #0]
						letsGo = true;
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <Irany_valaszto+0x1c8>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
						kormanyzas_agresszivitas = 0.42;
 8002cd2:	4924      	ldr	r1, [pc, #144]	; (8002d64 <Irany_valaszto+0x1cc>)
 8002cd4:	a312      	add	r3, pc, #72	; (adr r3, 8002d20 <Irany_valaszto+0x188>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	e9c1 2300 	strd	r2, r3, [r1]
 8002cde:	e010      	b.n	8002d02 <Irany_valaszto+0x16a>
					}
				}
			}
		}
	} else if(33 < vonalak_e[1] && 50 < egyenes_cnt) {
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <Irany_valaszto+0x194>)
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b21      	cmp	r3, #33	; 0x21
 8002ce6:	d90c      	bls.n	8002d02 <Irany_valaszto+0x16a>
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b32      	cmp	r3, #50	; 0x32
 8002cee:	d908      	bls.n	8002d02 <Irany_valaszto+0x16a>
		keresztezodesben = false;
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <Irany_valaszto+0x190>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
		aktualis_irany = 1;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <Irany_valaszto+0x1b8>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
		kereszt_cnt = 0;
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <Irany_valaszto+0x1a8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
	}
	if(egyenes_cnt < 200)
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2bc7      	cmp	r3, #199	; 0xc7
 8002d08:	d805      	bhi.n	8002d16 <Irany_valaszto+0x17e>
		egyenes_cnt++;
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <Irany_valaszto+0x1a4>)
 8002d14:	701a      	strb	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	ae147ae1 	.word	0xae147ae1
 8002d24:	3fdae147 	.word	0x3fdae147
 8002d28:	20000249 	.word	0x20000249
 8002d2c:	20000138 	.word	0x20000138
 8002d30:	20000240 	.word	0x20000240
 8002d34:	c0200000 	.word	0xc0200000
 8002d38:	40200000 	.word	0x40200000
 8002d3c:	2000024b 	.word	0x2000024b
 8002d40:	2000024a 	.word	0x2000024a
 8002d44:	2000024c 	.word	0x2000024c
 8002d48:	20000248 	.word	0x20000248
 8002d4c:	20000268 	.word	0x20000268
 8002d50:	2000013d 	.word	0x2000013d
 8002d54:	2000013e 	.word	0x2000013e
 8002d58:	20000150 	.word	0x20000150
 8002d5c:	20000154 	.word	0x20000154
 8002d60:	20000260 	.word	0x20000260
 8002d64:	20000148 	.word	0x20000148

08002d68 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(double* elso, double* hatso, uint8_t irany) {
 8002d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d6c:	b092      	sub	sp, #72	; 0x48
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6178      	str	r0, [r7, #20]
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	4613      	mov	r3, r2
 8002d76:	73fb      	strb	r3, [r7, #15]
	double elso_sum = 0.0;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double hatso_sum = 0.0;
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double e_db = 0.0001;
 8002d90:	a399      	add	r3, pc, #612	; (adr r3, 8002ff8 <Kovetendo_vonal_valaszto+0x290>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double h_db = 0.0001;
 8002d9a:	a397      	add	r3, pc, #604	; (adr r3, 8002ff8 <Kovetendo_vonal_valaszto+0x290>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if(irany == 0) {							// jobbra at
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8083 	bne.w	8002eb2 <Kovetendo_vonal_valaszto+0x14a>
		*elso = vonalak_e[0] - 16;
 8002dac:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	3b10      	subs	r3, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fb7a 	bl	80004ac <__aeabi_i2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e05f      	b.n	8002e88 <Kovetendo_vonal_valaszto+0x120>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002dc8:	4a86      	ldr	r2, [pc, #536]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d856      	bhi.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002dd4:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002dd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002dda:	4a82      	ldr	r2, [pc, #520]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3b10      	subs	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fb61 	bl	80004ac <__aeabi_i2d>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4620      	mov	r0, r4
 8002df0:	4629      	mov	r1, r5
 8002df2:	f7fd fa0d 	bl	8000210 <__aeabi_dsub>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <Kovetendo_vonal_valaszto+0x284>)
 8002e04:	f7fd fe4c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d039      	beq.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002e10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e14:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	4413      	add	r3, r2
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b10      	subs	r3, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb44 	bl	80004ac <__aeabi_i2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd f9f0 	bl	8000210 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <Kovetendo_vonal_valaszto+0x288>)
 8002e3e:	f7fd fe11 	bl	8000a64 <__aeabi_dcmplt>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01c      	beq.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
				hatso_sum += vonalak_h[i] - 16;
 8002e48:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	3b10      	subs	r3, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb2a 	bl	80004ac <__aeabi_i2d>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e60:	f7fd f9d8 	bl	8000214 <__adddf3>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <Kovetendo_vonal_valaszto+0x28c>)
 8002e72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e76:	f7fd f9cd 	bl	8000214 <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	dd9c      	ble.n	8002dc8 <Kovetendo_vonal_valaszto+0x60>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea2:	f7fd fc97 	bl	80007d4 <__aeabi_ddiv>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	6939      	ldr	r1, [r7, #16]
 8002eac:	e9c1 2300 	strd	r2, r3, [r1]
 8002eb0:	e165      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
	} else if (irany == 2) {					// balra at
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	f040 808f 	bne.w	8002fd8 <Kovetendo_vonal_valaszto+0x270>
		int j = 4;								// 4: vonalak_e merete
 8002eba:	2304      	movs	r3, #4
 8002ebc:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002ebe:	e002      	b.n	8002ec6 <Kovetendo_vonal_valaszto+0x15e>
			j--;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b21      	cmp	r3, #33	; 0x21
 8002ed0:	d8f6      	bhi.n	8002ec0 <Kovetendo_vonal_valaszto+0x158>
		}
		*elso = vonalak_e[j] - 16;
 8002ed2:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fae5 	bl	80004ac <__aeabi_i2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e05f      	b.n	8002fb2 <Kovetendo_vonal_valaszto+0x24a>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d856      	bhi.n	8002fac <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f04:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3b10      	subs	r3, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd facc 	bl	80004ac <__aeabi_i2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4640      	mov	r0, r8
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	f7fd f978 	bl	8000210 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <Kovetendo_vonal_valaszto+0x284>)
 8002f2e:	f7fd fdb7 	bl	8000aa0 <__aeabi_dcmpgt>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d039      	beq.n	8002fac <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002f3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b10      	subs	r3, #16
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd faaf 	bl	80004ac <__aeabi_i2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4640      	mov	r0, r8
 8002f54:	4649      	mov	r1, r9
 8002f56:	f7fd f95b 	bl	8000210 <__aeabi_dsub>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <Kovetendo_vonal_valaszto+0x288>)
 8002f68:	f7fd fd7c 	bl	8000a64 <__aeabi_dcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01c      	beq.n	8002fac <Kovetendo_vonal_valaszto+0x244>
				hatso_sum += vonalak_h[i] - 16;
 8002f72:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3b10      	subs	r3, #16
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa95 	bl	80004ac <__aeabi_i2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f8a:	f7fd f943 	bl	8000214 <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <Kovetendo_vonal_valaszto+0x28c>)
 8002f9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fa0:	f7fd f938 	bl	8000214 <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	dd9c      	ble.n	8002ef2 <Kovetendo_vonal_valaszto+0x18a>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002fb8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd fc04 	bl	80007d4 <__aeabi_ddiv>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
 8002fd6:	e0d2      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
	} else {									// irany == 1: kozep es egyeb, rossz iranyokra is ezt csinaljuk
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e093      	b.n	8003106 <Kovetendo_vonal_valaszto+0x39e>
 8002fde:	bf00      	nop
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	20000130 	.word	0x20000130
 8002fe8:	20000238 	.word	0x20000238
 8002fec:	c0180000 	.word	0xc0180000
 8002ff0:	40180000 	.word	0x40180000
 8002ff4:	3ff00000 	.word	0x3ff00000
 8002ff8:	eb1c432d 	.word	0xeb1c432d
 8002ffc:	3f1a36e2 	.word	0x3f1a36e2
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003000:	4a8b      	ldr	r2, [pc, #556]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b20      	cmp	r3, #32
 800300a:	d856      	bhi.n	80030ba <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 800300c:	4b89      	ldr	r3, [pc, #548]	; (8003234 <Kovetendo_vonal_valaszto+0x4cc>)
 800300e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003012:	4a87      	ldr	r2, [pc, #540]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3b10      	subs	r3, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa45 	bl	80004ac <__aeabi_i2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4620      	mov	r0, r4
 8003028:	4629      	mov	r1, r5
 800302a:	f7fd f8f1 	bl	8000210 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <Kovetendo_vonal_valaszto+0x4d0>)
 800303c:	f7fd fd30 	bl	8000aa0 <__aeabi_dcmpgt>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d039      	beq.n	80030ba <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 8003046:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <Kovetendo_vonal_valaszto+0x4cc>)
 8003048:	e9d3 4500 	ldrd	r4, r5, [r3]
 800304c:	4a78      	ldr	r2, [pc, #480]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3b10      	subs	r3, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa28 	bl	80004ac <__aeabi_i2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4620      	mov	r0, r4
 8003062:	4629      	mov	r1, r5
 8003064:	f7fd f8d4 	bl	8000210 <__aeabi_dsub>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	4b71      	ldr	r3, [pc, #452]	; (800323c <Kovetendo_vonal_valaszto+0x4d4>)
 8003076:	f7fd fcf5 	bl	8000a64 <__aeabi_dcmplt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <Kovetendo_vonal_valaszto+0x352>
				elso_sum += vonalak_e[i] - 16;
 8003080:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3b10      	subs	r3, #16
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa0e 	bl	80004ac <__aeabi_i2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003098:	f7fd f8bc 	bl	8000214 <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				e_db += 1.0;
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	4b65      	ldr	r3, [pc, #404]	; (8003240 <Kovetendo_vonal_valaszto+0x4d8>)
 80030aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030ae:	f7fd f8b1 	bl	8000214 <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			}
			if(vonalak_h[i] < 33) {				// kulonben '-' van benne, ami 45
 80030ba:	4a62      	ldr	r2, [pc, #392]	; (8003244 <Kovetendo_vonal_valaszto+0x4dc>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d81c      	bhi.n	8003100 <Kovetendo_vonal_valaszto+0x398>
				hatso_sum += vonalak_h[i] - 16;
 80030c6:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <Kovetendo_vonal_valaszto+0x4dc>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	3b10      	subs	r3, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9eb 	bl	80004ac <__aeabi_i2d>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030de:	f7fd f899 	bl	8000214 <__adddf3>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <Kovetendo_vonal_valaszto+0x4d8>)
 80030f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030f4:	f7fd f88e 	bl	8000214 <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	3301      	adds	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b04      	cmp	r3, #4
 800310a:	f77f af79 	ble.w	8003000 <Kovetendo_vonal_valaszto+0x298>
			}
		}
		if(0.9 < e_db) {
 800310e:	a344      	add	r3, pc, #272	; (adr r3, 8003220 <Kovetendo_vonal_valaszto+0x4b8>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003118:	f7fd fcc2 	bl	8000aa0 <__aeabi_dcmpgt>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <Kovetendo_vonal_valaszto+0x3d2>
			*elso = elso_sum / e_db;
 8003122:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003126:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800312a:	f7fd fb53 	bl	80007d4 <__aeabi_ddiv>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	e9c1 2300 	strd	r2, r3, [r1]
 8003138:	e005      	b.n	8003146 <Kovetendo_vonal_valaszto+0x3de>
		} else {
			*elso = *elso;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(0.9 < h_db) {
 8003146:	a336      	add	r3, pc, #216	; (adr r3, 8003220 <Kovetendo_vonal_valaszto+0x4b8>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003150:	f7fd fca6 	bl	8000aa0 <__aeabi_dcmpgt>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <Kovetendo_vonal_valaszto+0x40a>
			*hatso = hatso_sum / h_db;
 800315a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003162:	f7fd fb37 	bl	80007d4 <__aeabi_ddiv>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	6939      	ldr	r1, [r7, #16]
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
 8003170:	e005      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
		} else {
			*hatso = *hatso;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	6939      	ldr	r1, [r7, #16]
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	if(1.9 < e_db) {
 800317e:	a32a      	add	r3, pc, #168	; (adr r3, 8003228 <Kovetendo_vonal_valaszto+0x4c0>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003188:	f7fd fc8a 	bl	8000aa0 <__aeabi_dcmpgt>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <Kovetendo_vonal_valaszto+0x436>
		fekezes_cnt += 1;
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e002      	b.n	80031a4 <Kovetendo_vonal_valaszto+0x43c>
	} else {
		fekezes_cnt = 0;
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
	}
	if((-5 < *elso && *elso < 5)  &&  (-5 < *hatso && *hatso < 5)) {
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <Kovetendo_vonal_valaszto+0x4d0>)
 80031b0:	f7fd fc76 	bl	8000aa0 <__aeabi_dcmpgt>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d026      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <Kovetendo_vonal_valaszto+0x4d4>)
 80031c6:	f7fd fc4d 	bl	8000a64 <__aeabi_dcmplt>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <Kovetendo_vonal_valaszto+0x4d0>)
 80031dc:	f7fd fc60 	bl	8000aa0 <__aeabi_dcmpgt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <Kovetendo_vonal_valaszto+0x4d4>)
 80031f2:	f7fd fc37 	bl	8000a64 <__aeabi_dcmplt>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
		veretesi_cnt += 1;
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <Kovetendo_vonal_valaszto+0x4e4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <Kovetendo_vonal_valaszto+0x4e4>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e003      	b.n	8003210 <Kovetendo_vonal_valaszto+0x4a8>
	} else {
		veretesi_cnt = 0;
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <Kovetendo_vonal_valaszto+0x4e4>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
	}
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	3748      	adds	r7, #72	; 0x48
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800321a:	bf00      	nop
 800321c:	f3af 8000 	nop.w
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	3feccccc 	.word	0x3feccccc
 8003228:	66666666 	.word	0x66666666
 800322c:	3ffe6666 	.word	0x3ffe6666
 8003230:	20000138 	.word	0x20000138
 8003234:	20000240 	.word	0x20000240
 8003238:	c0140000 	.word	0xc0140000
 800323c:	40140000 	.word	0x40140000
 8003240:	3ff00000 	.word	0x3ff00000
 8003244:	20000130 	.word	0x20000130
 8003248:	2000025c 	.word	0x2000025c
 800324c:	20000258 	.word	0x20000258

08003250 <Szervo_szog_beallit>:

void Szervo_szog_beallit(void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	if (btnEnable == 1 && szervoEnable == 1) {
 8003254:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <Szervo_szog_beallit+0x140>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 8093 	bne.w	8003384 <Szervo_szog_beallit+0x134>
 800325e:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <Szervo_szog_beallit+0x144>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	f040 808e 	bne.w	8003384 <Szervo_szog_beallit+0x134>
		if (tolatas == true) {		// tolatas	// 10 - (10- -7)*0.5 =
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <Szervo_szog_beallit+0x148>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d029      	beq.n	80032c4 <Szervo_szog_beallit+0x74>
			kormanyzas_agresszivitas = 0.7;
 8003270:	494a      	ldr	r1, [pc, #296]	; (800339c <Szervo_szog_beallit+0x14c>)
 8003272:	a345      	add	r3, pc, #276	; (adr r3, 8003388 <Szervo_szog_beallit+0x138>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	e9c1 2300 	strd	r2, r3, [r1]
			cel = vonal_kovetni_h + (((vonal_kovetni_h) - (vonal_kovetni_e)) *kormanyzas_agresszivitas);
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <Szervo_szog_beallit+0x150>)
 800327e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003282:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <Szervo_szog_beallit+0x154>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fc ffc2 	bl	8000210 <__aeabi_dsub>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	4b41      	ldr	r3, [pc, #260]	; (800339c <Szervo_szog_beallit+0x14c>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fd f971 	bl	8000580 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <Szervo_szog_beallit+0x150>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f7fc ffb2 	bl	8000214 <__adddf3>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	493c      	ldr	r1, [pc, #240]	; (80033a8 <Szervo_szog_beallit+0x158>)
 80032b6:	e9c1 2300 	strd	r2, r3, [r1]
			motvez_k = 560;
 80032ba:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <Szervo_szog_beallit+0x15c>)
 80032bc:	f44f 720c 	mov.w	r2, #560	; 0x230
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e01e      	b.n	8003302 <Szervo_szog_beallit+0xb2>
		} else {				// elore menet es rossz input
			cel = vonal_kovetni_e + (((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 80032c4:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <Szervo_szog_beallit+0x154>)
 80032c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ca:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <Szervo_szog_beallit+0x150>)
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f7fc ff9e 	bl	8000210 <__aeabi_dsub>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	4b2f      	ldr	r3, [pc, #188]	; (800339c <Szervo_szog_beallit+0x14c>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f7fd f94d 	bl	8000580 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <Szervo_szog_beallit+0x154>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fc ff8e 	bl	8000214 <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	492a      	ldr	r1, [pc, #168]	; (80033a8 <Szervo_szog_beallit+0x158>)
 80032fe:	e9c1 2300 	strd	r2, r3, [r1]
			//motvez_k = 455;
		}
		if(cel < -15) {
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <Szervo_szog_beallit+0x158>)
 8003304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <Szervo_szog_beallit+0x160>)
 800330e:	f7fd fba9 	bl	8000a64 <__aeabi_dcmplt>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <Szervo_szog_beallit+0xd2>
			szervoSzog = 0;
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <Szervo_szog_beallit+0x164>)
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e028      	b.n	8003374 <Szervo_szog_beallit+0x124>
		} else if(15 < cel) {
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <Szervo_szog_beallit+0x158>)
 8003324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <Szervo_szog_beallit+0x168>)
 800332e:	f7fd fbb7 	bl	8000aa0 <__aeabi_dcmpgt>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <Szervo_szog_beallit+0xf0>
			szervoSzog = 180;
 8003338:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <Szervo_szog_beallit+0x164>)
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <Szervo_szog_beallit+0x16c>)
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e019      	b.n	8003374 <Szervo_szog_beallit+0x124>
		} else {
			szervoSzog = 90 + cel *6;
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <Szervo_szog_beallit+0x158>)
 8003342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <Szervo_szog_beallit+0x170>)
 800334c:	f7fd f918 	bl	8000580 <__aeabi_dmul>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <Szervo_szog_beallit+0x174>)
 800335e:	f7fc ff59 	bl	8000214 <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fbc3 	bl	8000af4 <__aeabi_d2f>
 800336e:	4603      	mov	r3, r0
 8003370:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <Szervo_szog_beallit+0x164>)
 8003372:	6013      	str	r3, [r2, #0]
		}

		SERVO_MoveTo(SZERVO, szervoSzog);
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <Szervo_szog_beallit+0x164>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	2000      	movs	r0, #0
 8003380:	f7fd ff14 	bl	80011ac <SERVO_MoveTo>
	}
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	66666666 	.word	0x66666666
 800338c:	3fe66666 	.word	0x3fe66666
 8003390:	200001e8 	.word	0x200001e8
 8003394:	20000000 	.word	0x20000000
 8003398:	2000024c 	.word	0x2000024c
 800339c:	20000148 	.word	0x20000148
 80033a0:	20000238 	.word	0x20000238
 80033a4:	20000240 	.word	0x20000240
 80033a8:	20000250 	.word	0x20000250
 80033ac:	20000154 	.word	0x20000154
 80033b0:	c02e0000 	.word	0xc02e0000
 80033b4:	20000140 	.word	0x20000140
 80033b8:	402e0000 	.word	0x402e0000
 80033bc:	43340000 	.word	0x43340000
 80033c0:	40180000 	.word	0x40180000
 80033c4:	40568000 	.word	0x40568000

080033c8 <MinDistance>:

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int MinDistance(int dist[], bool sptSet[])
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    // Initialize min value
    int min = INT_MAX, min_index;
 80033d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80033d6:	617b      	str	r3, [r7, #20]

    for (int v = 0; v < CSUCS_SZAM; v++)
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e01b      	b.n	8003416 <MinDistance+0x4e>
        if (sptSet[v] == false && dist[v] <= min)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f083 0301 	eor.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00f      	beq.n	8003410 <MinDistance+0x48>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	db07      	blt.n	8003410 <MinDistance+0x48>
            min = dist[v], min_index = v;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	613b      	str	r3, [r7, #16]
    for (int v = 0; v < CSUCS_SZAM; v++)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b20      	cmp	r3, #32
 800341a:	dde0      	ble.n	80033de <MinDistance+0x16>

    return min_index;
 800341c:	693b      	ldr	r3, [r7, #16]
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <Source_Target_allito>:


void Source_Target_allito(void) {
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
    source = road[0];
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <Source_Target_allito+0x174>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <Source_Target_allito+0x178>)
 8003436:	6013      	str	r3, [r2, #0]

    if            (kapuk[0] == 'A') {
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <Source_Target_allito+0x17c>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b41      	cmp	r3, #65	; 0x41
 800343e:	d106      	bne.n	800344e <Source_Target_allito+0x22>
            target1 = 1;
 8003440:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <Source_Target_allito+0x180>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
            target2 = 2;
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <Source_Target_allito+0x184>)
 8003448:	2202      	movs	r2, #2
 800344a:	601a      	str	r2, [r3, #0]
            target2 = 29;
    } else if    (kapuk[0] == 'X') {
            target1 = 31;
            target2 = 32;
    }
}
 800344c:	e0a3      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'B') {
 800344e:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <Source_Target_allito+0x17c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b42      	cmp	r3, #66	; 0x42
 8003454:	d106      	bne.n	8003464 <Source_Target_allito+0x38>
            target1 = 3;
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <Source_Target_allito+0x180>)
 8003458:	2203      	movs	r2, #3
 800345a:	601a      	str	r2, [r3, #0]
            target2 = 4;
 800345c:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <Source_Target_allito+0x184>)
 800345e:	2204      	movs	r2, #4
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	e098      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'C') {
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <Source_Target_allito+0x17c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b43      	cmp	r3, #67	; 0x43
 800346a:	d106      	bne.n	800347a <Source_Target_allito+0x4e>
            target1 = 5;
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <Source_Target_allito+0x180>)
 800346e:	2205      	movs	r2, #5
 8003470:	601a      	str	r2, [r3, #0]
            target2 = 6;
 8003472:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <Source_Target_allito+0x184>)
 8003474:	2206      	movs	r2, #6
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	e08d      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'D') {
 800347a:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <Source_Target_allito+0x17c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b44      	cmp	r3, #68	; 0x44
 8003480:	d106      	bne.n	8003490 <Source_Target_allito+0x64>
            target1 = 7;
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <Source_Target_allito+0x180>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
            target2 = 8;
 8003488:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <Source_Target_allito+0x184>)
 800348a:	2208      	movs	r2, #8
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	e082      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'E') {
 8003490:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <Source_Target_allito+0x17c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b45      	cmp	r3, #69	; 0x45
 8003496:	d106      	bne.n	80034a6 <Source_Target_allito+0x7a>
            target1 = 9;
 8003498:	4b44      	ldr	r3, [pc, #272]	; (80035ac <Source_Target_allito+0x180>)
 800349a:	2209      	movs	r2, #9
 800349c:	601a      	str	r2, [r3, #0]
            target2 = 10;
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <Source_Target_allito+0x184>)
 80034a0:	220a      	movs	r2, #10
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	e077      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'F') {
 80034a6:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <Source_Target_allito+0x17c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b46      	cmp	r3, #70	; 0x46
 80034ac:	d106      	bne.n	80034bc <Source_Target_allito+0x90>
            target1 = 11;
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <Source_Target_allito+0x180>)
 80034b0:	220b      	movs	r2, #11
 80034b2:	601a      	str	r2, [r3, #0]
            target2 = 12;
 80034b4:	4b3e      	ldr	r3, [pc, #248]	; (80035b0 <Source_Target_allito+0x184>)
 80034b6:	220c      	movs	r2, #12
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	e06c      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'G') {
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <Source_Target_allito+0x17c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b47      	cmp	r3, #71	; 0x47
 80034c2:	d106      	bne.n	80034d2 <Source_Target_allito+0xa6>
            target1 = 13;
 80034c4:	4b39      	ldr	r3, [pc, #228]	; (80035ac <Source_Target_allito+0x180>)
 80034c6:	220d      	movs	r2, #13
 80034c8:	601a      	str	r2, [r3, #0]
            target2 = 14;
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <Source_Target_allito+0x184>)
 80034cc:	220e      	movs	r2, #14
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	e061      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'H') {
 80034d2:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <Source_Target_allito+0x17c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b48      	cmp	r3, #72	; 0x48
 80034d8:	d106      	bne.n	80034e8 <Source_Target_allito+0xbc>
            target1 = 15;
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <Source_Target_allito+0x180>)
 80034dc:	220f      	movs	r2, #15
 80034de:	601a      	str	r2, [r3, #0]
            target2 = 16;
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <Source_Target_allito+0x184>)
 80034e2:	2210      	movs	r2, #16
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	e056      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'I') {
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <Source_Target_allito+0x17c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b49      	cmp	r3, #73	; 0x49
 80034ee:	d106      	bne.n	80034fe <Source_Target_allito+0xd2>
            target1 = 17;
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <Source_Target_allito+0x180>)
 80034f2:	2211      	movs	r2, #17
 80034f4:	601a      	str	r2, [r3, #0]
            target2 = 18;
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <Source_Target_allito+0x184>)
 80034f8:	2212      	movs	r2, #18
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	e04b      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'J') {
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <Source_Target_allito+0x17c>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b4a      	cmp	r3, #74	; 0x4a
 8003504:	d106      	bne.n	8003514 <Source_Target_allito+0xe8>
            target1 = 19;
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <Source_Target_allito+0x180>)
 8003508:	2213      	movs	r2, #19
 800350a:	601a      	str	r2, [r3, #0]
            target2 = 20;
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <Source_Target_allito+0x184>)
 800350e:	2214      	movs	r2, #20
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	e040      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'K') {
 8003514:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <Source_Target_allito+0x17c>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b4b      	cmp	r3, #75	; 0x4b
 800351a:	d106      	bne.n	800352a <Source_Target_allito+0xfe>
            target1 = 21;
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <Source_Target_allito+0x180>)
 800351e:	2215      	movs	r2, #21
 8003520:	601a      	str	r2, [r3, #0]
            target2 = 22;
 8003522:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <Source_Target_allito+0x184>)
 8003524:	2216      	movs	r2, #22
 8003526:	601a      	str	r2, [r3, #0]
}
 8003528:	e035      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'L') {
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <Source_Target_allito+0x17c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b4c      	cmp	r3, #76	; 0x4c
 8003530:	d106      	bne.n	8003540 <Source_Target_allito+0x114>
            target1 = 23;
 8003532:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <Source_Target_allito+0x180>)
 8003534:	2217      	movs	r2, #23
 8003536:	601a      	str	r2, [r3, #0]
            target2 = 24;
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <Source_Target_allito+0x184>)
 800353a:	2218      	movs	r2, #24
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	e02a      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'M') {
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <Source_Target_allito+0x17c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b4d      	cmp	r3, #77	; 0x4d
 8003546:	d106      	bne.n	8003556 <Source_Target_allito+0x12a>
            target1 = 25;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <Source_Target_allito+0x180>)
 800354a:	2219      	movs	r2, #25
 800354c:	601a      	str	r2, [r3, #0]
            target2 = 26;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <Source_Target_allito+0x184>)
 8003550:	221a      	movs	r2, #26
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	e01f      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'N') {
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <Source_Target_allito+0x17c>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b4e      	cmp	r3, #78	; 0x4e
 800355c:	d106      	bne.n	800356c <Source_Target_allito+0x140>
            target1 = 27;
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <Source_Target_allito+0x180>)
 8003560:	221b      	movs	r2, #27
 8003562:	601a      	str	r2, [r3, #0]
            target2 = 28;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <Source_Target_allito+0x184>)
 8003566:	221c      	movs	r2, #28
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	e014      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'O') {
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <Source_Target_allito+0x17c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b4f      	cmp	r3, #79	; 0x4f
 8003572:	d106      	bne.n	8003582 <Source_Target_allito+0x156>
            target1 = 29;
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <Source_Target_allito+0x180>)
 8003576:	221d      	movs	r2, #29
 8003578:	601a      	str	r2, [r3, #0]
            target2 = 29;
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <Source_Target_allito+0x184>)
 800357c:	221d      	movs	r2, #29
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	e009      	b.n	8003596 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'X') {
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <Source_Target_allito+0x17c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b58      	cmp	r3, #88	; 0x58
 8003588:	d105      	bne.n	8003596 <Source_Target_allito+0x16a>
            target1 = 31;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <Source_Target_allito+0x180>)
 800358c:	221f      	movs	r2, #31
 800358e:	601a      	str	r2, [r3, #0]
            target2 = 32;
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <Source_Target_allito+0x184>)
 8003592:	2220      	movs	r2, #32
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000160 	.word	0x20000160
 80035a4:	200001b0 	.word	0x200001b0
 80035a8:	20000158 	.word	0x20000158
 80035ac:	200001b4 	.word	0x200001b4
 80035b0:	200001b8 	.word	0x200001b8

080035b4 <Kapukbol_iranyok>:

void Kapukbol_iranyok(void) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	Source_Target_allito();
 80035b8:	f7ff ff38 	bl	800342c <Source_Target_allito>
	Graf_csucs_feltolt();
 80035bc:	f000 f96a 	bl	8003894 <Graf_csucs_feltolt>
	Kapuk_letilt();
 80035c0:	f000 fece 	bl	8004360 <Kapuk_letilt>
	Dijkstra(graf_csucs, source, target1, target2);
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <Kapukbol_iranyok+0x30>)
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <Kapukbol_iranyok+0x34>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <Kapukbol_iranyok+0x38>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4807      	ldr	r0, [pc, #28]	; (80035f0 <Kapukbol_iranyok+0x3c>)
 80035d2:	f000 f80f 	bl	80035f4 <Dijkstra>
	Iranyok_torlo();
 80035d6:	f001 f87f 	bl	80046d8 <Iranyok_torlo>
	Iranyok_osszeallito();
 80035da:	f001 f897 	bl	800470c <Iranyok_osszeallito>
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200001b0 	.word	0x200001b0
 80035e8:	200001b4 	.word	0x200001b4
 80035ec:	200001b8 	.word	0x200001b8
 80035f0:	200005a8 	.word	0x200005a8

080035f4 <Dijkstra>:

// Function that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void Dijkstra(int graph[CSUCS_SZAM][CSUCS_SZAM], int src, int target1, int target2) {
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b0d9      	sub	sp, #356	; 0x164
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	f107 040c 	add.w	r4, r7, #12
 80035fe:	6020      	str	r0, [r4, #0]
 8003600:	f107 0008 	add.w	r0, r7, #8
 8003604:	6001      	str	r1, [r0, #0]
 8003606:	1d39      	adds	r1, r7, #4
 8003608:	600a      	str	r2, [r1, #0]
 800360a:	463a      	mov	r2, r7
 800360c:	6013      	str	r3, [r2, #0]
	int dist[CSUCS_SZAM]; // The output array. dist[i] will hold the shortest
	// distance from src to i
  	int r[CSUCS_SZAM];
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003614:	e00c      	b.n	8003630 <Dijkstra+0x3c>
      	r[i] = -1;
 8003616:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800361a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800361e:	f04f 31ff 	mov.w	r1, #4294967295
 8003622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 8003626:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800362a:	3301      	adds	r3, #1
 800362c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003630:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003634:	2b20      	cmp	r3, #32
 8003636:	ddee      	ble.n	8003616 <Dijkstra+0x22>

	bool sptSet[CSUCS_SZAM]; // sptSet[i] will be true if vertex i is included in shortest
	// path tree or shortest distance from src to i is finalized

	// Initialize all distances as INFINITE and stpSet[] as false
	for (int i = 0; i < CSUCS_SZAM; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800363e:	e015      	b.n	800366c <Dijkstra+0x78>
		dist[i] = INT_MAX, sptSet[i] = false;
 8003640:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800364a:	4413      	add	r3, r2
 800364c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003650:	f843 2ca8 	str.w	r2, [r3, #-168]
 8003654:	f107 0210 	add.w	r2, r7, #16
 8003658:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800365c:	4413      	add	r3, r2
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CSUCS_SZAM; i++)
 8003662:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003666:	3301      	adds	r3, #1
 8003668:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800366c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003670:	2b20      	cmp	r3, #32
 8003672:	dde5      	ble.n	8003640 <Dijkstra+0x4c>

	// Distance of source vertex from itself is always 0
	dist[src] = 0;
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003680:	4413      	add	r3, r2
 8003682:	2200      	movs	r2, #0
 8003684:	f843 2ca8 	str.w	r2, [r3, #-168]

	// Find shortest path for all vertices
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800368e:	e094      	b.n	80037ba <Dijkstra+0x1c6>
		// Pick the minimum distance vertex from the set of vertices not
		// yet processed. u is always equal to src in the first iteration.
		int u = MinDistance(dist, sptSet);
 8003690:	f107 0210 	add.w	r2, r7, #16
 8003694:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fe94 	bl	80033c8 <MinDistance>
 80036a0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

		// Mark the picked vertex as processed
		sptSet[u] = true;
 80036a4:	f107 0210 	add.w	r2, r7, #16
 80036a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036ac:	4413      	add	r3, r2
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]

		// Update dist value of the adjacent vertices of the picked vertex.
		for (int v = 0; v < CSUCS_SZAM; v++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036b8:	e076      	b.n	80037a8 <Dijkstra+0x1b4>

			// Update dist[v] only if is not in sptSet, there is an edge from
			// u to v, and total weight of path from src to v through u is
			// smaller than current value of dist[v]
			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
 80036ba:	f107 0210 	add.w	r2, r7, #16
 80036be:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d066      	beq.n	800379e <Dijkstra+0x1aa>
 80036d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80036d4:	4613      	mov	r3, r2
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80036ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d055      	beq.n	800379e <Dijkstra+0x1aa>
 80036f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80036fc:	4413      	add	r3, r2
 80036fe:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003702:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003706:	4293      	cmp	r3, r2
 8003708:	d049      	beq.n	800379e <Dijkstra+0x1aa>
				&& dist[u] + graph[u][v] < dist[v]) {
 800370a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003714:	4413      	add	r3, r2
 8003716:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 800371a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800371e:	4613      	mov	r3, r2
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	461a      	mov	r2, r3
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003738:	18ca      	adds	r2, r1, r3
 800373a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003744:	440b      	add	r3, r1
 8003746:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800374a:	429a      	cmp	r2, r3
 800374c:	da27      	bge.n	800379e <Dijkstra+0x1aa>
				dist[v] = dist[u] + graph[u][v];
 800374e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003758:	4413      	add	r3, r2
 800375a:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 800375e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003762:	4613      	mov	r3, r2
 8003764:	015b      	lsls	r3, r3, #5
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	461a      	mov	r2, r3
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	18ca      	adds	r2, r1, r3
 800377e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003788:	440b      	add	r3, r1
 800378a:	f843 2ca8 	str.w	r2, [r3, #-168]
    			r[v] = u; }
 800378e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003792:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003796:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800379a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int v = 0; v < CSUCS_SZAM; v++)
 800379e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037a2:	3301      	adds	r3, #1
 80037a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	dd84      	ble.n	80036ba <Dijkstra+0xc6>
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 80037b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037b4:	3301      	adds	r3, #1
 80037b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037be:	2b1f      	cmp	r3, #31
 80037c0:	f77f af66 	ble.w	8003690 <Dijkstra+0x9c>
	}

  	int ultimate_trg = target1;
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  	if(dist[target2] < dist[target1])
 80037cc:	463b      	mov	r3, r7
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80037d6:	4413      	add	r3, r2
 80037d8:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80037e6:	440b      	add	r3, r1
 80037e8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	da03      	bge.n	80037f8 <Dijkstra+0x204>
      	ultimate_trg = target2;
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	for(int i = 0; i < 20; i++) {
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80037fe:	e00b      	b.n	8003818 <Dijkstra+0x224>
      	road[i] = -1;
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <Dijkstra+0x29c>)
 8003802:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003806:	f04f 31ff 	mov.w	r1, #4294967295
 800380a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	for(int i = 0; i < 20; i++) {
 800380e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003812:	3301      	adds	r3, #1
 8003814:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003818:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800381c:	2b13      	cmp	r3, #19
 800381e:	ddef      	ble.n	8003800 <Dijkstra+0x20c>
    }
  	road[0] = ultimate_trg;
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <Dijkstra+0x29c>)
 8003822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003826:	6013      	str	r3, [r2, #0]
  	int last_v = r[ultimate_trg];
 8003828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800382c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	int k = 1;
 8003838:	2301      	movs	r3, #1
 800383a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  	//cout <<last_v<< endl;
  	while(last_v != src){
 800383e:	e013      	b.n	8003868 <Dijkstra+0x274>
  		road[k] = last_v;
 8003840:	4913      	ldr	r1, [pc, #76]	; (8003890 <Dijkstra+0x29c>)
 8003842:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003846:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		k++;
 800384e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003852:	3301      	adds	r3, #1
 8003854:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        last_v = r[last_v];
 8003858:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800385c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003864:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	while(last_v != src){
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d1e4      	bne.n	8003840 <Dijkstra+0x24c>
      	//cout <<last_v<< endl;
     }
  	road[k] = last_v;
 8003876:	4906      	ldr	r1, [pc, #24]	; (8003890 <Dijkstra+0x29c>)
 8003878:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800387c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003884:	bf00      	nop
 8003886:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	20000160 	.word	0x20000160

08003894 <Graf_csucs_feltolt>:

void Graf_csucs_feltolt(void) {
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e015      	b.n	80038cc <Graf_csucs_feltolt+0x38>
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 80038a0:	2300      	movs	r3, #0
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	e00c      	b.n	80038c0 <Graf_csucs_feltolt+0x2c>
      		graf_csucs[u][v] = 5000000;
 80038a6:	49d0      	ldr	r1, [pc, #832]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	4413      	add	r3, r2
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	4acd      	ldr	r2, [pc, #820]	; (8003bec <Graf_csucs_feltolt+0x358>)
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	ddef      	ble.n	80038a6 <Graf_csucs_feltolt+0x12>
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3301      	adds	r3, #1
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	dde6      	ble.n	80038a0 <Graf_csucs_feltolt+0xc>
        }
    }
  	graf_csucs[1][3] = 4891;
 80038d2:	4bc5      	ldr	r3, [pc, #788]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038d4:	f241 321b 	movw	r2, #4891	; 0x131b
 80038d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    graf_csucs[1][5] = 6060;
 80038dc:	4bc2      	ldr	r3, [pc, #776]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038de:	f241 72ac 	movw	r2, #6060	; 0x17ac
 80038e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    graf_csucs[1][7] = 7143;
 80038e6:	4bc0      	ldr	r3, [pc, #768]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038e8:	f641 32e7 	movw	r2, #7143	; 0x1be7
 80038ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    graf_csucs[2][3] = 5260;
 80038f0:	4bbd      	ldr	r3, [pc, #756]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038f2:	f241 428c 	movw	r2, #5260	; 0x148c
 80038f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    graf_csucs[2][5] = 6429;
 80038fa:	4bbb      	ldr	r3, [pc, #748]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80038fc:	f641 121d 	movw	r2, #6429	; 0x191d
 8003900:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    graf_csucs[2][7] = 7512;
 8003904:	4bb8      	ldr	r3, [pc, #736]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003906:	f641 5258 	movw	r2, #7512	; 0x1d58
 800390a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    graf_csucs[3][9] = 4202;
 800390e:	4bb6      	ldr	r3, [pc, #728]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003910:	f241 026a 	movw	r2, #4202	; 0x106a
 8003914:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    graf_csucs[3][11] = 5373;
 8003918:	4bb3      	ldr	r3, [pc, #716]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800391a:	f241 42fd 	movw	r2, #5373	; 0x14fd
 800391e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    graf_csucs[4][1] = 5260;
 8003922:	4bb1      	ldr	r3, [pc, #708]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003924:	f241 428c 	movw	r2, #5260	; 0x148c
 8003928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    graf_csucs[4][2] = 4891;
 800392c:	4bae      	ldr	r3, [pc, #696]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800392e:	f241 321b 	movw	r2, #4891	; 0x131b
 8003932:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    graf_csucs[5][11] = 3657;
 8003936:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003938:	f640 6249 	movw	r2, #3657	; 0xe49
 800393c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    graf_csucs[6][1] = 6429;
 8003940:	4ba9      	ldr	r3, [pc, #676]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003942:	f641 121d 	movw	r2, #6429	; 0x191d
 8003946:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    graf_csucs[6][2] = 6060; 	// C csucs kesz
 800394a:	4ba7      	ldr	r3, [pc, #668]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800394c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 8003950:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
    graf_csucs[7][11] = 2899;
 8003954:	4ba4      	ldr	r3, [pc, #656]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003956:	f640 3253 	movw	r2, #2899	; 0xb53
 800395a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
    graf_csucs[8][1] = 7512;
 800395e:	4ba2      	ldr	r3, [pc, #648]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003960:	f641 5258 	movw	r2, #7512	; 0x1d58
 8003964:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    graf_csucs[8][2] = 7143;
 8003968:	4b9f      	ldr	r3, [pc, #636]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800396a:	f641 32e7 	movw	r2, #7143	; 0x1be7
 800396e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    graf_csucs[9][17] = 6770;
 8003972:	4b9d      	ldr	r3, [pc, #628]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003974:	f641 2272 	movw	r2, #6770	; 0x1a72
 8003978:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
    graf_csucs[9][19] = 8874;
 800397c:	4b9a      	ldr	r3, [pc, #616]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800397e:	f242 22aa 	movw	r2, #8874	; 0x22aa
 8003982:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
    graf_csucs[10][4] = 4202;
 8003986:	4b98      	ldr	r3, [pc, #608]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003988:	f241 026a 	movw	r2, #4202	; 0x106a
 800398c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    graf_csucs[11][14] = 1697;
 8003990:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003992:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8003996:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    graf_csucs[11][15] = 2370;
 800399a:	4b93      	ldr	r3, [pc, #588]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 800399c:	f640 1242 	movw	r2, #2370	; 0x942
 80039a0:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
    graf_csucs[11][21] = 8569;
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039a6:	f242 1279 	movw	r2, #8569	; 0x2179
 80039aa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    graf_csucs[11][23] = 13602;
 80039ae:	4b8e      	ldr	r3, [pc, #568]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039b0:	f243 5222 	movw	r2, #13602	; 0x3522
 80039b4:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    graf_csucs[11][25] = 14059;
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039ba:	f243 62eb 	movw	r2, #14059	; 0x36eb
 80039be:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    graf_csucs[11][27] = 15560;
 80039c2:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039c4:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 80039c8:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    graf_csucs[12][4] = 5373;
 80039cc:	4b86      	ldr	r3, [pc, #536]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039ce:	f241 42fd 	movw	r2, #5373	; 0x14fd
 80039d2:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    graf_csucs[12][6] = 3657;
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039d8:	f640 6249 	movw	r2, #3657	; 0xe49
 80039dc:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
    graf_csucs[12][8] = 2899; 	// F csucs kesz
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039e2:	f640 3253 	movw	r2, #2899	; 0xb53
 80039e6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    graf_csucs[13][12] = 1697;
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039ec:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80039f0:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
    graf_csucs[14][17] = 4396;
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 80039f6:	f241 122c 	movw	r2, #4396	; 0x112c
 80039fa:	f8c3 277c 	str.w	r2, [r3, #1916]	; 0x77c
    graf_csucs[14][19] = 6500;
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a00:	f641 1264 	movw	r2, #6500	; 0x1964
 8003a04:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    graf_csucs[15][21] = 6494;
 8003a08:	4b77      	ldr	r3, [pc, #476]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a0a:	f641 125e 	movw	r2, #6494	; 0x195e
 8003a0e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    graf_csucs[15][23] = 11527;
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a14:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003a18:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    graf_csucs[15][25] = 11984;
 8003a1c:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a1e:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003a22:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    graf_csucs[15][27] = 13485;
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a28:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003a2c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
    graf_csucs[16][12] = 2370;
 8003a30:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a32:	f640 1242 	movw	r2, #2370	; 0x942
 8003a36:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
    graf_csucs[17][21] = 2969;
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a3c:	f640 3299 	movw	r2, #2969	; 0xb99
 8003a40:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    graf_csucs[17][23] = 8002;
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a46:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003a4a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    graf_csucs[17][25] = 8459;
 8003a4e:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a50:	f242 120b 	movw	r2, #8459	; 0x210b
 8003a54:	f8c3 2928 	str.w	r2, [r3, #2344]	; 0x928
    graf_csucs[17][27] = 9960;
 8003a58:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a5a:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003a5e:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    graf_csucs[18][13] = 4396;
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a64:	f241 122c 	movw	r2, #4396	; 0x112c
 8003a68:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
    graf_csucs[18][10] = 6770; 	// I csucs kesz
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a6e:	f641 2272 	movw	r2, #6770	; 0x1a72
 8003a72:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    graf_csucs[19][23] = 5615;
 8003a76:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a78:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003a7c:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
    graf_csucs[19][25] = 6072;
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a82:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003a86:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    graf_csucs[19][27] = 7573;
 8003a8a:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a8c:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003a90:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
    graf_csucs[20][10] = 8874;
 8003a94:	4b54      	ldr	r3, [pc, #336]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003a96:	f242 22aa 	movw	r2, #8874	; 0x22aa
 8003a9a:	f8c3 2a78 	str.w	r2, [r3, #2680]	; 0xa78
    graf_csucs[20][13] = 6500;
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003aa0:	f641 1264 	movw	r2, #6500	; 0x1964
 8003aa4:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
    graf_csucs[21][23] = 4727;
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003aaa:	f241 2277 	movw	r2, #4727	; 0x1277
 8003aae:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    graf_csucs[21][25] = 5184;
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003ab4:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003ab8:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38
    graf_csucs[21][27] = 6685;
 8003abc:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003abe:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003ac2:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    graf_csucs[22][12] = 8569;
 8003ac6:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003ac8:	f242 1279 	movw	r2, #8569	; 0x2179
 8003acc:	f8c3 2b88 	str.w	r2, [r3, #2952]	; 0xb88
    graf_csucs[22][16] = 6494;
 8003ad0:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003ad2:	f641 125e 	movw	r2, #6494	; 0x195e
 8003ad6:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
    graf_csucs[22][18] = 2969;
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003adc:	f640 3299 	movw	r2, #2969	; 0xb99
 8003ae0:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    graf_csucs[23][29] = 10948;
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003ae6:	f642 22c4 	movw	r2, #10948	; 0x2ac4
 8003aea:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    graf_csucs[23][32] = 13441;
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003af0:	f243 4281 	movw	r2, #13441	; 0x3481
 8003af4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    graf_csucs[24][12] = 13602;
 8003af8:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003afa:	f243 5222 	movw	r2, #13602	; 0x3522
 8003afe:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    graf_csucs[24][16] = 11527;
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b04:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003b08:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    graf_csucs[24][18] = 8002;
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b0e:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003b12:	f8c3 2ca8 	str.w	r2, [r3, #3240]	; 0xca8
    graf_csucs[24][20] = 5615;
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b18:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003b1c:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    graf_csucs[24][22] = 4727; 	// L csucs kesz
 8003b20:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b22:	f241 2277 	movw	r2, #4727	; 0x1277
 8003b26:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
    graf_csucs[25][29] = 10485;
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b2c:	f642 02f5 	movw	r2, #10485	; 0x28f5
 8003b30:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
    graf_csucs[25][32] = 12978;
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b36:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003b3a:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
    graf_csucs[26][12] = 14059;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b40:	f243 62eb 	movw	r2, #14059	; 0x36eb
 8003b44:	f8c3 2d98 	str.w	r2, [r3, #3480]	; 0xd98
    graf_csucs[26][16] = 11984;
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b4a:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003b4e:	f8c3 2da8 	str.w	r2, [r3, #3496]	; 0xda8
    graf_csucs[26][18] = 8459;
 8003b52:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b54:	f242 120b 	movw	r2, #8459	; 0x210b
 8003b58:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
    graf_csucs[26][20] = 6072;
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b5e:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003b62:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
    graf_csucs[26][22] = 5184;
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b68:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003b6c:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
    graf_csucs[27][31] = 3047;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b72:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003b76:	f8c3 2e68 	str.w	r2, [r3, #3688]	; 0xe68
    graf_csucs[28][12] = 15560;
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b7c:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 8003b80:	f8c3 2ea0 	str.w	r2, [r3, #3744]	; 0xea0
    graf_csucs[28][16] = 13485;
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b86:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003b8a:	f8c3 2eb0 	str.w	r2, [r3, #3760]	; 0xeb0
    graf_csucs[28][18] = 9960;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b90:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003b94:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8
    graf_csucs[28][20] = 7573;
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003b9a:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003b9e:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
    graf_csucs[28][22] = 6685;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003ba4:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003ba8:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
    graf_csucs[29][32] = 9659;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003bae:	f242 52bb 	movw	r2, #9659	; 0x25bb
 8003bb2:	f8c3 2f74 	str.w	r2, [r3, #3956]	; 0xf74
    graf_csucs[30][29] = 6981;
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003bb8:	f641 3245 	movw	r2, #6981	; 0x1b45
 8003bbc:	f8c3 2fec 	str.w	r2, [r3, #4076]	; 0xfec
    graf_csucs[30][32] = 9474;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003bc2:	f242 5202 	movw	r2, #9474	; 0x2502
 8003bc6:	f8c3 2ff8 	str.w	r2, [r3, #4088]	; 0xff8
    graf_csucs[31][24] = 13441;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003bcc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003bd0:	331c      	adds	r3, #28
 8003bd2:	f243 4281 	movw	r2, #13441	; 0x3481
 8003bd6:	601a      	str	r2, [r3, #0]
    graf_csucs[31][26] = 12978;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <Graf_csucs_feltolt+0x354>)
 8003bda:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003bde:	3304      	adds	r3, #4
 8003be0:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e003      	b.n	8003bf0 <Graf_csucs_feltolt+0x35c>
 8003be8:	200005a8 	.word	0x200005a8
 8003bec:	004c4b40 	.word	0x004c4b40
    graf_csucs[32][28] = 3047;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <Graf_csucs_feltolt+0x378>)
 8003bf2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	200005a8 	.word	0x200005a8

08003c10 <Graf_irany_feltolt>:

void Graf_irany_feltolt(void) {
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e022      	b.n	8003c62 <Graf_irany_feltolt+0x52>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	e019      	b.n	8003c56 <Graf_irany_feltolt+0x46>
			for(int d = 0; d < 8; d++) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	e010      	b.n	8003c4a <Graf_irany_feltolt+0x3a>
				graf_irany[u][v][d] = -1;
 8003c28:	49bb      	ldr	r1, [pc, #748]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	015b      	lsls	r3, r3, #5
 8003c30:	4413      	add	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	00da      	lsls	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int d = 0; d < 8; d++) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3301      	adds	r3, #1
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	ddeb      	ble.n	8003c28 <Graf_irany_feltolt+0x18>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3301      	adds	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	dde2      	ble.n	8003c22 <Graf_irany_feltolt+0x12>
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	ddd9      	ble.n	8003c1c <Graf_irany_feltolt+0xc>
			}
		}
	}
	graf_irany[1][3][0] = 2;
 8003c68:	4bab      	ldr	r3, [pc, #684]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	graf_irany[1][5][0] = 0;
 8003c70:	4ba9      	ldr	r3, [pc, #676]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
	graf_irany[1][5][1] = 2;
 8003c78:	4ba7      	ldr	r3, [pc, #668]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	graf_irany[1][7][0] = 0;
 8003c80:	4ba5      	ldr	r3, [pc, #660]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	graf_irany[1][7][1] = 0;
 8003c88:	4ba3      	ldr	r3, [pc, #652]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	graf_irany[2][3][0] = 2;
 8003c90:	4ba1      	ldr	r3, [pc, #644]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c92:	2202      	movs	r2, #2
 8003c94:	f8c3 28a0 	str.w	r2, [r3, #2208]	; 0x8a0
	graf_irany[2][5][0] = 0;
 8003c98:	4b9f      	ldr	r3, [pc, #636]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
	graf_irany[2][5][1] = 2;
 8003ca0:	4b9d      	ldr	r3, [pc, #628]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
	graf_irany[2][7][0] = 0;
 8003ca8:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
	graf_irany[2][7][1] = 0;
 8003cb0:	4b99      	ldr	r3, [pc, #612]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
	graf_irany[3][9][0] = 2;
 8003cb8:	4b97      	ldr	r3, [pc, #604]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	graf_irany[3][11][0] = 0;
 8003cc0:	4b95      	ldr	r3, [pc, #596]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
	graf_irany[3][11][1] = 1;
 8003cc8:	4b93      	ldr	r3, [pc, #588]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f8c3 2dc4 	str.w	r2, [r3, #3524]	; 0xdc4
	graf_irany[3][11][2] = 2;
 8003cd0:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f8c3 2dc8 	str.w	r2, [r3, #3528]	; 0xdc8
	graf_irany[4][1][0] = 0;
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cda:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
	graf_irany[4][2][0] = 2;
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ce4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8003ce8:	2202      	movs	r2, #2
 8003cea:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][0] = 0;
 8003cec:	4b8a      	ldr	r3, [pc, #552]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cee:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][1] = 2;
 8003cf6:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003cf8:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2202      	movs	r2, #2
 8003d00:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][0] = 0;
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d04:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][1] = 0;
 8003d0c:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d0e:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d12:	3304      	adds	r3, #4
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][0] = 0; 	// C csucs kesz
 8003d18:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d1a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][1] = 2; 	// C csucs kesz
 8003d22:	4b7d      	ldr	r3, [pc, #500]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d24:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	601a      	str	r2, [r3, #0]
	graf_irany[7][11][0] = 1;
 8003d2e:	4b7a      	ldr	r3, [pc, #488]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d30:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][0] = 1;
 8003d38:	4b77      	ldr	r3, [pc, #476]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d3a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d3e:	3320      	adds	r3, #32
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][1] = 0;
 8003d44:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d46:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d4a:	3324      	adds	r3, #36	; 0x24
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][0] = 1;
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d52:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][1] = 2;
 8003d5a:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d5c:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003d60:	3304      	adds	r3, #4
 8003d62:	2202      	movs	r2, #2
 8003d64:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][0] = 2;
 8003d66:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d68:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][1] = 0;
 8003d70:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d72:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003d76:	3304      	adds	r3, #4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][0] = 2;
 8003d7c:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d7e:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][1] = 2;
 8003d86:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d88:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2202      	movs	r2, #2
 8003d90:	601a      	str	r2, [r3, #0]
	graf_irany[10][4][0] = 0;
 8003d92:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d94:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
	graf_irany[11][14][0] = 2;
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003d9e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003da2:	3320      	adds	r3, #32
 8003da4:	2202      	movs	r2, #2
 8003da6:	601a      	str	r2, [r3, #0]
	graf_irany[11][15][0] = 0;
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003daa:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][0] = 1;
 8003db2:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003db4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][1] = 2;
 8003dbc:	4b56      	ldr	r3, [pc, #344]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003dbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][2] = 1;
 8003dc8:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003dca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dce:	3308      	adds	r3, #8
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][0] = 1;
 8003dd4:	4b50      	ldr	r3, [pc, #320]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003dd6:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][1] = 2;
 8003dde:	4b4e      	ldr	r3, [pc, #312]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003de0:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003de4:	3304      	adds	r3, #4
 8003de6:	2202      	movs	r2, #2
 8003de8:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][2] = 0;
 8003dea:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003dec:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003df0:	3308      	adds	r3, #8
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][3] = 0;
 8003df6:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003df8:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][0] = 1;
 8003e02:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e04:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][1] = 2;
 8003e0c:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e0e:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e12:	3304      	adds	r3, #4
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][2] = 0;
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e1a:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][3] = 1;
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e26:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][0] = 1;
 8003e30:	4b39      	ldr	r3, [pc, #228]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e32:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][1] = 2;
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e3c:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e40:	3304      	adds	r3, #4
 8003e42:	2202      	movs	r2, #2
 8003e44:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][2] = 0;
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e48:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][3] = 2;
 8003e52:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e54:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e58:	330c      	adds	r3, #12
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][0] = 0;
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e60:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][1] = 0;
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e6a:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][2] = 1;
 8003e74:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e76:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][0] = 0;
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e82:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][1] = 2;
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e8c:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003e90:	3304      	adds	r3, #4
 8003e92:	2202      	movs	r2, #2
 8003e94:	601a      	str	r2, [r3, #0]
	graf_irany[12][8][0] = 2; 	// F csucs kesz
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003e98:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]
	graf_irany[13][12][0] = 1;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ea2:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8003ea6:	3320      	adds	r3, #32
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][0] = 1;
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003eae:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003eb2:	3320      	adds	r3, #32
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][1] = 0;
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003eba:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][0] = 1;
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ec6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003eca:	3320      	adds	r3, #32
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][1] = 2;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ed2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003ed6:	3324      	adds	r3, #36	; 0x24
 8003ed8:	2202      	movs	r2, #2
 8003eda:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][0] = 1;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ede:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][1] = 1;
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ee8:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003eec:	3304      	adds	r3, #4
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][0] = 1;
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003ef4:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003ef8:	3340      	adds	r3, #64	; 0x40
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][1] = 0;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003f00:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f04:	3344      	adds	r3, #68	; 0x44
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][2] = 0;
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <Graf_irany_feltolt+0x308>)
 8003f0c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f10:	3348      	adds	r3, #72	; 0x48
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e001      	b.n	8003f1c <Graf_irany_feltolt+0x30c>
 8003f18:	2000181c 	.word	0x2000181c
	graf_irany[15][25][0] = 1;
 8003f1c:	4bbc      	ldr	r3, [pc, #752]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f1e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][1] = 0;
 8003f26:	4bba      	ldr	r3, [pc, #744]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f28:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][2] = 1;
 8003f32:	4bb7      	ldr	r3, [pc, #732]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f34:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][0] = 1;
 8003f3e:	4bb4      	ldr	r3, [pc, #720]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f40:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f44:	3340      	adds	r3, #64	; 0x40
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][1] = 0;
 8003f4a:	4bb1      	ldr	r3, [pc, #708]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f4c:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f50:	3344      	adds	r3, #68	; 0x44
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][2] = 2;
 8003f56:	4bae      	ldr	r3, [pc, #696]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f58:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f5c:	3348      	adds	r3, #72	; 0x48
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
	graf_irany[16][12][0] = 1;
 8003f62:	4bab      	ldr	r3, [pc, #684]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f64:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
	graf_irany[17][21][0] = 2;		// vagy kozep, fura keresztezodes
 8003f6c:	4ba8      	ldr	r3, [pc, #672]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f6e:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8003f72:	3340      	adds	r3, #64	; 0x40
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][0] = 0;
 8003f78:	4ba5      	ldr	r3, [pc, #660]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f7a:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][1] = 0;
 8003f82:	4ba3      	ldr	r3, [pc, #652]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f84:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][0] = 0;
 8003f8e:	4ba0      	ldr	r3, [pc, #640]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f90:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][1] = 1;
 8003f9a:	4b9d      	ldr	r3, [pc, #628]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003f9c:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003fa0:	3344      	adds	r3, #68	; 0x44
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][0] = 0;
 8003fa6:	4b9a      	ldr	r3, [pc, #616]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fa8:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][1] = 2;
 8003fb0:	4b97      	ldr	r3, [pc, #604]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fb2:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2202      	movs	r2, #2
 8003fba:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][0] = 1;
 8003fbc:	4b94      	ldr	r3, [pc, #592]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fbe:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fc2:	3360      	adds	r3, #96	; 0x60
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][1] = 2;
 8003fc8:	4b91      	ldr	r3, [pc, #580]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fca:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fce:	3364      	adds	r3, #100	; 0x64
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][0] = 1; 	// I csucs kesz
 8003fd4:	4b8e      	ldr	r3, [pc, #568]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fd6:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][1] = 0; 	// I csucs kesz
 8003fde:	4b8c      	ldr	r3, [pc, #560]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fe0:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
	graf_irany[19][23][0] = 0;
 8003fea:	4b89      	ldr	r3, [pc, #548]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003fec:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 8003ff0:	3340      	adds	r3, #64	; 0x40
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
	graf_irany[19][25][0] = 1;
 8003ff6:	4b86      	ldr	r3, [pc, #536]	; (8004210 <Graf_irany_feltolt+0x600>)
 8003ff8:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
	graf_irany[19][27][0] = 2;
 8004000:	4b83      	ldr	r3, [pc, #524]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004002:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8004006:	3340      	adds	r3, #64	; 0x40
 8004008:	2202      	movs	r2, #2
 800400a:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][0] = 0;
 800400c:	4b80      	ldr	r3, [pc, #512]	; (8004210 <Graf_irany_feltolt+0x600>)
 800400e:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 8004012:	3340      	adds	r3, #64	; 0x40
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][1] = 0;
 8004018:	4b7d      	ldr	r3, [pc, #500]	; (8004210 <Graf_irany_feltolt+0x600>)
 800401a:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 800401e:	3344      	adds	r3, #68	; 0x44
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][0] = 0;
 8004024:	4b7a      	ldr	r3, [pc, #488]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004026:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800402a:	3320      	adds	r3, #32
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][1] = 2;
 8004030:	4b77      	ldr	r3, [pc, #476]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004032:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8004036:	3324      	adds	r3, #36	; 0x24
 8004038:	2202      	movs	r2, #2
 800403a:	601a      	str	r2, [r3, #0]
	graf_irany[21][23][0] = 0;
 800403c:	4b74      	ldr	r3, [pc, #464]	; (8004210 <Graf_irany_feltolt+0x600>)
 800403e:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
	graf_irany[21][25][0] = 1;
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004048:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 800404c:	3340      	adds	r3, #64	; 0x40
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
	graf_irany[21][27][0] = 2;
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004054:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8004058:	2202      	movs	r2, #2
 800405a:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][0] = 1;
 800405c:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <Graf_irany_feltolt+0x600>)
 800405e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004062:	3340      	adds	r3, #64	; 0x40
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][1] = 0;
 8004068:	4b69      	ldr	r3, [pc, #420]	; (8004210 <Graf_irany_feltolt+0x600>)
 800406a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800406e:	3344      	adds	r3, #68	; 0x44
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][2] = 1;
 8004074:	4b66      	ldr	r3, [pc, #408]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004076:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800407a:	3348      	adds	r3, #72	; 0x48
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][0] = 1;
 8004080:	4b63      	ldr	r3, [pc, #396]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004082:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 8004086:	3340      	adds	r3, #64	; 0x40
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][1] = 2;
 800408c:	4b60      	ldr	r3, [pc, #384]	; (8004210 <Graf_irany_feltolt+0x600>)
 800408e:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 8004092:	3344      	adds	r3, #68	; 0x44
 8004094:	2202      	movs	r2, #2
 8004096:	601a      	str	r2, [r3, #0]
	graf_irany[22][18][0] = 0;
 8004098:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <Graf_irany_feltolt+0x600>)
 800409a:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][0] = 0;
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040a4:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][1] = 0;
 80040ac:	4b58      	ldr	r3, [pc, #352]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040ae:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040b2:	3304      	adds	r3, #4
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][0] = 0;
 80040b8:	4b55      	ldr	r3, [pc, #340]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040ba:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040be:	3360      	adds	r3, #96	; 0x60
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][1] = 2;
 80040c4:	4b52      	ldr	r3, [pc, #328]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040c6:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040ca:	3364      	adds	r3, #100	; 0x64
 80040cc:	2202      	movs	r2, #2
 80040ce:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][2] = 0;
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040d2:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040d6:	3368      	adds	r3, #104	; 0x68
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][3] = 0;
 80040dc:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040de:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040e2:	336c      	adds	r3, #108	; 0x6c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
	//graf_irany[23][32][4] = 0;
	//graf_irany[23][32][5] = 0;
	//graf_irany[23][32][6] = 0;
	graf_irany[24][12][0] = 2;
 80040e8:	4b49      	ldr	r3, [pc, #292]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040ea:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80040ee:	2202      	movs	r2, #2
 80040f0:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][1] = 2;
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <Graf_irany_feltolt+0x600>)
 80040f4:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80040f8:	3304      	adds	r3, #4
 80040fa:	2202      	movs	r2, #2
 80040fc:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][2] = 0;
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004100:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004104:	3308      	adds	r3, #8
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][3] = 1;
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <Graf_irany_feltolt+0x600>)
 800410c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004110:	330c      	adds	r3, #12
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][0] = 2;
 8004116:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004118:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800411c:	2202      	movs	r2, #2
 800411e:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][1] = 2;
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004122:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004126:	3304      	adds	r3, #4
 8004128:	2202      	movs	r2, #2
 800412a:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][2] = 2;
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <Graf_irany_feltolt+0x600>)
 800412e:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004132:	3308      	adds	r3, #8
 8004134:	2202      	movs	r2, #2
 8004136:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][0] = 2;
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <Graf_irany_feltolt+0x600>)
 800413a:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800413e:	3340      	adds	r3, #64	; 0x40
 8004140:	2202      	movs	r2, #2
 8004142:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][1] = 0;
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004146:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800414a:	3344      	adds	r3, #68	; 0x44
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
	graf_irany[24][20][0] = 0;
 8004150:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004152:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
	graf_irany[24][22][0] = 1; 	// L csucs kesz
 800415a:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <Graf_irany_feltolt+0x600>)
 800415c:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8004160:	3340      	adds	r3, #64	; 0x40
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][0] = 0;
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004168:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800416c:	3340      	adds	r3, #64	; 0x40
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][1] = 0;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004174:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004178:	3344      	adds	r3, #68	; 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][0] = 1;
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004180:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8004184:	3320      	adds	r3, #32
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][1] = 2;
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <Graf_irany_feltolt+0x600>)
 800418c:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2202      	movs	r2, #2
 8004194:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][2] = 0;
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004198:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 800419c:	3328      	adds	r3, #40	; 0x28
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][3] = 0;
 80041a2:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041a4:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041a8:	332c      	adds	r3, #44	; 0x2c
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
	//graf_irany[25][32][4] = 0;
	//graf_irany[25][32][5] = 0;
	//graf_irany[25][32][6] = 0;
	graf_irany[26][12][0] = 2;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041b0:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041b4:	3340      	adds	r3, #64	; 0x40
 80041b6:	2202      	movs	r2, #2
 80041b8:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][1] = 2;
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041bc:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041c0:	3344      	adds	r3, #68	; 0x44
 80041c2:	2202      	movs	r2, #2
 80041c4:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][2] = 0;
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041c8:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041cc:	3348      	adds	r3, #72	; 0x48
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][3] = 1;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041d4:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041d8:	334c      	adds	r3, #76	; 0x4c
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][0] = 2;
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041e0:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	2202      	movs	r2, #2
 80041e8:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][1] = 2;
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041ec:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80041f0:	3344      	adds	r3, #68	; 0x44
 80041f2:	2202      	movs	r2, #2
 80041f4:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][2] = 2;
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <Graf_irany_feltolt+0x600>)
 80041f8:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80041fc:	3348      	adds	r3, #72	; 0x48
 80041fe:	2202      	movs	r2, #2
 8004200:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][0] = 2;
 8004202:	4b03      	ldr	r3, [pc, #12]	; (8004210 <Graf_irany_feltolt+0x600>)
 8004204:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004208:	2202      	movs	r2, #2
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e002      	b.n	8004214 <Graf_irany_feltolt+0x604>
 800420e:	bf00      	nop
 8004210:	2000181c 	.word	0x2000181c
	graf_irany[26][18][1] = 0;
 8004214:	4b51      	ldr	r3, [pc, #324]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004216:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 800421a:	3304      	adds	r3, #4
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
	graf_irany[26][20][0] = 0;
 8004220:	4b4e      	ldr	r3, [pc, #312]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004222:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004226:	3340      	adds	r3, #64	; 0x40
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
	graf_irany[26][22][0] = 1;
 800422c:	4b4b      	ldr	r3, [pc, #300]	; (800435c <Graf_irany_feltolt+0x74c>)
 800422e:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][0] = 2;
 8004236:	4b49      	ldr	r3, [pc, #292]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004238:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 800423c:	3340      	adds	r3, #64	; 0x40
 800423e:	2202      	movs	r2, #2
 8004240:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][1] = 2;
 8004242:	4b46      	ldr	r3, [pc, #280]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004244:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8004248:	3344      	adds	r3, #68	; 0x44
 800424a:	2202      	movs	r2, #2
 800424c:	601a      	str	r2, [r3, #0]
	//graf_irany[27][31][2] = 2;
	//graf_irany[27][31][3] = 2;
	//graf_irany[27][31][4] = 2;
	graf_irany[28][12][0] = 2;
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004250:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004254:	2202      	movs	r2, #2
 8004256:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][1] = 2;
 8004258:	4b40      	ldr	r3, [pc, #256]	; (800435c <Graf_irany_feltolt+0x74c>)
 800425a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800425e:	3304      	adds	r3, #4
 8004260:	2202      	movs	r2, #2
 8004262:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][2] = 0;
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004266:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800426a:	3308      	adds	r3, #8
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][3] = 1;
 8004270:	4b3a      	ldr	r3, [pc, #232]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004272:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004276:	330c      	adds	r3, #12
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 2;
 800427c:	4b37      	ldr	r3, [pc, #220]	; (800435c <Graf_irany_feltolt+0x74c>)
 800427e:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8004282:	2202      	movs	r2, #2
 8004284:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][1] = 2;
 8004286:	4b35      	ldr	r3, [pc, #212]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004288:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 800428c:	3304      	adds	r3, #4
 800428e:	2202      	movs	r2, #2
 8004290:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][2] = 2;
 8004292:	4b32      	ldr	r3, [pc, #200]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004294:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8004298:	3308      	adds	r3, #8
 800429a:	2202      	movs	r2, #2
 800429c:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][0] = 2;
 800429e:	4b2f      	ldr	r3, [pc, #188]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042a0:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042a4:	3340      	adds	r3, #64	; 0x40
 80042a6:	2202      	movs	r2, #2
 80042a8:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][1] = 0;
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042ac:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042b0:	3344      	adds	r3, #68	; 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
	graf_irany[28][20][0] = 0;
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042b8:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
	graf_irany[28][22][0] = 1;
 80042c0:	4b26      	ldr	r3, [pc, #152]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042c2:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 80042c6:	3340      	adds	r3, #64	; 0x40
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][0] = 2;
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042ce:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80042d2:	3320      	adds	r3, #32
 80042d4:	2202      	movs	r2, #2
 80042d6:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][1] = 0;
 80042d8:	4b20      	ldr	r3, [pc, #128]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042da:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][2] = 0;
 80042e4:	4b1d      	ldr	r3, [pc, #116]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042e6:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80042ea:	3328      	adds	r3, #40	; 0x28
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
	//graf_irany[29][32][3] = 0;
	//graf_irany[29][32][4] = 0;
	//graf_irany[29][32][5] = 0;
	graf_irany[30][29][0] = 0;
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042f2:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][0] = 2;
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <Graf_irany_feltolt+0x74c>)
 80042fe:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004302:	3340      	adds	r3, #64	; 0x40
 8004304:	2202      	movs	r2, #2
 8004306:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][1] = 0;
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <Graf_irany_feltolt+0x74c>)
 800430a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800430e:	3344      	adds	r3, #68	; 0x44
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][2] = 0;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004316:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800431a:	3348      	adds	r3, #72	; 0x48
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
	//graf_irany[30][32][3] = 0;
	//graf_irany[30][32][4] = 0;
	//graf_irany[30][32][5] = 0;
	graf_irany[31][24][0] = 0;
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004322:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8004326:	33e0      	adds	r3, #224	; 0xe0
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
	graf_irany[31][24][1] = 2;
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <Graf_irany_feltolt+0x74c>)
 800432e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8004332:	33e4      	adds	r3, #228	; 0xe4
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][0] = 0;
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <Graf_irany_feltolt+0x74c>)
 800433a:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 800433e:	3320      	adds	r3, #32
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][1] = 0;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <Graf_irany_feltolt+0x74c>)
 8004346:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
	// graf_irany[32][28][0] = -1;		egyenes ut vezet
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	2000181c 	.word	0x2000181c

08004360 <Kapuk_letilt>:

void Kapuk_letilt(void) {
 8004360:	b480      	push	{r7}
 8004362:	b091      	sub	sp, #68	; 0x44
 8004364:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; i++) {
 8004366:	2300      	movs	r3, #0
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436a:	e1a4      	b.n	80046b6 <Kapuk_letilt+0x356>
		if			(kapuk[i] == 'a') {
 800436c:	4a96      	ldr	r2, [pc, #600]	; (80045c8 <Kapuk_letilt+0x268>)
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	4413      	add	r3, r2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b61      	cmp	r3, #97	; 0x61
 8004376:	d115      	bne.n	80043a4 <Kapuk_letilt+0x44>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004378:	2301      	movs	r3, #1
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
 800437c:	e00e      	b.n	800439c <Kapuk_letilt+0x3c>
				graf_csucs[1][j] = 5000000;
 800437e:	4a93      	ldr	r2, [pc, #588]	; (80045cc <Kapuk_letilt+0x26c>)
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	3321      	adds	r3, #33	; 0x21
 8004384:	4992      	ldr	r1, [pc, #584]	; (80045d0 <Kapuk_letilt+0x270>)
 8004386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[2][j] = 5000000;
 800438a:	4a90      	ldr	r2, [pc, #576]	; (80045cc <Kapuk_letilt+0x26c>)
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	3342      	adds	r3, #66	; 0x42
 8004390:	498f      	ldr	r1, [pc, #572]	; (80045d0 <Kapuk_letilt+0x270>)
 8004392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	3301      	adds	r3, #1
 800439a:	63bb      	str	r3, [r7, #56]	; 0x38
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2b20      	cmp	r3, #32
 80043a0:	dded      	ble.n	800437e <Kapuk_letilt+0x1e>
 80043a2:	e185      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'b') {
 80043a4:	4a88      	ldr	r2, [pc, #544]	; (80045c8 <Kapuk_letilt+0x268>)
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a8:	4413      	add	r3, r2
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b62      	cmp	r3, #98	; 0x62
 80043ae:	d115      	bne.n	80043dc <Kapuk_letilt+0x7c>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043b0:	2301      	movs	r3, #1
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	e00e      	b.n	80043d4 <Kapuk_letilt+0x74>
				graf_csucs[3][j] = 5000000;
 80043b6:	4a85      	ldr	r2, [pc, #532]	; (80045cc <Kapuk_letilt+0x26c>)
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	3363      	adds	r3, #99	; 0x63
 80043bc:	4984      	ldr	r1, [pc, #528]	; (80045d0 <Kapuk_letilt+0x270>)
 80043be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[4][j] = 5000000;
 80043c2:	4a82      	ldr	r2, [pc, #520]	; (80045cc <Kapuk_letilt+0x26c>)
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	3384      	adds	r3, #132	; 0x84
 80043c8:	4981      	ldr	r1, [pc, #516]	; (80045d0 <Kapuk_letilt+0x270>)
 80043ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d0:	3301      	adds	r3, #1
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	dded      	ble.n	80043b6 <Kapuk_letilt+0x56>
 80043da:	e169      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'c') {
 80043dc:	4a7a      	ldr	r2, [pc, #488]	; (80045c8 <Kapuk_letilt+0x268>)
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e0:	4413      	add	r3, r2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b63      	cmp	r3, #99	; 0x63
 80043e6:	d115      	bne.n	8004414 <Kapuk_letilt+0xb4>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043e8:	2301      	movs	r3, #1
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
 80043ec:	e00e      	b.n	800440c <Kapuk_letilt+0xac>
				graf_csucs[5][j] = 5000000;
 80043ee:	4a77      	ldr	r2, [pc, #476]	; (80045cc <Kapuk_letilt+0x26c>)
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	33a5      	adds	r3, #165	; 0xa5
 80043f4:	4976      	ldr	r1, [pc, #472]	; (80045d0 <Kapuk_letilt+0x270>)
 80043f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[6][j] = 5000000;
 80043fa:	4a74      	ldr	r2, [pc, #464]	; (80045cc <Kapuk_letilt+0x26c>)
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	33c6      	adds	r3, #198	; 0xc6
 8004400:	4973      	ldr	r1, [pc, #460]	; (80045d0 <Kapuk_letilt+0x270>)
 8004402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	3301      	adds	r3, #1
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2b20      	cmp	r3, #32
 8004410:	dded      	ble.n	80043ee <Kapuk_letilt+0x8e>
 8004412:	e14d      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'd') {
 8004414:	4a6c      	ldr	r2, [pc, #432]	; (80045c8 <Kapuk_letilt+0x268>)
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	4413      	add	r3, r2
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b64      	cmp	r3, #100	; 0x64
 800441e:	d116      	bne.n	800444e <Kapuk_letilt+0xee>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004420:	2301      	movs	r3, #1
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004424:	e00f      	b.n	8004446 <Kapuk_letilt+0xe6>
				graf_csucs[7][j] = 5000000;
 8004426:	4a69      	ldr	r2, [pc, #420]	; (80045cc <Kapuk_letilt+0x26c>)
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	33e7      	adds	r3, #231	; 0xe7
 800442c:	4968      	ldr	r1, [pc, #416]	; (80045d0 <Kapuk_letilt+0x270>)
 800442e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[8][j] = 5000000;
 8004432:	4a66      	ldr	r2, [pc, #408]	; (80045cc <Kapuk_letilt+0x26c>)
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800443a:	4965      	ldr	r1, [pc, #404]	; (80045d0 <Kapuk_letilt+0x270>)
 800443c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	3301      	adds	r3, #1
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	2b20      	cmp	r3, #32
 800444a:	ddec      	ble.n	8004426 <Kapuk_letilt+0xc6>
 800444c:	e130      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'e') {
 800444e:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <Kapuk_letilt+0x268>)
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b65      	cmp	r3, #101	; 0x65
 8004458:	d117      	bne.n	800448a <Kapuk_letilt+0x12a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800445a:	2301      	movs	r3, #1
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 800445e:	e010      	b.n	8004482 <Kapuk_letilt+0x122>
				graf_csucs[9][j] = 5000000;
 8004460:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <Kapuk_letilt+0x26c>)
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004468:	4959      	ldr	r1, [pc, #356]	; (80045d0 <Kapuk_letilt+0x270>)
 800446a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[10][j] = 5000000;
 800446e:	4a57      	ldr	r2, [pc, #348]	; (80045cc <Kapuk_letilt+0x26c>)
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004476:	4956      	ldr	r1, [pc, #344]	; (80045d0 <Kapuk_letilt+0x270>)
 8004478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	3301      	adds	r3, #1
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	2b20      	cmp	r3, #32
 8004486:	ddeb      	ble.n	8004460 <Kapuk_letilt+0x100>
 8004488:	e112      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'f') {
 800448a:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <Kapuk_letilt+0x268>)
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b66      	cmp	r3, #102	; 0x66
 8004494:	d117      	bne.n	80044c6 <Kapuk_letilt+0x166>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004496:	2301      	movs	r3, #1
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
 800449a:	e010      	b.n	80044be <Kapuk_letilt+0x15e>
				graf_csucs[11][j] = 5000000;
 800449c:	4a4b      	ldr	r2, [pc, #300]	; (80045cc <Kapuk_letilt+0x26c>)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044a4:	494a      	ldr	r1, [pc, #296]	; (80045d0 <Kapuk_letilt+0x270>)
 80044a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[12][j] = 5000000;
 80044aa:	4a48      	ldr	r2, [pc, #288]	; (80045cc <Kapuk_letilt+0x26c>)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80044b2:	4947      	ldr	r1, [pc, #284]	; (80045d0 <Kapuk_letilt+0x270>)
 80044b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	3301      	adds	r3, #1
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	ddeb      	ble.n	800449c <Kapuk_letilt+0x13c>
 80044c4:	e0f4      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'g') {
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <Kapuk_letilt+0x268>)
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b67      	cmp	r3, #103	; 0x67
 80044d0:	d117      	bne.n	8004502 <Kapuk_letilt+0x1a2>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044d2:	2301      	movs	r3, #1
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	e010      	b.n	80044fa <Kapuk_letilt+0x19a>
				graf_csucs[13][j] = 5000000;
 80044d8:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <Kapuk_letilt+0x26c>)
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f203 13ad 	addw	r3, r3, #429	; 0x1ad
 80044e0:	493b      	ldr	r1, [pc, #236]	; (80045d0 <Kapuk_letilt+0x270>)
 80044e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[14][j] = 5000000;
 80044e6:	4a39      	ldr	r2, [pc, #228]	; (80045cc <Kapuk_letilt+0x26c>)
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80044ee:	4938      	ldr	r1, [pc, #224]	; (80045d0 <Kapuk_letilt+0x270>)
 80044f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	3301      	adds	r3, #1
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	ddeb      	ble.n	80044d8 <Kapuk_letilt+0x178>
 8004500:	e0d6      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'h') {
 8004502:	4a31      	ldr	r2, [pc, #196]	; (80045c8 <Kapuk_letilt+0x268>)
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	4413      	add	r3, r2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b68      	cmp	r3, #104	; 0x68
 800450c:	d117      	bne.n	800453e <Kapuk_letilt+0x1de>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800450e:	2301      	movs	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e010      	b.n	8004536 <Kapuk_letilt+0x1d6>
				graf_csucs[15][j] = 5000000;
 8004514:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <Kapuk_letilt+0x26c>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800451c:	492c      	ldr	r1, [pc, #176]	; (80045d0 <Kapuk_letilt+0x270>)
 800451e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[16][j] = 5000000;
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <Kapuk_letilt+0x26c>)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800452a:	4929      	ldr	r1, [pc, #164]	; (80045d0 <Kapuk_letilt+0x270>)
 800452c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b20      	cmp	r3, #32
 800453a:	ddeb      	ble.n	8004514 <Kapuk_letilt+0x1b4>
 800453c:	e0b8      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'i') {
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <Kapuk_letilt+0x268>)
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	4413      	add	r3, r2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b69      	cmp	r3, #105	; 0x69
 8004548:	d117      	bne.n	800457a <Kapuk_letilt+0x21a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800454a:	2301      	movs	r3, #1
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e010      	b.n	8004572 <Kapuk_letilt+0x212>
				graf_csucs[17][j] = 5000000;
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <Kapuk_letilt+0x26c>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f203 2331 	addw	r3, r3, #561	; 0x231
 8004558:	491d      	ldr	r1, [pc, #116]	; (80045d0 <Kapuk_letilt+0x270>)
 800455a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[18][j] = 5000000;
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <Kapuk_letilt+0x26c>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f203 2352 	addw	r3, r3, #594	; 0x252
 8004566:	491a      	ldr	r1, [pc, #104]	; (80045d0 <Kapuk_letilt+0x270>)
 8004568:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	3301      	adds	r3, #1
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b20      	cmp	r3, #32
 8004576:	ddeb      	ble.n	8004550 <Kapuk_letilt+0x1f0>
 8004578:	e09a      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'j') {
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <Kapuk_letilt+0x268>)
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	4413      	add	r3, r2
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b6a      	cmp	r3, #106	; 0x6a
 8004584:	d117      	bne.n	80045b6 <Kapuk_letilt+0x256>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e010      	b.n	80045ae <Kapuk_letilt+0x24e>
				graf_csucs[19][j] = 5000000;
 800458c:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <Kapuk_letilt+0x26c>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f203 2373 	addw	r3, r3, #627	; 0x273
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <Kapuk_letilt+0x270>)
 8004596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[20][j] = 5000000;
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <Kapuk_letilt+0x26c>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045a2:	490b      	ldr	r1, [pc, #44]	; (80045d0 <Kapuk_letilt+0x270>)
 80045a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	ddeb      	ble.n	800458c <Kapuk_letilt+0x22c>
 80045b4:	e07c      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'k') {
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <Kapuk_letilt+0x268>)
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b6b      	cmp	r3, #107	; 0x6b
 80045c0:	d11d      	bne.n	80045fe <Kapuk_letilt+0x29e>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045c2:	2301      	movs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	e016      	b.n	80045f6 <Kapuk_letilt+0x296>
 80045c8:	20000158 	.word	0x20000158
 80045cc:	200005a8 	.word	0x200005a8
 80045d0:	004c4b40 	.word	0x004c4b40
				graf_csucs[21][j] = 5000000;
 80045d4:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <Kapuk_letilt+0x36c>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f203 23b5 	addw	r3, r3, #693	; 0x2b5
 80045dc:	493c      	ldr	r1, [pc, #240]	; (80046d0 <Kapuk_letilt+0x370>)
 80045de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[22][j] = 5000000;
 80045e2:	4a3a      	ldr	r2, [pc, #232]	; (80046cc <Kapuk_letilt+0x36c>)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 80045ea:	4939      	ldr	r1, [pc, #228]	; (80046d0 <Kapuk_letilt+0x370>)
 80045ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3301      	adds	r3, #1
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	ddeb      	ble.n	80045d4 <Kapuk_letilt+0x274>
 80045fc:	e058      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'l') {
 80045fe:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <Kapuk_letilt+0x374>)
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b6c      	cmp	r3, #108	; 0x6c
 8004608:	d117      	bne.n	800463a <Kapuk_letilt+0x2da>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800460a:	2301      	movs	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e010      	b.n	8004632 <Kapuk_letilt+0x2d2>
				graf_csucs[23][j] = 5000000;
 8004610:	4a2e      	ldr	r2, [pc, #184]	; (80046cc <Kapuk_letilt+0x36c>)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f203 23f7 	addw	r3, r3, #759	; 0x2f7
 8004618:	492d      	ldr	r1, [pc, #180]	; (80046d0 <Kapuk_letilt+0x370>)
 800461a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[24][j] = 5000000;
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <Kapuk_letilt+0x36c>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004626:	492a      	ldr	r1, [pc, #168]	; (80046d0 <Kapuk_letilt+0x370>)
 8004628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3301      	adds	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b20      	cmp	r3, #32
 8004636:	ddeb      	ble.n	8004610 <Kapuk_letilt+0x2b0>
 8004638:	e03a      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'm') {
 800463a:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <Kapuk_letilt+0x374>)
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	4413      	add	r3, r2
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b6d      	cmp	r3, #109	; 0x6d
 8004644:	d117      	bne.n	8004676 <Kapuk_letilt+0x316>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004646:	2301      	movs	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	e010      	b.n	800466e <Kapuk_letilt+0x30e>
				graf_csucs[25][j] = 5000000;
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <Kapuk_letilt+0x36c>)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f203 3339 	addw	r3, r3, #825	; 0x339
 8004654:	491e      	ldr	r1, [pc, #120]	; (80046d0 <Kapuk_letilt+0x370>)
 8004656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[26][j] = 5000000;
 800465a:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <Kapuk_letilt+0x36c>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f203 335a 	addw	r3, r3, #858	; 0x35a
 8004662:	491b      	ldr	r1, [pc, #108]	; (80046d0 <Kapuk_letilt+0x370>)
 8004664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b20      	cmp	r3, #32
 8004672:	ddeb      	ble.n	800464c <Kapuk_letilt+0x2ec>
 8004674:	e01c      	b.n	80046b0 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'n') {
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <Kapuk_letilt+0x374>)
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b6e      	cmp	r3, #110	; 0x6e
 8004680:	d116      	bne.n	80046b0 <Kapuk_letilt+0x350>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004682:	2301      	movs	r3, #1
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	e010      	b.n	80046aa <Kapuk_letilt+0x34a>
				graf_csucs[27][j] = 5000000;
 8004688:	4a10      	ldr	r2, [pc, #64]	; (80046cc <Kapuk_letilt+0x36c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f203 337b 	addw	r3, r3, #891	; 0x37b
 8004690:	490f      	ldr	r1, [pc, #60]	; (80046d0 <Kapuk_letilt+0x370>)
 8004692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[28][j] = 5000000;
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <Kapuk_letilt+0x36c>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800469e:	490c      	ldr	r1, [pc, #48]	; (80046d0 <Kapuk_letilt+0x370>)
 80046a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	ddeb      	ble.n	8004688 <Kapuk_letilt+0x328>
	for(int i = 0; i < 6; i++) {
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	3301      	adds	r3, #1
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	f77f ae57 	ble.w	800436c <Kapuk_letilt+0xc>
			}
		}
	}
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	3744      	adds	r7, #68	; 0x44
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	200005a8 	.word	0x200005a8
 80046d0:	004c4b40 	.word	0x004c4b40
 80046d4:	20000158 	.word	0x20000158

080046d8 <Iranyok_torlo>:

void Iranyok_torlo(void) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++) {
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	e007      	b.n	80046f4 <Iranyok_torlo+0x1c>
		iranyok[i] = 9;				// 9: nem igazi iranyt jelol
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <Iranyok_torlo+0x30>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	2209      	movs	r2, #9
 80046ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3301      	adds	r3, #1
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b63      	cmp	r3, #99	; 0x63
 80046f8:	ddf4      	ble.n	80046e4 <Iranyok_torlo+0xc>
	}
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000268 	.word	0x20000268

0800470c <Iranyok_osszeallito>:

void Iranyok_osszeallito(void) {
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	iranyok_elem = 0;
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <Iranyok_osszeallito+0xcc>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
	for(int i = 19; 0 < i; i--) {
 8004718:	2313      	movs	r3, #19
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e050      	b.n	80047c0 <Iranyok_osszeallito+0xb4>
		if(road[i] != -1) {
 800471e:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <Iranyok_osszeallito+0xd0>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d046      	beq.n	80047ba <Iranyok_osszeallito+0xae>
			if(road[i] == 29) {
 800472c:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <Iranyok_osszeallito+0xd0>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004734:	2b1d      	cmp	r3, #29
 8004736:	d102      	bne.n	800473e <Iranyok_osszeallito+0x32>
				tolatas = true;
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <Iranyok_osszeallito+0xd4>)
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
			}
			for(int j = 0; j < 8; j++) {
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	e037      	b.n	80047b4 <Iranyok_osszeallito+0xa8>
				// road[i]-bol road[i-1]-be "0 2 0" beirni az iranyokba
				if(graf_irany[ road[i] ] [ road[i-1] ] [ j ]  != -1) {
 8004744:	4a25      	ldr	r2, [pc, #148]	; (80047dc <Iranyok_osszeallito+0xd0>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	4922      	ldr	r1, [pc, #136]	; (80047dc <Iranyok_osszeallito+0xd0>)
 8004752:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004756:	4823      	ldr	r0, [pc, #140]	; (80047e4 <Iranyok_osszeallito+0xd8>)
 8004758:	4613      	mov	r3, r2
 800475a:	015b      	lsls	r3, r3, #5
 800475c:	4413      	add	r3, r2
 800475e:	440b      	add	r3, r1
 8004760:	00da      	lsls	r2, r3, #3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	4413      	add	r3, r2
 8004766:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d01e      	beq.n	80047ae <Iranyok_osszeallito+0xa2>
					iranyok[iranyok_elem] = graf_irany[ road[i] ] [ road[i-1] ] [ j ];
 8004770:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <Iranyok_osszeallito+0xd0>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	4917      	ldr	r1, [pc, #92]	; (80047dc <Iranyok_osszeallito+0xd0>)
 800477e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004782:	4818      	ldr	r0, [pc, #96]	; (80047e4 <Iranyok_osszeallito+0xd8>)
 8004784:	4613      	mov	r3, r2
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	4413      	add	r3, r2
 800478a:	440b      	add	r3, r1
 800478c:	00da      	lsls	r2, r3, #3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	4413      	add	r3, r2
 8004792:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <Iranyok_osszeallito+0xcc>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	b2c9      	uxtb	r1, r1
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <Iranyok_osszeallito+0xdc>)
 80047a0:	5499      	strb	r1, [r3, r2]
					iranyok_elem++;
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <Iranyok_osszeallito+0xcc>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <Iranyok_osszeallito+0xcc>)
 80047ac:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 8; j++) {
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b07      	cmp	r3, #7
 80047b8:	ddc4      	ble.n	8004744 <Iranyok_osszeallito+0x38>
	for(int i = 19; 0 < i; i--) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3b01      	subs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	dcab      	bgt.n	800471e <Iranyok_osszeallito+0x12>
				}
			}
		}
	}
	keresztezodes_szam = 0;
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <Iranyok_osszeallito+0xe0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	20000263 	.word	0x20000263
 80047dc:	20000160 	.word	0x20000160
 80047e0:	2000024c 	.word	0x2000024c
 80047e4:	2000181c 	.word	0x2000181c
 80047e8:	20000268 	.word	0x20000268
 80047ec:	20000248 	.word	0x20000248

080047f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004800:	d109      	bne.n	8004816 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_GPIO_EXTI_Callback+0x34>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_GPIO_EXTI_Callback+0x34>)
 8004814:	701a      	strb	r2, [r3, #0]
		/*szervoSzog += 90;
		if(szervoSzog > 200)
			szervoSzog = 0;
		SERVO_MoveTo(SZERVO, szervoSzog);*/
	}
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200001e8 	.word	0x200001e8

08004828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800482c:	b672      	cpsid	i
}
 800482e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004830:	e7fe      	b.n	8004830 <Error_Handler+0x8>

08004832 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_MspInit+0x4c>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_MspInit+0x4c>)
 8004858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485c:	6453      	str	r3, [r2, #68]	; 0x44
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_MspInit+0x4c>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_MspInit+0x4c>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a08      	ldr	r2, [pc, #32]	; (8004894 <HAL_MspInit+0x4c>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_MspInit+0x4c>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8004886:	2006      	movs	r0, #6
 8004888:	f000 feb0 	bl	80055ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b090      	sub	sp, #64	; 0x40
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6b      	ldr	r2, [pc, #428]	; (8004a64 <HAL_I2C_MspInit+0x1cc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d12d      	bne.n	8004916 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048be:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a69      	ldr	r2, [pc, #420]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048dc:	2312      	movs	r3, #18
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048e8:	2304      	movs	r3, #4
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f0:	4619      	mov	r1, r3
 80048f2:	485e      	ldr	r0, [pc, #376]	; (8004a6c <HAL_I2C_MspInit+0x1d4>)
 80048f4:	f001 fbd4 	bl	80060a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	4b5a      	ldr	r3, [pc, #360]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4a59      	ldr	r2, [pc, #356]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004906:	6413      	str	r3, [r2, #64]	; 0x40
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004914:	e0a2      	b.n	8004a5c <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a55      	ldr	r2, [pc, #340]	; (8004a70 <HAL_I2C_MspInit+0x1d8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d14c      	bne.n	80049ba <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004920:	2300      	movs	r3, #0
 8004922:	623b      	str	r3, [r7, #32]
 8004924:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	4a4f      	ldr	r2, [pc, #316]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 800492a:	f043 0302 	orr.w	r3, r3, #2
 800492e:	6313      	str	r3, [r2, #48]	; 0x30
 8004930:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	4a48      	ldr	r2, [pc, #288]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6313      	str	r3, [r2, #48]	; 0x30
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800495e:	2312      	movs	r3, #18
 8004960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004966:	2303      	movs	r3, #3
 8004968:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800496a:	2304      	movs	r3, #4
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004972:	4619      	mov	r1, r3
 8004974:	483d      	ldr	r0, [pc, #244]	; (8004a6c <HAL_I2C_MspInit+0x1d4>)
 8004976:	f001 fb93 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800497a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004980:	2312      	movs	r3, #18
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004988:	2303      	movs	r3, #3
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800498c:	2304      	movs	r3, #4
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	4837      	ldr	r0, [pc, #220]	; (8004a74 <HAL_I2C_MspInit+0x1dc>)
 8004998:	f001 fb82 	bl	80060a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049aa:	6413      	str	r3, [r2, #64]	; 0x40
 80049ac:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69bb      	ldr	r3, [r7, #24]
}
 80049b8:	e050      	b.n	8004a5c <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2e      	ldr	r2, [pc, #184]	; (8004a78 <HAL_I2C_MspInit+0x1e0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d14b      	bne.n	8004a5c <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6313      	str	r3, [r2, #48]	; 0x30
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6313      	str	r3, [r2, #48]	; 0x30
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a02:	2312      	movs	r3, #18
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a0e:	2304      	movs	r3, #4
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a16:	4619      	mov	r1, r3
 8004a18:	4816      	ldr	r0, [pc, #88]	; (8004a74 <HAL_I2C_MspInit+0x1dc>)
 8004a1a:	f001 fb41 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a24:	2312      	movs	r3, #18
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a30:	2304      	movs	r3, #4
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4810      	ldr	r0, [pc, #64]	; (8004a7c <HAL_I2C_MspInit+0x1e4>)
 8004a3c:	f001 fb30 	bl	80060a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_I2C_MspInit+0x1d0>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3740      	adds	r7, #64	; 0x40
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40005400 	.word	0x40005400
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	40005800 	.word	0x40005800
 8004a74:	40020800 	.word	0x40020800
 8004a78:	40005c00 	.word	0x40005c00
 8004a7c:	40020000 	.word	0x40020000

08004a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b090      	sub	sp, #64	; 0x40
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a98      	ldr	r2, [pc, #608]	; (8004d00 <HAL_SPI_MspInit+0x280>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d12c      	bne.n	8004afc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	4b97      	ldr	r3, [pc, #604]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	4a96      	ldr	r2, [pc, #600]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab2:	4b94      	ldr	r3, [pc, #592]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac2:	4b90      	ldr	r3, [pc, #576]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a8f      	ldr	r2, [pc, #572]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b8d      	ldr	r3, [pc, #564]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ada:	23e0      	movs	r3, #224	; 0xe0
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004aea:	2305      	movs	r3, #5
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004af2:	4619      	mov	r1, r3
 8004af4:	4884      	ldr	r0, [pc, #528]	; (8004d08 <HAL_SPI_MspInit+0x288>)
 8004af6:	f001 fad3 	bl	80060a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004afa:	e0fd      	b.n	8004cf8 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a82      	ldr	r2, [pc, #520]	; (8004d0c <HAL_SPI_MspInit+0x28c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d14b      	bne.n	8004b9e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	4b7e      	ldr	r3, [pc, #504]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a7d      	ldr	r2, [pc, #500]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b7b      	ldr	r3, [pc, #492]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	4b77      	ldr	r3, [pc, #476]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a76      	ldr	r2, [pc, #472]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b2c:	f043 0304 	orr.w	r3, r3, #4
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b74      	ldr	r3, [pc, #464]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	4b70      	ldr	r3, [pc, #448]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a6f      	ldr	r2, [pc, #444]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b6d      	ldr	r3, [pc, #436]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b66:	2303      	movs	r3, #3
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b72:	4619      	mov	r1, r3
 8004b74:	4866      	ldr	r0, [pc, #408]	; (8004d10 <HAL_SPI_MspInit+0x290>)
 8004b76:	f001 fa93 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b8c:	2305      	movs	r3, #5
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b94:	4619      	mov	r1, r3
 8004b96:	485f      	ldr	r0, [pc, #380]	; (8004d14 <HAL_SPI_MspInit+0x294>)
 8004b98:	f001 fa82 	bl	80060a0 <HAL_GPIO_Init>
}
 8004b9c:	e0ac      	b.n	8004cf8 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5d      	ldr	r2, [pc, #372]	; (8004d18 <HAL_SPI_MspInit+0x298>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f040 80a7 	bne.w	8004cf8 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4b55      	ldr	r3, [pc, #340]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a54      	ldr	r2, [pc, #336]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b52      	ldr	r3, [pc, #328]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	4b4e      	ldr	r3, [pc, #312]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	4a46      	ldr	r2, [pc, #280]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a3f      	ldr	r2, [pc, #252]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004c08:	f043 0304 	orr.w	r3, r3, #4
 8004c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <HAL_SPI_MspInit+0x284>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c26:	2303      	movs	r3, #3
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004c2a:	2307      	movs	r3, #7
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c32:	4619      	mov	r1, r3
 8004c34:	4837      	ldr	r0, [pc, #220]	; (8004d14 <HAL_SPI_MspInit+0x294>)
 8004c36:	f001 fa33 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c40:	2302      	movs	r3, #2
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c54:	4619      	mov	r1, r3
 8004c56:	482c      	ldr	r0, [pc, #176]	; (8004d08 <HAL_SPI_MspInit+0x288>)
 8004c58:	f001 fa22 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c6e:	2306      	movs	r3, #6
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c76:	4619      	mov	r1, r3
 8004c78:	4825      	ldr	r0, [pc, #148]	; (8004d10 <HAL_SPI_MspInit+0x290>)
 8004c7a:	f001 fa11 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c7e:	2310      	movs	r3, #16
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c82:	2302      	movs	r3, #2
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c8e:	2306      	movs	r3, #6
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	481e      	ldr	r0, [pc, #120]	; (8004d14 <HAL_SPI_MspInit+0x294>)
 8004c9a:	f001 fa01 	bl	80060a0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_SPI_MspInit+0x2a0>)
 8004ca2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004caa:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb6:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cbc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd0:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004cdc:	480f      	ldr	r0, [pc, #60]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cde:	f000 fcf5 	bl	80056cc <HAL_DMA_Init>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8004ce8:	f7ff fd9e 	bl	8004828 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cf0:	649a      	str	r2, [r3, #72]	; 0x48
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_SPI_MspInit+0x29c>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004cf8:	bf00      	nop
 8004cfa:	3740      	adds	r7, #64	; 0x40
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40013000 	.word	0x40013000
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40020000 	.word	0x40020000
 8004d0c:	40003800 	.word	0x40003800
 8004d10:	40020800 	.word	0x40020800
 8004d14:	40020400 	.word	0x40020400
 8004d18:	40003c00 	.word	0x40003c00
 8004d1c:	20000504 	.word	0x20000504
 8004d20:	40026088 	.word	0x40026088

08004d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d116      	bne.n	8004d64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8004d52:	2201      	movs	r2, #1
 8004d54:	2101      	movs	r1, #1
 8004d56:	201c      	movs	r0, #28
 8004d58:	f000 fc68 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d5c:	201c      	movs	r0, #28
 8004d5e:	f000 fc91 	bl	8005684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004d62:	e036      	b.n	8004dd2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_TIM_Base_MspInit+0xbc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d116      	bne.n	8004d9c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7e:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 2);
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	202b      	movs	r0, #43	; 0x2b
 8004d90:	f000 fc4c 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004d94:	202b      	movs	r0, #43	; 0x2b
 8004d96:	f000 fc75 	bl	8005684 <HAL_NVIC_EnableIRQ>
}
 8004d9a:	e01a      	b.n	8004dd2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <HAL_TIM_Base_MspInit+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d115      	bne.n	8004dd2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_TIM_Base_MspInit+0xb8>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 2);
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	202b      	movs	r0, #43	; 0x2b
 8004dc8:	f000 fc30 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004dcc:	202b      	movs	r0, #43	; 0x2b
 8004dce:	f000 fc59 	bl	8005684 <HAL_NVIC_EnableIRQ>
}
 8004dd2:	bf00      	nop
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40001800 	.word	0x40001800

08004de8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <HAL_TIM_PWM_MspInit+0x48>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d115      	bne.n	8004e26 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 2);
 8004e16:	2202      	movs	r2, #2
 8004e18:	2101      	movs	r1, #1
 8004e1a:	201d      	movs	r0, #29
 8004e1c:	f000 fc06 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e20:	201d      	movs	r0, #29
 8004e22:	f000 fc2f 	bl	8005684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40023800 	.word	0x40023800

08004e38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d133      	bne.n	8004ec2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6a:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e92:	23c0      	movs	r3, #192	; 0xc0
 8004e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e96:	2302      	movs	r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4809      	ldr	r0, [pc, #36]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004eae:	f001 f8f7 	bl	80060a0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 2);
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	201e      	movs	r0, #30
 8004eb8:	f000 fbb8 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ebc:	201e      	movs	r0, #30
 8004ebe:	f000 fbe1 	bl	8005684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ec2:	bf00      	nop
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020400 	.word	0x40020400

08004ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <HAL_TIM_MspPostInit+0xfc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d11e      	bne.n	8004f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a35      	ldr	r2, [pc, #212]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f26:	2302      	movs	r3, #2
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	4619      	mov	r1, r3
 8004f30:	482a      	ldr	r0, [pc, #168]	; (8004fdc <HAL_TIM_MspPostInit+0x104>)
 8004f32:	f001 f8b5 	bl	80060a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004f36:	e048      	b.n	8004fca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <HAL_TIM_MspPostInit+0x108>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d11f      	bne.n	8004f82 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004f5e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f64:	2302      	movs	r3, #2
 8004f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f70:	2303      	movs	r3, #3
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f74:	f107 0314 	add.w	r3, r7, #20
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4818      	ldr	r0, [pc, #96]	; (8004fdc <HAL_TIM_MspPostInit+0x104>)
 8004f7c:	f001 f890 	bl	80060a0 <HAL_GPIO_Init>
}
 8004f80:	e023      	b.n	8004fca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_TIM_MspPostInit+0x10c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d11e      	bne.n	8004fca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4a10      	ldr	r2, [pc, #64]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f96:	f043 0302 	orr.w	r3, r3, #2
 8004f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_TIM_MspPostInit+0x100>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004fa8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004fba:	2309      	movs	r3, #9
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <HAL_TIM_MspPostInit+0x110>)
 8004fc6:	f001 f86b 	bl	80060a0 <HAL_GPIO_Init>
}
 8004fca:	bf00      	nop
 8004fcc:	3728      	adds	r7, #40	; 0x28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40001800 	.word	0x40001800
 8004fe8:	40020400 	.word	0x40020400

08004fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08e      	sub	sp, #56	; 0x38
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a63      	ldr	r2, [pc, #396]	; (8005198 <HAL_UART_MspInit+0x1ac>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d153      	bne.n	80050b6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	4b62      	ldr	r3, [pc, #392]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a61      	ldr	r2, [pc, #388]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
 800501e:	4b5f      	ldr	r3, [pc, #380]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	4b5b      	ldr	r3, [pc, #364]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	4a5a      	ldr	r2, [pc, #360]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	4b58      	ldr	r3, [pc, #352]	; (800519c <HAL_UART_MspInit+0x1b0>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	4b54      	ldr	r3, [pc, #336]	; (800519c <HAL_UART_MspInit+0x1b0>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	4a53      	ldr	r2, [pc, #332]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	6313      	str	r3, [r2, #48]	; 0x30
 8005056:	4b51      	ldr	r3, [pc, #324]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005062:	2301      	movs	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	2302      	movs	r3, #2
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506e:	2303      	movs	r3, #3
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005072:	2308      	movs	r3, #8
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507a:	4619      	mov	r1, r3
 800507c:	4848      	ldr	r0, [pc, #288]	; (80051a0 <HAL_UART_MspInit+0x1b4>)
 800507e:	f001 f80f 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800508c:	2301      	movs	r3, #1
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005094:	2308      	movs	r3, #8
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509c:	4619      	mov	r1, r3
 800509e:	4841      	ldr	r0, [pc, #260]	; (80051a4 <HAL_UART_MspInit+0x1b8>)
 80050a0:	f000 fffe 	bl	80060a0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 2);
 80050a4:	2202      	movs	r2, #2
 80050a6:	2101      	movs	r1, #1
 80050a8:	2034      	movs	r0, #52	; 0x34
 80050aa:	f000 fabf 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80050ae:	2034      	movs	r0, #52	; 0x34
 80050b0:	f000 fae8 	bl	8005684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050b4:	e06b      	b.n	800518e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <HAL_UART_MspInit+0x1bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d135      	bne.n	800512c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050ca:	f043 0310 	orr.w	r3, r3, #16
 80050ce:	6453      	str	r3, [r2, #68]	; 0x44
 80050d0:	4b32      	ldr	r3, [pc, #200]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	4b2e      	ldr	r3, [pc, #184]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6313      	str	r3, [r2, #48]	; 0x30
 80050ec:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_UART_MspInit+0x1b0>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2302      	movs	r3, #2
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	2300      	movs	r3, #0
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005106:	2303      	movs	r3, #3
 8005108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800510a:	2307      	movs	r3, #7
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005112:	4619      	mov	r1, r3
 8005114:	4822      	ldr	r0, [pc, #136]	; (80051a0 <HAL_UART_MspInit+0x1b4>)
 8005116:	f000 ffc3 	bl	80060a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800511a:	2200      	movs	r2, #0
 800511c:	2100      	movs	r1, #0
 800511e:	2025      	movs	r0, #37	; 0x25
 8005120:	f000 fa84 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005124:	2025      	movs	r0, #37	; 0x25
 8005126:	f000 faad 	bl	8005684 <HAL_NVIC_EnableIRQ>
}
 800512a:	e030      	b.n	800518e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_UART_MspInit+0x1c0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d12b      	bne.n	800518e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_UART_MspInit+0x1b0>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005144:	6413      	str	r3, [r2, #64]	; 0x40
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <HAL_UART_MspInit+0x1b0>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6313      	str	r3, [r2, #48]	; 0x30
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <HAL_UART_MspInit+0x1b0>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800516e:	230c      	movs	r3, #12
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005176:	2300      	movs	r3, #0
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800517a:	2303      	movs	r3, #3
 800517c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800517e:	2307      	movs	r3, #7
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005186:	4619      	mov	r1, r3
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <HAL_UART_MspInit+0x1b4>)
 800518a:	f000 ff89 	bl	80060a0 <HAL_GPIO_Init>
}
 800518e:	bf00      	nop
 8005190:	3738      	adds	r7, #56	; 0x38
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40004c00 	.word	0x40004c00
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020000 	.word	0x40020000
 80051a4:	40020800 	.word	0x40020800
 80051a8:	40011000 	.word	0x40011000
 80051ac:	40004400 	.word	0x40004400

080051b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <NMI_Handler+0x4>

080051b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ba:	e7fe      	b.n	80051ba <HardFault_Handler+0x4>

080051bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051c0:	e7fe      	b.n	80051c0 <MemManage_Handler+0x4>

080051c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051c6:	e7fe      	b.n	80051c6 <BusFault_Handler+0x4>

080051c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051cc:	e7fe      	b.n	80051cc <UsageFault_Handler+0x4>

080051ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051d2:	bf00      	nop
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051fc:	f000 f8e2 	bl	80053c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}

08005204 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005208:	4802      	ldr	r0, [pc, #8]	; (8005214 <DMA1_Stream5_IRQHandler+0x10>)
 800520a:	f000 fd0d 	bl	8005c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000504 	.word	0x20000504

08005218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800521c:	4802      	ldr	r0, [pc, #8]	; (8005228 <TIM2_IRQHandler+0x10>)
 800521e:	f004 f859 	bl	80092d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20001748 	.word	0x20001748

0800522c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005230:	4802      	ldr	r0, [pc, #8]	; (800523c <TIM3_IRQHandler+0x10>)
 8005232:	f004 f84f 	bl	80092d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000464 	.word	0x20000464

08005240 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005244:	4802      	ldr	r0, [pc, #8]	; (8005250 <TIM4_IRQHandler+0x10>)
 8005246:	f004 f845 	bl	80092d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000374 	.word	0x20000374

08005254 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <USART1_IRQHandler+0x10>)
 800525a:	f005 fd83 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000564 	.word	0x20000564

08005268 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800526c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005270:	f001 fa6c 	bl	800674c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}

08005278 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800527e:	f004 f829 	bl	80092d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005282:	4803      	ldr	r0, [pc, #12]	; (8005290 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005284:	f004 f826 	bl	80092d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}
 800528c:	2000032c 	.word	0x2000032c
 8005290:	200017d4 	.word	0x200017d4

08005294 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005298:	4802      	ldr	r0, [pc, #8]	; (80052a4 <UART4_IRQHandler+0x10>)
 800529a:	f005 fd63 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200016ac 	.word	0x200016ac

080052a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <SystemInit+0x20>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <SystemInit+0x20>)
 80052b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052d0:	480d      	ldr	r0, [pc, #52]	; (8005308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052d2:	490e      	ldr	r1, [pc, #56]	; (800530c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052d4:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d8:	e002      	b.n	80052e0 <LoopCopyDataInit>

080052da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052de:	3304      	adds	r3, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e4:	d3f9      	bcc.n	80052da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052e6:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052e8:	4c0b      	ldr	r4, [pc, #44]	; (8005318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ec:	e001      	b.n	80052f2 <LoopFillZerobss>

080052ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f0:	3204      	adds	r2, #4

080052f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f4:	d3fb      	bcc.n	80052ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052f6:	f7ff ffd7 	bl	80052a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052fa:	f006 fd7d 	bl	800bdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052fe:	f7fc f851 	bl	80013a4 <main>
  bx  lr    
 8005302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800530c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8005310:	0800c124 	.word	0x0800c124
  ldr r2, =_sbss
 8005314:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8005318:	2000a040 	.word	0x2000a040

0800531c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800531c:	e7fe      	b.n	800531c <ADC_IRQHandler>
	...

08005320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <HAL_Init+0x40>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <HAL_Init+0x40>)
 800532a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_Init+0x40>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <HAL_Init+0x40>)
 8005336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800533a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_Init+0x40>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a07      	ldr	r2, [pc, #28]	; (8005360 <HAL_Init+0x40>)
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005348:	2003      	movs	r0, #3
 800534a:	f000 f94f 	bl	80055ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800534e:	2000      	movs	r0, #0
 8005350:	f000 f808 	bl	8005364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005354:	f7ff fa78 	bl	8004848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40023c00 	.word	0x40023c00

08005364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_InitTick+0x54>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_InitTick+0x58>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537a:	fbb3 f3f1 	udiv	r3, r3, r1
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f996 	bl	80056b4 <HAL_SYSTICK_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e00e      	b.n	80053b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d80a      	bhi.n	80053ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005398:	2200      	movs	r2, #0
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	f000 f944 	bl	800562c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053a4:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <HAL_InitTick+0x5c>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	200001bc 	.word	0x200001bc
 80053bc:	200001c4 	.word	0x200001c4
 80053c0:	200001c0 	.word	0x200001c0

080053c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_IncTick+0x20>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_IncTick+0x24>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <HAL_IncTick+0x24>)
 80053d6:	6013      	str	r3, [r2, #0]
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	200001c4 	.word	0x200001c4
 80053e8:	2000a03c 	.word	0x2000a03c

080053ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return uwTick;
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <HAL_GetTick+0x14>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000a03c 	.word	0x2000a03c

08005404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7ff ffee 	bl	80053ec <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d005      	beq.n	800542a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_Delay+0x44>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800542a:	bf00      	nop
 800542c:	f7ff ffde 	bl	80053ec <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d8f7      	bhi.n	800542c <HAL_Delay+0x28>
  {
  }
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200001c4 	.word	0x200001c4

0800544c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <__NVIC_SetPriorityGrouping+0x44>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005468:	4013      	ands	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <__NVIC_SetPriorityGrouping+0x44>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	60d3      	str	r3, [r2, #12]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <__NVIC_GetPriorityGrouping+0x18>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	f003 0307 	and.w	r3, r3, #7
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	db0b      	blt.n	80054da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	f003 021f 	and.w	r2, r3, #31
 80054c8:	4907      	ldr	r1, [pc, #28]	; (80054e8 <__NVIC_EnableIRQ+0x38>)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2001      	movs	r0, #1
 80054d2:	fa00 f202 	lsl.w	r2, r0, r2
 80054d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	e000e100 	.word	0xe000e100

080054ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db0a      	blt.n	8005516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	490c      	ldr	r1, [pc, #48]	; (8005538 <__NVIC_SetPriority+0x4c>)
 8005506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550a:	0112      	lsls	r2, r2, #4
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	440b      	add	r3, r1
 8005510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005514:	e00a      	b.n	800552c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4908      	ldr	r1, [pc, #32]	; (800553c <__NVIC_SetPriority+0x50>)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3b04      	subs	r3, #4
 8005524:	0112      	lsls	r2, r2, #4
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	440b      	add	r3, r1
 800552a:	761a      	strb	r2, [r3, #24]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000e100 	.word	0xe000e100
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f1c3 0307 	rsb	r3, r3, #7
 800555a:	2b04      	cmp	r3, #4
 800555c:	bf28      	it	cs
 800555e:	2304      	movcs	r3, #4
 8005560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3304      	adds	r3, #4
 8005566:	2b06      	cmp	r3, #6
 8005568:	d902      	bls.n	8005570 <NVIC_EncodePriority+0x30>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3b03      	subs	r3, #3
 800556e:	e000      	b.n	8005572 <NVIC_EncodePriority+0x32>
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43da      	mvns	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	401a      	ands	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005588:	f04f 31ff 	mov.w	r1, #4294967295
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	43d9      	mvns	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	4313      	orrs	r3, r2
         );
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055b8:	d301      	bcc.n	80055be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ba:	2301      	movs	r3, #1
 80055bc:	e00f      	b.n	80055de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055be:	4a0a      	ldr	r2, [pc, #40]	; (80055e8 <SysTick_Config+0x40>)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055c6:	210f      	movs	r1, #15
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	f7ff ff8e 	bl	80054ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <SysTick_Config+0x40>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <SysTick_Config+0x40>)
 80055d8:	2207      	movs	r2, #7
 80055da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000e010 	.word	0xe000e010

080055ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b07      	cmp	r3, #7
 80055f8:	d00f      	beq.n	800561a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d00c      	beq.n	800561a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b05      	cmp	r3, #5
 8005604:	d009      	beq.n	800561a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d006      	beq.n	800561a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d003      	beq.n	800561a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005612:	2192      	movs	r1, #146	; 0x92
 8005614:	4804      	ldr	r0, [pc, #16]	; (8005628 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005616:	f7ff f90c 	bl	8004832 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff16 	bl	800544c <__NVIC_SetPriorityGrouping>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0800be68 	.word	0x0800be68

0800562c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d903      	bls.n	800564c <HAL_NVIC_SetPriority+0x20>
 8005644:	21aa      	movs	r1, #170	; 0xaa
 8005646:	480e      	ldr	r0, [pc, #56]	; (8005680 <HAL_NVIC_SetPriority+0x54>)
 8005648:	f7ff f8f3 	bl	8004832 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d903      	bls.n	800565a <HAL_NVIC_SetPriority+0x2e>
 8005652:	21ab      	movs	r1, #171	; 0xab
 8005654:	480a      	ldr	r0, [pc, #40]	; (8005680 <HAL_NVIC_SetPriority+0x54>)
 8005656:	f7ff f8ec 	bl	8004832 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800565a:	f7ff ff1b 	bl	8005494 <__NVIC_GetPriorityGrouping>
 800565e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f7ff ff6b 	bl	8005540 <NVIC_EncodePriority>
 800566a:	4602      	mov	r2, r0
 800566c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff3a 	bl	80054ec <__NVIC_SetPriority>
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	0800be68 	.word	0x0800be68

08005684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800568e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da03      	bge.n	800569e <HAL_NVIC_EnableIRQ+0x1a>
 8005696:	21be      	movs	r1, #190	; 0xbe
 8005698:	4805      	ldr	r0, [pc, #20]	; (80056b0 <HAL_NVIC_EnableIRQ+0x2c>)
 800569a:	f7ff f8ca 	bl	8004832 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800569e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff ff04 	bl	80054b0 <__NVIC_EnableIRQ>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	0800be68 	.word	0x0800be68

080056b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff73 	bl	80055a8 <SysTick_Config>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056d8:	f7ff fe88 	bl	80053ec <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e204      	b.n	8005af2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a97      	ldr	r2, [pc, #604]	; (800594c <HAL_DMA_Init+0x280>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d04e      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a96      	ldr	r2, [pc, #600]	; (8005950 <HAL_DMA_Init+0x284>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d049      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a94      	ldr	r2, [pc, #592]	; (8005954 <HAL_DMA_Init+0x288>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d044      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a93      	ldr	r2, [pc, #588]	; (8005958 <HAL_DMA_Init+0x28c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03f      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a91      	ldr	r2, [pc, #580]	; (800595c <HAL_DMA_Init+0x290>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d03a      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a90      	ldr	r2, [pc, #576]	; (8005960 <HAL_DMA_Init+0x294>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d035      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a8e      	ldr	r2, [pc, #568]	; (8005964 <HAL_DMA_Init+0x298>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d030      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a8d      	ldr	r2, [pc, #564]	; (8005968 <HAL_DMA_Init+0x29c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d02b      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a8b      	ldr	r2, [pc, #556]	; (800596c <HAL_DMA_Init+0x2a0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d026      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a8a      	ldr	r2, [pc, #552]	; (8005970 <HAL_DMA_Init+0x2a4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d021      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a88      	ldr	r2, [pc, #544]	; (8005974 <HAL_DMA_Init+0x2a8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01c      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a87      	ldr	r2, [pc, #540]	; (8005978 <HAL_DMA_Init+0x2ac>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d017      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a85      	ldr	r2, [pc, #532]	; (800597c <HAL_DMA_Init+0x2b0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d012      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a84      	ldr	r2, [pc, #528]	; (8005980 <HAL_DMA_Init+0x2b4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00d      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a82      	ldr	r2, [pc, #520]	; (8005984 <HAL_DMA_Init+0x2b8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d008      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a81      	ldr	r2, [pc, #516]	; (8005988 <HAL_DMA_Init+0x2bc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <HAL_DMA_Init+0xc4>
 8005788:	21b8      	movs	r1, #184	; 0xb8
 800578a:	4880      	ldr	r0, [pc, #512]	; (800598c <HAL_DMA_Init+0x2c0>)
 800578c:	f7ff f851 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d026      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a0:	d021      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057aa:	d01c      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80057b4:	d017      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057be:	d012      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80057c8:	d00d      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057d2:	d008      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80057dc:	d003      	beq.n	80057e6 <HAL_DMA_Init+0x11a>
 80057de:	21b9      	movs	r1, #185	; 0xb9
 80057e0:	486a      	ldr	r0, [pc, #424]	; (800598c <HAL_DMA_Init+0x2c0>)
 80057e2:	f7ff f826 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <HAL_DMA_Init+0x13a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d007      	beq.n	8005806 <HAL_DMA_Init+0x13a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b80      	cmp	r3, #128	; 0x80
 80057fc:	d003      	beq.n	8005806 <HAL_DMA_Init+0x13a>
 80057fe:	21ba      	movs	r1, #186	; 0xba
 8005800:	4862      	ldr	r0, [pc, #392]	; (800598c <HAL_DMA_Init+0x2c0>)
 8005802:	f7ff f816 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580e:	d007      	beq.n	8005820 <HAL_DMA_Init+0x154>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_DMA_Init+0x154>
 8005818:	21bb      	movs	r1, #187	; 0xbb
 800581a:	485c      	ldr	r0, [pc, #368]	; (800598c <HAL_DMA_Init+0x2c0>)
 800581c:	f7ff f809 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005828:	d007      	beq.n	800583a <HAL_DMA_Init+0x16e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_DMA_Init+0x16e>
 8005832:	21bc      	movs	r1, #188	; 0xbc
 8005834:	4855      	ldr	r0, [pc, #340]	; (800598c <HAL_DMA_Init+0x2c0>)
 8005836:	f7fe fffc 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00d      	beq.n	800585e <HAL_DMA_Init+0x192>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584a:	d008      	beq.n	800585e <HAL_DMA_Init+0x192>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005854:	d003      	beq.n	800585e <HAL_DMA_Init+0x192>
 8005856:	21bd      	movs	r1, #189	; 0xbd
 8005858:	484c      	ldr	r0, [pc, #304]	; (800598c <HAL_DMA_Init+0x2c0>)
 800585a:	f7fe ffea 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_DMA_Init+0x1b6>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d008      	beq.n	8005882 <HAL_DMA_Init+0x1b6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005878:	d003      	beq.n	8005882 <HAL_DMA_Init+0x1b6>
 800587a:	21be      	movs	r1, #190	; 0xbe
 800587c:	4843      	ldr	r0, [pc, #268]	; (800598c <HAL_DMA_Init+0x2c0>)
 800587e:	f7fe ffd8 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <HAL_DMA_Init+0x1d8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d007      	beq.n	80058a4 <HAL_DMA_Init+0x1d8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	2b20      	cmp	r3, #32
 800589a:	d003      	beq.n	80058a4 <HAL_DMA_Init+0x1d8>
 800589c:	21bf      	movs	r1, #191	; 0xbf
 800589e:	483b      	ldr	r0, [pc, #236]	; (800598c <HAL_DMA_Init+0x2c0>)
 80058a0:	f7fe ffc7 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_DMA_Init+0x206>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d00d      	beq.n	80058d2 <HAL_DMA_Init+0x206>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058be:	d008      	beq.n	80058d2 <HAL_DMA_Init+0x206>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058c8:	d003      	beq.n	80058d2 <HAL_DMA_Init+0x206>
 80058ca:	21c0      	movs	r1, #192	; 0xc0
 80058cc:	482f      	ldr	r0, [pc, #188]	; (800598c <HAL_DMA_Init+0x2c0>)
 80058ce:	f7fe ffb0 	bl	8004832 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_DMA_Init+0x21e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d003      	beq.n	80058ea <HAL_DMA_Init+0x21e>
 80058e2:	21c1      	movs	r1, #193	; 0xc1
 80058e4:	4829      	ldr	r0, [pc, #164]	; (800598c <HAL_DMA_Init+0x2c0>)
 80058e6:	f7fe ffa4 	bl	8004832 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d065      	beq.n	80059be <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00f      	beq.n	800591a <HAL_DMA_Init+0x24e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d00b      	beq.n	800591a <HAL_DMA_Init+0x24e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	2b02      	cmp	r3, #2
 8005908:	d007      	beq.n	800591a <HAL_DMA_Init+0x24e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	2b03      	cmp	r3, #3
 8005910:	d003      	beq.n	800591a <HAL_DMA_Init+0x24e>
 8005912:	21c6      	movs	r1, #198	; 0xc6
 8005914:	481d      	ldr	r0, [pc, #116]	; (800598c <HAL_DMA_Init+0x2c0>)
 8005916:	f7fe ff8c 	bl	8004832 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d036      	beq.n	8005990 <HAL_DMA_Init+0x2c4>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592a:	d031      	beq.n	8005990 <HAL_DMA_Init+0x2c4>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005934:	d02c      	beq.n	8005990 <HAL_DMA_Init+0x2c4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593e:	d027      	beq.n	8005990 <HAL_DMA_Init+0x2c4>
 8005940:	21c7      	movs	r1, #199	; 0xc7
 8005942:	4812      	ldr	r0, [pc, #72]	; (800598c <HAL_DMA_Init+0x2c0>)
 8005944:	f7fe ff75 	bl	8004832 <assert_failed>
 8005948:	e022      	b.n	8005990 <HAL_DMA_Init+0x2c4>
 800594a:	bf00      	nop
 800594c:	40026010 	.word	0x40026010
 8005950:	40026028 	.word	0x40026028
 8005954:	40026040 	.word	0x40026040
 8005958:	40026058 	.word	0x40026058
 800595c:	40026070 	.word	0x40026070
 8005960:	40026088 	.word	0x40026088
 8005964:	400260a0 	.word	0x400260a0
 8005968:	400260b8 	.word	0x400260b8
 800596c:	40026410 	.word	0x40026410
 8005970:	40026428 	.word	0x40026428
 8005974:	40026440 	.word	0x40026440
 8005978:	40026458 	.word	0x40026458
 800597c:	40026470 	.word	0x40026470
 8005980:	40026488 	.word	0x40026488
 8005984:	400264a0 	.word	0x400264a0
 8005988:	400264b8 	.word	0x400264b8
 800598c:	0800bea4 	.word	0x0800bea4
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d012      	beq.n	80059be <HAL_DMA_Init+0x2f2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d00d      	beq.n	80059be <HAL_DMA_Init+0x2f2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d008      	beq.n	80059be <HAL_DMA_Init+0x2f2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059b4:	d003      	beq.n	80059be <HAL_DMA_Init+0x2f2>
 80059b6:	21c8      	movs	r1, #200	; 0xc8
 80059b8:	4850      	ldr	r0, [pc, #320]	; (8005afc <HAL_DMA_Init+0x430>)
 80059ba:	f7fe ff3a 	bl	8004832 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059de:	e00f      	b.n	8005a00 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059e0:	f7ff fd04 	bl	80053ec <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d908      	bls.n	8005a00 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2203      	movs	r2, #3
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e078      	b.n	8005af2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e8      	bne.n	80059e0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <HAL_DMA_Init+0x434>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d107      	bne.n	8005a6a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	4313      	orrs	r3, r2
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d117      	bne.n	8005ac4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa7e 	bl	8005fa8 <DMA_CheckFifoParam>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2240      	movs	r2, #64	; 0x40
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e016      	b.n	8005af2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fa35 	bl	8005f3c <DMA_CalcBaseAndBitshift>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ada:	223f      	movs	r2, #63	; 0x3f
 8005adc:	409a      	lsls	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	0800bea4 	.word	0x0800bea4
 8005b00:	f010803f 	.word	0xf010803f

08005b04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b12:	f7ff fc6b 	bl	80053ec <HAL_GetTick>
 8005b16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d008      	beq.n	8005b36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e052      	b.n	8005bdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0216 	bic.w	r2, r2, #22
 8005b44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <HAL_DMA_Abort+0x62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0208 	bic.w	r2, r2, #8
 8005b74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b86:	e013      	b.n	8005bb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b88:	f7ff fc30 	bl	80053ec <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d90c      	bls.n	8005bb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e015      	b.n	8005bdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e4      	bne.n	8005b88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc2:	223f      	movs	r2, #63	; 0x3f
 8005bc4:	409a      	lsls	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d004      	beq.n	8005c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2280      	movs	r2, #128	; 0x80
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00c      	b.n	8005c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2205      	movs	r2, #5
 8005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c34:	4b92      	ldr	r3, [pc, #584]	; (8005e80 <HAL_DMA_IRQHandler+0x258>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a92      	ldr	r2, [pc, #584]	; (8005e84 <HAL_DMA_IRQHandler+0x25c>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0a9b      	lsrs	r3, r3, #10
 8005c40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	2208      	movs	r2, #8
 8005c54:	409a      	lsls	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01a      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d013      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	2208      	movs	r2, #8
 8005c82:	409a      	lsls	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	2201      	movs	r2, #1
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d012      	beq.n	8005cca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f043 0202 	orr.w	r2, r3, #2
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cce:	2204      	movs	r2, #4
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	2204      	movs	r2, #4
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	2210      	movs	r2, #16
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d043      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d03c      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	2210      	movs	r2, #16
 8005d24:	409a      	lsls	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d024      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
 8005d56:	e01f      	b.n	8005d98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
 8005d68:	e016      	b.n	8005d98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d107      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0208 	bic.w	r2, r2, #8
 8005d86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 808e 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8086 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b05      	cmp	r3, #5
 8005dd0:	d136      	bne.n	8005e40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0216 	bic.w	r2, r2, #22
 8005de0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <HAL_DMA_IRQHandler+0x1da>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0208 	bic.w	r2, r2, #8
 8005e10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e16:	223f      	movs	r2, #63	; 0x3f
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d07d      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
        }
        return;
 8005e3e:	e078      	b.n	8005f32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01c      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d030      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
 8005e6c:	e02b      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d027      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
 8005e7e:	e022      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x29e>
 8005e80:	200001bc 	.word	0x200001bc
 8005e84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10f      	bne.n	8005eb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0210 	bic.w	r2, r2, #16
 8005ea4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d032      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d022      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2205      	movs	r2, #5
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d307      	bcc.n	8005f0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f2      	bne.n	8005ef2 <HAL_DMA_IRQHandler+0x2ca>
 8005f0c:	e000      	b.n	8005f10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	e000      	b.n	8005f34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f32:	bf00      	nop
    }
  }
}
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	3b10      	subs	r3, #16
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <DMA_CalcBaseAndBitshift+0x64>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f56:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <DMA_CalcBaseAndBitshift+0x68>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d909      	bls.n	8005f7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	1d1a      	adds	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f7c:	e007      	b.n	8005f8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	aaaaaaab 	.word	0xaaaaaaab
 8005fa4:	0800c0e4 	.word	0x0800c0e4

08005fa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11f      	bne.n	8006002 <DMA_CheckFifoParam+0x5a>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d856      	bhi.n	8006076 <DMA_CheckFifoParam+0xce>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <DMA_CheckFifoParam+0x28>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005ff3 	.word	0x08005ff3
 8005fd8:	08005fe1 	.word	0x08005fe1
 8005fdc:	08006077 	.word	0x08006077
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d046      	beq.n	800607a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff0:	e043      	b.n	800607a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ffa:	d140      	bne.n	800607e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006000:	e03d      	b.n	800607e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600a:	d121      	bne.n	8006050 <DMA_CheckFifoParam+0xa8>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d837      	bhi.n	8006082 <DMA_CheckFifoParam+0xda>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <DMA_CheckFifoParam+0x70>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006029 	.word	0x08006029
 800601c:	0800602f 	.word	0x0800602f
 8006020:	08006029 	.word	0x08006029
 8006024:	08006041 	.word	0x08006041
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
      break;
 800602c:	e030      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d025      	beq.n	8006086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800603e:	e022      	b.n	8006086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006048:	d11f      	bne.n	800608a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800604e:	e01c      	b.n	800608a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d903      	bls.n	800605e <DMA_CheckFifoParam+0xb6>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d003      	beq.n	8006064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800605c:	e018      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
      break;
 8006062:	e015      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e00b      	b.n	800608e <DMA_CheckFifoParam+0xe6>
      break;
 8006076:	bf00      	nop
 8006078:	e00a      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;
 800607a:	bf00      	nop
 800607c:	e008      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;
 800607e:	bf00      	nop
 8006080:	e006      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;
 8006082:	bf00      	nop
 8006084:	e004      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;   
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
      break;
 800608e:	bf00      	nop
    }
  } 
  
  return status; 
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <HAL_GPIO_Init+0xf8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01f      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a36      	ldr	r2, [pc, #216]	; (800619c <HAL_GPIO_Init+0xfc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01b      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a35      	ldr	r2, [pc, #212]	; (80061a0 <HAL_GPIO_Init+0x100>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d017      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <HAL_GPIO_Init+0x104>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a33      	ldr	r2, [pc, #204]	; (80061a8 <HAL_GPIO_Init+0x108>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a32      	ldr	r2, [pc, #200]	; (80061ac <HAL_GPIO_Init+0x10c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a31      	ldr	r2, [pc, #196]	; (80061b0 <HAL_GPIO_Init+0x110>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_GPIO_Init+0x114>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060f6:	21ac      	movs	r1, #172	; 0xac
 80060f8:	482f      	ldr	r0, [pc, #188]	; (80061b8 <HAL_GPIO_Init+0x118>)
 80060fa:	f7fe fb9a 	bl	8004832 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_GPIO_Init+0x74>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_GPIO_Init+0x7c>
 8006114:	21ad      	movs	r1, #173	; 0xad
 8006116:	4828      	ldr	r0, [pc, #160]	; (80061b8 <HAL_GPIO_Init+0x118>)
 8006118:	f7fe fb8b 	bl	8004832 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d035      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d031      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b11      	cmp	r3, #17
 8006132:	d02d      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d029      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b12      	cmp	r3, #18
 8006142:	d025      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800614c:	d020      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006156:	d01b      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8006160:	d016      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800616a:	d011      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8006174:	d00c      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800617e:	d007      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <HAL_GPIO_Init+0xf0>
 8006188:	21ae      	movs	r1, #174	; 0xae
 800618a:	480b      	ldr	r0, [pc, #44]	; (80061b8 <HAL_GPIO_Init+0x118>)
 800618c:	f7fe fb51 	bl	8004832 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e289      	b.n	80066aa <HAL_GPIO_Init+0x60a>
 8006196:	bf00      	nop
 8006198:	40020000 	.word	0x40020000
 800619c:	40020400 	.word	0x40020400
 80061a0:	40020800 	.word	0x40020800
 80061a4:	40020c00 	.word	0x40020c00
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40021400 	.word	0x40021400
 80061b0:	40021800 	.word	0x40021800
 80061b4:	40021c00 	.word	0x40021c00
 80061b8:	0800bedc 	.word	0x0800bedc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061bc:	2201      	movs	r2, #1
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4013      	ands	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	f040 8265 	bne.w	80066a4 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d005      	beq.n	80061f2 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d144      	bne.n	800627c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00f      	beq.n	800621a <HAL_GPIO_Init+0x17a>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d00b      	beq.n	800621a <HAL_GPIO_Init+0x17a>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x17a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x17a>
 8006212:	21c0      	movs	r1, #192	; 0xc0
 8006214:	4831      	ldr	r0, [pc, #196]	; (80062dc <HAL_GPIO_Init+0x23c>)
 8006216:	f7fe fb0c 	bl	8004832 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	2203      	movs	r2, #3
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4013      	ands	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006250:	2201      	movs	r2, #1
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 0201 	and.w	r2, r3, #1
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b03      	cmp	r3, #3
 8006286:	d02b      	beq.n	80062e0 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_GPIO_Init+0x208>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d007      	beq.n	80062a8 <HAL_GPIO_Init+0x208>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d003      	beq.n	80062a8 <HAL_GPIO_Init+0x208>
 80062a0:	21d1      	movs	r1, #209	; 0xd1
 80062a2:	480e      	ldr	r0, [pc, #56]	; (80062dc <HAL_GPIO_Init+0x23c>)
 80062a4:	f7fe fac5 	bl	8004832 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	2203      	movs	r2, #3
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	43db      	mvns	r3, r3
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	4013      	ands	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	60da      	str	r2, [r3, #12]
 80062d8:	e002      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062da:	bf00      	nop
 80062dc:	0800bedc 	.word	0x0800bedc
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f040 810c 	bne.w	8006506 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80e3 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	f000 80de 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80d9 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80d4 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80cf 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80ca 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b01      	cmp	r3, #1
 8006330:	f000 80c5 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b01      	cmp	r3, #1
 800633a:	f000 80c0 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b02      	cmp	r3, #2
 8006344:	f000 80bb 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b02      	cmp	r3, #2
 800634e:	f000 80b6 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b02      	cmp	r3, #2
 8006358:	f000 80b1 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b03      	cmp	r3, #3
 8006362:	f000 80ac 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b04      	cmp	r3, #4
 800636c:	f000 80a7 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b04      	cmp	r3, #4
 8006376:	f000 80a2 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b04      	cmp	r3, #4
 8006380:	f000 809d 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b05      	cmp	r3, #5
 800638a:	f000 8098 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b05      	cmp	r3, #5
 8006394:	f000 8093 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b09      	cmp	r3, #9
 800639e:	f000 808e 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	f000 8089 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	f000 8084 	beq.w	80064be <HAL_GPIO_Init+0x41e>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	d07f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	d07b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b07      	cmp	r3, #7
 80063cc:	d077      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d073      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d06f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d06b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b09      	cmp	r3, #9
 80063ec:	d067      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d063      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b0a      	cmp	r3, #10
 80063fc:	d05f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b0a      	cmp	r3, #10
 8006404:	d05b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b0b      	cmp	r3, #11
 800640c:	d057      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b0c      	cmp	r3, #12
 8006414:	d053      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b0c      	cmp	r3, #12
 800641c:	d04f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b0d      	cmp	r3, #13
 8006424:	d04b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d047      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b05      	cmp	r3, #5
 8006434:	d043      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d03f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b06      	cmp	r3, #6
 8006444:	d03b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d037      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b04      	cmp	r3, #4
 8006454:	d033      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b05      	cmp	r3, #5
 800645c:	d02f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b06      	cmp	r3, #6
 8006464:	d02b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d027      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b07      	cmp	r3, #7
 8006474:	d023      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b07      	cmp	r3, #7
 800647c:	d01f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b07      	cmp	r3, #7
 8006484:	d01b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b07      	cmp	r3, #7
 800648c:	d017      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d013      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d00f      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d00b      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b0a      	cmp	r3, #10
 80064ac:	d007      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b0a      	cmp	r3, #10
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_Init+0x41e>
 80064b6:	21de      	movs	r1, #222	; 0xde
 80064b8:	4880      	ldr	r0, [pc, #512]	; (80066bc <HAL_GPIO_Init+0x61c>)
 80064ba:	f7fe f9ba 	bl	8004832 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	08da      	lsrs	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3208      	adds	r2, #8
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	220f      	movs	r2, #15
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	08da      	lsrs	r2, r3, #3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3208      	adds	r2, #8
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	2203      	movs	r2, #3
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f003 0203 	and.w	r2, r3, #3
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80ae 	beq.w	80066a4 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <HAL_GPIO_Init+0x620>)
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	4a5b      	ldr	r2, [pc, #364]	; (80066c0 <HAL_GPIO_Init+0x620>)
 8006552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006556:	6453      	str	r3, [r2, #68]	; 0x44
 8006558:	4b59      	ldr	r3, [pc, #356]	; (80066c0 <HAL_GPIO_Init+0x620>)
 800655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006564:	4a57      	ldr	r2, [pc, #348]	; (80066c4 <HAL_GPIO_Init+0x624>)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	089b      	lsrs	r3, r3, #2
 800656a:	3302      	adds	r3, #2
 800656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	220f      	movs	r2, #15
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a4f      	ldr	r2, [pc, #316]	; (80066c8 <HAL_GPIO_Init+0x628>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d025      	beq.n	80065dc <HAL_GPIO_Init+0x53c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a4e      	ldr	r2, [pc, #312]	; (80066cc <HAL_GPIO_Init+0x62c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d01f      	beq.n	80065d8 <HAL_GPIO_Init+0x538>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a4d      	ldr	r2, [pc, #308]	; (80066d0 <HAL_GPIO_Init+0x630>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d019      	beq.n	80065d4 <HAL_GPIO_Init+0x534>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a4c      	ldr	r2, [pc, #304]	; (80066d4 <HAL_GPIO_Init+0x634>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <HAL_GPIO_Init+0x530>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a4b      	ldr	r2, [pc, #300]	; (80066d8 <HAL_GPIO_Init+0x638>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00d      	beq.n	80065cc <HAL_GPIO_Init+0x52c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a4a      	ldr	r2, [pc, #296]	; (80066dc <HAL_GPIO_Init+0x63c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <HAL_GPIO_Init+0x528>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a49      	ldr	r2, [pc, #292]	; (80066e0 <HAL_GPIO_Init+0x640>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d101      	bne.n	80065c4 <HAL_GPIO_Init+0x524>
 80065c0:	2306      	movs	r3, #6
 80065c2:	e00c      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065c4:	2307      	movs	r3, #7
 80065c6:	e00a      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065c8:	2305      	movs	r3, #5
 80065ca:	e008      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065cc:	2304      	movs	r3, #4
 80065ce:	e006      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065d0:	2303      	movs	r3, #3
 80065d2:	e004      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e002      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <HAL_GPIO_Init+0x53e>
 80065dc:	2300      	movs	r3, #0
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	f002 0203 	and.w	r2, r2, #3
 80065e4:	0092      	lsls	r2, r2, #2
 80065e6:	4093      	lsls	r3, r2
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065ee:	4935      	ldr	r1, [pc, #212]	; (80066c4 <HAL_GPIO_Init+0x624>)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	3302      	adds	r3, #2
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065fc:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <HAL_GPIO_Init+0x644>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006620:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <HAL_GPIO_Init+0x644>)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006626:	4b2f      	ldr	r3, [pc, #188]	; (80066e4 <HAL_GPIO_Init+0x644>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800664a:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <HAL_GPIO_Init+0x644>)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006650:	4b24      	ldr	r3, [pc, #144]	; (80066e4 <HAL_GPIO_Init+0x644>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006674:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <HAL_GPIO_Init+0x644>)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800667a:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <HAL_GPIO_Init+0x644>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	43db      	mvns	r3, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	4013      	ands	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800669e:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <HAL_GPIO_Init+0x644>)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b0f      	cmp	r3, #15
 80066ae:	f67f ad85 	bls.w	80061bc <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	0800bedc 	.word	0x0800bedc
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40013800 	.word	0x40013800
 80066c8:	40020000 	.word	0x40020000
 80066cc:	40020400 	.word	0x40020400
 80066d0:	40020800 	.word	0x40020800
 80066d4:	40020c00 	.word	0x40020c00
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40021400 	.word	0x40021400
 80066e0:	40021800 	.word	0x40021800
 80066e4:	40013c00 	.word	0x40013c00

080066e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	807b      	strh	r3, [r7, #2]
 80066f4:	4613      	mov	r3, r2
 80066f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <HAL_GPIO_WritePin+0x20>
 80066fe:	887b      	ldrh	r3, [r7, #2]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <HAL_GPIO_WritePin+0x2a>
 8006708:	f240 119d 	movw	r1, #413	; 0x19d
 800670c:	480e      	ldr	r0, [pc, #56]	; (8006748 <HAL_GPIO_WritePin+0x60>)
 800670e:	f7fe f890 	bl	8004832 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006712:	787b      	ldrb	r3, [r7, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_GPIO_WritePin+0x40>
 8006718:	787b      	ldrb	r3, [r7, #1]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d004      	beq.n	8006728 <HAL_GPIO_WritePin+0x40>
 800671e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006722:	4809      	ldr	r0, [pc, #36]	; (8006748 <HAL_GPIO_WritePin+0x60>)
 8006724:	f7fe f885 	bl	8004832 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006728:	787b      	ldrb	r3, [r7, #1]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800672e:	887a      	ldrh	r2, [r7, #2]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006734:	e003      	b.n	800673e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006736:	887b      	ldrh	r3, [r7, #2]
 8006738:	041a      	lsls	r2, r3, #16
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	619a      	str	r2, [r3, #24]
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	0800bedc 	.word	0x0800bedc

0800674c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe f840 	bl	80047f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40013c00 	.word	0x40013c00

0800677c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e1be      	b.n	8006b0c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a9f      	ldr	r2, [pc, #636]	; (8006a10 <HAL_I2C_Init+0x294>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00e      	beq.n	80067b6 <HAL_I2C_Init+0x3a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a9d      	ldr	r2, [pc, #628]	; (8006a14 <HAL_I2C_Init+0x298>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d009      	beq.n	80067b6 <HAL_I2C_Init+0x3a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a9c      	ldr	r2, [pc, #624]	; (8006a18 <HAL_I2C_Init+0x29c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_I2C_Init+0x3a>
 80067ac:	f240 11bf 	movw	r1, #447	; 0x1bf
 80067b0:	489a      	ldr	r0, [pc, #616]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 80067b2:	f7fe f83e 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <HAL_I2C_Init+0x4c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4a97      	ldr	r2, [pc, #604]	; (8006a20 <HAL_I2C_Init+0x2a4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d904      	bls.n	80067d2 <HAL_I2C_Init+0x56>
 80067c8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80067cc:	4893      	ldr	r0, [pc, #588]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 80067ce:	f7fe f830 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <HAL_I2C_Init+0x72>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e2:	d004      	beq.n	80067ee <HAL_I2C_Init+0x72>
 80067e4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80067e8:	488c      	ldr	r0, [pc, #560]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 80067ea:	f7fe f822 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_I2C_Init+0x8c>
 80067fe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006802:	4886      	ldr	r0, [pc, #536]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 8006804:	f7fe f815 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006810:	d009      	beq.n	8006826 <HAL_I2C_Init+0xaa>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800681a:	d004      	beq.n	8006826 <HAL_I2C_Init+0xaa>
 800681c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006820:	487e      	ldr	r0, [pc, #504]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 8006822:	f7fe f806 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_I2C_Init+0xc4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d004      	beq.n	8006840 <HAL_I2C_Init+0xc4>
 8006836:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800683a:	4878      	ldr	r0, [pc, #480]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 800683c:	f7fd fff9 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_I2C_Init+0xda>
 800684c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006850:	4872      	ldr	r0, [pc, #456]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 8006852:	f7fd ffee 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_I2C_Init+0xf4>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d004      	beq.n	8006870 <HAL_I2C_Init+0xf4>
 8006866:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800686a:	486c      	ldr	r0, [pc, #432]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 800686c:	f7fd ffe1 	bl	8004832 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_I2C_Init+0x10e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d004      	beq.n	800688a <HAL_I2C_Init+0x10e>
 8006880:	f240 11c7 	movw	r1, #455	; 0x1c7
 8006884:	4865      	ldr	r0, [pc, #404]	; (8006a1c <HAL_I2C_Init+0x2a0>)
 8006886:	f7fd ffd4 	bl	8004832 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fd fffa 	bl	8004898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068dc:	f000 fb1c 	bl	8006f18 <HAL_RCC_GetPCLK1Freq>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4a4f      	ldr	r2, [pc, #316]	; (8006a24 <HAL_I2C_Init+0x2a8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d807      	bhi.n	80068fc <HAL_I2C_Init+0x180>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a4e      	ldr	r2, [pc, #312]	; (8006a28 <HAL_I2C_Init+0x2ac>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	bf94      	ite	ls
 80068f4:	2301      	movls	r3, #1
 80068f6:	2300      	movhi	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e006      	b.n	800690a <HAL_I2C_Init+0x18e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a4b      	ldr	r2, [pc, #300]	; (8006a2c <HAL_I2C_Init+0x2b0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	bf94      	ite	ls
 8006904:	2301      	movls	r3, #1
 8006906:	2300      	movhi	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0fc      	b.n	8006b0c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a46      	ldr	r2, [pc, #280]	; (8006a30 <HAL_I2C_Init+0x2b4>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0c9b      	lsrs	r3, r3, #18
 800691c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a38      	ldr	r2, [pc, #224]	; (8006a24 <HAL_I2C_Init+0x2a8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d802      	bhi.n	800694c <HAL_I2C_Init+0x1d0>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3301      	adds	r3, #1
 800694a:	e009      	b.n	8006960 <HAL_I2C_Init+0x1e4>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	4a37      	ldr	r2, [pc, #220]	; (8006a34 <HAL_I2C_Init+0x2b8>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	099b      	lsrs	r3, r3, #6
 800695e:	3301      	adds	r3, #1
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	430b      	orrs	r3, r1
 8006966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	492a      	ldr	r1, [pc, #168]	; (8006a24 <HAL_I2C_Init+0x2a8>)
 800697c:	428b      	cmp	r3, r1
 800697e:	d819      	bhi.n	80069b4 <HAL_I2C_Init+0x238>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1e59      	subs	r1, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	fbb1 f3f3 	udiv	r3, r1, r3
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006994:	400b      	ands	r3, r1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_I2C_Init+0x234>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1e59      	subs	r1, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80069a8:	3301      	adds	r3, #1
 80069aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ae:	e066      	b.n	8006a7e <HAL_I2C_Init+0x302>
 80069b0:	2304      	movs	r3, #4
 80069b2:	e064      	b.n	8006a7e <HAL_I2C_Init+0x302>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d111      	bne.n	80069e0 <HAL_I2C_Init+0x264>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1e58      	subs	r0, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	440b      	add	r3, r1
 80069ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ce:	3301      	adds	r3, #1
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e012      	b.n	8006a06 <HAL_I2C_Init+0x28a>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1e58      	subs	r0, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	0099      	lsls	r1, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_I2C_Init+0x2bc>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e037      	b.n	8006a7e <HAL_I2C_Init+0x302>
 8006a0e:	bf00      	nop
 8006a10:	40005400 	.word	0x40005400
 8006a14:	40005800 	.word	0x40005800
 8006a18:	40005c00 	.word	0x40005c00
 8006a1c:	0800bf18 	.word	0x0800bf18
 8006a20:	00061a80 	.word	0x00061a80
 8006a24:	000186a0 	.word	0x000186a0
 8006a28:	001e847f 	.word	0x001e847f
 8006a2c:	003d08ff 	.word	0x003d08ff
 8006a30:	431bde83 	.word	0x431bde83
 8006a34:	10624dd3 	.word	0x10624dd3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10e      	bne.n	8006a5e <HAL_I2C_Init+0x2e2>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	1e58      	subs	r0, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6859      	ldr	r1, [r3, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	440b      	add	r3, r1
 8006a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a52:	3301      	adds	r3, #1
 8006a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5c:	e00f      	b.n	8006a7e <HAL_I2C_Init+0x302>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1e58      	subs	r0, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6859      	ldr	r1, [r3, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	0099      	lsls	r1, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	6809      	ldr	r1, [r1, #0]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006aac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6911      	ldr	r1, [r2, #16]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	68d2      	ldr	r2, [r2, #12]
 8006ab8:	4311      	orrs	r1, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695a      	ldr	r2, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <HAL_PWREx_EnableOverDrive+0x94>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b40:	f7fe fc54 	bl	80053ec <HAL_GetTick>
 8006b44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b46:	e009      	b.n	8006b5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b48:	f7fe fc50 	bl	80053ec <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b56:	d901      	bls.n	8006b5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e01f      	b.n	8006b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <HAL_PWREx_EnableOverDrive+0x98>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b68:	d1ee      	bne.n	8006b48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b70:	f7fe fc3c 	bl	80053ec <HAL_GetTick>
 8006b74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b76:	e009      	b.n	8006b8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b78:	f7fe fc38 	bl	80053ec <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b86:	d901      	bls.n	8006b8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e007      	b.n	8006b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <HAL_PWREx_EnableOverDrive+0x98>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d1ee      	bne.n	8006b78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	420e0040 	.word	0x420e0040
 8006bac:	40007000 	.word	0x40007000
 8006bb0:	420e0044 	.word	0x420e0044

08006bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e18c      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x24>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b0f      	cmp	r3, #15
 8006bd6:	d904      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x2e>
 8006bd8:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8006bdc:	4887      	ldr	r0, [pc, #540]	; (8006dfc <HAL_RCC_ClockConfig+0x248>)
 8006bde:	f7fd fe28 	bl	8004832 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d031      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d02e      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d02b      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d028      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d025      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d022      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b06      	cmp	r3, #6
 8006c0a:	d01f      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	d01c      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d019      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b09      	cmp	r3, #9
 8006c1c:	d016      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b0a      	cmp	r3, #10
 8006c22:	d013      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b0b      	cmp	r3, #11
 8006c28:	d010      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	d00d      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b0d      	cmp	r3, #13
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b0e      	cmp	r3, #14
 8006c3a:	d007      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b0f      	cmp	r3, #15
 8006c40:	d004      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x98>
 8006c42:	f240 215d 	movw	r1, #605	; 0x25d
 8006c46:	486d      	ldr	r0, [pc, #436]	; (8006dfc <HAL_RCC_ClockConfig+0x248>)
 8006c48:	f7fd fdf3 	bl	8004832 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c4c:	4b6c      	ldr	r3, [pc, #432]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d90c      	bls.n	8006c74 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5a:	4b69      	ldr	r3, [pc, #420]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b67      	ldr	r3, [pc, #412]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e136      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d049      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c8c:	4b5d      	ldr	r3, [pc, #372]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	4a5c      	ldr	r2, [pc, #368]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ca4:	4b57      	ldr	r3, [pc, #348]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4a56      	ldr	r2, [pc, #344]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d024      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2b80      	cmp	r3, #128	; 0x80
 8006cbe:	d020      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b90      	cmp	r3, #144	; 0x90
 8006cc6:	d01c      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2ba0      	cmp	r3, #160	; 0xa0
 8006cce:	d018      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2bb0      	cmp	r3, #176	; 0xb0
 8006cd6:	d014      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8006cde:	d010      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2bd0      	cmp	r3, #208	; 0xd0
 8006ce6:	d00c      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2be0      	cmp	r3, #224	; 0xe0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2bf0      	cmp	r3, #240	; 0xf0
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x14e>
 8006cf8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006cfc:	483f      	ldr	r0, [pc, #252]	; (8006dfc <HAL_RCC_ClockConfig+0x248>)
 8006cfe:	f7fd fd98 	bl	8004832 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d02:	4b40      	ldr	r3, [pc, #256]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	493d      	ldr	r1, [pc, #244]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d059      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d010      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x196>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d00c      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x196>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d008      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x196>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d004      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x196>
 8006d40:	f240 2187 	movw	r1, #647	; 0x287
 8006d44:	482d      	ldr	r0, [pc, #180]	; (8006dfc <HAL_RCC_ClockConfig+0x248>)
 8006d46:	f7fd fd74 	bl	8004832 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d107      	bne.n	8006d62 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d52:	4b2c      	ldr	r3, [pc, #176]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d119      	bne.n	8006d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0bf      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d003      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e0af      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d82:	4b20      	ldr	r3, [pc, #128]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e0a7      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f023 0203 	bic.w	r2, r3, #3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4919      	ldr	r1, [pc, #100]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006da4:	f7fe fb22 	bl	80053ec <HAL_GetTick>
 8006da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dac:	f7fe fb1e 	bl	80053ec <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e08f      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCC_ClockConfig+0x250>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 020c 	and.w	r2, r3, #12
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d1eb      	bne.n	8006dac <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d212      	bcs.n	8006e08 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_RCC_ClockConfig+0x24c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d007      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e072      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x32e>
 8006dfc:	0800bf50 	.word	0x0800bf50
 8006e00:	40023c00 	.word	0x40023c00
 8006e04:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d025      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d018      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x29a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	d013      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x29a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e2e:	d00e      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x29a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006e38:	d009      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x29a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006e42:	d004      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x29a>
 8006e44:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006e48:	4828      	ldr	r0, [pc, #160]	; (8006eec <HAL_RCC_ClockConfig+0x338>)
 8006e4a:	f7fd fcf2 	bl	8004832 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4e:	4b28      	ldr	r3, [pc, #160]	; (8006ef0 <HAL_RCC_ClockConfig+0x33c>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	4925      	ldr	r1, [pc, #148]	; (8006ef0 <HAL_RCC_ClockConfig+0x33c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d026      	beq.n	8006eba <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d018      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x2f2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7c:	d013      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x2f2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e86:	d00e      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x2f2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006e90:	d009      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x2f2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006e9a:	d004      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x2f2>
 8006e9c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006ea0:	4812      	ldr	r0, [pc, #72]	; (8006eec <HAL_RCC_ClockConfig+0x338>)
 8006ea2:	f7fd fcc6 	bl	8004832 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_RCC_ClockConfig+0x33c>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	490e      	ldr	r1, [pc, #56]	; (8006ef0 <HAL_RCC_ClockConfig+0x33c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eba:	f000 f855 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <HAL_RCC_ClockConfig+0x33c>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	490a      	ldr	r1, [pc, #40]	; (8006ef4 <HAL_RCC_ClockConfig+0x340>)
 8006ecc:	5ccb      	ldrb	r3, [r1, r3]
 8006ece:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <HAL_RCC_ClockConfig+0x344>)
 8006ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <HAL_RCC_ClockConfig+0x348>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fa42 	bl	8005364 <HAL_InitTick>

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	0800bf50 	.word	0x0800bf50
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	0800c0cc 	.word	0x0800c0cc
 8006ef8:	200001bc 	.word	0x200001bc
 8006efc:	200001c0 	.word	0x200001c0

08006f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f04:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f06:	681b      	ldr	r3, [r3, #0]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	200001bc 	.word	0x200001bc

08006f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f1c:	f7ff fff0 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	0a9b      	lsrs	r3, r3, #10
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4903      	ldr	r1, [pc, #12]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	0800c0dc 	.word	0x0800c0dc

08006f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f44:	f7ff ffdc 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	0b5b      	lsrs	r3, r3, #13
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	4903      	ldr	r1, [pc, #12]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f56:	5ccb      	ldrb	r3, [r1, r3]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40023800 	.word	0x40023800
 8006f64:	0800c0dc 	.word	0x0800c0dc

08006f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b088      	sub	sp, #32
 8006f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f84:	4bce      	ldr	r3, [pc, #824]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 030c 	and.w	r3, r3, #12
 8006f8c:	2b0c      	cmp	r3, #12
 8006f8e:	f200 818d 	bhi.w	80072ac <HAL_RCC_GetSysClockFreq+0x344>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <HAL_RCC_GetSysClockFreq+0x30>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fcd 	.word	0x08006fcd
 8006f9c:	080072ad 	.word	0x080072ad
 8006fa0:	080072ad 	.word	0x080072ad
 8006fa4:	080072ad 	.word	0x080072ad
 8006fa8:	08006fd3 	.word	0x08006fd3
 8006fac:	080072ad 	.word	0x080072ad
 8006fb0:	080072ad 	.word	0x080072ad
 8006fb4:	080072ad 	.word	0x080072ad
 8006fb8:	08006fd9 	.word	0x08006fd9
 8006fbc:	080072ad 	.word	0x080072ad
 8006fc0:	080072ad 	.word	0x080072ad
 8006fc4:	080072ad 	.word	0x080072ad
 8006fc8:	0800714d 	.word	0x0800714d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fcc:	4bbd      	ldr	r3, [pc, #756]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006fce:	61bb      	str	r3, [r7, #24]
       break;
 8006fd0:	e16f      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd2:	4bbd      	ldr	r3, [pc, #756]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x360>)
 8006fd4:	61bb      	str	r3, [r7, #24]
      break;
 8006fd6:	e16c      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd8:	4bb9      	ldr	r3, [pc, #740]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe2:	4bb7      	ldr	r3, [pc, #732]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d053      	beq.n	8007096 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4bb4      	ldr	r3, [pc, #720]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ffe:	f04f 0100 	mov.w	r1, #0
 8007002:	ea02 0400 	and.w	r4, r2, r0
 8007006:	603c      	str	r4, [r7, #0]
 8007008:	400b      	ands	r3, r1
 800700a:	607b      	str	r3, [r7, #4]
 800700c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	014b      	lsls	r3, r1, #5
 800701e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007022:	0142      	lsls	r2, r0, #5
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	4623      	mov	r3, r4
 800702a:	1ac0      	subs	r0, r0, r3
 800702c:	462b      	mov	r3, r5
 800702e:	eb61 0103 	sbc.w	r1, r1, r3
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	018b      	lsls	r3, r1, #6
 800703c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007040:	0182      	lsls	r2, r0, #6
 8007042:	1a12      	subs	r2, r2, r0
 8007044:	eb63 0301 	sbc.w	r3, r3, r1
 8007048:	f04f 0000 	mov.w	r0, #0
 800704c:	f04f 0100 	mov.w	r1, #0
 8007050:	00d9      	lsls	r1, r3, #3
 8007052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007056:	00d0      	lsls	r0, r2, #3
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4621      	mov	r1, r4
 800705e:	1852      	adds	r2, r2, r1
 8007060:	4629      	mov	r1, r5
 8007062:	eb43 0101 	adc.w	r1, r3, r1
 8007066:	460b      	mov	r3, r1
 8007068:	f04f 0000 	mov.w	r0, #0
 800706c:	f04f 0100 	mov.w	r1, #0
 8007070:	0259      	lsls	r1, r3, #9
 8007072:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007076:	0250      	lsls	r0, r2, #9
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4610      	mov	r0, r2
 800707e:	4619      	mov	r1, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	461a      	mov	r2, r3
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	f7f9 fd84 	bl	8000b94 <__aeabi_uldivmod>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4613      	mov	r3, r2
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e04c      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007096:	4b8a      	ldr	r3, [pc, #552]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	099b      	lsrs	r3, r3, #6
 800709c:	461a      	mov	r2, r3
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070a6:	f04f 0100 	mov.w	r1, #0
 80070aa:	ea02 0a00 	and.w	sl, r2, r0
 80070ae:	ea03 0b01 	and.w	fp, r3, r1
 80070b2:	4650      	mov	r0, sl
 80070b4:	4659      	mov	r1, fp
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	014b      	lsls	r3, r1, #5
 80070c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070c4:	0142      	lsls	r2, r0, #5
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	ebb0 000a 	subs.w	r0, r0, sl
 80070ce:	eb61 010b 	sbc.w	r1, r1, fp
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	018b      	lsls	r3, r1, #6
 80070dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070e0:	0182      	lsls	r2, r0, #6
 80070e2:	1a12      	subs	r2, r2, r0
 80070e4:	eb63 0301 	sbc.w	r3, r3, r1
 80070e8:	f04f 0000 	mov.w	r0, #0
 80070ec:	f04f 0100 	mov.w	r1, #0
 80070f0:	00d9      	lsls	r1, r3, #3
 80070f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070f6:	00d0      	lsls	r0, r2, #3
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	eb12 020a 	adds.w	r2, r2, sl
 8007100:	eb43 030b 	adc.w	r3, r3, fp
 8007104:	f04f 0000 	mov.w	r0, #0
 8007108:	f04f 0100 	mov.w	r1, #0
 800710c:	0299      	lsls	r1, r3, #10
 800710e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007112:	0290      	lsls	r0, r2, #10
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4610      	mov	r0, r2
 800711a:	4619      	mov	r1, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	461a      	mov	r2, r3
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	f7f9 fd36 	bl	8000b94 <__aeabi_uldivmod>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4613      	mov	r3, r2
 800712e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007130:	4b63      	ldr	r3, [pc, #396]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	3301      	adds	r3, #1
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	61bb      	str	r3, [r7, #24]
      break;
 800714a:	e0b2      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800714c:	4b5c      	ldr	r3, [pc, #368]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007154:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007156:	4b5a      	ldr	r3, [pc, #360]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d04d      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b57      	ldr	r3, [pc, #348]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007172:	f04f 0100 	mov.w	r1, #0
 8007176:	ea02 0800 	and.w	r8, r2, r0
 800717a:	ea03 0901 	and.w	r9, r3, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	014b      	lsls	r3, r1, #5
 800718c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007190:	0142      	lsls	r2, r0, #5
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	ebb0 0008 	subs.w	r0, r0, r8
 800719a:	eb61 0109 	sbc.w	r1, r1, r9
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	018b      	lsls	r3, r1, #6
 80071a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ac:	0182      	lsls	r2, r0, #6
 80071ae:	1a12      	subs	r2, r2, r0
 80071b0:	eb63 0301 	sbc.w	r3, r3, r1
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	00d9      	lsls	r1, r3, #3
 80071be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071c2:	00d0      	lsls	r0, r2, #3
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	eb12 0208 	adds.w	r2, r2, r8
 80071cc:	eb43 0309 	adc.w	r3, r3, r9
 80071d0:	f04f 0000 	mov.w	r0, #0
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	0259      	lsls	r1, r3, #9
 80071da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80071de:	0250      	lsls	r0, r2, #9
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	f7f9 fcd0 	bl	8000b94 <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e04a      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fe:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	099b      	lsrs	r3, r3, #6
 8007204:	461a      	mov	r2, r3
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	ea02 0400 	and.w	r4, r2, r0
 8007216:	ea03 0501 	and.w	r5, r3, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	014b      	lsls	r3, r1, #5
 8007228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800722c:	0142      	lsls	r2, r0, #5
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	1b00      	subs	r0, r0, r4
 8007234:	eb61 0105 	sbc.w	r1, r1, r5
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	018b      	lsls	r3, r1, #6
 8007242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007246:	0182      	lsls	r2, r0, #6
 8007248:	1a12      	subs	r2, r2, r0
 800724a:	eb63 0301 	sbc.w	r3, r3, r1
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	00d9      	lsls	r1, r3, #3
 8007258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800725c:	00d0      	lsls	r0, r2, #3
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	1912      	adds	r2, r2, r4
 8007264:	eb45 0303 	adc.w	r3, r5, r3
 8007268:	f04f 0000 	mov.w	r0, #0
 800726c:	f04f 0100 	mov.w	r1, #0
 8007270:	0299      	lsls	r1, r3, #10
 8007272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007276:	0290      	lsls	r0, r2, #10
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	f7f9 fc84 	bl	8000b94 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4613      	mov	r3, r2
 8007292:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	0f1b      	lsrs	r3, r3, #28
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a8:	61bb      	str	r3, [r7, #24]
      break;
 80072aa:	e002      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80072ae:	61bb      	str	r3, [r7, #24]
      break;
 80072b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b2:	69bb      	ldr	r3, [r7, #24]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	00f42400 	.word	0x00f42400
 80072c8:	007a1200 	.word	0x007a1200

080072cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e34b      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d904      	bls.n	80072f0 <HAL_RCC_OscConfig+0x24>
 80072e6:	f640 5112 	movw	r1, #3346	; 0xd12
 80072ea:	48a5      	ldr	r0, [pc, #660]	; (8007580 <HAL_RCC_OscConfig+0x2b4>)
 80072ec:	f7fd faa1 	bl	8004832 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8096 	beq.w	800742a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <HAL_RCC_OscConfig+0x58>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730e:	d009      	beq.n	8007324 <HAL_RCC_OscConfig+0x58>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007318:	d004      	beq.n	8007324 <HAL_RCC_OscConfig+0x58>
 800731a:	f640 5117 	movw	r1, #3351	; 0xd17
 800731e:	4898      	ldr	r0, [pc, #608]	; (8007580 <HAL_RCC_OscConfig+0x2b4>)
 8007320:	f7fd fa87 	bl	8004832 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007324:	4b97      	ldr	r3, [pc, #604]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 030c 	and.w	r3, r3, #12
 800732c:	2b04      	cmp	r3, #4
 800732e:	d019      	beq.n	8007364 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007330:	4b94      	ldr	r3, [pc, #592]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007338:	2b08      	cmp	r3, #8
 800733a:	d106      	bne.n	800734a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800733c:	4b91      	ldr	r3, [pc, #580]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007348:	d00c      	beq.n	8007364 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800734a:	4b8e      	ldr	r3, [pc, #568]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007352:	2b0c      	cmp	r3, #12
 8007354:	d112      	bne.n	800737c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007356:	4b8b      	ldr	r3, [pc, #556]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007362:	d10b      	bne.n	800737c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007364:	4b87      	ldr	r3, [pc, #540]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d05b      	beq.n	8007428 <HAL_RCC_OscConfig+0x15c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d157      	bne.n	8007428 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e2fc      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007384:	d106      	bne.n	8007394 <HAL_RCC_OscConfig+0xc8>
 8007386:	4b7f      	ldr	r3, [pc, #508]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a7e      	ldr	r2, [pc, #504]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800738c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e01d      	b.n	80073d0 <HAL_RCC_OscConfig+0x104>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800739c:	d10c      	bne.n	80073b8 <HAL_RCC_OscConfig+0xec>
 800739e:	4b79      	ldr	r3, [pc, #484]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a78      	ldr	r2, [pc, #480]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	4b76      	ldr	r3, [pc, #472]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a75      	ldr	r2, [pc, #468]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	e00b      	b.n	80073d0 <HAL_RCC_OscConfig+0x104>
 80073b8:	4b72      	ldr	r3, [pc, #456]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a71      	ldr	r2, [pc, #452]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	4b6f      	ldr	r3, [pc, #444]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a6e      	ldr	r2, [pc, #440]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fe f808 	bl	80053ec <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073e0:	f7fe f804 	bl	80053ec <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b64      	cmp	r3, #100	; 0x64
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e2c1      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f2:	4b64      	ldr	r3, [pc, #400]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x114>
 80073fe:	e014      	b.n	800742a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fd fff4 	bl	80053ec <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007408:	f7fd fff0 	bl	80053ec <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e2ad      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741a:	4b5a      	ldr	r3, [pc, #360]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x13c>
 8007426:	e000      	b.n	800742a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8086 	beq.w	8007544 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_RCC_OscConfig+0x186>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d004      	beq.n	8007452 <HAL_RCC_OscConfig+0x186>
 8007448:	f640 514f 	movw	r1, #3407	; 0xd4f
 800744c:	484c      	ldr	r0, [pc, #304]	; (8007580 <HAL_RCC_OscConfig+0x2b4>)
 800744e:	f7fd f9f0 	bl	8004832 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b1f      	cmp	r3, #31
 8007458:	d904      	bls.n	8007464 <HAL_RCC_OscConfig+0x198>
 800745a:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 800745e:	4848      	ldr	r0, [pc, #288]	; (8007580 <HAL_RCC_OscConfig+0x2b4>)
 8007460:	f7fd f9e7 	bl	8004832 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007464:	4b47      	ldr	r3, [pc, #284]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b00      	cmp	r3, #0
 800746e:	d017      	beq.n	80074a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007470:	4b44      	ldr	r3, [pc, #272]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007478:	2b08      	cmp	r3, #8
 800747a:	d105      	bne.n	8007488 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800747c:	4b41      	ldr	r3, [pc, #260]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007488:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007490:	2b0c      	cmp	r3, #12
 8007492:	d11c      	bne.n	80074ce <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d116      	bne.n	80074ce <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074a0:	4b38      	ldr	r3, [pc, #224]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_OscConfig+0x1ec>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e25e      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b8:	4b32      	ldr	r3, [pc, #200]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	492f      	ldr	r1, [pc, #188]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074cc:	e03a      	b.n	8007544 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d020      	beq.n	8007518 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d6:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <HAL_RCC_OscConfig+0x2bc>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074dc:	f7fd ff86 	bl	80053ec <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074e4:	f7fd ff82 	bl	80053ec <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e23f      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f6:	4b23      	ldr	r3, [pc, #140]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	491c      	ldr	r1, [pc, #112]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 8007512:	4313      	orrs	r3, r2
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	e015      	b.n	8007544 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007518:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <HAL_RCC_OscConfig+0x2bc>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751e:	f7fd ff65 	bl	80053ec <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007526:	f7fd ff61 	bl	80053ec <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e21e      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <HAL_RCC_OscConfig+0x2b8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f0      	bne.n	8007526 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d045      	beq.n	80075dc <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <HAL_RCC_OscConfig+0x29e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d004      	beq.n	800756a <HAL_RCC_OscConfig+0x29e>
 8007560:	f640 5196 	movw	r1, #3478	; 0xd96
 8007564:	4806      	ldr	r0, [pc, #24]	; (8007580 <HAL_RCC_OscConfig+0x2b4>)
 8007566:	f7fd f964 	bl	8004832 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01e      	beq.n	80075b0 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007572:	4b06      	ldr	r3, [pc, #24]	; (800758c <HAL_RCC_OscConfig+0x2c0>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007578:	f7fd ff38 	bl	80053ec <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800757e:	e010      	b.n	80075a2 <HAL_RCC_OscConfig+0x2d6>
 8007580:	0800bf88 	.word	0x0800bf88
 8007584:	40023800 	.word	0x40023800
 8007588:	42470000 	.word	0x42470000
 800758c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007590:	f7fd ff2c 	bl	80053ec <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e1e9      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075a2:	4ba4      	ldr	r3, [pc, #656]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80075a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0x2c4>
 80075ae:	e015      	b.n	80075dc <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b0:	4ba1      	ldr	r3, [pc, #644]	; (8007838 <HAL_RCC_OscConfig+0x56c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b6:	f7fd ff19 	bl	80053ec <HAL_GetTick>
 80075ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075be:	f7fd ff15 	bl	80053ec <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e1d2      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075d0:	4b98      	ldr	r3, [pc, #608]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80075d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f0      	bne.n	80075be <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80a8 	beq.w	800773a <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_RCC_OscConfig+0x344>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d008      	beq.n	8007610 <HAL_RCC_OscConfig+0x344>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b05      	cmp	r3, #5
 8007604:	d004      	beq.n	8007610 <HAL_RCC_OscConfig+0x344>
 8007606:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800760a:	488c      	ldr	r0, [pc, #560]	; (800783c <HAL_RCC_OscConfig+0x570>)
 800760c:	f7fd f911 	bl	8004832 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007610:	4b88      	ldr	r3, [pc, #544]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10f      	bne.n	800763c <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	4b84      	ldr	r3, [pc, #528]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	4a83      	ldr	r2, [pc, #524]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800762a:	6413      	str	r3, [r2, #64]	; 0x40
 800762c:	4b81      	ldr	r3, [pc, #516]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007638:	2301      	movs	r3, #1
 800763a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800763c:	4b80      	ldr	r3, [pc, #512]	; (8007840 <HAL_RCC_OscConfig+0x574>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d118      	bne.n	800767a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007648:	4b7d      	ldr	r3, [pc, #500]	; (8007840 <HAL_RCC_OscConfig+0x574>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a7c      	ldr	r2, [pc, #496]	; (8007840 <HAL_RCC_OscConfig+0x574>)
 800764e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007654:	f7fd feca 	bl	80053ec <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800765c:	f7fd fec6 	bl	80053ec <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e183      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800766e:	4b74      	ldr	r3, [pc, #464]	; (8007840 <HAL_RCC_OscConfig+0x574>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d106      	bne.n	8007690 <HAL_RCC_OscConfig+0x3c4>
 8007682:	4b6c      	ldr	r3, [pc, #432]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	4a6b      	ldr	r2, [pc, #428]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	6713      	str	r3, [r2, #112]	; 0x70
 800768e:	e01c      	b.n	80076ca <HAL_RCC_OscConfig+0x3fe>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b05      	cmp	r3, #5
 8007696:	d10c      	bne.n	80076b2 <HAL_RCC_OscConfig+0x3e6>
 8007698:	4b66      	ldr	r3, [pc, #408]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 800769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769c:	4a65      	ldr	r2, [pc, #404]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 800769e:	f043 0304 	orr.w	r3, r3, #4
 80076a2:	6713      	str	r3, [r2, #112]	; 0x70
 80076a4:	4b63      	ldr	r3, [pc, #396]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a8:	4a62      	ldr	r2, [pc, #392]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	6713      	str	r3, [r2, #112]	; 0x70
 80076b0:	e00b      	b.n	80076ca <HAL_RCC_OscConfig+0x3fe>
 80076b2:	4b60      	ldr	r3, [pc, #384]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	4a5f      	ldr	r2, [pc, #380]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	6713      	str	r3, [r2, #112]	; 0x70
 80076be:	4b5d      	ldr	r3, [pc, #372]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	4a5c      	ldr	r2, [pc, #368]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076c4:	f023 0304 	bic.w	r3, r3, #4
 80076c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d015      	beq.n	80076fe <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d2:	f7fd fe8b 	bl	80053ec <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076d8:	e00a      	b.n	80076f0 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076da:	f7fd fe87 	bl	80053ec <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e142      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f0:	4b50      	ldr	r3, [pc, #320]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0ee      	beq.n	80076da <HAL_RCC_OscConfig+0x40e>
 80076fc:	e014      	b.n	8007728 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fe:	f7fd fe75 	bl	80053ec <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007704:	e00a      	b.n	800771c <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007706:	f7fd fe71 	bl	80053ec <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e12c      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800771c:	4b45      	ldr	r3, [pc, #276]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1ee      	bne.n	8007706 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d105      	bne.n	800773a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	4a40      	ldr	r2, [pc, #256]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <HAL_RCC_OscConfig+0x490>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d008      	beq.n	800775c <HAL_RCC_OscConfig+0x490>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d004      	beq.n	800775c <HAL_RCC_OscConfig+0x490>
 8007752:	f640 6105 	movw	r1, #3589	; 0xe05
 8007756:	4839      	ldr	r0, [pc, #228]	; (800783c <HAL_RCC_OscConfig+0x570>)
 8007758:	f7fd f86b 	bl	8004832 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8107 	beq.w	8007974 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007766:	4b33      	ldr	r3, [pc, #204]	; (8007834 <HAL_RCC_OscConfig+0x568>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b08      	cmp	r3, #8
 8007770:	f000 80c0 	beq.w	80078f4 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b02      	cmp	r3, #2
 800777a:	f040 80a4 	bne.w	80078c6 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCC_OscConfig+0x4ce>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778e:	d004      	beq.n	800779a <HAL_RCC_OscConfig+0x4ce>
 8007790:	f640 610e 	movw	r1, #3598	; 0xe0e
 8007794:	4829      	ldr	r0, [pc, #164]	; (800783c <HAL_RCC_OscConfig+0x570>)
 8007796:	f7fd f84c 	bl	8004832 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	2b3f      	cmp	r3, #63	; 0x3f
 80077a0:	d904      	bls.n	80077ac <HAL_RCC_OscConfig+0x4e0>
 80077a2:	f640 610f 	movw	r1, #3599	; 0xe0f
 80077a6:	4825      	ldr	r0, [pc, #148]	; (800783c <HAL_RCC_OscConfig+0x570>)
 80077a8:	f7fd f843 	bl	8004832 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b31      	cmp	r3, #49	; 0x31
 80077b2:	d904      	bls.n	80077be <HAL_RCC_OscConfig+0x4f2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80077bc:	d904      	bls.n	80077c8 <HAL_RCC_OscConfig+0x4fc>
 80077be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80077c2:	481e      	ldr	r0, [pc, #120]	; (800783c <HAL_RCC_OscConfig+0x570>)
 80077c4:	f7fd f835 	bl	8004832 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d010      	beq.n	80077f2 <HAL_RCC_OscConfig+0x526>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d00c      	beq.n	80077f2 <HAL_RCC_OscConfig+0x526>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	2b06      	cmp	r3, #6
 80077de:	d008      	beq.n	80077f2 <HAL_RCC_OscConfig+0x526>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d004      	beq.n	80077f2 <HAL_RCC_OscConfig+0x526>
 80077e8:	f640 6111 	movw	r1, #3601	; 0xe11
 80077ec:	4813      	ldr	r0, [pc, #76]	; (800783c <HAL_RCC_OscConfig+0x570>)
 80077ee:	f7fd f820 	bl	8004832 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d903      	bls.n	8007802 <HAL_RCC_OscConfig+0x536>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	2b0f      	cmp	r3, #15
 8007800:	d904      	bls.n	800780c <HAL_RCC_OscConfig+0x540>
 8007802:	f640 6112 	movw	r1, #3602	; 0xe12
 8007806:	480d      	ldr	r0, [pc, #52]	; (800783c <HAL_RCC_OscConfig+0x570>)
 8007808:	f7fd f813 	bl	8004832 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d903      	bls.n	800781c <HAL_RCC_OscConfig+0x550>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	2b07      	cmp	r3, #7
 800781a:	d904      	bls.n	8007826 <HAL_RCC_OscConfig+0x55a>
 800781c:	f640 6113 	movw	r1, #3603	; 0xe13
 8007820:	4806      	ldr	r0, [pc, #24]	; (800783c <HAL_RCC_OscConfig+0x570>)
 8007822:	f7fd f806 	bl	8004832 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007826:	4b07      	ldr	r3, [pc, #28]	; (8007844 <HAL_RCC_OscConfig+0x578>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7fd fdde 	bl	80053ec <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007832:	e012      	b.n	800785a <HAL_RCC_OscConfig+0x58e>
 8007834:	40023800 	.word	0x40023800
 8007838:	42470e80 	.word	0x42470e80
 800783c:	0800bf88 	.word	0x0800bf88
 8007840:	40007000 	.word	0x40007000
 8007844:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007848:	f7fd fdd0 	bl	80053ec <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e08d      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800785a:	4b49      	ldr	r3, [pc, #292]	; (8007980 <HAL_RCC_OscConfig+0x6b4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69da      	ldr	r2, [r3, #28]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	019b      	lsls	r3, r3, #6
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	3b01      	subs	r3, #1
 8007880:	041b      	lsls	r3, r3, #16
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	061b      	lsls	r3, r3, #24
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	071b      	lsls	r3, r3, #28
 8007892:	493b      	ldr	r1, [pc, #236]	; (8007980 <HAL_RCC_OscConfig+0x6b4>)
 8007894:	4313      	orrs	r3, r2
 8007896:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007898:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <HAL_RCC_OscConfig+0x6b8>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789e:	f7fd fda5 	bl	80053ec <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a6:	f7fd fda1 	bl	80053ec <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e05e      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b8:	4b31      	ldr	r3, [pc, #196]	; (8007980 <HAL_RCC_OscConfig+0x6b4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <HAL_RCC_OscConfig+0x5da>
 80078c4:	e056      	b.n	8007974 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c6:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <HAL_RCC_OscConfig+0x6b8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fd fd8e 	bl	80053ec <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078d4:	f7fd fd8a 	bl	80053ec <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e047      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e6:	4b26      	ldr	r3, [pc, #152]	; (8007980 <HAL_RCC_OscConfig+0x6b4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCC_OscConfig+0x608>
 80078f2:	e03f      	b.n	8007974 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e03a      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007900:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <HAL_RCC_OscConfig+0x6b4>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d030      	beq.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007918:	429a      	cmp	r2, r3
 800791a:	d129      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007926:	429a      	cmp	r2, r3
 8007928:	d122      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007938:	4293      	cmp	r3, r2
 800793a:	d119      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	3b01      	subs	r3, #1
 800794a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800794c:	429a      	cmp	r2, r3
 800794e:	d10f      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800795c:	429a      	cmp	r2, r3
 800795e:	d107      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d001      	beq.n	8007974 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40023800 	.word	0x40023800
 8007984:	42470060 	.word	0x42470060

08007988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e184      	b.n	8007ca4 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a72      	ldr	r2, [pc, #456]	; (8007b68 <HAL_SPI_Init+0x1e0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d013      	beq.n	80079cc <HAL_SPI_Init+0x44>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a70      	ldr	r2, [pc, #448]	; (8007b6c <HAL_SPI_Init+0x1e4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <HAL_SPI_Init+0x44>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a6f      	ldr	r2, [pc, #444]	; (8007b70 <HAL_SPI_Init+0x1e8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d009      	beq.n	80079cc <HAL_SPI_Init+0x44>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6d      	ldr	r2, [pc, #436]	; (8007b74 <HAL_SPI_Init+0x1ec>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <HAL_SPI_Init+0x44>
 80079c2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80079c6:	486c      	ldr	r0, [pc, #432]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 80079c8:	f7fc ff33 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <HAL_SPI_Init+0x60>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079dc:	d004      	beq.n	80079e8 <HAL_SPI_Init+0x60>
 80079de:	f240 1143 	movw	r1, #323	; 0x143
 80079e2:	4865      	ldr	r0, [pc, #404]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 80079e4:	f7fc ff25 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <HAL_SPI_Init+0x86>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d009      	beq.n	8007a0e <HAL_SPI_Init+0x86>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a02:	d004      	beq.n	8007a0e <HAL_SPI_Init+0x86>
 8007a04:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007a08:	485b      	ldr	r0, [pc, #364]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007a0a:	f7fc ff12 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a16:	d008      	beq.n	8007a2a <HAL_SPI_Init+0xa2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <HAL_SPI_Init+0xa2>
 8007a20:	f240 1145 	movw	r1, #325	; 0x145
 8007a24:	4854      	ldr	r0, [pc, #336]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007a26:	f7fc ff04 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a32:	d00d      	beq.n	8007a50 <HAL_SPI_Init+0xc8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_SPI_Init+0xc8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a44:	d004      	beq.n	8007a50 <HAL_SPI_Init+0xc8>
 8007a46:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007a4a:	484b      	ldr	r0, [pc, #300]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007a4c:	f7fc fef1 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d020      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d01c      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d018      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b18      	cmp	r3, #24
 8007a6e:	d014      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d010      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b28      	cmp	r3, #40	; 0x28
 8007a7e:	d00c      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b30      	cmp	r3, #48	; 0x30
 8007a86:	d008      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b38      	cmp	r3, #56	; 0x38
 8007a8e:	d004      	beq.n	8007a9a <HAL_SPI_Init+0x112>
 8007a90:	f240 1147 	movw	r1, #327	; 0x147
 8007a94:	4838      	ldr	r0, [pc, #224]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007a96:	f7fc fecc 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_SPI_Init+0x12c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d004      	beq.n	8007ab4 <HAL_SPI_Init+0x12c>
 8007aaa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007aae:	4832      	ldr	r0, [pc, #200]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007ab0:	f7fc febf 	bl	8004832 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_SPI_Init+0x146>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d004      	beq.n	8007ace <HAL_SPI_Init+0x146>
 8007ac4:	f240 1149 	movw	r1, #329	; 0x149
 8007ac8:	482b      	ldr	r0, [pc, #172]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007aca:	f7fc feb2 	bl	8004832 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d152      	bne.n	8007b7c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <HAL_SPI_Init+0x168>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d004      	beq.n	8007af0 <HAL_SPI_Init+0x168>
 8007ae6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007aea:	4823      	ldr	r0, [pc, #140]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007aec:	f7fc fea1 	bl	8004832 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <HAL_SPI_Init+0x182>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d004      	beq.n	8007b0a <HAL_SPI_Init+0x182>
 8007b00:	f240 114d 	movw	r1, #333	; 0x14d
 8007b04:	481c      	ldr	r0, [pc, #112]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007b06:	f7fc fe94 	bl	8004832 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b12:	d125      	bne.n	8007b60 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d05a      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d056      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d052      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b18      	cmp	r3, #24
 8007b32:	d04e      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d04a      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	2b28      	cmp	r3, #40	; 0x28
 8007b42:	d046      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d042      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b38      	cmp	r3, #56	; 0x38
 8007b52:	d03e      	beq.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b54:	f240 1151 	movw	r1, #337	; 0x151
 8007b58:	4807      	ldr	r0, [pc, #28]	; (8007b78 <HAL_SPI_Init+0x1f0>)
 8007b5a:	f7fc fe6a 	bl	8004832 <assert_failed>
 8007b5e:	e038      	b.n	8007bd2 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	61da      	str	r2, [r3, #28]
 8007b66:	e034      	b.n	8007bd2 <HAL_SPI_Init+0x24a>
 8007b68:	40013000 	.word	0x40013000
 8007b6c:	40003800 	.word	0x40003800
 8007b70:	40003c00 	.word	0x40003c00
 8007b74:	40013400 	.word	0x40013400
 8007b78:	0800bfc4 	.word	0x0800bfc4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d020      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d01c      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d018      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b18      	cmp	r3, #24
 8007b9a:	d014      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d010      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	2b28      	cmp	r3, #40	; 0x28
 8007baa:	d00c      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d008      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b38      	cmp	r3, #56	; 0x38
 8007bba:	d004      	beq.n	8007bc6 <HAL_SPI_Init+0x23e>
 8007bbc:	f240 115b 	movw	r1, #347	; 0x15b
 8007bc0:	483a      	ldr	r0, [pc, #232]	; (8007cac <HAL_SPI_Init+0x324>)
 8007bc2:	f7fc fe36 	bl	8004832 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7fc ff47 	bl	8004a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c56:	ea42 0103 	orr.w	r1, r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	0c1b      	lsrs	r3, r3, #16
 8007c70:	f003 0104 	and.w	r1, r3, #4
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	f003 0210 	and.w	r2, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	0800bfc4 	.word	0x0800bfc4

08007cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HAL_SPI_Transmit+0x30>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd4:	d004      	beq.n	8007ce0 <HAL_SPI_Transmit+0x30>
 8007cd6:	f240 310a 	movw	r1, #778	; 0x30a
 8007cda:	4893      	ldr	r0, [pc, #588]	; (8007f28 <HAL_SPI_Transmit+0x278>)
 8007cdc:	f7fc fda9 	bl	8004832 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_SPI_Transmit+0x3e>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e128      	b.n	8007f40 <HAL_SPI_Transmit+0x290>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf6:	f7fd fb79 	bl	80053ec <HAL_GetTick>
 8007cfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d002      	beq.n	8007d12 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d10:	e10d      	b.n	8007f2e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_SPI_Transmit+0x6e>
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d22:	e104      	b.n	8007f2e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2203      	movs	r2, #3
 8007d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	88fa      	ldrh	r2, [r7, #6]
 8007d42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6a:	d10f      	bne.n	8007d8c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b40      	cmp	r3, #64	; 0x40
 8007d98:	d007      	beq.n	8007daa <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db2:	d14b      	bne.n	8007e4c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_SPI_Transmit+0x112>
 8007dbc:	8afb      	ldrh	r3, [r7, #22]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d13e      	bne.n	8007e40 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	881a      	ldrh	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007de6:	e02b      	b.n	8007e40 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d112      	bne.n	8007e1c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	881a      	ldrh	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e1a:	e011      	b.n	8007e40 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e1c:	f7fd fae6 	bl	80053ec <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d803      	bhi.n	8007e34 <HAL_SPI_Transmit+0x184>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d102      	bne.n	8007e3a <HAL_SPI_Transmit+0x18a>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e3e:	e076      	b.n	8007f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1ce      	bne.n	8007de8 <HAL_SPI_Transmit+0x138>
 8007e4a:	e04c      	b.n	8007ee6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_Transmit+0x1aa>
 8007e54:	8afb      	ldrh	r3, [r7, #22]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d140      	bne.n	8007edc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e80:	e02c      	b.n	8007edc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d113      	bne.n	8007eb8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007eb6:	e011      	b.n	8007edc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb8:	f7fd fa98 	bl	80053ec <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d803      	bhi.n	8007ed0 <HAL_SPI_Transmit+0x220>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	d102      	bne.n	8007ed6 <HAL_SPI_Transmit+0x226>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007eda:	e028      	b.n	8007f2e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1cd      	bne.n	8007e82 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fbda 	bl	80086a4 <SPI_EndRxTxTransaction>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f04:	2300      	movs	r3, #0
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e002      	b.n	8007f2e <HAL_SPI_Transmit+0x27e>
 8007f28:	0800bfc4 	.word	0x0800bfc4
  }

error:
 8007f2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	4613      	mov	r3, r2
 8007f56:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f64:	d112      	bne.n	8007f8c <HAL_SPI_Receive+0x44>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10e      	bne.n	8007f8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2204      	movs	r2, #4
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f76:	88fa      	ldrh	r2, [r7, #6]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f8f2 	bl	800816c <HAL_SPI_TransmitReceive>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	e0ea      	b.n	8008162 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_SPI_Receive+0x52>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0e3      	b.n	8008162 <HAL_SPI_Receive+0x21a>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fa2:	f7fd fa23 	bl	80053ec <HAL_GetTick>
 8007fa6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d002      	beq.n	8007fba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fb8:	e0ca      	b.n	8008150 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <HAL_SPI_Receive+0x7e>
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fca:	e0c1      	b.n	8008150 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008012:	d10f      	bne.n	8008034 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008032:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b40      	cmp	r3, #64	; 0x40
 8008040:	d007      	beq.n	8008052 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008050:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d162      	bne.n	8008120 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800805a:	e02e      	b.n	80080ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d115      	bne.n	8008096 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f103 020c 	add.w	r2, r3, #12
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008094:	e011      	b.n	80080ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008096:	f7fd f9a9 	bl	80053ec <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d803      	bhi.n	80080ae <HAL_SPI_Receive+0x166>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d102      	bne.n	80080b4 <HAL_SPI_Receive+0x16c>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080b8:	e04a      	b.n	8008150 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cb      	bne.n	800805c <HAL_SPI_Receive+0x114>
 80080c4:	e031      	b.n	800812a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d113      	bne.n	80080fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	b292      	uxth	r2, r2
 80080e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	1c9a      	adds	r2, r3, #2
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080fa:	e011      	b.n	8008120 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080fc:	f7fd f976 	bl	80053ec <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d803      	bhi.n	8008114 <HAL_SPI_Receive+0x1cc>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	d102      	bne.n	800811a <HAL_SPI_Receive+0x1d2>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800811e:	e017      	b.n	8008150 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1cd      	bne.n	80080c6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 fa52 	bl	80085d8 <SPI_EndRxTransaction>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
 800814c:	e000      	b.n	8008150 <HAL_SPI_Receive+0x208>
  }

error :
 800814e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08c      	sub	sp, #48	; 0x30
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800817a:	2301      	movs	r3, #1
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x2a>
 800818c:	f240 417e 	movw	r1, #1150	; 0x47e
 8008190:	4884      	ldr	r0, [pc, #528]	; (80083a4 <HAL_SPI_TransmitReceive+0x238>)
 8008192:	f7fc fb4e 	bl	8004832 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x38>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e18d      	b.n	80084c0 <HAL_SPI_TransmitReceive+0x354>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ac:	f7fd f91e 	bl	80053ec <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081c2:	887b      	ldrh	r3, [r7, #2]
 80081c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00f      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x82>
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d4:	d107      	bne.n	80081e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <HAL_SPI_TransmitReceive+0x7a>
 80081de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d003      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
 80081e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081ec:	e15e      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_SPI_TransmitReceive+0x94>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <HAL_SPI_TransmitReceive+0x94>
 80081fa:	887b      	ldrh	r3, [r7, #2]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008206:	e151      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b04      	cmp	r3, #4
 8008212:	d003      	beq.n	800821c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2205      	movs	r2, #5
 8008218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	887a      	ldrh	r2, [r7, #2]
 8008232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	887a      	ldrh	r2, [r7, #2]
 800823e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	887a      	ldrh	r2, [r7, #2]
 8008244:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d007      	beq.n	8008270 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800826e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008278:	d178      	bne.n	800836c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <HAL_SPI_TransmitReceive+0x11c>
 8008282:	8b7b      	ldrh	r3, [r7, #26]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d166      	bne.n	8008356 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	881a      	ldrh	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ac:	e053      	b.n	8008356 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d11b      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x188>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d016      	beq.n	80082f4 <HAL_SPI_TransmitReceive+0x188>
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d113      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	881a      	ldrh	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	1c9a      	adds	r2, r3, #2
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d119      	bne.n	8008336 <HAL_SPI_TransmitReceive+0x1ca>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d014      	beq.n	8008336 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	b292      	uxth	r2, r2
 8008318:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	1c9a      	adds	r2, r3, #2
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008332:	2301      	movs	r3, #1
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008336:	f7fd f859 	bl	80053ec <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008342:	429a      	cmp	r2, r3
 8008344:	d807      	bhi.n	8008356 <HAL_SPI_TransmitReceive+0x1ea>
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d003      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008354:	e0aa      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1a6      	bne.n	80082ae <HAL_SPI_TransmitReceive+0x142>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1a1      	bne.n	80082ae <HAL_SPI_TransmitReceive+0x142>
 800836a:	e07f      	b.n	800846c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_SPI_TransmitReceive+0x20e>
 8008374:	8b7b      	ldrh	r3, [r7, #26]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d16e      	bne.n	8008458 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a0:	e05a      	b.n	8008458 <HAL_SPI_TransmitReceive+0x2ec>
 80083a2:	bf00      	nop
 80083a4:	0800bfc4 	.word	0x0800bfc4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d11c      	bne.n	80083f0 <HAL_SPI_TransmitReceive+0x284>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d017      	beq.n	80083f0 <HAL_SPI_TransmitReceive+0x284>
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d114      	bne.n	80083f0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d119      	bne.n	8008432 <HAL_SPI_TransmitReceive+0x2c6>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d014      	beq.n	8008432 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800842e:	2301      	movs	r3, #1
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008432:	f7fc ffdb 	bl	80053ec <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800843e:	429a      	cmp	r2, r3
 8008440:	d803      	bhi.n	800844a <HAL_SPI_TransmitReceive+0x2de>
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d102      	bne.n	8008450 <HAL_SPI_TransmitReceive+0x2e4>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	d103      	bne.n	8008458 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008456:	e029      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1a2      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x23c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d19d      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800846c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f917 	bl	80086a4 <SPI_EndRxTxTransaction>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008488:	e010      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	e000      	b.n	80084ac <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80084aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3730      	adds	r7, #48	; 0x30
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	4613      	mov	r3, r2
 80084d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084d8:	f7fc ff88 	bl	80053ec <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	1a9b      	subs	r3, r3, r2
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4413      	add	r3, r2
 80084e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084e8:	f7fc ff80 	bl	80053ec <HAL_GetTick>
 80084ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084ee:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	015b      	lsls	r3, r3, #5
 80084f4:	0d1b      	lsrs	r3, r3, #20
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	fb02 f303 	mul.w	r3, r2, r3
 80084fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084fe:	e054      	b.n	80085aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d050      	beq.n	80085aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008508:	f7fc ff70 	bl	80053ec <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	429a      	cmp	r2, r3
 8008516:	d902      	bls.n	800851e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d13d      	bne.n	800859a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800852c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008536:	d111      	bne.n	800855c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008540:	d004      	beq.n	800854c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854a:	d107      	bne.n	800855c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800855a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008564:	d10f      	bne.n	8008586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e017      	b.n	80085ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4013      	ands	r3, r2
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	bf0c      	ite	eq
 80085ba:	2301      	moveq	r3, #1
 80085bc:	2300      	movne	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d19b      	bne.n	8008500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200001bc 	.word	0x200001bc

080085d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ec:	d111      	bne.n	8008612 <SPI_EndRxTransaction+0x3a>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f6:	d004      	beq.n	8008602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008600:	d107      	bne.n	8008612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800861a:	d12a      	bne.n	8008672 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008624:	d012      	beq.n	800864c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff ff49 	bl	80084c8 <SPI_WaitFlagStateUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d02d      	beq.n	8008698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008640:	f043 0220 	orr.w	r2, r3, #32
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e026      	b.n	800869a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	2101      	movs	r1, #1
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7ff ff36 	bl	80084c8 <SPI_WaitFlagStateUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01a      	beq.n	8008698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e013      	b.n	800869a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	2101      	movs	r1, #1
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff ff23 	bl	80084c8 <SPI_WaitFlagStateUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868c:	f043 0220 	orr.w	r2, r3, #32
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e000      	b.n	800869a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <SPI_EndRxTxTransaction+0x7c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1b      	ldr	r2, [pc, #108]	; (8008724 <SPI_EndRxTxTransaction+0x80>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0d5b      	lsrs	r3, r3, #21
 80086bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ce:	d112      	bne.n	80086f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2180      	movs	r1, #128	; 0x80
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff fef4 	bl	80084c8 <SPI_WaitFlagStateUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ea:	f043 0220 	orr.w	r2, r3, #32
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e00f      	b.n	8008716 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	3b01      	subs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d0f2      	beq.n	80086f6 <SPI_EndRxTxTransaction+0x52>
 8008710:	e000      	b.n	8008714 <SPI_EndRxTxTransaction+0x70>
        break;
 8008712:	bf00      	nop
  }

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200001bc 	.word	0x200001bc
 8008724:	165e9f81 	.word	0x165e9f81

08008728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0c5      	b.n	80088c6 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a64      	ldr	r2, [pc, #400]	; (80088d0 <HAL_TIM_Base_Init+0x1a8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d045      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d040      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a60      	ldr	r2, [pc, #384]	; (80088d4 <HAL_TIM_Base_Init+0x1ac>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d03b      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a5e      	ldr	r2, [pc, #376]	; (80088d8 <HAL_TIM_Base_Init+0x1b0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d036      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a5d      	ldr	r2, [pc, #372]	; (80088dc <HAL_TIM_Base_Init+0x1b4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d031      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a5b      	ldr	r2, [pc, #364]	; (80088e0 <HAL_TIM_Base_Init+0x1b8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d02c      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a5a      	ldr	r2, [pc, #360]	; (80088e4 <HAL_TIM_Base_Init+0x1bc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d027      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a58      	ldr	r2, [pc, #352]	; (80088e8 <HAL_TIM_Base_Init+0x1c0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d022      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a57      	ldr	r2, [pc, #348]	; (80088ec <HAL_TIM_Base_Init+0x1c4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d01d      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a55      	ldr	r2, [pc, #340]	; (80088f0 <HAL_TIM_Base_Init+0x1c8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d018      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a54      	ldr	r2, [pc, #336]	; (80088f4 <HAL_TIM_Base_Init+0x1cc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d013      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a52      	ldr	r2, [pc, #328]	; (80088f8 <HAL_TIM_Base_Init+0x1d0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00e      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a51      	ldr	r2, [pc, #324]	; (80088fc <HAL_TIM_Base_Init+0x1d4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d009      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a4f      	ldr	r2, [pc, #316]	; (8008900 <HAL_TIM_Base_Init+0x1d8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_TIM_Base_Init+0xa8>
 80087c6:	f240 1113 	movw	r1, #275	; 0x113
 80087ca:	484e      	ldr	r0, [pc, #312]	; (8008904 <HAL_TIM_Base_Init+0x1dc>)
 80087cc:	f7fc f831 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d014      	beq.n	8008802 <HAL_TIM_Base_Init+0xda>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2b10      	cmp	r3, #16
 80087de:	d010      	beq.n	8008802 <HAL_TIM_Base_Init+0xda>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	d00c      	beq.n	8008802 <HAL_TIM_Base_Init+0xda>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d008      	beq.n	8008802 <HAL_TIM_Base_Init+0xda>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2b60      	cmp	r3, #96	; 0x60
 80087f6:	d004      	beq.n	8008802 <HAL_TIM_Base_Init+0xda>
 80087f8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80087fc:	4841      	ldr	r0, [pc, #260]	; (8008904 <HAL_TIM_Base_Init+0x1dc>)
 80087fe:	f7fc f818 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00e      	beq.n	8008828 <HAL_TIM_Base_Init+0x100>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008812:	d009      	beq.n	8008828 <HAL_TIM_Base_Init+0x100>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881c:	d004      	beq.n	8008828 <HAL_TIM_Base_Init+0x100>
 800881e:	f240 1115 	movw	r1, #277	; 0x115
 8008822:	4838      	ldr	r0, [pc, #224]	; (8008904 <HAL_TIM_Base_Init+0x1dc>)
 8008824:	f7fc f805 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_TIM_Base_Init+0x11a>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	2b80      	cmp	r3, #128	; 0x80
 8008836:	d004      	beq.n	8008842 <HAL_TIM_Base_Init+0x11a>
 8008838:	f44f 718b 	mov.w	r1, #278	; 0x116
 800883c:	4831      	ldr	r0, [pc, #196]	; (8008904 <HAL_TIM_Base_Init+0x1dc>)
 800883e:	f7fb fff8 	bl	8004832 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fc fa64 	bl	8004d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3304      	adds	r3, #4
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f001 fbb8 	bl	8009fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40001000 	.word	0x40001000
 80088e4:	40001400 	.word	0x40001400
 80088e8:	40010400 	.word	0x40010400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800
 80088f8:	40001800 	.word	0x40001800
 80088fc:	40001c00 	.word	0x40001c00
 8008900:	40002000 	.word	0x40002000
 8008904:	0800bffc 	.word	0x0800bffc

08008908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a51      	ldr	r2, [pc, #324]	; (8008a5c <HAL_TIM_Base_Start_IT+0x154>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d045      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008922:	d040      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a4d      	ldr	r2, [pc, #308]	; (8008a60 <HAL_TIM_Base_Start_IT+0x158>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d03b      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a4c      	ldr	r2, [pc, #304]	; (8008a64 <HAL_TIM_Base_Start_IT+0x15c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d036      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a4a      	ldr	r2, [pc, #296]	; (8008a68 <HAL_TIM_Base_Start_IT+0x160>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d031      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a49      	ldr	r2, [pc, #292]	; (8008a6c <HAL_TIM_Base_Start_IT+0x164>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d02c      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a47      	ldr	r2, [pc, #284]	; (8008a70 <HAL_TIM_Base_Start_IT+0x168>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d027      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a46      	ldr	r2, [pc, #280]	; (8008a74 <HAL_TIM_Base_Start_IT+0x16c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d022      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a44      	ldr	r2, [pc, #272]	; (8008a78 <HAL_TIM_Base_Start_IT+0x170>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01d      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a43      	ldr	r2, [pc, #268]	; (8008a7c <HAL_TIM_Base_Start_IT+0x174>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d018      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a41      	ldr	r2, [pc, #260]	; (8008a80 <HAL_TIM_Base_Start_IT+0x178>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a40      	ldr	r2, [pc, #256]	; (8008a84 <HAL_TIM_Base_Start_IT+0x17c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a3e      	ldr	r2, [pc, #248]	; (8008a88 <HAL_TIM_Base_Start_IT+0x180>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a3d      	ldr	r2, [pc, #244]	; (8008a8c <HAL_TIM_Base_Start_IT+0x184>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_TIM_Base_Start_IT+0x9e>
 800899c:	f240 11cf 	movw	r1, #463	; 0x1cf
 80089a0:	483b      	ldr	r0, [pc, #236]	; (8008a90 <HAL_TIM_Base_Start_IT+0x188>)
 80089a2:	f7fb ff46 	bl	8004832 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d001      	beq.n	80089b6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e04e      	b.n	8008a54 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0201 	orr.w	r2, r2, #1
 80089cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a22      	ldr	r2, [pc, #136]	; (8008a5c <HAL_TIM_Base_Start_IT+0x154>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d022      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e0:	d01d      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <HAL_TIM_Base_Start_IT+0x158>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d018      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1c      	ldr	r2, [pc, #112]	; (8008a64 <HAL_TIM_Base_Start_IT+0x15c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1b      	ldr	r2, [pc, #108]	; (8008a68 <HAL_TIM_Base_Start_IT+0x160>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <HAL_TIM_Base_Start_IT+0x16c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d009      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <HAL_TIM_Base_Start_IT+0x170>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <HAL_TIM_Base_Start_IT+0x116>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <HAL_TIM_Base_Start_IT+0x17c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d111      	bne.n	8008a42 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d010      	beq.n	8008a52 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a40:	e007      	b.n	8008a52 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0201 	orr.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40000400 	.word	0x40000400
 8008a64:	40000800 	.word	0x40000800
 8008a68:	40000c00 	.word	0x40000c00
 8008a6c:	40001000 	.word	0x40001000
 8008a70:	40001400 	.word	0x40001400
 8008a74:	40010400 	.word	0x40010400
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40014400 	.word	0x40014400
 8008a80:	40014800 	.word	0x40014800
 8008a84:	40001800 	.word	0x40001800
 8008a88:	40001c00 	.word	0x40001c00
 8008a8c:	40002000 	.word	0x40002000
 8008a90:	0800bffc 	.word	0x0800bffc

08008a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e0c5      	b.n	8008c32 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a64      	ldr	r2, [pc, #400]	; (8008c3c <HAL_TIM_PWM_Init+0x1a8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d045      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab8:	d040      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a60      	ldr	r2, [pc, #384]	; (8008c40 <HAL_TIM_PWM_Init+0x1ac>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d03b      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a5e      	ldr	r2, [pc, #376]	; (8008c44 <HAL_TIM_PWM_Init+0x1b0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d036      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a5d      	ldr	r2, [pc, #372]	; (8008c48 <HAL_TIM_PWM_Init+0x1b4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d031      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a5b      	ldr	r2, [pc, #364]	; (8008c4c <HAL_TIM_PWM_Init+0x1b8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d02c      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a5a      	ldr	r2, [pc, #360]	; (8008c50 <HAL_TIM_PWM_Init+0x1bc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d027      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a58      	ldr	r2, [pc, #352]	; (8008c54 <HAL_TIM_PWM_Init+0x1c0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d022      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a57      	ldr	r2, [pc, #348]	; (8008c58 <HAL_TIM_PWM_Init+0x1c4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01d      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a55      	ldr	r2, [pc, #340]	; (8008c5c <HAL_TIM_PWM_Init+0x1c8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d018      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a54      	ldr	r2, [pc, #336]	; (8008c60 <HAL_TIM_PWM_Init+0x1cc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d013      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a52      	ldr	r2, [pc, #328]	; (8008c64 <HAL_TIM_PWM_Init+0x1d0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d00e      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a51      	ldr	r2, [pc, #324]	; (8008c68 <HAL_TIM_PWM_Init+0x1d4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d009      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a4f      	ldr	r2, [pc, #316]	; (8008c6c <HAL_TIM_PWM_Init+0x1d8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d004      	beq.n	8008b3c <HAL_TIM_PWM_Init+0xa8>
 8008b32:	f240 5129 	movw	r1, #1321	; 0x529
 8008b36:	484e      	ldr	r0, [pc, #312]	; (8008c70 <HAL_TIM_PWM_Init+0x1dc>)
 8008b38:	f7fb fe7b 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d014      	beq.n	8008b6e <HAL_TIM_PWM_Init+0xda>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b10      	cmp	r3, #16
 8008b4a:	d010      	beq.n	8008b6e <HAL_TIM_PWM_Init+0xda>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d00c      	beq.n	8008b6e <HAL_TIM_PWM_Init+0xda>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2b40      	cmp	r3, #64	; 0x40
 8008b5a:	d008      	beq.n	8008b6e <HAL_TIM_PWM_Init+0xda>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b60      	cmp	r3, #96	; 0x60
 8008b62:	d004      	beq.n	8008b6e <HAL_TIM_PWM_Init+0xda>
 8008b64:	f240 512a 	movw	r1, #1322	; 0x52a
 8008b68:	4841      	ldr	r0, [pc, #260]	; (8008c70 <HAL_TIM_PWM_Init+0x1dc>)
 8008b6a:	f7fb fe62 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00e      	beq.n	8008b94 <HAL_TIM_PWM_Init+0x100>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7e:	d009      	beq.n	8008b94 <HAL_TIM_PWM_Init+0x100>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b88:	d004      	beq.n	8008b94 <HAL_TIM_PWM_Init+0x100>
 8008b8a:	f240 512b 	movw	r1, #1323	; 0x52b
 8008b8e:	4838      	ldr	r0, [pc, #224]	; (8008c70 <HAL_TIM_PWM_Init+0x1dc>)
 8008b90:	f7fb fe4f 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_TIM_PWM_Init+0x11a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	2b80      	cmp	r3, #128	; 0x80
 8008ba2:	d004      	beq.n	8008bae <HAL_TIM_PWM_Init+0x11a>
 8008ba4:	f240 512c 	movw	r1, #1324	; 0x52c
 8008ba8:	4831      	ldr	r0, [pc, #196]	; (8008c70 <HAL_TIM_PWM_Init+0x1dc>)
 8008baa:	f7fb fe42 	bl	8004832 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fc f910 	bl	8004de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f001 fa02 	bl	8009fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40001000 	.word	0x40001000
 8008c50:	40001400 	.word	0x40001400
 8008c54:	40010400 	.word	0x40010400
 8008c58:	40014000 	.word	0x40014000
 8008c5c:	40014400 	.word	0x40014400
 8008c60:	40014800 	.word	0x40014800
 8008c64:	40001800 	.word	0x40001800
 8008c68:	40001c00 	.word	0x40001c00
 8008c6c:	40002000 	.word	0x40002000
 8008c70:	0800bffc 	.word	0x0800bffc

08008c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a84      	ldr	r2, [pc, #528]	; (8008e94 <HAL_TIM_PWM_Start+0x220>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d10f      	bne.n	8008ca8 <HAL_TIM_PWM_Start+0x34>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 809f 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	f000 809b 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	f000 8097 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b0c      	cmp	r3, #12
 8008ca4:	f000 8093 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb0:	d10e      	bne.n	8008cd0 <HAL_TIM_PWM_Start+0x5c>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 808a 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	f000 8086 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	f000 8082 	beq.w	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	d07e      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a70      	ldr	r2, [pc, #448]	; (8008e98 <HAL_TIM_PWM_Start+0x224>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_TIM_PWM_Start+0x7e>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d076      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d073      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d070      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d06d      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a69      	ldr	r2, [pc, #420]	; (8008e9c <HAL_TIM_PWM_Start+0x228>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d10b      	bne.n	8008d14 <HAL_TIM_PWM_Start+0xa0>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d065      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d062      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d05f      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b0c      	cmp	r3, #12
 8008d12:	d05c      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a61      	ldr	r2, [pc, #388]	; (8008ea0 <HAL_TIM_PWM_Start+0x22c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d10b      	bne.n	8008d36 <HAL_TIM_PWM_Start+0xc2>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d054      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d051      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d04e      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b0c      	cmp	r3, #12
 8008d34:	d04b      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a5a      	ldr	r2, [pc, #360]	; (8008ea4 <HAL_TIM_PWM_Start+0x230>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d10b      	bne.n	8008d58 <HAL_TIM_PWM_Start+0xe4>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d043      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d040      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d03d      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b0c      	cmp	r3, #12
 8008d56:	d03a      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a52      	ldr	r2, [pc, #328]	; (8008ea8 <HAL_TIM_PWM_Start+0x234>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d105      	bne.n	8008d6e <HAL_TIM_PWM_Start+0xfa>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d032      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d02f      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4e      	ldr	r2, [pc, #312]	; (8008eac <HAL_TIM_PWM_Start+0x238>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d102      	bne.n	8008d7e <HAL_TIM_PWM_Start+0x10a>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d027      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a4b      	ldr	r2, [pc, #300]	; (8008eb0 <HAL_TIM_PWM_Start+0x23c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d102      	bne.n	8008d8e <HAL_TIM_PWM_Start+0x11a>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01f      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a48      	ldr	r2, [pc, #288]	; (8008eb4 <HAL_TIM_PWM_Start+0x240>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d105      	bne.n	8008da4 <HAL_TIM_PWM_Start+0x130>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d017      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d014      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a43      	ldr	r2, [pc, #268]	; (8008eb8 <HAL_TIM_PWM_Start+0x244>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d102      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x140>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00c      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a40      	ldr	r2, [pc, #256]	; (8008ebc <HAL_TIM_PWM_Start+0x248>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d102      	bne.n	8008dc4 <HAL_TIM_PWM_Start+0x150>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <HAL_TIM_PWM_Start+0x15a>
 8008dc4:	f240 51af 	movw	r1, #1455	; 0x5af
 8008dc8:	483d      	ldr	r0, [pc, #244]	; (8008ec0 <HAL_TIM_PWM_Start+0x24c>)
 8008dca:	f7fb fd32 	bl	8004832 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <HAL_TIM_PWM_Start+0x174>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e022      	b.n	8008e2e <HAL_TIM_PWM_Start+0x1ba>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d109      	bne.n	8008e02 <HAL_TIM_PWM_Start+0x18e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	bf14      	ite	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	2300      	moveq	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	e015      	b.n	8008e2e <HAL_TIM_PWM_Start+0x1ba>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d109      	bne.n	8008e1c <HAL_TIM_PWM_Start+0x1a8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	bf14      	ite	ne
 8008e14:	2301      	movne	r3, #1
 8008e16:	2300      	moveq	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	e008      	b.n	8008e2e <HAL_TIM_PWM_Start+0x1ba>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf14      	ite	ne
 8008e28:	2301      	movne	r3, #1
 8008e2a:	2300      	moveq	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e094      	b.n	8008f60 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <HAL_TIM_PWM_Start+0x1d2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e44:	e013      	b.n	8008e6e <HAL_TIM_PWM_Start+0x1fa>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_PWM_Start+0x1e2>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e54:	e00b      	b.n	8008e6e <HAL_TIM_PWM_Start+0x1fa>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d104      	bne.n	8008e66 <HAL_TIM_PWM_Start+0x1f2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e64:	e003      	b.n	8008e6e <HAL_TIM_PWM_Start+0x1fa>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 fc28 	bl	800a6cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a04      	ldr	r2, [pc, #16]	; (8008e94 <HAL_TIM_PWM_Start+0x220>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d004      	beq.n	8008e90 <HAL_TIM_PWM_Start+0x21c>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a06      	ldr	r2, [pc, #24]	; (8008ea4 <HAL_TIM_PWM_Start+0x230>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d119      	bne.n	8008ec4 <HAL_TIM_PWM_Start+0x250>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e018      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x252>
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40010400 	.word	0x40010400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800
 8008eb4:	40001800 	.word	0x40001800
 8008eb8:	40001c00 	.word	0x40001c00
 8008ebc:	40002000 	.word	0x40002000
 8008ec0:	0800bffc 	.word	0x0800bffc
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a22      	ldr	r2, [pc, #136]	; (8008f68 <HAL_TIM_PWM_Start+0x2f4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d022      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eec:	d01d      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <HAL_TIM_PWM_Start+0x2f8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d018      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <HAL_TIM_PWM_Start+0x2fc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d013      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <HAL_TIM_PWM_Start+0x300>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00e      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a19      	ldr	r2, [pc, #100]	; (8008f78 <HAL_TIM_PWM_Start+0x304>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d009      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a18      	ldr	r2, [pc, #96]	; (8008f7c <HAL_TIM_PWM_Start+0x308>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d004      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x2b6>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <HAL_TIM_PWM_Start+0x30c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d111      	bne.n	8008f4e <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b06      	cmp	r3, #6
 8008f3a:	d010      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0201 	orr.w	r2, r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	e007      	b.n	8008f5e <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0201 	orr.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40010400 	.word	0x40010400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40001800 	.word	0x40001800

08008f84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e198      	b.n	80092ca <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a7d      	ldr	r2, [pc, #500]	; (8009194 <HAL_TIM_Encoder_Init+0x210>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d027      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008faa:	d022      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a79      	ldr	r2, [pc, #484]	; (8009198 <HAL_TIM_Encoder_Init+0x214>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01d      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a78      	ldr	r2, [pc, #480]	; (800919c <HAL_TIM_Encoder_Init+0x218>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d018      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a76      	ldr	r2, [pc, #472]	; (80091a0 <HAL_TIM_Encoder_Init+0x21c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d013      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a75      	ldr	r2, [pc, #468]	; (80091a4 <HAL_TIM_Encoder_Init+0x220>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00e      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a73      	ldr	r2, [pc, #460]	; (80091a8 <HAL_TIM_Encoder_Init+0x224>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d009      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a72      	ldr	r2, [pc, #456]	; (80091ac <HAL_TIM_Encoder_Init+0x228>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d004      	beq.n	8008ff2 <HAL_TIM_Encoder_Init+0x6e>
 8008fe8:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8008fec:	4870      	ldr	r0, [pc, #448]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8008fee:	f7fb fc20 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d014      	beq.n	8009024 <HAL_TIM_Encoder_Init+0xa0>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b10      	cmp	r3, #16
 8009000:	d010      	beq.n	8009024 <HAL_TIM_Encoder_Init+0xa0>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b20      	cmp	r3, #32
 8009008:	d00c      	beq.n	8009024 <HAL_TIM_Encoder_Init+0xa0>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d008      	beq.n	8009024 <HAL_TIM_Encoder_Init+0xa0>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b60      	cmp	r3, #96	; 0x60
 8009018:	d004      	beq.n	8009024 <HAL_TIM_Encoder_Init+0xa0>
 800901a:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800901e:	4864      	ldr	r0, [pc, #400]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009020:	f7fb fc07 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00e      	beq.n	800904a <HAL_TIM_Encoder_Init+0xc6>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009034:	d009      	beq.n	800904a <HAL_TIM_Encoder_Init+0xc6>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800903e:	d004      	beq.n	800904a <HAL_TIM_Encoder_Init+0xc6>
 8009040:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8009044:	485a      	ldr	r0, [pc, #360]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009046:	f7fb fbf4 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <HAL_TIM_Encoder_Init+0xe0>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b80      	cmp	r3, #128	; 0x80
 8009058:	d004      	beq.n	8009064 <HAL_TIM_Encoder_Init+0xe0>
 800905a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800905e:	4854      	ldr	r0, [pc, #336]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009060:	f7fb fbe7 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d00c      	beq.n	8009086 <HAL_TIM_Encoder_Init+0x102>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d008      	beq.n	8009086 <HAL_TIM_Encoder_Init+0x102>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d004      	beq.n	8009086 <HAL_TIM_Encoder_Init+0x102>
 800907c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8009080:	484b      	ldr	r0, [pc, #300]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009082:	f7fb fbd6 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d00c      	beq.n	80090a8 <HAL_TIM_Encoder_Init+0x124>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d008      	beq.n	80090a8 <HAL_TIM_Encoder_Init+0x124>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b03      	cmp	r3, #3
 800909c:	d004      	beq.n	80090a8 <HAL_TIM_Encoder_Init+0x124>
 800909e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80090a2:	4843      	ldr	r0, [pc, #268]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 80090a4:	f7fb fbc5 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d00c      	beq.n	80090ca <HAL_TIM_Encoder_Init+0x146>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d008      	beq.n	80090ca <HAL_TIM_Encoder_Init+0x146>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d004      	beq.n	80090ca <HAL_TIM_Encoder_Init+0x146>
 80090c0:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80090c4:	483a      	ldr	r0, [pc, #232]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 80090c6:	f7fb fbb4 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d008      	beq.n	80090e4 <HAL_TIM_Encoder_Init+0x160>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d004      	beq.n	80090e4 <HAL_TIM_Encoder_Init+0x160>
 80090da:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80090de:	4834      	ldr	r0, [pc, #208]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 80090e0:	f7fb fba7 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d008      	beq.n	80090fe <HAL_TIM_Encoder_Init+0x17a>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d004      	beq.n	80090fe <HAL_TIM_Encoder_Init+0x17a>
 80090f4:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80090f8:	482d      	ldr	r0, [pc, #180]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 80090fa:	f7fb fb9a 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d010      	beq.n	8009128 <HAL_TIM_Encoder_Init+0x1a4>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b04      	cmp	r3, #4
 800910c:	d00c      	beq.n	8009128 <HAL_TIM_Encoder_Init+0x1a4>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d008      	beq.n	8009128 <HAL_TIM_Encoder_Init+0x1a4>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d004      	beq.n	8009128 <HAL_TIM_Encoder_Init+0x1a4>
 800911e:	f640 31da 	movw	r1, #3034	; 0xbda
 8009122:	4823      	ldr	r0, [pc, #140]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009124:	f7fb fb85 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <HAL_TIM_Encoder_Init+0x1ce>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	2b04      	cmp	r3, #4
 8009136:	d00c      	beq.n	8009152 <HAL_TIM_Encoder_Init+0x1ce>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d008      	beq.n	8009152 <HAL_TIM_Encoder_Init+0x1ce>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	2b0c      	cmp	r3, #12
 8009146:	d004      	beq.n	8009152 <HAL_TIM_Encoder_Init+0x1ce>
 8009148:	f640 31db 	movw	r1, #3035	; 0xbdb
 800914c:	4818      	ldr	r0, [pc, #96]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 800914e:	f7fb fb70 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b0f      	cmp	r3, #15
 8009158:	d904      	bls.n	8009164 <HAL_TIM_Encoder_Init+0x1e0>
 800915a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800915e:	4814      	ldr	r0, [pc, #80]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009160:	f7fb fb67 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	2b0f      	cmp	r3, #15
 800916a:	d904      	bls.n	8009176 <HAL_TIM_Encoder_Init+0x1f2>
 800916c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8009170:	480f      	ldr	r0, [pc, #60]	; (80091b0 <HAL_TIM_Encoder_Init+0x22c>)
 8009172:	f7fb fb5e 	bl	8004832 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d118      	bne.n	80091b4 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fb fe54 	bl	8004e38 <HAL_TIM_Encoder_MspInit>
 8009190:	e010      	b.n	80091b4 <HAL_TIM_Encoder_Init+0x230>
 8009192:	bf00      	nop
 8009194:	40010000 	.word	0x40010000
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40000c00 	.word	0x40000c00
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	40001800 	.word	0x40001800
 80091b0:	0800bffc 	.word	0x0800bffc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091ca:	f023 0307 	bic.w	r3, r3, #7
 80091ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4619      	mov	r1, r3
 80091da:	4610      	mov	r0, r2
 80091dc:	f000 ff02 	bl	8009fe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	021b      	lsls	r3, r3, #8
 8009218:	4313      	orrs	r3, r2
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009226:	f023 030c 	bic.w	r3, r3, #12
 800922a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	4313      	orrs	r3, r2
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	011a      	lsls	r2, r3, #4
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	031b      	lsls	r3, r3, #12
 8009256:	4313      	orrs	r3, r2
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009264:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800926c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	4313      	orrs	r3, r2
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop

080092d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0202 	mvn.w	r2, #2
 8009300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fe46 	bl	8009fa8 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fe38 	bl	8009f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fe49 	bl	8009fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b04      	cmp	r3, #4
 800933c:	d122      	bne.n	8009384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b04      	cmp	r3, #4
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0204 	mvn.w	r2, #4
 8009354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fe1c 	bl	8009fa8 <HAL_TIM_IC_CaptureCallback>
 8009370:	e005      	b.n	800937e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fe0e 	bl	8009f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fe1f 	bl	8009fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b08      	cmp	r3, #8
 8009390:	d122      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d11b      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0208 	mvn.w	r2, #8
 80093a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2204      	movs	r2, #4
 80093ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fdf2 	bl	8009fa8 <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fde4 	bl	8009f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fdf5 	bl	8009fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d122      	bne.n	800942c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d11b      	bne.n	800942c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0210 	mvn.w	r2, #16
 80093fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2208      	movs	r2, #8
 8009402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fdc8 	bl	8009fa8 <HAL_TIM_IC_CaptureCallback>
 8009418:	e005      	b.n	8009426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fdba 	bl	8009f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fdcb 	bl	8009fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b01      	cmp	r3, #1
 8009438:	d10e      	bne.n	8009458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b01      	cmp	r3, #1
 8009446:	d107      	bne.n	8009458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0201 	mvn.w	r2, #1
 8009450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f7 ff62 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009462:	2b80      	cmp	r3, #128	; 0x80
 8009464:	d10e      	bne.n	8009484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009470:	2b80      	cmp	r3, #128	; 0x80
 8009472:	d107      	bne.n	8009484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800947c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fb5c 	bl	800ab3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d10e      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d107      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fd90 	bl	8009fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	d10e      	bne.n	80094dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d107      	bne.n	80094dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0220 	mvn.w	r2, #32
 80094d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fb26 	bl	800ab28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d010      	beq.n	800951c <HAL_TIM_PWM_ConfigChannel+0x38>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d00d      	beq.n	800951c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b08      	cmp	r3, #8
 8009504:	d00a      	beq.n	800951c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b0c      	cmp	r3, #12
 800950a:	d007      	beq.n	800951c <HAL_TIM_PWM_ConfigChannel+0x38>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b3c      	cmp	r3, #60	; 0x3c
 8009510:	d004      	beq.n	800951c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009512:	f241 0177 	movw	r1, #4215	; 0x1077
 8009516:	4883      	ldr	r0, [pc, #524]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009518:	f7fb f98b 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b60      	cmp	r3, #96	; 0x60
 8009522:	d008      	beq.n	8009536 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b70      	cmp	r3, #112	; 0x70
 800952a:	d004      	beq.n	8009536 <HAL_TIM_PWM_ConfigChannel+0x52>
 800952c:	f241 0178 	movw	r1, #4216	; 0x1078
 8009530:	487c      	ldr	r0, [pc, #496]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009532:	f7fb f97e 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d008      	beq.n	8009550 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d004      	beq.n	8009550 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009546:	f241 0179 	movw	r1, #4217	; 0x1079
 800954a:	4876      	ldr	r0, [pc, #472]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800954c:	f7fb f971 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d008      	beq.n	800956a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b04      	cmp	r3, #4
 800955e:	d004      	beq.n	800956a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009560:	f241 017a 	movw	r1, #4218	; 0x107a
 8009564:	486f      	ldr	r0, [pc, #444]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009566:	f7fb f964 	bl	8004832 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_TIM_PWM_ConfigChannel+0x94>
 8009574:	2302      	movs	r3, #2
 8009576:	e17c      	b.n	8009872 <HAL_TIM_PWM_ConfigChannel+0x38e>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b0c      	cmp	r3, #12
 8009584:	f200 816d 	bhi.w	8009862 <HAL_TIM_PWM_ConfigChannel+0x37e>
 8009588:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800958a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958e:	bf00      	nop
 8009590:	080095c5 	.word	0x080095c5
 8009594:	08009863 	.word	0x08009863
 8009598:	08009863 	.word	0x08009863
 800959c:	08009863 	.word	0x08009863
 80095a0:	08009687 	.word	0x08009687
 80095a4:	08009863 	.word	0x08009863
 80095a8:	08009863 	.word	0x08009863
 80095ac:	08009863 	.word	0x08009863
 80095b0:	08009755 	.word	0x08009755
 80095b4:	08009863 	.word	0x08009863
 80095b8:	08009863 	.word	0x08009863
 80095bc:	08009863 	.word	0x08009863
 80095c0:	080097db 	.word	0x080097db
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a57      	ldr	r2, [pc, #348]	; (8009728 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d03b      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d6:	d036      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a53      	ldr	r2, [pc, #332]	; (800972c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d031      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a52      	ldr	r2, [pc, #328]	; (8009730 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d02c      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a50      	ldr	r2, [pc, #320]	; (8009734 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d027      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a4f      	ldr	r2, [pc, #316]	; (8009738 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d022      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a4d      	ldr	r2, [pc, #308]	; (800973c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01d      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a4c      	ldr	r2, [pc, #304]	; (8009740 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d018      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a4a      	ldr	r2, [pc, #296]	; (8009744 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d013      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a49      	ldr	r2, [pc, #292]	; (8009748 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00e      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a47      	ldr	r2, [pc, #284]	; (800974c <HAL_TIM_PWM_ConfigChannel+0x268>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d009      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a46      	ldr	r2, [pc, #280]	; (8009750 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d004      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x162>
 800963c:	f241 0184 	movw	r1, #4228	; 0x1084
 8009640:	4838      	ldr	r0, [pc, #224]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009642:	f7fb f8f6 	bl	8004832 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fd69 	bl	800a124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0208 	orr.w	r2, r2, #8
 8009660:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0204 	bic.w	r2, r2, #4
 8009670:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6999      	ldr	r1, [r3, #24]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	619a      	str	r2, [r3, #24]
      break;
 8009684:	e0f0      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a27      	ldr	r2, [pc, #156]	; (8009728 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d027      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d022      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a23      	ldr	r2, [pc, #140]	; (800972c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d01d      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a21      	ldr	r2, [pc, #132]	; (8009730 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d018      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a20      	ldr	r2, [pc, #128]	; (8009734 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d013      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1e      	ldr	r2, [pc, #120]	; (8009738 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00e      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a1d      	ldr	r2, [pc, #116]	; (800973c <HAL_TIM_PWM_ConfigChannel+0x258>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d009      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80096d6:	f241 0195 	movw	r1, #4245	; 0x1095
 80096da:	4812      	ldr	r0, [pc, #72]	; (8009724 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80096dc:	f7fb f8a9 	bl	8004832 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fdb6 	bl	800a258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800970a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6999      	ldr	r1, [r3, #24]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	021a      	lsls	r2, r3, #8
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	619a      	str	r2, [r3, #24]
      break;
 8009720:	e0a2      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009722:	bf00      	nop
 8009724:	0800bffc 	.word	0x0800bffc
 8009728:	40010000 	.word	0x40010000
 800972c:	40000400 	.word	0x40000400
 8009730:	40000800 	.word	0x40000800
 8009734:	40000c00 	.word	0x40000c00
 8009738:	40010400 	.word	0x40010400
 800973c:	40014000 	.word	0x40014000
 8009740:	40014400 	.word	0x40014400
 8009744:	40014800 	.word	0x40014800
 8009748:	40001800 	.word	0x40001800
 800974c:	40001c00 	.word	0x40001c00
 8009750:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a48      	ldr	r2, [pc, #288]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d01d      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009766:	d018      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a44      	ldr	r2, [pc, #272]	; (8009880 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a43      	ldr	r2, [pc, #268]	; (8009884 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00e      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a41      	ldr	r2, [pc, #260]	; (8009888 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d009      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a40      	ldr	r2, [pc, #256]	; (800988c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009790:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8009794:	483e      	ldr	r0, [pc, #248]	; (8009890 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009796:	f7fb f84c 	bl	8004832 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fdf7 	bl	800a394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0208 	orr.w	r2, r2, #8
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0204 	bic.w	r2, r2, #4
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	61da      	str	r2, [r3, #28]
      break;
 80097d8:	e046      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a27      	ldr	r2, [pc, #156]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x398>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d01d      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ec:	d018      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a23      	ldr	r2, [pc, #140]	; (8009880 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d013      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a21      	ldr	r2, [pc, #132]	; (8009884 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00e      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a20      	ldr	r2, [pc, #128]	; (8009888 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d009      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a1e      	ldr	r2, [pc, #120]	; (800988c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d004      	beq.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009816:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800981a:	481d      	ldr	r0, [pc, #116]	; (8009890 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800981c:	f7fb f809 	bl	8004832 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fe52 	bl	800a4d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800983a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69da      	ldr	r2, [r3, #28]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69d9      	ldr	r1, [r3, #28]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	021a      	lsls	r2, r3, #8
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	61da      	str	r2, [r3, #28]
      break;
 8009860:	e002      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40010400 	.word	0x40010400
 8009890:	0800bffc 	.word	0x0800bffc

08009894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d101      	bne.n	80098b0 <HAL_TIM_ConfigClockSource+0x1c>
 80098ac:	2302      	movs	r3, #2
 80098ae:	e35c      	b.n	8009f6a <HAL_TIM_ConfigClockSource+0x6d6>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c8:	d029      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098d2:	d024      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d020      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d01c      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d018      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b30      	cmp	r3, #48	; 0x30
 80098f2:	d014      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	d010      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b50      	cmp	r3, #80	; 0x50
 8009902:	d00c      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b60      	cmp	r3, #96	; 0x60
 800990a:	d008      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b70      	cmp	r3, #112	; 0x70
 8009912:	d004      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x8a>
 8009914:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8009918:	4893      	ldr	r0, [pc, #588]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 800991a:	f7fa ff8a 	bl	8004832 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800992c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009934:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009946:	f000 812b 	beq.w	8009ba0 <HAL_TIM_ConfigClockSource+0x30c>
 800994a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800994e:	f200 82ff 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8009952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009956:	d02e      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x122>
 8009958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800995c:	f200 82f8 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8009960:	2b70      	cmp	r3, #112	; 0x70
 8009962:	f000 8082 	beq.w	8009a6a <HAL_TIM_ConfigClockSource+0x1d6>
 8009966:	2b70      	cmp	r3, #112	; 0x70
 8009968:	f200 82f2 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 800996c:	2b60      	cmp	r3, #96	; 0x60
 800996e:	f000 81e8 	beq.w	8009d42 <HAL_TIM_ConfigClockSource+0x4ae>
 8009972:	2b60      	cmp	r3, #96	; 0x60
 8009974:	f200 82ec 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8009978:	2b50      	cmp	r3, #80	; 0x50
 800997a:	f000 8182 	beq.w	8009c82 <HAL_TIM_ConfigClockSource+0x3ee>
 800997e:	2b50      	cmp	r3, #80	; 0x50
 8009980:	f200 82e6 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	f000 824d 	beq.w	8009e24 <HAL_TIM_ConfigClockSource+0x590>
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	f200 82e0 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 8009990:	2b30      	cmp	r3, #48	; 0x30
 8009992:	f000 82a7 	beq.w	8009ee4 <HAL_TIM_ConfigClockSource+0x650>
 8009996:	2b30      	cmp	r3, #48	; 0x30
 8009998:	f200 82da 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 800999c:	2b20      	cmp	r3, #32
 800999e:	f000 82a1 	beq.w	8009ee4 <HAL_TIM_ConfigClockSource+0x650>
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	f200 82d4 	bhi.w	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 829b 	beq.w	8009ee4 <HAL_TIM_ConfigClockSource+0x650>
 80099ae:	2b10      	cmp	r3, #16
 80099b0:	f000 8298 	beq.w	8009ee4 <HAL_TIM_ConfigClockSource+0x650>
 80099b4:	e2cc      	b.n	8009f50 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a6c      	ldr	r2, [pc, #432]	; (8009b6c <HAL_TIM_ConfigClockSource+0x2d8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	f000 82ca 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ca:	f000 82c4 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a67      	ldr	r2, [pc, #412]	; (8009b70 <HAL_TIM_ConfigClockSource+0x2dc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	f000 82be 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a65      	ldr	r2, [pc, #404]	; (8009b74 <HAL_TIM_ConfigClockSource+0x2e0>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	f000 82b8 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a63      	ldr	r2, [pc, #396]	; (8009b78 <HAL_TIM_ConfigClockSource+0x2e4>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	f000 82b2 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a61      	ldr	r2, [pc, #388]	; (8009b7c <HAL_TIM_ConfigClockSource+0x2e8>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	f000 82ac 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a5f      	ldr	r2, [pc, #380]	; (8009b80 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	f000 82a6 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a5d      	ldr	r2, [pc, #372]	; (8009b84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	f000 82a0 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a5b      	ldr	r2, [pc, #364]	; (8009b88 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	f000 829a 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a59      	ldr	r2, [pc, #356]	; (8009b8c <HAL_TIM_ConfigClockSource+0x2f8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f000 8294 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a57      	ldr	r2, [pc, #348]	; (8009b90 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	f000 828e 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a55      	ldr	r2, [pc, #340]	; (8009b94 <HAL_TIM_ConfigClockSource+0x300>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	f000 8288 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a53      	ldr	r2, [pc, #332]	; (8009b98 <HAL_TIM_ConfigClockSource+0x304>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	f000 8282 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a51      	ldr	r2, [pc, #324]	; (8009b9c <HAL_TIM_ConfigClockSource+0x308>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	f000 827c 	beq.w	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
 8009a5e:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8009a62:	4841      	ldr	r0, [pc, #260]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009a64:	f7fa fee5 	bl	8004832 <assert_failed>
      break;
 8009a68:	e275      	b.n	8009f56 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a3f      	ldr	r2, [pc, #252]	; (8009b6c <HAL_TIM_ConfigClockSource+0x2d8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d027      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7c:	d022      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a3b      	ldr	r2, [pc, #236]	; (8009b70 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d01d      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a39      	ldr	r2, [pc, #228]	; (8009b74 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d018      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a38      	ldr	r2, [pc, #224]	; (8009b78 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d013      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d00e      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a37      	ldr	r2, [pc, #220]	; (8009b88 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d009      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a37      	ldr	r2, [pc, #220]	; (8009b94 <HAL_TIM_ConfigClockSource+0x300>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x230>
 8009aba:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009abe:	482a      	ldr	r0, [pc, #168]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009ac0:	f7fa feb7 	bl	8004832 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d013      	beq.n	8009af4 <HAL_TIM_ConfigClockSource+0x260>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad4:	d00e      	beq.n	8009af4 <HAL_TIM_ConfigClockSource+0x260>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	d009      	beq.n	8009af4 <HAL_TIM_ConfigClockSource+0x260>
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ae8:	d004      	beq.n	8009af4 <HAL_TIM_ConfigClockSource+0x260>
 8009aea:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8009aee:	481e      	ldr	r0, [pc, #120]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009af0:	f7fa fe9f 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009afc:	d014      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x294>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d010      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x294>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00c      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x294>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d008      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x294>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2b0a      	cmp	r3, #10
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x294>
 8009b1e:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8009b22:	4811      	ldr	r0, [pc, #68]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009b24:	f7fa fe85 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b0f      	cmp	r3, #15
 8009b2e:	d904      	bls.n	8009b3a <HAL_TIM_ConfigClockSource+0x2a6>
 8009b30:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8009b34:	480c      	ldr	r0, [pc, #48]	; (8009b68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009b36:	f7fa fe7c 	bl	8004832 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6899      	ldr	r1, [r3, #8]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f000 fd9f 	bl	800a68c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	609a      	str	r2, [r3, #8]
      break;
 8009b66:	e1f7      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
 8009b68:	0800bffc 	.word	0x0800bffc
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40000400 	.word	0x40000400
 8009b74:	40000800 	.word	0x40000800
 8009b78:	40000c00 	.word	0x40000c00
 8009b7c:	40001000 	.word	0x40001000
 8009b80:	40001400 	.word	0x40001400
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40014400 	.word	0x40014400
 8009b90:	40014800 	.word	0x40014800
 8009b94:	40001800 	.word	0x40001800
 8009b98:	40001c00 	.word	0x40001c00
 8009b9c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a97      	ldr	r2, [pc, #604]	; (8009e04 <HAL_TIM_ConfigClockSource+0x570>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01d      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb2:	d018      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a93      	ldr	r2, [pc, #588]	; (8009e08 <HAL_TIM_ConfigClockSource+0x574>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d013      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a92      	ldr	r2, [pc, #584]	; (8009e0c <HAL_TIM_ConfigClockSource+0x578>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00e      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a90      	ldr	r2, [pc, #576]	; (8009e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d009      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a8f      	ldr	r2, [pc, #572]	; (8009e14 <HAL_TIM_ConfigClockSource+0x580>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d004      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x352>
 8009bdc:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009be0:	488d      	ldr	r0, [pc, #564]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009be2:	f7fa fe26 	bl	8004832 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d013      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x382>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf6:	d00e      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x382>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c00:	d009      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x382>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c0a:	d004      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x382>
 8009c0c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8009c10:	4881      	ldr	r0, [pc, #516]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009c12:	f7fa fe0e 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c1e:	d014      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00c      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d008      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b0a      	cmp	r3, #10
 8009c3e:	d004      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x3b6>
 8009c40:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8009c44:	4874      	ldr	r0, [pc, #464]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009c46:	f7fa fdf4 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b0f      	cmp	r3, #15
 8009c50:	d904      	bls.n	8009c5c <HAL_TIM_ConfigClockSource+0x3c8>
 8009c52:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8009c56:	4870      	ldr	r0, [pc, #448]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009c58:	f7fa fdeb 	bl	8004832 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	6899      	ldr	r1, [r3, #8]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f000 fd0e 	bl	800a68c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c7e:	609a      	str	r2, [r3, #8]
      break;
 8009c80:	e16a      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a5f      	ldr	r2, [pc, #380]	; (8009e04 <HAL_TIM_ConfigClockSource+0x570>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d027      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c94:	d022      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a5b      	ldr	r2, [pc, #364]	; (8009e08 <HAL_TIM_ConfigClockSource+0x574>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d01d      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a59      	ldr	r2, [pc, #356]	; (8009e0c <HAL_TIM_ConfigClockSource+0x578>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d018      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a58      	ldr	r2, [pc, #352]	; (8009e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d013      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a56      	ldr	r2, [pc, #344]	; (8009e14 <HAL_TIM_ConfigClockSource+0x580>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00e      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a56      	ldr	r2, [pc, #344]	; (8009e1c <HAL_TIM_ConfigClockSource+0x588>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d009      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a54      	ldr	r2, [pc, #336]	; (8009e20 <HAL_TIM_ConfigClockSource+0x58c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_TIM_ConfigClockSource+0x448>
 8009cd2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009cd6:	4850      	ldr	r0, [pc, #320]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009cd8:	f7fa fdab 	bl	8004832 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce4:	d014      	beq.n	8009d10 <HAL_TIM_ConfigClockSource+0x47c>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d010      	beq.n	8009d10 <HAL_TIM_ConfigClockSource+0x47c>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00c      	beq.n	8009d10 <HAL_TIM_ConfigClockSource+0x47c>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d008      	beq.n	8009d10 <HAL_TIM_ConfigClockSource+0x47c>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b0a      	cmp	r3, #10
 8009d04:	d004      	beq.n	8009d10 <HAL_TIM_ConfigClockSource+0x47c>
 8009d06:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8009d0a:	4843      	ldr	r0, [pc, #268]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009d0c:	f7fa fd91 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	2b0f      	cmp	r3, #15
 8009d16:	d904      	bls.n	8009d22 <HAL_TIM_ConfigClockSource+0x48e>
 8009d18:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8009d1c:	483e      	ldr	r0, [pc, #248]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009d1e:	f7fa fd88 	bl	8004832 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	6859      	ldr	r1, [r3, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f000 fc32 	bl	800a598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2150      	movs	r1, #80	; 0x50
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fc8b 	bl	800a656 <TIM_ITRx_SetConfig>
      break;
 8009d40:	e10a      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2f      	ldr	r2, [pc, #188]	; (8009e04 <HAL_TIM_ConfigClockSource+0x570>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d027      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d54:	d022      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a2b      	ldr	r2, [pc, #172]	; (8009e08 <HAL_TIM_ConfigClockSource+0x574>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d01d      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a29      	ldr	r2, [pc, #164]	; (8009e0c <HAL_TIM_ConfigClockSource+0x578>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d018      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a28      	ldr	r2, [pc, #160]	; (8009e10 <HAL_TIM_ConfigClockSource+0x57c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d013      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a26      	ldr	r2, [pc, #152]	; (8009e14 <HAL_TIM_ConfigClockSource+0x580>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00e      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a26      	ldr	r2, [pc, #152]	; (8009e1c <HAL_TIM_ConfigClockSource+0x588>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d009      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a24      	ldr	r2, [pc, #144]	; (8009e20 <HAL_TIM_ConfigClockSource+0x58c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d004      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0x508>
 8009d92:	f241 510a 	movw	r1, #5386	; 0x150a
 8009d96:	4820      	ldr	r0, [pc, #128]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009d98:	f7fa fd4b 	bl	8004832 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da4:	d014      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d010      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00c      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d008      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2b0a      	cmp	r3, #10
 8009dc4:	d004      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x53c>
 8009dc6:	f241 510d 	movw	r1, #5389	; 0x150d
 8009dca:	4813      	ldr	r0, [pc, #76]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009dcc:	f7fa fd31 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b0f      	cmp	r3, #15
 8009dd6:	d904      	bls.n	8009de2 <HAL_TIM_ConfigClockSource+0x54e>
 8009dd8:	f241 510e 	movw	r1, #5390	; 0x150e
 8009ddc:	480e      	ldr	r0, [pc, #56]	; (8009e18 <HAL_TIM_ConfigClockSource+0x584>)
 8009dde:	f7fa fd28 	bl	8004832 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6859      	ldr	r1, [r3, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f000 fc01 	bl	800a5f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2160      	movs	r1, #96	; 0x60
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 fc2b 	bl	800a656 <TIM_ITRx_SetConfig>
      break;
 8009e00:	e0aa      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
 8009e02:	bf00      	nop
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40010400 	.word	0x40010400
 8009e18:	0800bffc 	.word	0x0800bffc
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a52      	ldr	r2, [pc, #328]	; (8009f74 <HAL_TIM_ConfigClockSource+0x6e0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d027      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e36:	d022      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a4e      	ldr	r2, [pc, #312]	; (8009f78 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d01d      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a4d      	ldr	r2, [pc, #308]	; (8009f7c <HAL_TIM_ConfigClockSource+0x6e8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d018      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a4b      	ldr	r2, [pc, #300]	; (8009f80 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d013      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a4a      	ldr	r2, [pc, #296]	; (8009f84 <HAL_TIM_ConfigClockSource+0x6f0>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d00e      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a48      	ldr	r2, [pc, #288]	; (8009f88 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d009      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a47      	ldr	r2, [pc, #284]	; (8009f8c <HAL_TIM_ConfigClockSource+0x6f8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d004      	beq.n	8009e7e <HAL_TIM_ConfigClockSource+0x5ea>
 8009e74:	f241 511a 	movw	r1, #5402	; 0x151a
 8009e78:	4845      	ldr	r0, [pc, #276]	; (8009f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009e7a:	f7fa fcda 	bl	8004832 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e86:	d014      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d010      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d008      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b0a      	cmp	r3, #10
 8009ea6:	d004      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x61e>
 8009ea8:	f241 511d 	movw	r1, #5405	; 0x151d
 8009eac:	4838      	ldr	r0, [pc, #224]	; (8009f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009eae:	f7fa fcc0 	bl	8004832 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	2b0f      	cmp	r3, #15
 8009eb8:	d904      	bls.n	8009ec4 <HAL_TIM_ConfigClockSource+0x630>
 8009eba:	f241 511e 	movw	r1, #5406	; 0x151e
 8009ebe:	4834      	ldr	r0, [pc, #208]	; (8009f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009ec0:	f7fa fcb7 	bl	8004832 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	6859      	ldr	r1, [r3, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f000 fb61 	bl	800a598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2140      	movs	r1, #64	; 0x40
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fbba 	bl	800a656 <TIM_ITRx_SetConfig>
      break;
 8009ee2:	e039      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a22      	ldr	r2, [pc, #136]	; (8009f74 <HAL_TIM_ConfigClockSource+0x6e0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d027      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d022      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1e      	ldr	r2, [pc, #120]	; (8009f78 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d01d      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a1d      	ldr	r2, [pc, #116]	; (8009f7c <HAL_TIM_ConfigClockSource+0x6e8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d018      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d013      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1a      	ldr	r2, [pc, #104]	; (8009f84 <HAL_TIM_ConfigClockSource+0x6f0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d00e      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d009      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <HAL_TIM_ConfigClockSource+0x6f8>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d004      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x6aa>
 8009f34:	f241 512d 	movw	r1, #5421	; 0x152d
 8009f38:	4815      	ldr	r0, [pc, #84]	; (8009f90 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009f3a:	f7fa fc7a 	bl	8004832 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f000 fb84 	bl	800a656 <TIM_ITRx_SetConfig>
      break;
 8009f4e:	e003      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
      break;
 8009f54:	e000      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8009f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40000400 	.word	0x40000400
 8009f7c:	40000800 	.word	0x40000800
 8009f80:	40000c00 	.word	0x40000c00
 8009f84:	40010400 	.word	0x40010400
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40001800 	.word	0x40001800
 8009f90:	0800bffc 	.word	0x0800bffc

08009f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <TIM_Base_SetConfig+0x114>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d013      	beq.n	800a024 <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a002:	d00f      	beq.n	800a024 <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a3d      	ldr	r2, [pc, #244]	; (800a0fc <TIM_Base_SetConfig+0x118>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00b      	beq.n	800a024 <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a3c      	ldr	r2, [pc, #240]	; (800a100 <TIM_Base_SetConfig+0x11c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d007      	beq.n	800a024 <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a3b      	ldr	r2, [pc, #236]	; (800a104 <TIM_Base_SetConfig+0x120>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_Base_SetConfig+0x40>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a3a      	ldr	r2, [pc, #232]	; (800a108 <TIM_Base_SetConfig+0x124>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d108      	bne.n	800a036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a02a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a2f      	ldr	r2, [pc, #188]	; (800a0f8 <TIM_Base_SetConfig+0x114>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d02b      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a044:	d027      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a2c      	ldr	r2, [pc, #176]	; (800a0fc <TIM_Base_SetConfig+0x118>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d023      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2b      	ldr	r2, [pc, #172]	; (800a100 <TIM_Base_SetConfig+0x11c>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d01f      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <TIM_Base_SetConfig+0x120>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01b      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a29      	ldr	r2, [pc, #164]	; (800a108 <TIM_Base_SetConfig+0x124>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d017      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a28      	ldr	r2, [pc, #160]	; (800a10c <TIM_Base_SetConfig+0x128>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a27      	ldr	r2, [pc, #156]	; (800a110 <TIM_Base_SetConfig+0x12c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a26      	ldr	r2, [pc, #152]	; (800a114 <TIM_Base_SetConfig+0x130>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00b      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a25      	ldr	r2, [pc, #148]	; (800a118 <TIM_Base_SetConfig+0x134>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d007      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a24      	ldr	r2, [pc, #144]	; (800a11c <TIM_Base_SetConfig+0x138>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d003      	beq.n	800a096 <TIM_Base_SetConfig+0xb2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a23      	ldr	r2, [pc, #140]	; (800a120 <TIM_Base_SetConfig+0x13c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d108      	bne.n	800a0a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a0a      	ldr	r2, [pc, #40]	; (800a0f8 <TIM_Base_SetConfig+0x114>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d003      	beq.n	800a0dc <TIM_Base_SetConfig+0xf8>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a0c      	ldr	r2, [pc, #48]	; (800a108 <TIM_Base_SetConfig+0x124>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d103      	bne.n	800a0e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	615a      	str	r2, [r3, #20]
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40010000 	.word	0x40010000
 800a0fc:	40000400 	.word	0x40000400
 800a100:	40000800 	.word	0x40000800
 800a104:	40000c00 	.word	0x40000c00
 800a108:	40010400 	.word	0x40010400
 800a10c:	40014000 	.word	0x40014000
 800a110:	40014400 	.word	0x40014400
 800a114:	40014800 	.word	0x40014800
 800a118:	40001800 	.word	0x40001800
 800a11c:	40001c00 	.word	0x40001c00
 800a120:	40002000 	.word	0x40002000

0800a124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	f023 0201 	bic.w	r2, r3, #1
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f023 0302 	bic.w	r3, r3, #2
 800a16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a34      	ldr	r2, [pc, #208]	; (800a24c <TIM_OC1_SetConfig+0x128>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_OC1_SetConfig+0x64>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a33      	ldr	r2, [pc, #204]	; (800a250 <TIM_OC1_SetConfig+0x12c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d119      	bne.n	800a1bc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <TIM_OC1_SetConfig+0x7e>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b08      	cmp	r3, #8
 800a196:	d004      	beq.n	800a1a2 <TIM_OC1_SetConfig+0x7e>
 800a198:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800a19c:	482d      	ldr	r0, [pc, #180]	; (800a254 <TIM_OC1_SetConfig+0x130>)
 800a19e:	f7fa fb48 	bl	8004832 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0308 	bic.w	r3, r3, #8
 800a1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f023 0304 	bic.w	r3, r3, #4
 800a1ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a23      	ldr	r2, [pc, #140]	; (800a24c <TIM_OC1_SetConfig+0x128>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d003      	beq.n	800a1cc <TIM_OC1_SetConfig+0xa8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a22      	ldr	r2, [pc, #136]	; (800a250 <TIM_OC1_SetConfig+0x12c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d12d      	bne.n	800a228 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d008      	beq.n	800a1e8 <TIM_OC1_SetConfig+0xc4>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d004      	beq.n	800a1e8 <TIM_OC1_SetConfig+0xc4>
 800a1de:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800a1e2:	481c      	ldr	r0, [pc, #112]	; (800a254 <TIM_OC1_SetConfig+0x130>)
 800a1e4:	f7fa fb25 	bl	8004832 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f0:	d008      	beq.n	800a204 <TIM_OC1_SetConfig+0xe0>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <TIM_OC1_SetConfig+0xe0>
 800a1fa:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800a1fe:	4815      	ldr	r0, [pc, #84]	; (800a254 <TIM_OC1_SetConfig+0x130>)
 800a200:	f7fa fb17 	bl	8004832 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a20a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40010000 	.word	0x40010000
 800a250:	40010400 	.word	0x40010400
 800a254:	0800bffc 	.word	0x0800bffc

0800a258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f023 0210 	bic.w	r2, r3, #16
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4313      	orrs	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f023 0320 	bic.w	r3, r3, #32
 800a2a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a35      	ldr	r2, [pc, #212]	; (800a388 <TIM_OC2_SetConfig+0x130>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <TIM_OC2_SetConfig+0x68>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a34      	ldr	r2, [pc, #208]	; (800a38c <TIM_OC2_SetConfig+0x134>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d11a      	bne.n	800a2f6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d008      	beq.n	800a2da <TIM_OC2_SetConfig+0x82>
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d004      	beq.n	800a2da <TIM_OC2_SetConfig+0x82>
 800a2d0:	f641 3116 	movw	r1, #6934	; 0x1b16
 800a2d4:	482e      	ldr	r0, [pc, #184]	; (800a390 <TIM_OC2_SetConfig+0x138>)
 800a2d6:	f7fa faac 	bl	8004832 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a23      	ldr	r2, [pc, #140]	; (800a388 <TIM_OC2_SetConfig+0x130>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d003      	beq.n	800a306 <TIM_OC2_SetConfig+0xae>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a22      	ldr	r2, [pc, #136]	; (800a38c <TIM_OC2_SetConfig+0x134>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d12f      	bne.n	800a366 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a30e:	d008      	beq.n	800a322 <TIM_OC2_SetConfig+0xca>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <TIM_OC2_SetConfig+0xca>
 800a318:	f641 3124 	movw	r1, #6948	; 0x1b24
 800a31c:	481c      	ldr	r0, [pc, #112]	; (800a390 <TIM_OC2_SetConfig+0x138>)
 800a31e:	f7fa fa88 	bl	8004832 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32a:	d008      	beq.n	800a33e <TIM_OC2_SetConfig+0xe6>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <TIM_OC2_SetConfig+0xe6>
 800a334:	f641 3125 	movw	r1, #6949	; 0x1b25
 800a338:	4815      	ldr	r0, [pc, #84]	; (800a390 <TIM_OC2_SetConfig+0x138>)
 800a33a:	f7fa fa7a 	bl	8004832 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a34c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	621a      	str	r2, [r3, #32]
}
 800a380:	bf00      	nop
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	40010000 	.word	0x40010000
 800a38c:	40010400 	.word	0x40010400
 800a390:	0800bffc 	.word	0x0800bffc

0800a394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a35      	ldr	r2, [pc, #212]	; (800a4c4 <TIM_OC3_SetConfig+0x130>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d003      	beq.n	800a3fa <TIM_OC3_SetConfig+0x66>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a34      	ldr	r2, [pc, #208]	; (800a4c8 <TIM_OC3_SetConfig+0x134>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d11a      	bne.n	800a430 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <TIM_OC3_SetConfig+0x80>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b08      	cmp	r3, #8
 800a408:	d004      	beq.n	800a414 <TIM_OC3_SetConfig+0x80>
 800a40a:	f641 3161 	movw	r1, #7009	; 0x1b61
 800a40e:	482f      	ldr	r0, [pc, #188]	; (800a4cc <TIM_OC3_SetConfig+0x138>)
 800a410:	f7fa fa0f 	bl	8004832 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	4313      	orrs	r3, r2
 800a426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a42e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <TIM_OC3_SetConfig+0x130>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d003      	beq.n	800a440 <TIM_OC3_SetConfig+0xac>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <TIM_OC3_SetConfig+0x134>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d12f      	bne.n	800a4a0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a448:	d008      	beq.n	800a45c <TIM_OC3_SetConfig+0xc8>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d004      	beq.n	800a45c <TIM_OC3_SetConfig+0xc8>
 800a452:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800a456:	481d      	ldr	r0, [pc, #116]	; (800a4cc <TIM_OC3_SetConfig+0x138>)
 800a458:	f7fa f9eb 	bl	8004832 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a464:	d008      	beq.n	800a478 <TIM_OC3_SetConfig+0xe4>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <TIM_OC3_SetConfig+0xe4>
 800a46e:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800a472:	4816      	ldr	r0, [pc, #88]	; (800a4cc <TIM_OC3_SetConfig+0x138>)
 800a474:	f7fa f9dd 	bl	8004832 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a47e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4313      	orrs	r3, r2
 800a492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	011b      	lsls	r3, r3, #4
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	621a      	str	r2, [r3, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	40010000 	.word	0x40010000
 800a4c8:	40010400 	.word	0x40010400
 800a4cc:	0800bffc 	.word	0x0800bffc

0800a4d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	031b      	lsls	r3, r3, #12
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a18      	ldr	r2, [pc, #96]	; (800a58c <TIM_OC4_SetConfig+0xbc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d003      	beq.n	800a538 <TIM_OC4_SetConfig+0x68>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a17      	ldr	r2, [pc, #92]	; (800a590 <TIM_OC4_SetConfig+0xc0>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d117      	bne.n	800a568 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a540:	d008      	beq.n	800a554 <TIM_OC4_SetConfig+0x84>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d004      	beq.n	800a554 <TIM_OC4_SetConfig+0x84>
 800a54a:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800a54e:	4811      	ldr	r0, [pc, #68]	; (800a594 <TIM_OC4_SetConfig+0xc4>)
 800a550:	f7fa f96f 	bl	8004832 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a55a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	019b      	lsls	r3, r3, #6
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	621a      	str	r2, [r3, #32]
}
 800a582:	bf00      	nop
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	40010000 	.word	0x40010000
 800a590:	40010400 	.word	0x40010400
 800a594:	0800bffc 	.word	0x0800bffc

0800a598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f023 030a 	bic.w	r3, r3, #10
 800a5d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	621a      	str	r2, [r3, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0210 	bic.w	r2, r3, #16
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	031b      	lsls	r3, r3, #12
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	4313      	orrs	r3, r2
 800a62a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	011b      	lsls	r3, r3, #4
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	621a      	str	r2, [r3, #32]
}
 800a64a:	bf00      	nop
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4313      	orrs	r3, r2
 800a674:	f043 0307 	orr.w	r3, r3, #7
 800a678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	609a      	str	r2, [r3, #8]
}
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	021a      	lsls	r2, r3, #8
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	609a      	str	r2, [r3, #8]
}
 800a6c0:	bf00      	nop
 800a6c2:	371c      	adds	r7, #28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a32      	ldr	r2, [pc, #200]	; (800a7a4 <TIM_CCxChannelCmd+0xd8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d030      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e6:	d02c      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <TIM_CCxChannelCmd+0xdc>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d028      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4a2e      	ldr	r2, [pc, #184]	; (800a7ac <TIM_CCxChannelCmd+0xe0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d024      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a2d      	ldr	r2, [pc, #180]	; (800a7b0 <TIM_CCxChannelCmd+0xe4>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d020      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4a2c      	ldr	r2, [pc, #176]	; (800a7b4 <TIM_CCxChannelCmd+0xe8>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d01c      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4a2b      	ldr	r2, [pc, #172]	; (800a7b8 <TIM_CCxChannelCmd+0xec>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d018      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <TIM_CCxChannelCmd+0xf0>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d014      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4a29      	ldr	r2, [pc, #164]	; (800a7c0 <TIM_CCxChannelCmd+0xf4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d010      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a28      	ldr	r2, [pc, #160]	; (800a7c4 <TIM_CCxChannelCmd+0xf8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d00c      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4a27      	ldr	r2, [pc, #156]	; (800a7c8 <TIM_CCxChannelCmd+0xfc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d008      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4a26      	ldr	r2, [pc, #152]	; (800a7cc <TIM_CCxChannelCmd+0x100>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d004      	beq.n	800a742 <TIM_CCxChannelCmd+0x76>
 800a738:	f641 5198 	movw	r1, #7576	; 0x1d98
 800a73c:	4824      	ldr	r0, [pc, #144]	; (800a7d0 <TIM_CCxChannelCmd+0x104>)
 800a73e:	f7fa f878 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d010      	beq.n	800a76a <TIM_CCxChannelCmd+0x9e>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d00d      	beq.n	800a76a <TIM_CCxChannelCmd+0x9e>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b08      	cmp	r3, #8
 800a752:	d00a      	beq.n	800a76a <TIM_CCxChannelCmd+0x9e>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b0c      	cmp	r3, #12
 800a758:	d007      	beq.n	800a76a <TIM_CCxChannelCmd+0x9e>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b3c      	cmp	r3, #60	; 0x3c
 800a75e:	d004      	beq.n	800a76a <TIM_CCxChannelCmd+0x9e>
 800a760:	f641 5199 	movw	r1, #7577	; 0x1d99
 800a764:	481a      	ldr	r0, [pc, #104]	; (800a7d0 <TIM_CCxChannelCmd+0x104>)
 800a766:	f7fa f864 	bl	8004832 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f003 031f 	and.w	r3, r3, #31
 800a770:	2201      	movs	r2, #1
 800a772:	fa02 f303 	lsl.w	r3, r2, r3
 800a776:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a1a      	ldr	r2, [r3, #32]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	43db      	mvns	r3, r3
 800a780:	401a      	ands	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f003 031f 	and.w	r3, r3, #31
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	fa01 f303 	lsl.w	r3, r1, r3
 800a796:	431a      	orrs	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	621a      	str	r2, [r3, #32]
}
 800a79c:	bf00      	nop
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40000400 	.word	0x40000400
 800a7ac:	40000800 	.word	0x40000800
 800a7b0:	40000c00 	.word	0x40000c00
 800a7b4:	40010400 	.word	0x40010400
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40014400 	.word	0x40014400
 800a7c0:	40014800 	.word	0x40014800
 800a7c4:	40001800 	.word	0x40001800
 800a7c8:	40001c00 	.word	0x40001c00
 800a7cc:	40002000 	.word	0x40002000
 800a7d0:	0800bffc 	.word	0x0800bffc

0800a7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a61      	ldr	r2, [pc, #388]	; (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d027      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f0:	d022      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a5d      	ldr	r2, [pc, #372]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d01d      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a5b      	ldr	r2, [pc, #364]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d018      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a5a      	ldr	r2, [pc, #360]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d013      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a58      	ldr	r2, [pc, #352]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00e      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a57      	ldr	r2, [pc, #348]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d009      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a55      	ldr	r2, [pc, #340]	; (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a82e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a832:	4854      	ldr	r0, [pc, #336]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a834:	f7f9 fffd 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d020      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b10      	cmp	r3, #16
 800a846:	d01c      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d018      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b30      	cmp	r3, #48	; 0x30
 800a856:	d014      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b40      	cmp	r3, #64	; 0x40
 800a85e:	d010      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b50      	cmp	r3, #80	; 0x50
 800a866:	d00c      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b60      	cmp	r3, #96	; 0x60
 800a86e:	d008      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b70      	cmp	r3, #112	; 0x70
 800a876:	d004      	beq.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a878:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a87c:	4841      	ldr	r0, [pc, #260]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a87e:	f7f9 ffd8 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b80      	cmp	r3, #128	; 0x80
 800a888:	d008      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a892:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a896:	483b      	ldr	r0, [pc, #236]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a898:	f7f9 ffcb 	bl	8004832 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e05a      	b.n	800a960 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1f      	ldr	r2, [pc, #124]	; (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d022      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f6:	d01d      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d018      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a1a      	ldr	r2, [pc, #104]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d013      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a18      	ldr	r2, [pc, #96]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00e      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a19      	ldr	r2, [pc, #100]	; (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d009      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a18      	ldr	r2, [pc, #96]	; (800a988 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d10c      	bne.n	800a94e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	4313      	orrs	r3, r2
 800a944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	40010000 	.word	0x40010000
 800a96c:	40000400 	.word	0x40000400
 800a970:	40000800 	.word	0x40000800
 800a974:	40000c00 	.word	0x40000c00
 800a978:	40001000 	.word	0x40001000
 800a97c:	40001400 	.word	0x40001400
 800a980:	40010400 	.word	0x40010400
 800a984:	0800c034 	.word	0x0800c034
 800a988:	40014000 	.word	0x40014000
 800a98c:	40001800 	.word	0x40001800

0800a990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a5e      	ldr	r2, [pc, #376]	; (800ab1c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d009      	beq.n	800a9bc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a5c      	ldr	r2, [pc, #368]	; (800ab20 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d004      	beq.n	800a9bc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a9b2:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800a9b6:	485b      	ldr	r0, [pc, #364]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a9b8:	f7f9 ff3b 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c4:	d008      	beq.n	800a9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a9ce:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800a9d2:	4854      	ldr	r0, [pc, #336]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a9d4:	f7f9 ff2d 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e0:	d008      	beq.n	800a9f4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a9ea:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800a9ee:	484d      	ldr	r0, [pc, #308]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a9f0:	f7f9 ff1f 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d013      	beq.n	800aa24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa04:	d00e      	beq.n	800aa24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa0e:	d009      	beq.n	800aa24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa18:	d004      	beq.n	800aa24 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aa1a:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800aa1e:	4841      	ldr	r0, [pc, #260]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa20:	f7f9 ff07 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	2bff      	cmp	r3, #255	; 0xff
 800aa2a:	d904      	bls.n	800aa36 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800aa2c:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800aa30:	483c      	ldr	r0, [pc, #240]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa32:	f7f9 fefe 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3e:	d008      	beq.n	800aa52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aa48:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800aa4c:	4835      	ldr	r0, [pc, #212]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa4e:	f7f9 fef0 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa62:	d004      	beq.n	800aa6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800aa64:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800aa68:	482e      	ldr	r0, [pc, #184]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa6a:	f7f9 fee2 	bl	8004832 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa76:	d008      	beq.n	800aa8a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800aa80:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800aa84:	4827      	ldr	r0, [pc, #156]	; (800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa86:	f7f9 fed4 	bl	8004832 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e03d      	b.n	800ab14 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400
 800ab24:	0800c034 	.word	0x0800c034

0800ab28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e0be      	b.n	800ace0 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d03b      	beq.n	800abe2 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a5e      	ldr	r2, [pc, #376]	; (800ace8 <HAL_UART_Init+0x198>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d01d      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a5c      	ldr	r2, [pc, #368]	; (800acec <HAL_UART_Init+0x19c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d018      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a5b      	ldr	r2, [pc, #364]	; (800acf0 <HAL_UART_Init+0x1a0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d013      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a59      	ldr	r2, [pc, #356]	; (800acf4 <HAL_UART_Init+0x1a4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00e      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a58      	ldr	r2, [pc, #352]	; (800acf8 <HAL_UART_Init+0x1a8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d009      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a56      	ldr	r2, [pc, #344]	; (800acfc <HAL_UART_Init+0x1ac>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <HAL_UART_Init+0x60>
 800aba6:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800abaa:	4855      	ldr	r0, [pc, #340]	; (800ad00 <HAL_UART_Init+0x1b0>)
 800abac:	f7f9 fe41 	bl	8004832 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d037      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc0:	d032      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abca:	d02d      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd4:	d028      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abd6:	f240 1173 	movw	r1, #371	; 0x173
 800abda:	4849      	ldr	r0, [pc, #292]	; (800ad00 <HAL_UART_Init+0x1b0>)
 800abdc:	f7f9 fe29 	bl	8004832 <assert_failed>
 800abe0:	e022      	b.n	800ac28 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a40      	ldr	r2, [pc, #256]	; (800ace8 <HAL_UART_Init+0x198>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d01d      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a3e      	ldr	r2, [pc, #248]	; (800acec <HAL_UART_Init+0x19c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d018      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <HAL_UART_Init+0x1a0>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d013      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a3b      	ldr	r2, [pc, #236]	; (800acf4 <HAL_UART_Init+0x1a4>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00e      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a3a      	ldr	r2, [pc, #232]	; (800acf8 <HAL_UART_Init+0x1a8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a38      	ldr	r2, [pc, #224]	; (800acfc <HAL_UART_Init+0x1ac>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d004      	beq.n	800ac28 <HAL_UART_Init+0xd8>
 800ac1e:	f240 1177 	movw	r1, #375	; 0x177
 800ac22:	4837      	ldr	r0, [pc, #220]	; (800ad00 <HAL_UART_Init+0x1b0>)
 800ac24:	f7f9 fe05 	bl	8004832 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d009      	beq.n	800ac44 <HAL_UART_Init+0xf4>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac38:	d004      	beq.n	800ac44 <HAL_UART_Init+0xf4>
 800ac3a:	f240 1179 	movw	r1, #377	; 0x179
 800ac3e:	4830      	ldr	r0, [pc, #192]	; (800ad00 <HAL_UART_Init+0x1b0>)
 800ac40:	f7f9 fdf7 	bl	8004832 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d009      	beq.n	800ac60 <HAL_UART_Init+0x110>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac54:	d004      	beq.n	800ac60 <HAL_UART_Init+0x110>
 800ac56:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800ac5a:	4829      	ldr	r0, [pc, #164]	; (800ad00 <HAL_UART_Init+0x1b0>)
 800ac5c:	f7f9 fde9 	bl	8004832 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7fa f9b9 	bl	8004fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2224      	movs	r2, #36	; 0x24
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fce8 	bl	800b668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691a      	ldr	r2, [r3, #16]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aca6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2220      	movs	r2, #32
 800acda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	40011000 	.word	0x40011000
 800acec:	40004400 	.word	0x40004400
 800acf0:	40004800 	.word	0x40004800
 800acf4:	40004c00 	.word	0x40004c00
 800acf8:	40005000 	.word	0x40005000
 800acfc:	40011400 	.word	0x40011400
 800ad00:	0800c070 	.word	0x0800c070

0800ad04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d11d      	bne.n	800ad5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <HAL_UART_Receive_IT+0x26>
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e016      	b.n	800ad5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d101      	bne.n	800ad3c <HAL_UART_Receive_IT+0x38>
 800ad38:	2302      	movs	r3, #2
 800ad3a:	e00f      	b.n	800ad5c <HAL_UART_Receive_IT+0x58>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fab5 	bl	800b2c0 <UART_Start_Receive_IT>
 800ad56:	4603      	mov	r3, r0
 800ad58:	e000      	b.n	800ad5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ad5a:	2302      	movs	r3, #2
  }
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ada2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10f      	bne.n	800adca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <HAL_UART_IRQHandler+0x66>
 800adb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fb95 	bl	800b4f2 <UART_Receive_IT>
      return;
 800adc8:	e256      	b.n	800b278 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800adca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80de 	beq.w	800af90 <HAL_UART_IRQHandler+0x22c>
 800add4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d106      	bne.n	800adee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ade0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ade4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80d1 	beq.w	800af90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800adee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00b      	beq.n	800ae12 <HAL_UART_IRQHandler+0xae>
 800adfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	f043 0201 	orr.w	r2, r3, #1
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00b      	beq.n	800ae36 <HAL_UART_IRQHandler+0xd2>
 800ae1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d005      	beq.n	800ae36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	f043 0202 	orr.w	r2, r3, #2
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00b      	beq.n	800ae5a <HAL_UART_IRQHandler+0xf6>
 800ae42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d005      	beq.n	800ae5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	f043 0204 	orr.w	r2, r3, #4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	f003 0308 	and.w	r3, r3, #8
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d011      	beq.n	800ae8a <HAL_UART_IRQHandler+0x126>
 800ae66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d105      	bne.n	800ae7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	f043 0208 	orr.w	r2, r3, #8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 81ed 	beq.w	800b26e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae98:	f003 0320 	and.w	r3, r3, #32
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x14e>
 800aea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea4:	f003 0320 	and.w	r3, r3, #32
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fb20 	bl	800b4f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aebc:	2b40      	cmp	r3, #64	; 0x40
 800aebe:	bf0c      	ite	eq
 800aec0:	2301      	moveq	r3, #1
 800aec2:	2300      	movne	r3, #0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <HAL_UART_IRQHandler+0x17a>
 800aed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d04f      	beq.n	800af7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fa28 	bl	800b334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	d141      	bne.n	800af76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3314      	adds	r3, #20
 800aef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af00:	e853 3f00 	ldrex	r3, [r3]
 800af04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3314      	adds	r3, #20
 800af1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1d9      	bne.n	800aef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	2b00      	cmp	r3, #0
 800af44:	d013      	beq.n	800af6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	4a7d      	ldr	r2, [pc, #500]	; (800b140 <HAL_UART_IRQHandler+0x3dc>)
 800af4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	4618      	mov	r0, r3
 800af54:	f7fa fe46 	bl	8005be4 <HAL_DMA_Abort_IT>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d016      	beq.n	800af8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	e00e      	b.n	800af8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f990 	bl	800b294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	e00a      	b.n	800af8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f98c 	bl	800b294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e006      	b.n	800af8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f988 	bl	800b294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af8a:	e170      	b.n	800b26e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	bf00      	nop
    return;
 800af8e:	e16e      	b.n	800b26e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	2b01      	cmp	r3, #1
 800af96:	f040 814a 	bne.w	800b22e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	f003 0310 	and.w	r3, r3, #16
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 8143 	beq.w	800b22e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 813c 	beq.w	800b22e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afb6:	2300      	movs	r3, #0
 800afb8:	60bb      	str	r3, [r7, #8]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	60bb      	str	r3, [r7, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	60bb      	str	r3, [r7, #8]
 800afca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd6:	2b40      	cmp	r3, #64	; 0x40
 800afd8:	f040 80b4 	bne.w	800b144 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 8140 	beq.w	800b272 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800affa:	429a      	cmp	r2, r3
 800affc:	f080 8139 	bcs.w	800b272 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b006:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b012:	f000 8088 	beq.w	800b126 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	330c      	adds	r3, #12
 800b01c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b02c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b04e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1d9      	bne.n	800b016 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3314      	adds	r3, #20
 800b068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b074:	f023 0301 	bic.w	r3, r3, #1
 800b078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3314      	adds	r3, #20
 800b082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b086:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b08a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b08e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e1      	bne.n	800b062 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3314      	adds	r3, #20
 800b0be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0ca:	e841 2300 	strex	r3, r2, [r1]
 800b0ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e3      	bne.n	800b09e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f6:	f023 0310 	bic.w	r3, r3, #16
 800b0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	330c      	adds	r3, #12
 800b104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b108:	65ba      	str	r2, [r7, #88]	; 0x58
 800b10a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b10e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e3      	bne.n	800b0e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	4618      	mov	r0, r3
 800b122:	f7fa fcef 	bl	8005b04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b12e:	b29b      	uxth	r3, r3
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	b29b      	uxth	r3, r3
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f8b6 	bl	800b2a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b13c:	e099      	b.n	800b272 <HAL_UART_IRQHandler+0x50e>
 800b13e:	bf00      	nop
 800b140:	0800b3fb 	.word	0x0800b3fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b158:	b29b      	uxth	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 808b 	beq.w	800b276 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 8086 	beq.w	800b276 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	330c      	adds	r3, #12
 800b170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b18e:	647a      	str	r2, [r7, #68]	; 0x44
 800b190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e3      	bne.n	800b16a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3314      	adds	r3, #20
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	f023 0301 	bic.w	r3, r3, #1
 800b1b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3314      	adds	r3, #20
 800b1c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ce:	e841 2300 	strex	r3, r2, [r1]
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e3      	bne.n	800b1a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	330c      	adds	r3, #12
 800b1ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 0310 	bic.w	r3, r3, #16
 800b1fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	330c      	adds	r3, #12
 800b208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b20c:	61fa      	str	r2, [r7, #28]
 800b20e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b210:	69b9      	ldr	r1, [r7, #24]
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	e841 2300 	strex	r3, r2, [r1]
 800b218:	617b      	str	r3, [r7, #20]
   return(result);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1e3      	bne.n	800b1e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f83e 	bl	800b2a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b22c:	e023      	b.n	800b276 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b236:	2b00      	cmp	r3, #0
 800b238:	d009      	beq.n	800b24e <HAL_UART_IRQHandler+0x4ea>
 800b23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f8eb 	bl	800b422 <UART_Transmit_IT>
    return;
 800b24c:	e014      	b.n	800b278 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00e      	beq.n	800b278 <HAL_UART_IRQHandler+0x514>
 800b25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d008      	beq.n	800b278 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f92b 	bl	800b4c2 <UART_EndTransmit_IT>
    return;
 800b26c:	e004      	b.n	800b278 <HAL_UART_IRQHandler+0x514>
    return;
 800b26e:	bf00      	nop
 800b270:	e002      	b.n	800b278 <HAL_UART_IRQHandler+0x514>
      return;
 800b272:	bf00      	nop
 800b274:	e000      	b.n	800b278 <HAL_UART_IRQHandler+0x514>
      return;
 800b276:	bf00      	nop
  }
}
 800b278:	37e8      	adds	r7, #232	; 0xe8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop

0800b280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	88fa      	ldrh	r2, [r7, #6]
 800b2d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	88fa      	ldrh	r2, [r7, #6]
 800b2de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2222      	movs	r2, #34	; 0x22
 800b2ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b304:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f042 0201 	orr.w	r2, r2, #1
 800b314:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0220 	orr.w	r2, r2, #32
 800b324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b334:	b480      	push	{r7}
 800b336:	b095      	sub	sp, #84	; 0x54
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	330c      	adds	r3, #12
 800b342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b352:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b35c:	643a      	str	r2, [r7, #64]	; 0x40
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e5      	bne.n	800b33c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3314      	adds	r3, #20
 800b376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	e853 3f00 	ldrex	r3, [r3]
 800b37e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	64bb      	str	r3, [r7, #72]	; 0x48
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3314      	adds	r3, #20
 800b38e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b390:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b398:	e841 2300 	strex	r3, r2, [r1]
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1e5      	bne.n	800b370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d119      	bne.n	800b3e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	330c      	adds	r3, #12
 800b3b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f023 0310 	bic.w	r3, r3, #16
 800b3c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	330c      	adds	r3, #12
 800b3ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3cc:	61ba      	str	r2, [r7, #24]
 800b3ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	6979      	ldr	r1, [r7, #20]
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	e841 2300 	strex	r3, r2, [r1]
 800b3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e5      	bne.n	800b3ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3ee:	bf00      	nop
 800b3f0:	3754      	adds	r7, #84	; 0x54
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7ff ff3d 	bl	800b294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b422:	b480      	push	{r7}
 800b424:	b085      	sub	sp, #20
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b21      	cmp	r3, #33	; 0x21
 800b434:	d13e      	bne.n	800b4b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43e:	d114      	bne.n	800b46a <UART_Transmit_IT+0x48>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d110      	bne.n	800b46a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b45c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	1c9a      	adds	r2, r3, #2
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	621a      	str	r2, [r3, #32]
 800b468:	e008      	b.n	800b47c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	1c59      	adds	r1, r3, #1
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6211      	str	r1, [r2, #32]
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29b      	uxth	r3, r3
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	4619      	mov	r1, r3
 800b48a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10f      	bne.n	800b4b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b49e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	e000      	b.n	800b4b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4b4:	2302      	movs	r3, #2
  }
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fecc 	bl	800b280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b08c      	sub	sp, #48	; 0x30
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b22      	cmp	r3, #34	; 0x22
 800b504:	f040 80ab 	bne.w	800b65e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b510:	d117      	bne.n	800b542 <UART_Receive_IT+0x50>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d113      	bne.n	800b542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	b29a      	uxth	r2, r3
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53a:	1c9a      	adds	r2, r3, #2
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	629a      	str	r2, [r3, #40]	; 0x28
 800b540:	e026      	b.n	800b590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d007      	beq.n	800b566 <UART_Receive_IT+0x74>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <UART_Receive_IT+0x82>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	e008      	b.n	800b586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	b2da      	uxtb	r2, r3
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	b29b      	uxth	r3, r3
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	4619      	mov	r1, r3
 800b59e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d15a      	bne.n	800b65a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0220 	bic.w	r2, r2, #32
 800b5b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	695a      	ldr	r2, [r3, #20]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0201 	bic.w	r2, r2, #1
 800b5d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d135      	bne.n	800b650 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	330c      	adds	r3, #12
 800b5f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	e853 3f00 	ldrex	r3, [r3]
 800b5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f023 0310 	bic.w	r3, r3, #16
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60a:	623a      	str	r2, [r7, #32]
 800b60c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	69f9      	ldr	r1, [r7, #28]
 800b610:	6a3a      	ldr	r2, [r7, #32]
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	61bb      	str	r3, [r7, #24]
   return(result);
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e5      	bne.n	800b5ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0310 	and.w	r3, r3, #16
 800b628:	2b10      	cmp	r3, #16
 800b62a:	d10a      	bne.n	800b642 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b62c:	2300      	movs	r3, #0
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fe2d 	bl	800b2a8 <HAL_UARTEx_RxEventCallback>
 800b64e:	e002      	b.n	800b656 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7f5 fdfb 	bl	800124c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	e002      	b.n	800b660 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e000      	b.n	800b660 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b65e:	2302      	movs	r3, #2
  }
}
 800b660:	4618      	mov	r0, r3
 800b662:	3730      	adds	r7, #48	; 0x30
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	b09f      	sub	sp, #124	; 0x7c
 800b66e:	af00      	add	r7, sp, #0
 800b670:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4b9b      	ldr	r3, [pc, #620]	; (800b8e4 <UART_SetConfig+0x27c>)
 800b678:	429a      	cmp	r2, r3
 800b67a:	d904      	bls.n	800b686 <UART_SetConfig+0x1e>
 800b67c:	f640 6156 	movw	r1, #3670	; 0xe56
 800b680:	4899      	ldr	r0, [pc, #612]	; (800b8e8 <UART_SetConfig+0x280>)
 800b682:	f7f9 f8d6 	bl	8004832 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <UART_SetConfig+0x3a>
 800b68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b696:	d004      	beq.n	800b6a2 <UART_SetConfig+0x3a>
 800b698:	f640 6157 	movw	r1, #3671	; 0xe57
 800b69c:	4892      	ldr	r0, [pc, #584]	; (800b8e8 <UART_SetConfig+0x280>)
 800b69e:	f7f9 f8c8 	bl	8004832 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00e      	beq.n	800b6c8 <UART_SetConfig+0x60>
 800b6aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6b2:	d009      	beq.n	800b6c8 <UART_SetConfig+0x60>
 800b6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6bc:	d004      	beq.n	800b6c8 <UART_SetConfig+0x60>
 800b6be:	f640 6158 	movw	r1, #3672	; 0xe58
 800b6c2:	4889      	ldr	r0, [pc, #548]	; (800b8e8 <UART_SetConfig+0x280>)
 800b6c4:	f7f9 f8b5 	bl	8004832 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	695a      	ldr	r2, [r3, #20]
 800b6cc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <UART_SetConfig+0x76>
 800b6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d104      	bne.n	800b6e8 <UART_SetConfig+0x80>
 800b6de:	f640 6159 	movw	r1, #3673	; 0xe59
 800b6e2:	4881      	ldr	r0, [pc, #516]	; (800b8e8 <UART_SetConfig+0x280>)
 800b6e4:	f7f9 f8a5 	bl	8004832 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f4:	68d9      	ldr	r1, [r3, #12]
 800b6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	ea40 0301 	orr.w	r3, r0, r1
 800b6fe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	431a      	orrs	r2, r3
 800b70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	431a      	orrs	r2, r3
 800b710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	4313      	orrs	r3, r2
 800b716:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b722:	f021 010c 	bic.w	r1, r1, #12
 800b726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b72c:	430b      	orrs	r3, r1
 800b72e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73c:	6999      	ldr	r1, [r3, #24]
 800b73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	ea40 0301 	orr.w	r3, r0, r1
 800b746:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	4b67      	ldr	r3, [pc, #412]	; (800b8ec <UART_SetConfig+0x284>)
 800b74e:	429a      	cmp	r2, r3
 800b750:	d004      	beq.n	800b75c <UART_SetConfig+0xf4>
 800b752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b66      	ldr	r3, [pc, #408]	; (800b8f0 <UART_SetConfig+0x288>)
 800b758:	429a      	cmp	r2, r3
 800b75a:	d103      	bne.n	800b764 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b75c:	f7fb fbf0 	bl	8006f40 <HAL_RCC_GetPCLK2Freq>
 800b760:	6778      	str	r0, [r7, #116]	; 0x74
 800b762:	e002      	b.n	800b76a <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b764:	f7fb fbd8 	bl	8006f18 <HAL_RCC_GetPCLK1Freq>
 800b768:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b772:	f040 80c1 	bne.w	800b8f8 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b778:	461c      	mov	r4, r3
 800b77a:	f04f 0500 	mov.w	r5, #0
 800b77e:	4622      	mov	r2, r4
 800b780:	462b      	mov	r3, r5
 800b782:	1891      	adds	r1, r2, r2
 800b784:	6439      	str	r1, [r7, #64]	; 0x40
 800b786:	415b      	adcs	r3, r3
 800b788:	647b      	str	r3, [r7, #68]	; 0x44
 800b78a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b78e:	1912      	adds	r2, r2, r4
 800b790:	eb45 0303 	adc.w	r3, r5, r3
 800b794:	f04f 0000 	mov.w	r0, #0
 800b798:	f04f 0100 	mov.w	r1, #0
 800b79c:	00d9      	lsls	r1, r3, #3
 800b79e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7a2:	00d0      	lsls	r0, r2, #3
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	1911      	adds	r1, r2, r4
 800b7aa:	6639      	str	r1, [r7, #96]	; 0x60
 800b7ac:	416b      	adcs	r3, r5
 800b7ae:	667b      	str	r3, [r7, #100]	; 0x64
 800b7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	f04f 0300 	mov.w	r3, #0
 800b7ba:	1891      	adds	r1, r2, r2
 800b7bc:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7be:	415b      	adcs	r3, r3
 800b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b7ca:	f7f5 f9e3 	bl	8000b94 <__aeabi_uldivmod>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4b48      	ldr	r3, [pc, #288]	; (800b8f4 <UART_SetConfig+0x28c>)
 800b7d4:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d8:	095b      	lsrs	r3, r3, #5
 800b7da:	011e      	lsls	r6, r3, #4
 800b7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7de:	461c      	mov	r4, r3
 800b7e0:	f04f 0500 	mov.w	r5, #0
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	462b      	mov	r3, r5
 800b7e8:	1891      	adds	r1, r2, r2
 800b7ea:	6339      	str	r1, [r7, #48]	; 0x30
 800b7ec:	415b      	adcs	r3, r3
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b7f4:	1912      	adds	r2, r2, r4
 800b7f6:	eb45 0303 	adc.w	r3, r5, r3
 800b7fa:	f04f 0000 	mov.w	r0, #0
 800b7fe:	f04f 0100 	mov.w	r1, #0
 800b802:	00d9      	lsls	r1, r3, #3
 800b804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b808:	00d0      	lsls	r0, r2, #3
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	1911      	adds	r1, r2, r4
 800b810:	65b9      	str	r1, [r7, #88]	; 0x58
 800b812:	416b      	adcs	r3, r5
 800b814:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f04f 0300 	mov.w	r3, #0
 800b820:	1891      	adds	r1, r2, r2
 800b822:	62b9      	str	r1, [r7, #40]	; 0x28
 800b824:	415b      	adcs	r3, r3
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b82c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b830:	f7f5 f9b0 	bl	8000b94 <__aeabi_uldivmod>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4b2e      	ldr	r3, [pc, #184]	; (800b8f4 <UART_SetConfig+0x28c>)
 800b83a:	fba3 1302 	umull	r1, r3, r3, r2
 800b83e:	095b      	lsrs	r3, r3, #5
 800b840:	2164      	movs	r1, #100	; 0x64
 800b842:	fb01 f303 	mul.w	r3, r1, r3
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	3332      	adds	r3, #50	; 0x32
 800b84c:	4a29      	ldr	r2, [pc, #164]	; (800b8f4 <UART_SetConfig+0x28c>)
 800b84e:	fba2 2303 	umull	r2, r3, r2, r3
 800b852:	095b      	lsrs	r3, r3, #5
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b85a:	441e      	add	r6, r3
 800b85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b85e:	4618      	mov	r0, r3
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	1894      	adds	r4, r2, r2
 800b86a:	623c      	str	r4, [r7, #32]
 800b86c:	415b      	adcs	r3, r3
 800b86e:	627b      	str	r3, [r7, #36]	; 0x24
 800b870:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b874:	1812      	adds	r2, r2, r0
 800b876:	eb41 0303 	adc.w	r3, r1, r3
 800b87a:	f04f 0400 	mov.w	r4, #0
 800b87e:	f04f 0500 	mov.w	r5, #0
 800b882:	00dd      	lsls	r5, r3, #3
 800b884:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b888:	00d4      	lsls	r4, r2, #3
 800b88a:	4622      	mov	r2, r4
 800b88c:	462b      	mov	r3, r5
 800b88e:	1814      	adds	r4, r2, r0
 800b890:	653c      	str	r4, [r7, #80]	; 0x50
 800b892:	414b      	adcs	r3, r1
 800b894:	657b      	str	r3, [r7, #84]	; 0x54
 800b896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f04f 0300 	mov.w	r3, #0
 800b8a0:	1891      	adds	r1, r2, r2
 800b8a2:	61b9      	str	r1, [r7, #24]
 800b8a4:	415b      	adcs	r3, r3
 800b8a6:	61fb      	str	r3, [r7, #28]
 800b8a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b8ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b8b0:	f7f5 f970 	bl	8000b94 <__aeabi_uldivmod>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <UART_SetConfig+0x28c>)
 800b8ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b8be:	095b      	lsrs	r3, r3, #5
 800b8c0:	2164      	movs	r1, #100	; 0x64
 800b8c2:	fb01 f303 	mul.w	r3, r1, r3
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	3332      	adds	r3, #50	; 0x32
 800b8cc:	4a09      	ldr	r2, [pc, #36]	; (800b8f4 <UART_SetConfig+0x28c>)
 800b8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d2:	095b      	lsrs	r3, r3, #5
 800b8d4:	f003 0207 	and.w	r2, r3, #7
 800b8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4432      	add	r2, r6
 800b8de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b8e0:	e0c4      	b.n	800ba6c <UART_SetConfig+0x404>
 800b8e2:	bf00      	nop
 800b8e4:	00a037a0 	.word	0x00a037a0
 800b8e8:	0800c070 	.word	0x0800c070
 800b8ec:	40011000 	.word	0x40011000
 800b8f0:	40011400 	.word	0x40011400
 800b8f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8fa:	461c      	mov	r4, r3
 800b8fc:	f04f 0500 	mov.w	r5, #0
 800b900:	4622      	mov	r2, r4
 800b902:	462b      	mov	r3, r5
 800b904:	1891      	adds	r1, r2, r2
 800b906:	6139      	str	r1, [r7, #16]
 800b908:	415b      	adcs	r3, r3
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b910:	1912      	adds	r2, r2, r4
 800b912:	eb45 0303 	adc.w	r3, r5, r3
 800b916:	f04f 0000 	mov.w	r0, #0
 800b91a:	f04f 0100 	mov.w	r1, #0
 800b91e:	00d9      	lsls	r1, r3, #3
 800b920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b924:	00d0      	lsls	r0, r2, #3
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	eb12 0804 	adds.w	r8, r2, r4
 800b92e:	eb43 0905 	adc.w	r9, r3, r5
 800b932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	4618      	mov	r0, r3
 800b938:	f04f 0100 	mov.w	r1, #0
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	f04f 0300 	mov.w	r3, #0
 800b944:	008b      	lsls	r3, r1, #2
 800b946:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b94a:	0082      	lsls	r2, r0, #2
 800b94c:	4640      	mov	r0, r8
 800b94e:	4649      	mov	r1, r9
 800b950:	f7f5 f920 	bl	8000b94 <__aeabi_uldivmod>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4b47      	ldr	r3, [pc, #284]	; (800ba78 <UART_SetConfig+0x410>)
 800b95a:	fba3 2302 	umull	r2, r3, r3, r2
 800b95e:	095b      	lsrs	r3, r3, #5
 800b960:	011e      	lsls	r6, r3, #4
 800b962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b964:	4618      	mov	r0, r3
 800b966:	f04f 0100 	mov.w	r1, #0
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	1894      	adds	r4, r2, r2
 800b970:	60bc      	str	r4, [r7, #8]
 800b972:	415b      	adcs	r3, r3
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b97a:	1812      	adds	r2, r2, r0
 800b97c:	eb41 0303 	adc.w	r3, r1, r3
 800b980:	f04f 0400 	mov.w	r4, #0
 800b984:	f04f 0500 	mov.w	r5, #0
 800b988:	00dd      	lsls	r5, r3, #3
 800b98a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b98e:	00d4      	lsls	r4, r2, #3
 800b990:	4622      	mov	r2, r4
 800b992:	462b      	mov	r3, r5
 800b994:	1814      	adds	r4, r2, r0
 800b996:	64bc      	str	r4, [r7, #72]	; 0x48
 800b998:	414b      	adcs	r3, r1
 800b99a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f04f 0100 	mov.w	r1, #0
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	f04f 0300 	mov.w	r3, #0
 800b9ae:	008b      	lsls	r3, r1, #2
 800b9b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b9b4:	0082      	lsls	r2, r0, #2
 800b9b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b9ba:	f7f5 f8eb 	bl	8000b94 <__aeabi_uldivmod>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4b2d      	ldr	r3, [pc, #180]	; (800ba78 <UART_SetConfig+0x410>)
 800b9c4:	fba3 1302 	umull	r1, r3, r3, r2
 800b9c8:	095b      	lsrs	r3, r3, #5
 800b9ca:	2164      	movs	r1, #100	; 0x64
 800b9cc:	fb01 f303 	mul.w	r3, r1, r3
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	3332      	adds	r3, #50	; 0x32
 800b9d6:	4a28      	ldr	r2, [pc, #160]	; (800ba78 <UART_SetConfig+0x410>)
 800b9d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9dc:	095b      	lsrs	r3, r3, #5
 800b9de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e2:	441e      	add	r6, r3
 800b9e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f04f 0100 	mov.w	r1, #0
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	1894      	adds	r4, r2, r2
 800b9f2:	603c      	str	r4, [r7, #0]
 800b9f4:	415b      	adcs	r3, r3
 800b9f6:	607b      	str	r3, [r7, #4]
 800b9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9fc:	1812      	adds	r2, r2, r0
 800b9fe:	eb41 0303 	adc.w	r3, r1, r3
 800ba02:	f04f 0400 	mov.w	r4, #0
 800ba06:	f04f 0500 	mov.w	r5, #0
 800ba0a:	00dd      	lsls	r5, r3, #3
 800ba0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba10:	00d4      	lsls	r4, r2, #3
 800ba12:	4622      	mov	r2, r4
 800ba14:	462b      	mov	r3, r5
 800ba16:	eb12 0a00 	adds.w	sl, r2, r0
 800ba1a:	eb43 0b01 	adc.w	fp, r3, r1
 800ba1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f04f 0100 	mov.w	r1, #0
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	008b      	lsls	r3, r1, #2
 800ba32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ba36:	0082      	lsls	r2, r0, #2
 800ba38:	4650      	mov	r0, sl
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	f7f5 f8aa 	bl	8000b94 <__aeabi_uldivmod>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <UART_SetConfig+0x410>)
 800ba46:	fba3 1302 	umull	r1, r3, r3, r2
 800ba4a:	095b      	lsrs	r3, r3, #5
 800ba4c:	2164      	movs	r1, #100	; 0x64
 800ba4e:	fb01 f303 	mul.w	r3, r1, r3
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	011b      	lsls	r3, r3, #4
 800ba56:	3332      	adds	r3, #50	; 0x32
 800ba58:	4a07      	ldr	r2, [pc, #28]	; (800ba78 <UART_SetConfig+0x410>)
 800ba5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5e:	095b      	lsrs	r3, r3, #5
 800ba60:	f003 020f 	and.w	r2, r3, #15
 800ba64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4432      	add	r2, r6
 800ba6a:	609a      	str	r2, [r3, #8]
}
 800ba6c:	bf00      	nop
 800ba6e:	377c      	adds	r7, #124	; 0x7c
 800ba70:	46bd      	mov	sp, r7
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	bf00      	nop
 800ba78:	51eb851f 	.word	0x51eb851f

0800ba7c <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b0a4      	sub	sp, #144	; 0x90
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ba86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	605a      	str	r2, [r3, #4]
 800ba90:	609a      	str	r2, [r3, #8]
 800ba92:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800ba9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	605a      	str	r2, [r3, #4]
 800baa8:	609a      	str	r2, [r3, #8]
 800baaa:	60da      	str	r2, [r3, #12]
 800baac:	611a      	str	r2, [r3, #16]
 800baae:	615a      	str	r2, [r3, #20]
 800bab0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800bac4:	2301      	movs	r3, #1
 800bac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800baca:	2300      	movs	r3, #0
 800bacc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800bad0:	e009      	b.n	800bae6 <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800bad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800badc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800bae0:	3301      	adds	r3, #1
 800bae2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800bae6:	79fa      	ldrb	r2, [r7, #7]
 800bae8:	494d      	ldr	r1, [pc, #308]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	3310      	adds	r3, #16
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d3e8      	bcc.n	800bad2 <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800bb00:	79fa      	ldrb	r2, [r7, #7]
 800bb02:	4947      	ldr	r1, [pc, #284]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	3308      	adds	r3, #8
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	4b43      	ldr	r3, [pc, #268]	; (800bc24 <DC_MOTOR_Init+0x1a8>)
 800bb16:	fb03 f302 	mul.w	r3, r3, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	79fa      	ldrb	r2, [r7, #7]
 800bb1e:	4940      	ldr	r1, [pc, #256]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bb32:	fb02 f303 	mul.w	r3, r2, r3
 800bb36:	fbb0 f3f3 	udiv	r3, r0, r3
 800bb3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800bb3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb42:	3b01      	subs	r3, #1
 800bb44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800bb48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb4c:	3b02      	subs	r3, #2
 800bb4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800bb52:	79fa      	ldrb	r2, [r7, #7]
 800bb54:	4932      	ldr	r1, [pc, #200]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800bb64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb68:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800bb6a:	2360      	movs	r3, #96	; 0x60
 800bb6c:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800bb6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb72:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bb78:	2380      	movs	r3, #128	; 0x80
 800bb7a:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800bb7c:	f107 0308 	add.w	r3, r7, #8
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fc fdd1 	bl	8008728 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bb86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb8a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800bb8c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800bb90:	f107 0308 	add.w	r3, r7, #8
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fd fe7c 	bl	8009894 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fc ff77 	bl	8008a94 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bba6:	2300      	movs	r3, #0
 800bba8:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800bbae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe fe0b 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bbbe:	2360      	movs	r3, #96	; 0x60
 800bbc0:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800bbce:	79fa      	ldrb	r2, [r7, #7]
 800bbd0:	4913      	ldr	r1, [pc, #76]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	440b      	add	r3, r1
 800bbdc:	3304      	adds	r3, #4
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fd fc7b 	bl	80094e4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800bbee:	f107 0308 	add.w	r3, r7, #8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7f9 f970 	bl	8004ed8 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800bbf8:	79fa      	ldrb	r2, [r7, #7]
 800bbfa:	4909      	ldr	r1, [pc, #36]	; (800bc20 <DC_MOTOR_Init+0x1a4>)
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	3304      	adds	r3, #4
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	f107 0308 	add.w	r3, r7, #8
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fd f82f 	bl	8008c74 <HAL_TIM_PWM_Start>
}
 800bc16:	bf00      	nop
 800bc18:	3790      	adds	r7, #144	; 0x90
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800c0ec 	.word	0x0800c0ec
 800bc24:	000f4240 	.word	0x000f4240

0800bc28 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	460a      	mov	r2, r1
 800bc32:	71fb      	strb	r3, [r7, #7]
 800bc34:	4613      	mov	r3, r2
 800bc36:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800bc38:	79fa      	ldrb	r2, [r7, #7]
 800bc3a:	4928      	ldr	r1, [pc, #160]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	440b      	add	r3, r1
 800bc46:	3304      	adds	r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800bc4e:	79fa      	ldrb	r2, [r7, #7]
 800bc50:	4922      	ldr	r1, [pc, #136]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	88ba      	ldrh	r2, [r7, #4]
 800bc60:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800bc62:	e035      	b.n	800bcd0 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800bc64:	79fa      	ldrb	r2, [r7, #7]
 800bc66:	491d      	ldr	r1, [pc, #116]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	3304      	adds	r3, #4
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d10a      	bne.n	800bc90 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800bc7a:	79fa      	ldrb	r2, [r7, #7]
 800bc7c:	4917      	ldr	r1, [pc, #92]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	88ba      	ldrh	r2, [r7, #4]
 800bc8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bc8e:	e01f      	b.n	800bcd0 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800bc90:	79fa      	ldrb	r2, [r7, #7]
 800bc92:	4912      	ldr	r1, [pc, #72]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3304      	adds	r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b08      	cmp	r3, #8
 800bca4:	d10a      	bne.n	800bcbc <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800bca6:	79fa      	ldrb	r2, [r7, #7]
 800bca8:	490c      	ldr	r1, [pc, #48]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	88ba      	ldrh	r2, [r7, #4]
 800bcb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bcba:	e009      	b.n	800bcd0 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800bcbc:	79fa      	ldrb	r2, [r7, #7]
 800bcbe:	4907      	ldr	r1, [pc, #28]	; (800bcdc <DC_MOTOR_Start+0xb4>)
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	440b      	add	r3, r1
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	88ba      	ldrh	r2, [r7, #4]
 800bcce:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	0800c0ec 	.word	0x0800c0ec

0800bce0 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	460a      	mov	r2, r1
 800bcea:	71fb      	strb	r3, [r7, #7]
 800bcec:	4613      	mov	r3, r2
 800bcee:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800bcf0:	79fa      	ldrb	r2, [r7, #7]
 800bcf2:	4928      	ldr	r1, [pc, #160]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3304      	adds	r3, #4
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800bd06:	79fa      	ldrb	r2, [r7, #7]
 800bd08:	4922      	ldr	r1, [pc, #136]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	440b      	add	r3, r1
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	88ba      	ldrh	r2, [r7, #4]
 800bd18:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800bd1a:	e035      	b.n	800bd88 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800bd1c:	79fa      	ldrb	r2, [r7, #7]
 800bd1e:	491d      	ldr	r1, [pc, #116]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d10a      	bne.n	800bd48 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800bd32:	79fa      	ldrb	r2, [r7, #7]
 800bd34:	4917      	ldr	r1, [pc, #92]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd36:	4613      	mov	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	440b      	add	r3, r1
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	88ba      	ldrh	r2, [r7, #4]
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bd46:	e01f      	b.n	800bd88 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800bd48:	79fa      	ldrb	r2, [r7, #7]
 800bd4a:	4912      	ldr	r1, [pc, #72]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	3304      	adds	r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b08      	cmp	r3, #8
 800bd5c:	d10a      	bne.n	800bd74 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800bd5e:	79fa      	ldrb	r2, [r7, #7]
 800bd60:	490c      	ldr	r1, [pc, #48]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	440b      	add	r3, r1
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	88ba      	ldrh	r2, [r7, #4]
 800bd70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bd72:	e009      	b.n	800bd88 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800bd74:	79fa      	ldrb	r2, [r7, #7]
 800bd76:	4907      	ldr	r1, [pc, #28]	; (800bd94 <DC_MOTOR_Set_Speed+0xb4>)
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	88ba      	ldrh	r2, [r7, #4]
 800bd86:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	0800c0ec 	.word	0x0800c0ec

0800bd98 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800bd9c:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <DWT_Delay_Init+0x58>)
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	4a13      	ldr	r2, [pc, #76]	; (800bdf0 <DWT_Delay_Init+0x58>)
 800bda2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bda6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800bda8:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <DWT_Delay_Init+0x58>)
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	4a10      	ldr	r2, [pc, #64]	; (800bdf0 <DWT_Delay_Init+0x58>)
 800bdae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a0e      	ldr	r2, [pc, #56]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800bdc0:	4b0c      	ldr	r3, [pc, #48]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a0b      	ldr	r2, [pc, #44]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdc6:	f043 0301 	orr.w	r3, r3, #1
 800bdca:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800bdcc:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800bdd2:	bf00      	nop
    __ASM volatile ("NOP");
 800bdd4:	bf00      	nop
    __ASM volatile ("NOP");
 800bdd6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800bdd8:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <DWT_Delay_Init+0x5c>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800bde0:	2300      	movs	r3, #0
 800bde2:	e000      	b.n	800bde6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800bde4:	2301      	movs	r3, #1
    }
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	e000edf0 	.word	0xe000edf0
 800bdf4:	e0001000 	.word	0xe0001000

0800bdf8 <__libc_init_array>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	4d0d      	ldr	r5, [pc, #52]	; (800be30 <__libc_init_array+0x38>)
 800bdfc:	4c0d      	ldr	r4, [pc, #52]	; (800be34 <__libc_init_array+0x3c>)
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	2600      	movs	r6, #0
 800be04:	42a6      	cmp	r6, r4
 800be06:	d109      	bne.n	800be1c <__libc_init_array+0x24>
 800be08:	4d0b      	ldr	r5, [pc, #44]	; (800be38 <__libc_init_array+0x40>)
 800be0a:	4c0c      	ldr	r4, [pc, #48]	; (800be3c <__libc_init_array+0x44>)
 800be0c:	f000 f820 	bl	800be50 <_init>
 800be10:	1b64      	subs	r4, r4, r5
 800be12:	10a4      	asrs	r4, r4, #2
 800be14:	2600      	movs	r6, #0
 800be16:	42a6      	cmp	r6, r4
 800be18:	d105      	bne.n	800be26 <__libc_init_array+0x2e>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be20:	4798      	blx	r3
 800be22:	3601      	adds	r6, #1
 800be24:	e7ee      	b.n	800be04 <__libc_init_array+0xc>
 800be26:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2a:	4798      	blx	r3
 800be2c:	3601      	adds	r6, #1
 800be2e:	e7f2      	b.n	800be16 <__libc_init_array+0x1e>
 800be30:	0800c11c 	.word	0x0800c11c
 800be34:	0800c11c 	.word	0x0800c11c
 800be38:	0800c11c 	.word	0x0800c11c
 800be3c:	0800c120 	.word	0x0800c120

0800be40 <memset>:
 800be40:	4402      	add	r2, r0
 800be42:	4603      	mov	r3, r0
 800be44:	4293      	cmp	r3, r2
 800be46:	d100      	bne.n	800be4a <memset+0xa>
 800be48:	4770      	bx	lr
 800be4a:	f803 1b01 	strb.w	r1, [r3], #1
 800be4e:	e7f9      	b.n	800be44 <memset+0x4>

0800be50 <_init>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	bf00      	nop
 800be54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be56:	bc08      	pop	{r3}
 800be58:	469e      	mov	lr, r3
 800be5a:	4770      	bx	lr

0800be5c <_fini>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	bf00      	nop
 800be60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be62:	bc08      	pop	{r3}
 800be64:	469e      	mov	lr, r3
 800be66:	4770      	bx	lr
