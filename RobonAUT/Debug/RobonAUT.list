
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e34  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08011ffc  08011ffc  00021ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e4  080122e4  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  080122e4  080122e4  000222e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122ec  080122ec  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122ec  080122ec  000222ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122f0  080122f0  000222f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080122f4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f78  200001d0  080124c0  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a148  080124c0  0003a148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032a41  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f18  00000000  00000000  00062c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00066b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac8  00000000  00000000  00068770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002942e  00000000  00000000  0006a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002abf0  00000000  00000000  00093666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6996  00000000  00000000  000be256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b10  00000000  00000000  001b4c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001d0 	.word	0x200001d0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08011fe4 	.word	0x08011fe4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001d4 	.word	0x200001d4
 8000204:	08011fe4 	.word	0x08011fe4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96e 	b.w	8000e88 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	4604      	mov	r4, r0
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8083 	bne.w	8000cda <__udivmoddi4+0x116>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d947      	bls.n	8000c6a <__udivmoddi4+0xa6>
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	b142      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000be0:	f1c2 0020 	rsb	r0, r2, #32
 8000be4:	fa24 f000 	lsr.w	r0, r4, r0
 8000be8:	4091      	lsls	r1, r2
 8000bea:	4097      	lsls	r7, r2
 8000bec:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf0:	4094      	lsls	r4, r2
 8000bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bfc:	fa1f fe87 	uxth.w	lr, r7
 8000c00:	fb08 c116 	mls	r1, r8, r6, ip
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f10e 	mul.w	r1, r6, lr
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x60>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 8119 	bcs.w	8000e4c <__udivmoddi4+0x288>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 8116 	bls.w	8000e4c <__udivmoddi4+0x288>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	443b      	add	r3, r7
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x8c>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	f080 8105 	bcs.w	8000e50 <__udivmoddi4+0x28c>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f240 8102 	bls.w	8000e50 <__udivmoddi4+0x28c>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	443c      	add	r4, r7
 8000c50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c54:	eba4 040e 	sub.w	r4, r4, lr
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa0>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xaa>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d150      	bne.n	8000d18 <__udivmoddi4+0x154>
 8000c76:	1bcb      	subs	r3, r1, r7
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	2601      	movs	r6, #1
 8000c82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c86:	0c21      	lsrs	r1, r4, #16
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb08 f30c 	mul.w	r3, r8, ip
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xe4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0xe2>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f200 80e9 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1ac9      	subs	r1, r1, r3
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x10c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x10a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80d9 	bhi.w	8000e80 <__udivmoddi4+0x2bc>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e7bf      	b.n	8000c5a <__udivmoddi4+0x96>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d909      	bls.n	8000cf2 <__udivmoddi4+0x12e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <__udivmoddi4+0x282>
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cea:	4630      	mov	r0, r6
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	fab3 f683 	clz	r6, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d14a      	bne.n	8000d90 <__udivmoddi4+0x1cc>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0x140>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 80b8 	bhi.w	8000e74 <__udivmoddi4+0x2b0>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0a8      	beq.n	8000c64 <__udivmoddi4+0xa0>
 8000d12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d20:	4097      	lsls	r7, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2a:	40d9      	lsrs	r1, r3
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d40:	fb06 f108 	mul.w	r1, r6, r8
 8000d44:	4299      	cmp	r1, r3
 8000d46:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x19c>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d52:	f080 808d 	bcs.w	8000e70 <__udivmoddi4+0x2ac>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 808a 	bls.w	8000e70 <__udivmoddi4+0x2ac>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	443b      	add	r3, r7
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b281      	uxth	r1, r0
 8000d64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb00 f308 	mul.w	r3, r0, r8
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1c4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7e:	d273      	bcs.n	8000e68 <__udivmoddi4+0x2a4>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d971      	bls.n	8000e68 <__udivmoddi4+0x2a4>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4439      	add	r1, r7
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8e:	e778      	b.n	8000c82 <__udivmoddi4+0xbe>
 8000d90:	f1c6 0c20 	rsb	ip, r6, #32
 8000d94:	fa03 f406 	lsl.w	r4, r3, r6
 8000d98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da2:	fa01 f306 	lsl.w	r3, r1, r6
 8000da6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	0c3b      	lsrs	r3, r7, #16
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fa1f f884 	uxth.w	r8, r4
 8000dba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x220>
 8000dd2:	1861      	adds	r1, r4, r1
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d248      	bcs.n	8000e6c <__udivmoddi4+0x2a8>
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	d946      	bls.n	8000e6c <__udivmoddi4+0x2a8>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	4421      	add	r1, r4
 8000de4:	eba1 010a 	sub.w	r1, r1, sl
 8000de8:	b2bf      	uxth	r7, r7
 8000dea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df6:	fb00 f808 	mul.w	r8, r0, r8
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x24a>
 8000dfe:	19e7      	adds	r7, r4, r7
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d22e      	bcs.n	8000e64 <__udivmoddi4+0x2a0>
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d92c      	bls.n	8000e64 <__udivmoddi4+0x2a0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4427      	add	r7, r4
 8000e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e12:	eba7 0708 	sub.w	r7, r7, r8
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	454f      	cmp	r7, r9
 8000e1c:	46c6      	mov	lr, r8
 8000e1e:	4649      	mov	r1, r9
 8000e20:	d31a      	bcc.n	8000e58 <__udivmoddi4+0x294>
 8000e22:	d017      	beq.n	8000e54 <__udivmoddi4+0x290>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x27a>
 8000e26:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e32:	40f2      	lsrs	r2, r6
 8000e34:	ea4c 0202 	orr.w	r2, ip, r2
 8000e38:	40f7      	lsrs	r7, r6
 8000e3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	462e      	mov	r6, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fd      	b.n	8000c50 <__udivmoddi4+0x8c>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d2e5      	bcs.n	8000e24 <__udivmoddi4+0x260>
 8000e58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e60:	3801      	subs	r0, #1
 8000e62:	e7df      	b.n	8000e24 <__udivmoddi4+0x260>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e7d2      	b.n	8000e0e <__udivmoddi4+0x24a>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	e78d      	b.n	8000d88 <__udivmoddi4+0x1c4>
 8000e6c:	4681      	mov	r9, r0
 8000e6e:	e7b9      	b.n	8000de4 <__udivmoddi4+0x220>
 8000e70:	4666      	mov	r6, ip
 8000e72:	e775      	b.n	8000d60 <__udivmoddi4+0x19c>
 8000e74:	4630      	mov	r0, r6
 8000e76:	e74a      	b.n	8000d0e <__udivmoddi4+0x14a>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	4439      	add	r1, r7
 8000e7e:	e713      	b.n	8000ca8 <__udivmoddi4+0xe4>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	e724      	b.n	8000cd0 <__udivmoddi4+0x10c>
 8000e86:	bf00      	nop

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b0a8      	sub	sp, #160	; 0xa0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000ece:	f011 f80b 	bl	8011ee8 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4aaa      	ldr	r2, [pc, #680]	; (8001180 <SERVO_Init+0x2f4>)
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	4413      	add	r3, r2
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fad4 	bl	800048c <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4ba6      	ldr	r3, [pc, #664]	; (8001184 <SERVO_Init+0x2f8>)
 8000eea:	f7ff fc73 	bl	80007d4 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddd 	bl	8000ab4 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a9f      	ldr	r2, [pc, #636]	; (8001180 <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fabd 	bl	800048c <__aeabi_ui2d>
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
 8000f16:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f1a:	f7ff fab7 	bl	800048c <__aeabi_ui2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b99      	ldr	r3, [pc, #612]	; (8001188 <SERVO_Init+0x2fc>)
 8000f24:	f7ff f976 	bl	8000214 <__adddf3>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b95      	ldr	r3, [pc, #596]	; (800118c <SERVO_Init+0x300>)
 8000f36:	f7ff fb23 	bl	8000580 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc47 	bl	80007d4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <SERVO_Init+0x2fc>)
 8000f54:	f7ff f95c 	bl	8000210 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fda8 	bl	8000ab4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f6a:	2313      	movs	r3, #19
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f70:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4a81      	ldr	r2, [pc, #516]	; (8001180 <SERVO_Init+0x2f4>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a82      	ldr	r2, [pc, #520]	; (8001190 <SERVO_Init+0x304>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	; (8001194 <SERVO_Init+0x308>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <SERVO_Init+0x308>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	e046      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a75      	ldr	r2, [pc, #468]	; (8001180 <SERVO_Init+0x2f4>)
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10e      	bne.n	8000fd8 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <SERVO_Init+0x308>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <SERVO_Init+0x308>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e02e      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a69      	ldr	r2, [pc, #420]	; (8001180 <SERVO_Init+0x2f4>)
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <SERVO_Init+0x30c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b69      	ldr	r3, [pc, #420]	; (8001194 <SERVO_Init+0x308>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a68      	ldr	r2, [pc, #416]	; (8001194 <SERVO_Init+0x308>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <SERVO_Init+0x308>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	e016      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <SERVO_Init+0x2f4>)
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4413      	add	r3, r2
 8001010:	3308      	adds	r3, #8
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <SERVO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <SERVO_Init+0x308>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <SERVO_Init+0x308>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <SERVO_Init+0x308>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <SERVO_Init+0x2f4>)
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	4413      	add	r3, r2
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8001044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001048:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 800104e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4618      	mov	r0, r3
 8001062:	f008 f9c1 	bl	80093e8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800106e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f009 fa6b 	bl	800a554 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f008 fb66 	bl	8009754 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001094:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a f9f8 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4a32      	ldr	r2, [pc, #200]	; (8001180 <SERVO_Init+0x2f4>)
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	4413      	add	r3, r2
 80010bc:	3310      	adds	r3, #16
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f009 f86b 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010d2:	f7ff f9db 	bl	800048c <__aeabi_ui2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <SERVO_Init+0x2f4>)
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	4413      	add	r3, r2
 80010e2:	3318      	adds	r3, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9f2 	bl	80004d0 <__aeabi_f2d>
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SERVO_Init+0x314>)
 80010f2:	f7ff fb6f 	bl	80007d4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fa3f 	bl	8000580 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	88fc      	ldrh	r4, [r7, #6]
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcd2 	bl	8000ab4 <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SERVO_Init+0x318>)
 8001116:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800111a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800111e:	f7ff f9b5 	bl	800048c <__aeabi_ui2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SERVO_Init+0x31c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9d1 	bl	80004d0 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SERVO_Init+0x314>)
 8001134:	f7ff fb4e 	bl	80007d4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa1e 	bl	8000580 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	88fc      	ldrh	r4, [r7, #6]
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b299      	uxth	r1, r3
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SERVO_Init+0x318>)
 8001158:	00a3      	lsls	r3, r4, #2
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SERVO_Init+0x2f4>)
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	4413      	add	r3, r2
 8001168:	3310      	adds	r3, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f008 fbde 	bl	8009934 <HAL_TIM_PWM_Start>

}
 8001178:	bf00      	nop
 800117a:	37a0      	adds	r7, #160	; 0xa0
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	0801227c 	.word	0x0801227c
 8001184:	41490000 	.word	0x41490000
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	40490000 	.word	0x40490000
 8001190:	40001800 	.word	0x40001800
 8001194:	40023800 	.word	0x40023800
 8001198:	40000400 	.word	0x40000400
 800119c:	40000800 	.word	0x40000800
 80011a0:	40340000 	.word	0x40340000
 80011a4:	200001ec 	.word	0x200001ec
 80011a8:	40066666 	.word	0x40066666

080011ac <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	ed87 0a00 	vstr	s0, [r7]
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <SERVO_MoveTo+0x94>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SERVO_MoveTo+0x94>)
 80011ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f972 	bl	80004d0 <__aeabi_f2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SERVO_MoveTo+0x98>)
 80011f2:	f7ff faef 	bl	80007d4 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SERVO_MoveTo+0x94>)
 8001202:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f950 	bl	80004ac <__aeabi_i2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7fe fffe 	bl	8000214 <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc48 	bl	8000ab4 <__aeabi_d2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SERVO_MoveTo+0x9c>)
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	4413      	add	r3, r2
 8001230:	330c      	adds	r3, #12
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	200001ec 	.word	0x200001ec
 8001244:	40668000 	.word	0x40668000
 8001248:	0801227c 	.word	0x0801227c

0800124c <HAL_UART_RxCpltCallback>:
void Source_Target_allito(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d11f      	bne.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x50>
		timer_counter += 1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800127a:	701a      	strb	r2, [r3, #0]
		if(9 < timer_counter) {
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d915      	bls.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x50>
			Vonalas_tombok_torlese();
 8001284:	f001 fb52 	bl	800292c <Vonalas_tombok_torlese>
			Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001288:	490d      	ldr	r1, [pc, #52]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800128c:	f000 fed8 	bl	8002040 <Vonalszenzor_operal>
			Vonalas_tombok_feltoltese();
 8001290:	f001 fba2 	bl	80029d8 <Vonalas_tombok_feltoltese>
			Irany_valaszto();
 8001294:	f001 fccc 	bl	8002c30 <Irany_valaszto>
			Kovetendo_vonal_valaszto(&vonal_kovetni_e, &vonal_kovetni_h, aktualis_irany);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	490b      	ldr	r1, [pc, #44]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80012a2:	f001 fd89 	bl	8002db8 <Kovetendo_vonal_valaszto>
			Szervo_szog_beallit();
 80012a6:	f001 fffb 	bl	80032a0 <Szervo_szog_beallit>
			timer_counter = 0;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);*/
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20001750 	.word	0x20001750
 80012bc:	2000026d 	.word	0x2000026d
 80012c0:	20000218 	.word	0x20000218
 80012c4:	200001f4 	.word	0x200001f4
 80012c8:	2000013d 	.word	0x2000013d
 80012cc:	20000240 	.word	0x20000240
 80012d0:	20000248 	.word	0x20000248

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80012da:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 80012dc:	463b      	mov	r3, r7
 80012de:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f004 f82b 	bl	800533c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f97d 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 fdcd 	bl	8001e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ee:	f000 fd81 	bl	8001df4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012f2:	f000 f9e9 	bl	80016c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012f6:	f000 fa15 	bl	8001724 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012fa:	f000 faa5 	bl	8001848 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012fe:	f000 fad9 	bl	80018b4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001302:	f000 fb59 	bl	80019b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001306:	f000 fbb1 	bl	8001a6c <MX_TIM4_Init>
  MX_UART4_Init();
 800130a:	f000 fd1f 	bl	8001d4c <MX_UART4_Init>
  MX_TIM8_Init();
 800130e:	f000 fc01 	bl	8001b14 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001312:	f000 fd45 	bl	8001da0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001316:	f000 fa33 	bl	8001780 <MX_I2C3_Init>
  MX_TIM12_Init();
 800131a:	f000 fca7 	bl	8001c6c <MX_TIM12_Init>
  MX_DMA_Init();
 800131e:	f000 fd93 	bl	8001e48 <MX_DMA_Init>
  MX_TIM2_Init();
 8001322:	f000 fafd 	bl	8001920 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001326:	f000 fa59 	bl	80017dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fdae 	bl	8000e8c <SERVO_Init>
	SERVO_MoveTo(SZERVO, 90);
 8001330:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80015a0 <main+0x2cc>
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff39 	bl	80011ac <SERVO_MoveTo>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800133a:	2000      	movs	r0, #0
 800133c:	f010 fc46 	bl	8011bcc <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001340:	2001      	movs	r0, #1
 8001342:	f010 fc43 	bl	8011bcc <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f010 fd15 	bl	8011d78 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2001      	movs	r0, #1
 8001352:	f010 fd11 	bl	8011d78 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135c:	4891      	ldr	r0, [pc, #580]	; (80015a4 <main+0x2d0>)
 800135e:	f005 f9d1 	bl	8006704 <HAL_GPIO_WritePin>
	motvez_k = 455;
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <main+0x2d4>)
 8001364:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001368:	601a      	str	r2, [r3, #0]

	Vonalszenzor_minta_kuldes(leszed);
 800136a:	4890      	ldr	r0, [pc, #576]	; (80015ac <main+0x2d8>)
 800136c:	f001 fab6 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(teszt_minta);		//csak hogy lassuk, hogy bekapcsolt
 8001370:	488f      	ldr	r0, [pc, #572]	; (80015b0 <main+0x2dc>)
 8001372:	f001 fab3 	bl	80028dc <Vonalszenzor_minta_kuldes>
	HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f004 f852 	bl	8005420 <HAL_Delay>
	Vonalszenzor_minta_kuldes(leszed);
 800137c:	488b      	ldr	r0, [pc, #556]	; (80015ac <main+0x2d8>)
 800137e:	f001 faad 	bl	80028dc <Vonalszenzor_minta_kuldes>
	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001382:	488c      	ldr	r0, [pc, #560]	; (80015b4 <main+0x2e0>)
 8001384:	f008 f920 	bl	80095c8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001388:	2104      	movs	r1, #4
 800138a:	488b      	ldr	r0, [pc, #556]	; (80015b8 <main+0x2e4>)
 800138c:	f008 fad2 	bl	8009934 <HAL_TIM_PWM_Start>

	//Vonalszenzor inicializacio
	Vonalszenzor_Init();
 8001390:	f000 fe44 	bl	800201c <Vonalszenzor_Init>

	Source_Target_allito();
 8001394:	f002 f872 	bl	800347c <Source_Target_allito>
	Graf_csucs_feltolt();
 8001398:	f002 fa84 	bl	80038a4 <Graf_csucs_feltolt>
	Kapuk_letilt();
 800139c:	f003 f806 	bl	80043ac <Kapuk_letilt>
	Dijkstra(graf_csucs, source, target1, target2);
 80013a0:	4b86      	ldr	r3, [pc, #536]	; (80015bc <main+0x2e8>)
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <main+0x2ec>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b86      	ldr	r3, [pc, #536]	; (80015c4 <main+0x2f0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4886      	ldr	r0, [pc, #536]	; (80015c8 <main+0x2f4>)
 80013ae:	f002 f929 	bl	8003604 <Dijkstra>
	Graf_irany_feltolt();
 80013b2:	f002 fc35 	bl	8003c20 <Graf_irany_feltolt>
	Iranyok_torlo();
 80013b6:	f003 f9b5 	bl	8004724 <Iranyok_torlo>
	Iranyok_osszeallito();
 80013ba:	f003 f9cd 	bl	8004758 <Iranyok_osszeallito>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 80013be:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013c2:	4a82      	ldr	r2, [pc, #520]	; (80015cc <main+0x2f8>)
 80013c4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80013c8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013cc:	2252      	movs	r2, #82	; 0x52
 80013ce:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 80013d2:	2314      	movs	r3, #20
 80013d4:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80013d8:	23ff      	movs	r3, #255	; 0xff
 80013da:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80013de:	23ff      	movs	r3, #255	; 0xff
 80013e0:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80013e4:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2303      	movs	r3, #3
 80013f0:	2184      	movs	r1, #132	; 0x84
 80013f2:	4876      	ldr	r0, [pc, #472]	; (80015cc <main+0x2f8>)
 80013f4:	f005 fb9c 	bl	8006b30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80013f8:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2303      	movs	r3, #3
 8001404:	2186      	movs	r1, #134	; 0x86
 8001406:	4871      	ldr	r0, [pc, #452]	; (80015cc <main+0x2f8>)
 8001408:	f005 fb92 	bl	8006b30 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800140c:	2313      	movs	r3, #19
 800140e:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001412:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2184      	movs	r1, #132	; 0x84
 8001420:	486a      	ldr	r0, [pc, #424]	; (80015cc <main+0x2f8>)
 8001422:	f005 fb85 	bl	8006b30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001426:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	2184      	movs	r1, #132	; 0x84
 8001434:	4865      	ldr	r0, [pc, #404]	; (80015cc <main+0x2f8>)
 8001436:	f005 fc79 	bl	8006d2c <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 800143a:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 800143e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001448:	2313      	movs	r3, #19
 800144a:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 800144e:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2302      	movs	r3, #2
 800145a:	2184      	movs	r1, #132	; 0x84
 800145c:	485b      	ldr	r0, [pc, #364]	; (80015cc <main+0x2f8>)
 800145e:	f005 fb67 	bl	8006b30 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 8001462:	2002      	movs	r0, #2
 8001464:	f003 ffdc 	bl	8005420 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 8001468:	2313      	movs	r3, #19
 800146a:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800146e:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	2184      	movs	r1, #132	; 0x84
 800147c:	4853      	ldr	r0, [pc, #332]	; (80015cc <main+0x2f8>)
 800147e:	f005 fb57 	bl	8006b30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001482:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	2184      	movs	r1, #132	; 0x84
 8001490:	484e      	ldr	r0, [pc, #312]	; (80015cc <main+0x2f8>)
 8001492:	f005 fc4b 	bl	8006d2c <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001496:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 800149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80014a4:	2313      	movs	r3, #19
 80014a6:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80014aa:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80014ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2302      	movs	r3, #2
 80014b6:	2184      	movs	r1, #132	; 0x84
 80014b8:	4844      	ldr	r0, [pc, #272]	; (80015cc <main+0x2f8>)
 80014ba:	f005 fb39 	bl	8006b30 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 80014be:	2002      	movs	r0, #2
 80014c0:	f003 ffae 	bl	8005420 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 80014c4:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014c8:	f00b f926 	bl	800c718 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 80014cc:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014d0:	f00b f8ca 	bl	800c668 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 80014d4:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014d8:	f00b f8ff 	bl	800c6da <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 80014dc:	2103      	movs	r1, #3
 80014de:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014e2:	f00b fa4b 	bl	800c97c <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 80014e6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80014ea:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014ee:	f00b fabb 	bl	800ca68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 80014f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014f6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014fa:	f00b fc41 	bl	800cd80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 80014fe:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001502:	f00b fd7b 	bl	800cffc <VL53L1_StartMeasurement>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 8001506:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800150a:	f00b fdf9 	bl	800d100 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 800150e:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8001512:	4619      	mov	r1, r3
 8001514:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001518:	f00b ffae 	bl	800d478 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800151c:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001520:	f00b fdd8 	bl	800d0d4 <VL53L1_ClearInterruptAndStartMeasurement>

		if (btnEnable == 1) {
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <main+0x2fc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d117      	bne.n	800155c <main+0x288>
			if (motvezEnable == 1) {
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <main+0x300>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d1e8      	bne.n	8001506 <main+0x232>
					motvez_k = motvez_d / 2;
					tolatas = true;
					kormanyzas_agresszivitas = 0.7;
				}*/
				//if (motvez_d /2 > motvez_k) {							// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_k); 		// ha pwm1 nagyobb, hatramenet
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <main+0x2d4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	2000      	movs	r0, #0
 800153e:	f010 fc77 	bl	8011e30 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - motvez_k);
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <main+0x304>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <main+0x2d4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	2001      	movs	r0, #1
 8001556:	f010 fc6b 	bl	8011e30 <DC_MOTOR_Set_Speed>
 800155a:	e7d4      	b.n	8001506 <main+0x232>
				//}
			}
		} else {
			veretesi_cnt = 0;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <main+0x308>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
			fekezes_cnt = 0;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <main+0x30c>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
			//SERVO_MoveTo(SZERVO, 90);
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);	// ez a ketto a megallas
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <main+0x304>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	2000      	movs	r0, #0
 8001578:	f010 fc5a 	bl	8011e30 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <main+0x304>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0fda      	lsrs	r2, r3, #31
 8001582:	4413      	add	r3, r2
 8001584:	105b      	asrs	r3, r3, #1
 8001586:	425b      	negs	r3, r3
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <main+0x304>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	2001      	movs	r0, #1
 8001598:	f010 fc4a 	bl	8011e30 <DC_MOTOR_Set_Speed>
		VL53L1_WaitMeasurementDataReady( Dev );
 800159c:	e7b3      	b.n	8001506 <main+0x232>
 800159e:	bf00      	nop
 80015a0:	42b40000 	.word	0x42b40000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	20000260 	.word	0x20000260
 80015ac:	20000004 	.word	0x20000004
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	20001750 	.word	0x20001750
 80015b8:	200017dc 	.word	0x200017dc
 80015bc:	20000184 	.word	0x20000184
 80015c0:	20000188 	.word	0x20000188
 80015c4:	2000018c 	.word	0x2000018c
 80015c8:	200005b0 	.word	0x200005b0
 80015cc:	200003c4 	.word	0x200003c4
 80015d0:	200001f0 	.word	0x200001f0
 80015d4:	20000001 	.word	0x20000001
 80015d8:	20000150 	.word	0x20000150
 80015dc:	20000264 	.word	0x20000264
 80015e0:	20000268 	.word	0x20000268

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f010 fcda 	bl	8011fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <SystemClock_Config+0xdc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <SystemClock_Config+0xdc>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <SystemClock_Config+0xdc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <SystemClock_Config+0xe0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <SystemClock_Config+0xe0>)
 800162e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <SystemClock_Config+0xe0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001658:	23b4      	movs	r3, #180	; 0xb4
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fc8d 	bl	8007f8c <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001678:	f003 f8f6 	bl	8004868 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800167c:	f006 f8aa 	bl	80077d4 <HAL_PWREx_EnableOverDrive>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001686:	f003 f8ef 	bl	8004868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168a:	230f      	movs	r3, #15
 800168c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168e:	2302      	movs	r3, #2
 8001690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800169a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800169c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2105      	movs	r1, #5
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 f8e3 	bl	8007874 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016b4:	f003 f8d8 	bl	8004868 <Error_Handler>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3750      	adds	r7, #80	; 0x50
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_I2C1_Init+0x50>)
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_I2C1_Init+0x54>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_I2C1_Init+0x50>)
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_I2C1_Init+0x58>)
 80016d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_I2C1_Init+0x50>)
 80016e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_I2C1_Init+0x50>)
 8001706:	f005 f847 	bl	8006798 <HAL_I2C_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001710:	f003 f8aa 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200003c4 	.word	0x200003c4
 800171c:	40005400 	.word	0x40005400
 8001720:	000186a0 	.word	0x000186a0

08001724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2C2_Init+0x50>)
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <MX_I2C2_Init+0x54>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_I2C2_Init+0x50>)
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_I2C2_Init+0x58>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_I2C2_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_I2C2_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_I2C2_Init+0x50>)
 8001742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_I2C2_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_I2C2_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_I2C2_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_I2C2_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_I2C2_Init+0x50>)
 8001762:	f005 f819 	bl	8006798 <HAL_I2C_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800176c:	f003 f87c 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000418 	.word	0x20000418
 8001778:	40005800 	.word	0x40005800
 800177c:	000186a0 	.word	0x000186a0

08001780 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C3_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C3_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C3_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C3_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C3_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C3_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C3_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C3_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C3_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C3_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C3_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C3_Init+0x50>)
 80017be:	f004 ffeb 	bl	8006798 <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f003 f84e 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000288 	.word	0x20000288
 80017d4:	40005c00 	.word	0x40005c00
 80017d8:	000186a0 	.word	0x000186a0

080017dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_SPI1_Init+0x64>)
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <MX_SPI1_Init+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_SPI1_Init+0x64>)
 80017e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_SPI1_Init+0x64>)
 8001808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_SPI1_Init+0x64>)
 8001810:	2220      	movs	r2, #32
 8001812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_SPI1_Init+0x64>)
 8001828:	220a      	movs	r2, #10
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_SPI1_Init+0x64>)
 800182e:	f006 ff0b 	bl	8008648 <HAL_SPI_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001838:	f003 f816 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200016f8 	.word	0x200016f8
 8001844:	40013000 	.word	0x40013000

08001848 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_SPI2_Init+0x64>)
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <MX_SPI2_Init+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI2_Init+0x64>)
 8001854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_SPI2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI2_Init+0x64>)
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI2_Init+0x64>)
 800187c:	2218      	movs	r2, #24
 800187e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_SPI2_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI2_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_SPI2_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI2_Init+0x64>)
 8001894:	220a      	movs	r2, #10
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_SPI2_Init+0x64>)
 800189a:	f006 fed5 	bl	8008648 <HAL_SPI_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018a4:	f002 ffe0 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200002dc 	.word	0x200002dc
 80018b0:	40003800 	.word	0x40003800

080018b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_SPI3_Init+0x64>)
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <MX_SPI3_Init+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_SPI3_Init+0x64>)
 80018c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_SPI3_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_SPI3_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_SPI3_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_SPI3_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_SPI3_Init+0x64>)
 80018e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_SPI3_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_SPI3_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_SPI3_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_SPI3_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_SPI3_Init+0x64>)
 8001900:	220a      	movs	r2, #10
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_SPI3_Init+0x64>)
 8001906:	f006 fe9f 	bl	8008648 <HAL_SPI_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001910:	f002 ffaa 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200004b4 	.word	0x200004b4
 800191c:	40003c00 	.word	0x40003c00

08001920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <MX_TIM2_Init+0x94>)
 800193e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001946:	f240 12f3 	movw	r2, #499	; 0x1f3
 800194a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MX_TIM2_Init+0x94>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001954:	2259      	movs	r2, #89	; 0x59
 8001956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_TIM2_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001966:	f007 fd3f 	bl	80093e8 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001970:	f002 ff7a 	bl	8004868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001982:	f008 fde7 	bl	800a554 <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800198c:	f002 ff6c 	bl	8004868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_TIM2_Init+0x94>)
 800199e:	f009 fd79 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a8:	f002 ff5e 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20001750 	.word	0x20001750

080019b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <MX_TIM3_Init+0xb0>)
 80019de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM3_Init+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a00:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM3_Init+0xac>)
 8001a02:	f007 fea7 	bl	8009754 <HAL_TIM_PWM_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a0c:	f002 ff2c 	bl	8004868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <MX_TIM3_Init+0xac>)
 8001a20:	f009 fd38 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a2a:	f002 ff1d 	bl	8004868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2e:	2360      	movs	r3, #96	; 0x60
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM3_Init+0xac>)
 8001a46:	f008 fbad 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a50:	f002 ff0a 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM3_Init+0xac>)
 8001a56:	f003 fa5f 	bl	8004f18 <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000046c 	.word	0x2000046c
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f010 fa96 	bl	8011fac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <MX_TIM4_Init+0xa4>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001ada:	f008 f8b3 	bl	8009c44 <HAL_TIM_Encoder_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ae4:	f002 fec0 	bl	8004868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001af6:	f009 fccd 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b00:	f002 feb2 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000037c 	.word	0x2000037c
 8001b10:	40000800 	.word	0x40000800

08001b14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b096      	sub	sp, #88	; 0x58
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f010 fa2d 	bl	8011fac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b52:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b54:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <MX_TIM8_Init+0x154>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b60:	2260      	movs	r2, #96	; 0x60
 8001b62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b7e:	4839      	ldr	r0, [pc, #228]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b80:	f007 fc32 	bl	80093e8 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b8a:	f002 fe6d 	bl	8004868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4832      	ldr	r0, [pc, #200]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001b9c:	f008 fcda 	bl	800a554 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001ba6:	f002 fe5f 	bl	8004868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001baa:	482e      	ldr	r0, [pc, #184]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001bac:	f007 fdd2 	bl	8009754 <HAL_TIM_PWM_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bb6:	f002 fe57 	bl	8004868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4826      	ldr	r0, [pc, #152]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001bca:	f009 fc63 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001bd4:	f002 fe48 	bl	8004868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	; 0x60
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4819      	ldr	r0, [pc, #100]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001bfe:	f008 fad1 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c08:	f002 fe2e 	bl	8004868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	2208      	movs	r2, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	4813      	ldr	r0, [pc, #76]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001c16:	f008 fac5 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c20:	f002 fe22 	bl	8004868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001c48:	f009 fd02 	bl	800b650 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c52:	f002 fe09 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MX_TIM8_Init+0x150>)
 8001c58:	f003 f95e 	bl	8004f18 <HAL_TIM_MspPostInit>

}
 8001c5c:	bf00      	nop
 8001c5e:	3758      	adds	r7, #88	; 0x58
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000334 	.word	0x20000334
 8001c68:	40010400 	.word	0x40010400

08001c6c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001c94:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <MX_TIM12_Init+0xdc>)
 8001c96:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001c9a:	2213      	movs	r2, #19
 8001c9c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001ca6:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001caa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001cb8:	4822      	ldr	r0, [pc, #136]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001cba:	f007 fb95 	bl	80093e8 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f002 fdd0 	bl	8004868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481b      	ldr	r0, [pc, #108]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001cd6:	f008 fc3d 	bl	800a554 <HAL_TIM_ConfigClockSource>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ce0:	f002 fdc2 	bl	8004868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ce4:	4817      	ldr	r0, [pc, #92]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001ce6:	f007 fd35 	bl	8009754 <HAL_TIM_PWM_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001cf0:	f002 fdba 	bl	8004868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480e      	ldr	r0, [pc, #56]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001d0c:	f008 fa4a 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001d16:	f002 fda7 	bl	8004868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001d22:	f008 fa3f 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001d2c:	f002 fd9c 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001d32:	f007 fc49 	bl	80095c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM12_Init+0xd8>)
 8001d38:	f003 f8ee 	bl	8004f18 <HAL_TIM_MspPostInit>

}
 8001d3c:	bf00      	nop
 8001d3e:	3730      	adds	r7, #48	; 0x30
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200017dc 	.word	0x200017dc
 8001d48:	40001800 	.word	0x40001800

08001d4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <MX_UART4_Init+0x50>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_UART4_Init+0x4c>)
 8001d84:	f009 fd44 	bl	800b810 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d8e:	f002 fd6b 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200016b4 	.word	0x200016b4
 8001d9c:	40004c00 	.word	0x40004c00

08001da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MX_USART1_UART_Init+0x50>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_USART1_UART_Init+0x4c>)
 8001dd8:	f009 fd1a 	bl	800b810 <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001de2:	f002 fd41 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000056c 	.word	0x2000056c
 8001df0:	40011000 	.word	0x40011000

08001df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f009 fcf0 	bl	800b810 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f002 fd17 	bl	8004868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001798 	.word	0x20001798
 8001e44:	40004400 	.word	0x40004400

08001e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2010      	movs	r0, #16
 8001e70:	f003 fbea 	bl	8005648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e74:	2010      	movs	r0, #16
 8001e76:	f003 fc13 	bl	80056a0 <HAL_NVIC_EnableIRQ>

}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b59      	ldr	r3, [pc, #356]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b56      	ldr	r3, [pc, #344]	; (8002008 <MX_GPIO_Init+0x180>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a51      	ldr	r2, [pc, #324]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <MX_GPIO_Init+0x180>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <MX_GPIO_Init+0x180>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a43      	ldr	r2, [pc, #268]	; (8002008 <MX_GPIO_Init+0x180>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <MX_GPIO_Init+0x180>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <MX_GPIO_Init+0x180>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a3c      	ldr	r2, [pc, #240]	; (8002008 <MX_GPIO_Init+0x180>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <MX_GPIO_Init+0x180>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	213d      	movs	r1, #61	; 0x3d
 8001f2e:	4837      	ldr	r0, [pc, #220]	; (800200c <MX_GPIO_Init+0x184>)
 8001f30:	f004 fbe8 	bl	8006704 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	f641 0102 	movw	r1, #6146	; 0x1802
 8001f3a:	4835      	ldr	r0, [pc, #212]	; (8002010 <MX_GPIO_Init+0x188>)
 8001f3c:	f004 fbe2 	bl	8006704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f241 0126 	movw	r1, #4134	; 0x1026
 8001f46:	4833      	ldr	r0, [pc, #204]	; (8002014 <MX_GPIO_Init+0x18c>)
 8001f48:	f004 fbdc 	bl	8006704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	482a      	ldr	r0, [pc, #168]	; (800200c <MX_GPIO_Init+0x184>)
 8001f64:	f004 f8aa 	bl	80060bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f68:	233d      	movs	r3, #61	; 0x3d
 8001f6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4823      	ldr	r0, [pc, #140]	; (800200c <MX_GPIO_Init+0x184>)
 8001f80:	f004 f89c 	bl	80060bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f84:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <MX_GPIO_Init+0x188>)
 8001f9e:	f004 f88d 	bl	80060bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4816      	ldr	r0, [pc, #88]	; (8002010 <MX_GPIO_Init+0x188>)
 8001fb6:	f004 f881 	bl	80060bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001fba:	f241 0326 	movw	r3, #4134	; 0x1026
 8001fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_GPIO_Init+0x18c>)
 8001fd4:	f004 f872 	bl	80060bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480b      	ldr	r0, [pc, #44]	; (8002018 <MX_GPIO_Init+0x190>)
 8001fec:	f004 f866 	bl	80060bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2028      	movs	r0, #40	; 0x28
 8001ff6:	f003 fb27 	bl	8005648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ffa:	2028      	movs	r0, #40	; 0x28
 8001ffc:	f003 fb50 	bl	80056a0 <HAL_NVIC_EnableIRQ>

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40020800 	.word	0x40020800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020c00 	.word	0x40020c00

0800201c <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8002020:	2200      	movs	r2, #0
 8002022:	2104      	movs	r1, #4
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <Vonalszenzor_Init+0x1c>)
 8002026:	f004 fb6d 	bl	8006704 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 800202a:	2200      	movs	r2, #0
 800202c:	2120      	movs	r1, #32
 800202e:	4803      	ldr	r0, [pc, #12]	; (800203c <Vonalszenzor_Init+0x20>)
 8002030:	f004 fb68 	bl	8006704 <HAL_GPIO_WritePin>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800

08002040 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800204a:	48be      	ldr	r0, [pc, #760]	; (8002344 <Vonalszenzor_operal+0x304>)
 800204c:	f000 fc46 	bl	80028dc <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002050:	2370      	movs	r3, #112	; 0x70
 8002052:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8002054:	48bc      	ldr	r0, [pc, #752]	; (8002348 <Vonalszenzor_operal+0x308>)
 8002056:	f000 fc41 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800205a:	4bbc      	ldr	r3, [pc, #752]	; (800234c <Vonalszenzor_operal+0x30c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc99 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0] - 5;
 800206a:	7b3a      	ldrb	r2, [r7, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3320      	adds	r3, #32
 8002070:	3a05      	subs	r2, #5
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002076:	4bb6      	ldr	r3, [pc, #728]	; (8002350 <Vonalszenzor_operal+0x310>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f107 020c 	add.w	r2, r7, #12
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fc8b 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0] - 2;
 8002086:	7b3a      	ldrb	r2, [r7, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	331c      	adds	r3, #28
 800208c:	3a02      	subs	r2, #2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002092:	48ac      	ldr	r0, [pc, #688]	; (8002344 <Vonalszenzor_operal+0x304>)
 8002094:	f000 fc22 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002098:	48ae      	ldr	r0, [pc, #696]	; (8002354 <Vonalszenzor_operal+0x314>)
 800209a:	f000 fc1f 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800209e:	4bab      	ldr	r3, [pc, #684]	; (800234c <Vonalszenzor_operal+0x30c>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f107 020c 	add.w	r2, r7, #12
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fc77 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3318      	adds	r3, #24
 80020b2:	7b3a      	ldrb	r2, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020b6:	4ba6      	ldr	r3, [pc, #664]	; (8002350 <Vonalszenzor_operal+0x310>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fc6b 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3314      	adds	r3, #20
 80020ca:	7b3a      	ldrb	r2, [r7, #12]
 80020cc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020ce:	489d      	ldr	r0, [pc, #628]	; (8002344 <Vonalszenzor_operal+0x304>)
 80020d0:	f000 fc04 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 80020d4:	48a0      	ldr	r0, [pc, #640]	; (8002358 <Vonalszenzor_operal+0x318>)
 80020d6:	f000 fc01 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020da:	4b9c      	ldr	r3, [pc, #624]	; (800234c <Vonalszenzor_operal+0x30c>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	f107 020c 	add.w	r2, r7, #12
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fc59 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3310      	adds	r3, #16
 80020ee:	7b3a      	ldrb	r2, [r7, #12]
 80020f0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020f2:	4b97      	ldr	r3, [pc, #604]	; (8002350 <Vonalszenzor_operal+0x310>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fc4d 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	330c      	adds	r3, #12
 8002106:	7b3a      	ldrb	r2, [r7, #12]
 8002108:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800210a:	488e      	ldr	r0, [pc, #568]	; (8002344 <Vonalszenzor_operal+0x304>)
 800210c:	f000 fbe6 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 8002110:	4892      	ldr	r0, [pc, #584]	; (800235c <Vonalszenzor_operal+0x31c>)
 8002112:	f000 fbe3 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <Vonalszenzor_operal+0x30c>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f107 020c 	add.w	r2, r7, #12
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fc3b 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3308      	adds	r3, #8
 800212a:	7b3a      	ldrb	r2, [r7, #12]
 800212c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <Vonalszenzor_operal+0x310>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f107 020c 	add.w	r2, r7, #12
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fc2f 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	7b3a      	ldrb	r2, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002146:	487f      	ldr	r0, [pc, #508]	; (8002344 <Vonalszenzor_operal+0x304>)
 8002148:	f000 fbc8 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 800214c:	4884      	ldr	r0, [pc, #528]	; (8002360 <Vonalszenzor_operal+0x320>)
 800214e:	f000 fbc5 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002152:	4b84      	ldr	r3, [pc, #528]	; (8002364 <Vonalszenzor_operal+0x324>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f107 020c 	add.w	r2, r7, #12
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fc1d 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	331f      	adds	r3, #31
 8002166:	7b3a      	ldrb	r2, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <Vonalszenzor_operal+0x328>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f107 020c 	add.w	r2, r7, #12
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fc11 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	331b      	adds	r3, #27
 800217e:	7b3a      	ldrb	r2, [r7, #12]
 8002180:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002182:	4870      	ldr	r0, [pc, #448]	; (8002344 <Vonalszenzor_operal+0x304>)
 8002184:	f000 fbaa 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002188:	4878      	ldr	r0, [pc, #480]	; (800236c <Vonalszenzor_operal+0x32c>)
 800218a:	f000 fba7 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800218e:	4b75      	ldr	r3, [pc, #468]	; (8002364 <Vonalszenzor_operal+0x324>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f107 020c 	add.w	r2, r7, #12
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fbff 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3317      	adds	r3, #23
 80021a2:	7b3a      	ldrb	r2, [r7, #12]
 80021a4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021a6:	4b70      	ldr	r3, [pc, #448]	; (8002368 <Vonalszenzor_operal+0x328>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f107 020c 	add.w	r2, r7, #12
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fbf3 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3313      	adds	r3, #19
 80021ba:	7b3a      	ldrb	r2, [r7, #12]
 80021bc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021be:	4861      	ldr	r0, [pc, #388]	; (8002344 <Vonalszenzor_operal+0x304>)
 80021c0:	f000 fb8c 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 80021c4:	486a      	ldr	r0, [pc, #424]	; (8002370 <Vonalszenzor_operal+0x330>)
 80021c6:	f000 fb89 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <Vonalszenzor_operal+0x324>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f107 020c 	add.w	r2, r7, #12
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fbe1 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	330f      	adds	r3, #15
 80021de:	7b3a      	ldrb	r2, [r7, #12]
 80021e0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <Vonalszenzor_operal+0x328>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fbd5 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	330b      	adds	r3, #11
 80021f6:	7b3a      	ldrb	r2, [r7, #12]
 80021f8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021fa:	4852      	ldr	r0, [pc, #328]	; (8002344 <Vonalszenzor_operal+0x304>)
 80021fc:	f000 fb6e 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 8002200:	485c      	ldr	r0, [pc, #368]	; (8002374 <Vonalszenzor_operal+0x334>)
 8002202:	f000 fb6b 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002206:	4b57      	ldr	r3, [pc, #348]	; (8002364 <Vonalszenzor_operal+0x324>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f107 020c 	add.w	r2, r7, #12
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fbc3 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3307      	adds	r3, #7
 800221a:	7b3a      	ldrb	r2, [r7, #12]
 800221c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800221e:	4b52      	ldr	r3, [pc, #328]	; (8002368 <Vonalszenzor_operal+0x328>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f107 020c 	add.w	r2, r7, #12
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fbb7 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3303      	adds	r3, #3
 8002232:	7b3a      	ldrb	r2, [r7, #12]
 8002234:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002236:	4843      	ldr	r0, [pc, #268]	; (8002344 <Vonalszenzor_operal+0x304>)
 8002238:	f000 fb50 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 800223c:	484e      	ldr	r0, [pc, #312]	; (8002378 <Vonalszenzor_operal+0x338>)
 800223e:	f000 fb4d 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <Vonalszenzor_operal+0x33c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fba5 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	331e      	adds	r3, #30
 8002256:	7b3a      	ldrb	r2, [r7, #12]
 8002258:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <Vonalszenzor_operal+0x340>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fb99 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0] + 1;
 800226a:	7b3a      	ldrb	r2, [r7, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	331a      	adds	r3, #26
 8002270:	3201      	adds	r2, #1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002276:	4833      	ldr	r0, [pc, #204]	; (8002344 <Vonalszenzor_operal+0x304>)
 8002278:	f000 fb30 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 800227c:	4841      	ldr	r0, [pc, #260]	; (8002384 <Vonalszenzor_operal+0x344>)
 800227e:	f000 fb2d 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <Vonalszenzor_operal+0x33c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fb85 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3316      	adds	r3, #22
 8002296:	7b3a      	ldrb	r2, [r7, #12]
 8002298:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <Vonalszenzor_operal+0x340>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb79 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3312      	adds	r3, #18
 80022ae:	7b3a      	ldrb	r2, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022b2:	4824      	ldr	r0, [pc, #144]	; (8002344 <Vonalszenzor_operal+0x304>)
 80022b4:	f000 fb12 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 80022b8:	4833      	ldr	r0, [pc, #204]	; (8002388 <Vonalszenzor_operal+0x348>)
 80022ba:	f000 fb0f 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <Vonalszenzor_operal+0x33c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fb67 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	330e      	adds	r3, #14
 80022d2:	7b3a      	ldrb	r2, [r7, #12]
 80022d4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <Vonalszenzor_operal+0x340>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f107 020c 	add.w	r2, r7, #12
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb5b 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	330a      	adds	r3, #10
 80022ea:	7b3a      	ldrb	r2, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022ee:	4815      	ldr	r0, [pc, #84]	; (8002344 <Vonalszenzor_operal+0x304>)
 80022f0:	f000 faf4 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80022f4:	4825      	ldr	r0, [pc, #148]	; (800238c <Vonalszenzor_operal+0x34c>)
 80022f6:	f000 faf1 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <Vonalszenzor_operal+0x33c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fb49 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3306      	adds	r3, #6
 800230e:	7b3a      	ldrb	r2, [r7, #12]
 8002310:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <Vonalszenzor_operal+0x340>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fb3d 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3302      	adds	r3, #2
 8002326:	7b3a      	ldrb	r2, [r7, #12]
 8002328:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <Vonalszenzor_operal+0x304>)
 800232c:	f000 fad6 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <Vonalszenzor_operal+0x350>)
 8002332:	f000 fad3 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <Vonalszenzor_operal+0x354>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f107 020c 	add.w	r2, r7, #12
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	e029      	b.n	8002398 <Vonalszenzor_operal+0x358>
 8002344:	20000004 	.word	0x20000004
 8002348:	2000008c 	.word	0x2000008c
 800234c:	200001f1 	.word	0x200001f1
 8002350:	20000115 	.word	0x20000115
 8002354:	20000084 	.word	0x20000084
 8002358:	2000007c 	.word	0x2000007c
 800235c:	20000074 	.word	0x20000074
 8002360:	2000006c 	.word	0x2000006c
 8002364:	20000112 	.word	0x20000112
 8002368:	20000116 	.word	0x20000116
 800236c:	20000064 	.word	0x20000064
 8002370:	2000005c 	.word	0x2000005c
 8002374:	20000054 	.word	0x20000054
 8002378:	2000004c 	.word	0x2000004c
 800237c:	20000113 	.word	0x20000113
 8002380:	20000117 	.word	0x20000117
 8002384:	20000044 	.word	0x20000044
 8002388:	2000003c 	.word	0x2000003c
 800238c:	20000034 	.word	0x20000034
 8002390:	2000002c 	.word	0x2000002c
 8002394:	20000114 	.word	0x20000114
 8002398:	f000 fb00 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	331d      	adds	r3, #29
 80023a0:	7b3a      	ldrb	r2, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023a4:	4bbd      	ldr	r3, [pc, #756]	; (800269c <Vonalszenzor_operal+0x65c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f107 020c 	add.w	r2, r7, #12
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 faf4 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3319      	adds	r3, #25
 80023b8:	7b3a      	ldrb	r2, [r7, #12]
 80023ba:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023bc:	48b8      	ldr	r0, [pc, #736]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80023be:	f000 fa8d 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 80023c2:	48b8      	ldr	r0, [pc, #736]	; (80026a4 <Vonalszenzor_operal+0x664>)
 80023c4:	f000 fa8a 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023c8:	4bb7      	ldr	r3, [pc, #732]	; (80026a8 <Vonalszenzor_operal+0x668>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f107 020c 	add.w	r2, r7, #12
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fae2 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3315      	adds	r3, #21
 80023dc:	7b3a      	ldrb	r2, [r7, #12]
 80023de:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023e0:	4bae      	ldr	r3, [pc, #696]	; (800269c <Vonalszenzor_operal+0x65c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f107 020c 	add.w	r2, r7, #12
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fad6 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3311      	adds	r3, #17
 80023f4:	7b3a      	ldrb	r2, [r7, #12]
 80023f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023f8:	48a9      	ldr	r0, [pc, #676]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80023fa:	f000 fa6f 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80023fe:	48ab      	ldr	r0, [pc, #684]	; (80026ac <Vonalszenzor_operal+0x66c>)
 8002400:	f000 fa6c 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002404:	4ba8      	ldr	r3, [pc, #672]	; (80026a8 <Vonalszenzor_operal+0x668>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f107 020c 	add.w	r2, r7, #12
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fac4 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	330d      	adds	r3, #13
 8002418:	7b3a      	ldrb	r2, [r7, #12]
 800241a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800241c:	4b9f      	ldr	r3, [pc, #636]	; (800269c <Vonalszenzor_operal+0x65c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fab8 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3309      	adds	r3, #9
 8002430:	7b3a      	ldrb	r2, [r7, #12]
 8002432:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002434:	489a      	ldr	r0, [pc, #616]	; (80026a0 <Vonalszenzor_operal+0x660>)
 8002436:	f000 fa51 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 800243a:	489d      	ldr	r0, [pc, #628]	; (80026b0 <Vonalszenzor_operal+0x670>)
 800243c:	f000 fa4e 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002440:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <Vonalszenzor_operal+0x668>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f107 020c 	add.w	r2, r7, #12
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 faa6 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3305      	adds	r3, #5
 8002454:	7b3a      	ldrb	r2, [r7, #12]
 8002456:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002458:	4b90      	ldr	r3, [pc, #576]	; (800269c <Vonalszenzor_operal+0x65c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa9a 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	7b3a      	ldrb	r2, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002470:	488b      	ldr	r0, [pc, #556]	; (80026a0 <Vonalszenzor_operal+0x660>)
 8002472:	f000 fa33 	bl	80028dc <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8002476:	488f      	ldr	r0, [pc, #572]	; (80026b4 <Vonalszenzor_operal+0x674>)
 8002478:	f000 fa30 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800247c:	4b8e      	ldr	r3, [pc, #568]	; (80026b8 <Vonalszenzor_operal+0x678>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f107 020c 	add.w	r2, r7, #12
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa88 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0] - 4;
 800248c:	7b3a      	ldrb	r2, [r7, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	3a04      	subs	r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002498:	4b88      	ldr	r3, [pc, #544]	; (80026bc <Vonalszenzor_operal+0x67c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f107 020c 	add.w	r2, r7, #12
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fa7a 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3305      	adds	r3, #5
 80024ac:	7b3a      	ldrb	r2, [r7, #12]
 80024ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024b0:	487b      	ldr	r0, [pc, #492]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80024b2:	f000 fa13 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 80024b6:	4882      	ldr	r0, [pc, #520]	; (80026c0 <Vonalszenzor_operal+0x680>)
 80024b8:	f000 fa10 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024bc:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <Vonalszenzor_operal+0x678>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f107 020c 	add.w	r2, r7, #12
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fa68 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3309      	adds	r3, #9
 80024d0:	7b3a      	ldrb	r2, [r7, #12]
 80024d2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024d4:	4b79      	ldr	r3, [pc, #484]	; (80026bc <Vonalszenzor_operal+0x67c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fa5c 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	330d      	adds	r3, #13
 80024e8:	7b3a      	ldrb	r2, [r7, #12]
 80024ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024ec:	486c      	ldr	r0, [pc, #432]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80024ee:	f000 f9f5 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 80024f2:	4874      	ldr	r0, [pc, #464]	; (80026c4 <Vonalszenzor_operal+0x684>)
 80024f4:	f000 f9f2 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024f8:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <Vonalszenzor_operal+0x678>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f107 020c 	add.w	r2, r7, #12
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa4a 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3311      	adds	r3, #17
 800250c:	7b3a      	ldrb	r2, [r7, #12]
 800250e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <Vonalszenzor_operal+0x67c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f107 020c 	add.w	r2, r7, #12
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fa3e 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3315      	adds	r3, #21
 8002524:	7b3a      	ldrb	r2, [r7, #12]
 8002526:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002528:	485d      	ldr	r0, [pc, #372]	; (80026a0 <Vonalszenzor_operal+0x660>)
 800252a:	f000 f9d7 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 800252e:	4866      	ldr	r0, [pc, #408]	; (80026c8 <Vonalszenzor_operal+0x688>)
 8002530:	f000 f9d4 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002534:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <Vonalszenzor_operal+0x678>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa2c 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	3319      	adds	r3, #25
 8002548:	7b3a      	ldrb	r2, [r7, #12]
 800254a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800254c:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <Vonalszenzor_operal+0x67c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f107 020c 	add.w	r2, r7, #12
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa20 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	331d      	adds	r3, #29
 8002560:	7b3a      	ldrb	r2, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002564:	484e      	ldr	r0, [pc, #312]	; (80026a0 <Vonalszenzor_operal+0x660>)
 8002566:	f000 f9b9 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 800256a:	4858      	ldr	r0, [pc, #352]	; (80026cc <Vonalszenzor_operal+0x68c>)
 800256c:	f000 f9b6 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <Vonalszenzor_operal+0x690>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fa0e 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3302      	adds	r3, #2
 8002584:	7b3a      	ldrb	r2, [r7, #12]
 8002586:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <Vonalszenzor_operal+0x694>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f107 020c 	add.w	r2, r7, #12
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fa02 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002598:	7b3a      	ldrb	r2, [r7, #12]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	3306      	adds	r3, #6
 800259e:	3202      	adds	r2, #2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025a4:	483e      	ldr	r0, [pc, #248]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80025a6:	f000 f999 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 80025aa:	484b      	ldr	r0, [pc, #300]	; (80026d8 <Vonalszenzor_operal+0x698>)
 80025ac:	f000 f996 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <Vonalszenzor_operal+0x690>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f9ee 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330a      	adds	r3, #10
 80025c4:	7b3a      	ldrb	r2, [r7, #12]
 80025c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <Vonalszenzor_operal+0x694>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f107 020c 	add.w	r2, r7, #12
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f9e2 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0] +1;
 80025d8:	7b3a      	ldrb	r2, [r7, #12]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	330e      	adds	r3, #14
 80025de:	3201      	adds	r2, #1
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025e4:	482e      	ldr	r0, [pc, #184]	; (80026a0 <Vonalszenzor_operal+0x660>)
 80025e6:	f000 f979 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80025ea:	483c      	ldr	r0, [pc, #240]	; (80026dc <Vonalszenzor_operal+0x69c>)
 80025ec:	f000 f976 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <Vonalszenzor_operal+0x690>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f107 020c 	add.w	r2, r7, #12
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f9ce 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3312      	adds	r3, #18
 8002604:	7b3a      	ldrb	r2, [r7, #12]
 8002606:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <Vonalszenzor_operal+0x694>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f9c2 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	3316      	adds	r3, #22
 800261c:	7b3a      	ldrb	r2, [r7, #12]
 800261e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002620:	481f      	ldr	r0, [pc, #124]	; (80026a0 <Vonalszenzor_operal+0x660>)
 8002622:	f000 f95b 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 8002626:	482e      	ldr	r0, [pc, #184]	; (80026e0 <Vonalszenzor_operal+0x6a0>)
 8002628:	f000 f958 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <Vonalszenzor_operal+0x690>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f107 020c 	add.w	r2, r7, #12
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9b0 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	331a      	adds	r3, #26
 8002640:	7b3a      	ldrb	r2, [r7, #12]
 8002642:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <Vonalszenzor_operal+0x694>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f107 020c 	add.w	r2, r7, #12
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f9a4 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	331e      	adds	r3, #30
 8002658:	7b3a      	ldrb	r2, [r7, #12]
 800265a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800265c:	4810      	ldr	r0, [pc, #64]	; (80026a0 <Vonalszenzor_operal+0x660>)
 800265e:	f000 f93d 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 8002662:	4820      	ldr	r0, [pc, #128]	; (80026e4 <Vonalszenzor_operal+0x6a4>)
 8002664:	f000 f93a 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <Vonalszenzor_operal+0x6a8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f107 020c 	add.w	r2, r7, #12
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f992 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3303      	adds	r3, #3
 800267c:	7b3a      	ldrb	r2, [r7, #12]
 800267e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <Vonalszenzor_operal+0x6ac>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f107 020c 	add.w	r2, r7, #12
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f986 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3307      	adds	r3, #7
 8002694:	7b3a      	ldrb	r2, [r7, #12]
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e02a      	b.n	80026f0 <Vonalszenzor_operal+0x6b0>
 800269a:	bf00      	nop
 800269c:	20000118 	.word	0x20000118
 80026a0:	20000004 	.word	0x20000004
 80026a4:	20000024 	.word	0x20000024
 80026a8:	20000114 	.word	0x20000114
 80026ac:	2000001c 	.word	0x2000001c
 80026b0:	20000014 	.word	0x20000014
 80026b4:	2000010c 	.word	0x2000010c
 80026b8:	200001f1 	.word	0x200001f1
 80026bc:	20000115 	.word	0x20000115
 80026c0:	20000104 	.word	0x20000104
 80026c4:	200000fc 	.word	0x200000fc
 80026c8:	200000f4 	.word	0x200000f4
 80026cc:	200000ec 	.word	0x200000ec
 80026d0:	20000112 	.word	0x20000112
 80026d4:	20000116 	.word	0x20000116
 80026d8:	200000e4 	.word	0x200000e4
 80026dc:	200000dc 	.word	0x200000dc
 80026e0:	200000d4 	.word	0x200000d4
 80026e4:	200000cc 	.word	0x200000cc
 80026e8:	20000113 	.word	0x20000113
 80026ec:	20000117 	.word	0x20000117
	Vonalszenzor_minta_kuldes(leszed);
 80026f0:	486e      	ldr	r0, [pc, #440]	; (80028ac <Vonalszenzor_operal+0x86c>)
 80026f2:	f000 f8f3 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 80026f6:	486e      	ldr	r0, [pc, #440]	; (80028b0 <Vonalszenzor_operal+0x870>)
 80026f8:	f000 f8f0 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026fc:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <Vonalszenzor_operal+0x874>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f107 020c 	add.w	r2, r7, #12
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f948 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	330b      	adds	r3, #11
 8002710:	7b3a      	ldrb	r2, [r7, #12]
 8002712:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <Vonalszenzor_operal+0x878>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f107 020c 	add.w	r2, r7, #12
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f93c 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002724:	7b3a      	ldrb	r2, [r7, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	330f      	adds	r3, #15
 800272a:	3202      	adds	r2, #2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002730:	485e      	ldr	r0, [pc, #376]	; (80028ac <Vonalszenzor_operal+0x86c>)
 8002732:	f000 f8d3 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 8002736:	4861      	ldr	r0, [pc, #388]	; (80028bc <Vonalszenzor_operal+0x87c>)
 8002738:	f000 f8d0 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800273c:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <Vonalszenzor_operal+0x874>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f107 020c 	add.w	r2, r7, #12
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f928 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3313      	adds	r3, #19
 8002750:	7b3a      	ldrb	r2, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <Vonalszenzor_operal+0x878>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f91c 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3317      	adds	r3, #23
 8002768:	7b3a      	ldrb	r2, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800276c:	484f      	ldr	r0, [pc, #316]	; (80028ac <Vonalszenzor_operal+0x86c>)
 800276e:	f000 f8b5 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 8002772:	4853      	ldr	r0, [pc, #332]	; (80028c0 <Vonalszenzor_operal+0x880>)
 8002774:	f000 f8b2 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002778:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <Vonalszenzor_operal+0x874>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f90a 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	331b      	adds	r3, #27
 800278c:	7b3a      	ldrb	r2, [r7, #12]
 800278e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002790:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <Vonalszenzor_operal+0x878>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8fe 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	331f      	adds	r3, #31
 80027a4:	7b3a      	ldrb	r2, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80027a8:	4840      	ldr	r0, [pc, #256]	; (80028ac <Vonalszenzor_operal+0x86c>)
 80027aa:	f000 f897 	bl	80028dc <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 80027ae:	4845      	ldr	r0, [pc, #276]	; (80028c4 <Vonalszenzor_operal+0x884>)
 80027b0:	f000 f894 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027b4:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <Vonalszenzor_operal+0x888>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f8ec 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3304      	adds	r3, #4
 80027c8:	7b3a      	ldrb	r2, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <Vonalszenzor_operal+0x88c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f8e0 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0] +2;
 80027dc:	7b3a      	ldrb	r2, [r7, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3308      	adds	r3, #8
 80027e2:	3202      	adds	r2, #2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027e8:	4830      	ldr	r0, [pc, #192]	; (80028ac <Vonalszenzor_operal+0x86c>)
 80027ea:	f000 f877 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 80027ee:	4838      	ldr	r0, [pc, #224]	; (80028d0 <Vonalszenzor_operal+0x890>)
 80027f0:	f000 f874 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <Vonalszenzor_operal+0x888>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f107 020c 	add.w	r2, r7, #12
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8cc 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	7b3a      	ldrb	r2, [r7, #12]
 800280a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800280c:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <Vonalszenzor_operal+0x88c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f107 020c 	add.w	r2, r7, #12
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8c0 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	3310      	adds	r3, #16
 8002820:	7b3a      	ldrb	r2, [r7, #12]
 8002822:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002824:	4821      	ldr	r0, [pc, #132]	; (80028ac <Vonalszenzor_operal+0x86c>)
 8002826:	f000 f859 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 800282a:	482a      	ldr	r0, [pc, #168]	; (80028d4 <Vonalszenzor_operal+0x894>)
 800282c:	f000 f856 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <Vonalszenzor_operal+0x888>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f8ae 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3314      	adds	r3, #20
 8002844:	7b3a      	ldrb	r2, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <Vonalszenzor_operal+0x88c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f107 020c 	add.w	r2, r7, #12
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f8a2 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3318      	adds	r3, #24
 800285c:	7b3a      	ldrb	r2, [r7, #12]
 800285e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002860:	4812      	ldr	r0, [pc, #72]	; (80028ac <Vonalszenzor_operal+0x86c>)
 8002862:	f000 f83b 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 8002866:	481c      	ldr	r0, [pc, #112]	; (80028d8 <Vonalszenzor_operal+0x898>)
 8002868:	f000 f838 	bl	80028dc <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <Vonalszenzor_operal+0x888>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f107 020c 	add.w	r2, r7, #12
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f890 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	331c      	adds	r3, #28
 8002880:	7b3a      	ldrb	r2, [r7, #12]
 8002882:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <Vonalszenzor_operal+0x88c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f107 020c 	add.w	r2, r7, #12
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f884 	bl	800299c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3320      	adds	r3, #32
 8002898:	7b3a      	ldrb	r2, [r7, #12]
 800289a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <Vonalszenzor_operal+0x86c>)
 800289e:	f000 f81d 	bl	80028dc <Vonalszenzor_minta_kuldes>
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000004 	.word	0x20000004
 80028b0:	200000c4 	.word	0x200000c4
 80028b4:	20000113 	.word	0x20000113
 80028b8:	20000117 	.word	0x20000117
 80028bc:	200000bc 	.word	0x200000bc
 80028c0:	200000b4 	.word	0x200000b4
 80028c4:	200000ac 	.word	0x200000ac
 80028c8:	20000114 	.word	0x20000114
 80028cc:	20000118 	.word	0x20000118
 80028d0:	200000a4 	.word	0x200000a4
 80028d4:	2000009c 	.word	0x2000009c
 80028d8:	20000094 	.word	0x20000094

080028dc <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 80028e4:	2200      	movs	r2, #0
 80028e6:	2110      	movs	r1, #16
 80028e8:	480d      	ldr	r0, [pc, #52]	; (8002920 <Vonalszenzor_minta_kuldes+0x44>)
 80028ea:	f003 ff0b 	bl	8006704 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 80028ee:	2200      	movs	r2, #0
 80028f0:	2102      	movs	r1, #2
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <Vonalszenzor_minta_kuldes+0x48>)
 80028f4:	f003 ff06 	bl	8006704 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 80028f8:	2364      	movs	r3, #100	; 0x64
 80028fa:	2206      	movs	r2, #6
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <Vonalszenzor_minta_kuldes+0x4c>)
 8002900:	f006 f836 	bl	8008970 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002904:	2201      	movs	r2, #1
 8002906:	2110      	movs	r1, #16
 8002908:	4805      	ldr	r0, [pc, #20]	; (8002920 <Vonalszenzor_minta_kuldes+0x44>)
 800290a:	f003 fefb 	bl	8006704 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 800290e:	2201      	movs	r2, #1
 8002910:	2102      	movs	r1, #2
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <Vonalszenzor_minta_kuldes+0x48>)
 8002914:	f003 fef6 	bl	8006704 <HAL_GPIO_WritePin>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40020800 	.word	0x40020800
 8002924:	40020400 	.word	0x40020400
 8002928:	200002dc 	.word	0x200002dc

0800292c <Vonalas_tombok_torlese>:

void Vonalas_tombok_torlese(void) {
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	e00c      	b.n	8002952 <Vonalas_tombok_torlese+0x26>
		vonalak_h[i] = '-';
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <Vonalas_tombok_torlese+0x60>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	222d      	movs	r2, #45	; 0x2d
 8002940:	701a      	strb	r2, [r3, #0]
		vonalak_e[i] = '-';
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <Vonalas_tombok_torlese+0x64>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	222d      	movs	r2, #45	; 0x2d
 800294a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3301      	adds	r3, #1
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b04      	cmp	r3, #4
 8002956:	ddef      	ble.n	8002938 <Vonalas_tombok_torlese+0xc>
	}
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8002958:	2301      	movs	r3, #1
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	e00c      	b.n	8002978 <Vonalas_tombok_torlese+0x4c>
		vonal_eredmeny_h[i] = 0;
 800295e:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <Vonalas_tombok_torlese+0x68>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
		vonal_eredmeny_e[i] = 0;
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <Vonalas_tombok_torlese+0x6c>)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4413      	add	r3, r2
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b20      	cmp	r3, #32
 800297c:	ddef      	ble.n	800295e <Vonalas_tombok_torlese+0x32>
	}
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000130 	.word	0x20000130
 8002990:	20000138 	.word	0x20000138
 8002994:	200001f4 	.word	0x200001f4
 8002998:	20000218 	.word	0x20000218

0800299c <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	733b      	strb	r3, [r7, #12]
 80029ac:	2300      	movs	r3, #0
 80029ae:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 80029b0:	f107 010c 	add.w	r1, r7, #12
 80029b4:	2364      	movs	r3, #100	; 0x64
 80029b6:	2202      	movs	r2, #2
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80029ba:	f005 ffd9 	bl	8008970 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 80029be:	2364      	movs	r3, #100	; 0x64
 80029c0:	2202      	movs	r2, #2
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	4803      	ldr	r0, [pc, #12]	; (80029d4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80029c6:	f006 f91f 	bl	8008c08 <HAL_SPI_Receive>
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200016f8 	.word	0x200016f8

080029d8 <Vonalas_tombok_feltoltese>:

void Vonalas_tombok_feltoltese(void) {
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
	for(int poz=1; poz < 33-1; poz++) {
 80029de:	2301      	movs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e10c      	b.n	8002bfe <Vonalas_tombok_feltoltese+0x226>
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
		if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz]) {
 80029e4:	4a8a      	ldr	r2, [pc, #552]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd5d 	bl	80004ac <__aeabi_i2d>
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <Vonalas_tombok_feltoltese+0x23c>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f7fe f852 	bl	8000aa0 <__aeabi_dcmpgt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d075      	beq.n	8002aee <Vonalas_tombok_feltoltese+0x116>
			if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz+1]) {
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a82      	ldr	r2, [pc, #520]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd4e 	bl	80004ac <__aeabi_i2d>
 8002a10:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <Vonalas_tombok_feltoltese+0x23c>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fe f843 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d022      	beq.n	8002a66 <Vonalas_tombok_feltoltese+0x8e>
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd3f 	bl	80004ac <__aeabi_i2d>
 8002a2e:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <Vonalas_tombok_feltoltese+0x23c>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fe f820 	bl	8000a78 <__aeabi_dcmple>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d057      	beq.n	8002aee <Vonalas_tombok_feltoltese+0x116>
					int i = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a42:	e002      	b.n	8002a4a <Vonalas_tombok_feltoltese+0x72>
						i++;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3301      	adds	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a4a:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <Vonalas_tombok_feltoltese+0x240>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b2d      	cmp	r3, #45	; 0x2d
 8002a54:	d1f6      	bne.n	8002a44 <Vonalas_tombok_feltoltese+0x6c>
					}
					vonalak_e[i] = poz;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	b2d9      	uxtb	r1, r3
 8002a5a:	4a6f      	ldr	r2, [pc, #444]	; (8002c18 <Vonalas_tombok_feltoltese+0x240>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	460a      	mov	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e043      	b.n	8002aee <Vonalas_tombok_feltoltese+0x116>
				}
			} else {
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	4a69      	ldr	r2, [pc, #420]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd1c 	bl	80004ac <__aeabi_i2d>
 8002a74:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <Vonalas_tombok_feltoltese+0x23c>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fffd 	bl	8000a78 <__aeabi_dcmple>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d034      	beq.n	8002aee <Vonalas_tombok_feltoltese+0x116>
					if(VONAL_THRESHOLD_E + 1 < vonal_eredmeny_e[poz-1] + vonal_eredmeny_e[poz+1]) {
 8002a84:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <Vonalas_tombok_feltoltese+0x23c>)
 8002a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <Vonalas_tombok_feltoltese+0x244>)
 8002a90:	f7fd fbc0 	bl	8000214 <__adddf3>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a59      	ldr	r2, [pc, #356]	; (8002c10 <Vonalas_tombok_feltoltese+0x238>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	440b      	add	r3, r1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fcfb 	bl	80004ac <__aeabi_i2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4620      	mov	r0, r4
 8002abc:	4629      	mov	r1, r5
 8002abe:	f7fd ffd1 	bl	8000a64 <__aeabi_dcmplt>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d012      	beq.n	8002aee <Vonalas_tombok_feltoltese+0x116>
						int j = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002acc:	e002      	b.n	8002ad4 <Vonalas_tombok_feltoltese+0xfc>
							j++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002ad4:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <Vonalas_tombok_feltoltese+0x240>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b2d      	cmp	r3, #45	; 0x2d
 8002ade:	d1f6      	bne.n	8002ace <Vonalas_tombok_feltoltese+0xf6>
						}
						vonalak_e[j] = poz;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b2d9      	uxtb	r1, r3
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <Vonalas_tombok_feltoltese+0x240>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	460a      	mov	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz]) {
 8002aee:	4a4c      	ldr	r2, [pc, #304]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fcd8 	bl	80004ac <__aeabi_i2d>
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <Vonalas_tombok_feltoltese+0x24c>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd ffcd 	bl	8000aa0 <__aeabi_dcmpgt>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d075      	beq.n	8002bf8 <Vonalas_tombok_feltoltese+0x220>
			if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz+1]) {
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fcc9 	bl	80004ac <__aeabi_i2d>
 8002b1a:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <Vonalas_tombok_feltoltese+0x24c>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd ffbe 	bl	8000aa0 <__aeabi_dcmpgt>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d022      	beq.n	8002b70 <Vonalas_tombok_feltoltese+0x198>
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	4a3c      	ldr	r2, [pc, #240]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcba 	bl	80004ac <__aeabi_i2d>
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <Vonalas_tombok_feltoltese+0x24c>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd ff9b 	bl	8000a78 <__aeabi_dcmple>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d057      	beq.n	8002bf8 <Vonalas_tombok_feltoltese+0x220>
					int k = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b4c:	e002      	b.n	8002b54 <Vonalas_tombok_feltoltese+0x17c>
						k++;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b54:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <Vonalas_tombok_feltoltese+0x250>)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8002b5e:	d1f6      	bne.n	8002b4e <Vonalas_tombok_feltoltese+0x176>
					}
					vonalak_h[k] = poz;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <Vonalas_tombok_feltoltese+0x250>)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4413      	add	r3, r2
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e043      	b.n	8002bf8 <Vonalas_tombok_feltoltese+0x220>
				}
			} else {
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc97 	bl	80004ac <__aeabi_i2d>
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <Vonalas_tombok_feltoltese+0x24c>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd ff78 	bl	8000a78 <__aeabi_dcmple>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d034      	beq.n	8002bf8 <Vonalas_tombok_feltoltese+0x220>
					if(VONAL_THRESHOLD_H + 1 < vonal_eredmeny_h[poz-1] + vonal_eredmeny_h[poz+1]) {
 8002b8e:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <Vonalas_tombok_feltoltese+0x24c>)
 8002b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <Vonalas_tombok_feltoltese+0x244>)
 8002b9a:	f7fd fb3b 	bl	8000214 <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4614      	mov	r4, r2
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <Vonalas_tombok_feltoltese+0x248>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	440b      	add	r3, r1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fc76 	bl	80004ac <__aeabi_i2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7fd ff4c 	bl	8000a64 <__aeabi_dcmplt>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <Vonalas_tombok_feltoltese+0x220>
						int l = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002bd6:	e002      	b.n	8002bde <Vonalas_tombok_feltoltese+0x206>
							l++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <Vonalas_tombok_feltoltese+0x250>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b2d      	cmp	r3, #45	; 0x2d
 8002be8:	d1f6      	bne.n	8002bd8 <Vonalas_tombok_feltoltese+0x200>
						}
						vonalak_h[l] = poz;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	b2d9      	uxtb	r1, r3
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <Vonalas_tombok_feltoltese+0x250>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
	for(int poz=1; poz < 33-1; poz++) {
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b1f      	cmp	r3, #31
 8002c02:	f77f aeef 	ble.w	80029e4 <Vonalas_tombok_feltoltese+0xc>
	}
	/*for(int poz=1; poz < 33-1; poz++) {
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele

	}*/
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c10:	20000218 	.word	0x20000218
 8002c14:	20000128 	.word	0x20000128
 8002c18:	20000138 	.word	0x20000138
 8002c1c:	3ff00000 	.word	0x3ff00000
 8002c20:	200001f4 	.word	0x200001f4
 8002c24:	20000120 	.word	0x20000120
 8002c28:	20000130 	.word	0x20000130
 8002c2c:	00000000 	.word	0x00000000

08002c30 <Irany_valaszto>:

void Irany_valaszto(void) {
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
	if(keresztezodesben == false) {
 8002c36:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <Irany_valaszto+0x150>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	f083 0301 	eor.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8087 	beq.w	8002d54 <Irany_valaszto+0x124>
		if(vonalak_e[1] < 33) {
 8002c46:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <Irany_valaszto+0x154>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f200 808f 	bhi.w	8002d6e <Irany_valaszto+0x13e>
			bool ok = true;
 8002c50:	2301      	movs	r3, #1
 8002c52:	71fb      	strb	r3, [r7, #7]
			int i = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002c58:	e03e      	b.n	8002cd8 <Irany_valaszto+0xa8>
				if((-8 > vonal_kovetni_e - (vonalak_e[i] - 16))  ||  (vonal_kovetni_e - (vonalak_e[i] - 16) > 8)) {
 8002c5a:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <Irany_valaszto+0x158>)
 8002c5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <Irany_valaszto+0x154>)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b10      	subs	r3, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc1e 	bl	80004ac <__aeabi_i2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd faca 	bl	8000210 <__aeabi_dsub>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <Irany_valaszto+0x15c>)
 8002c8a:	f7fd feeb 	bl	8000a64 <__aeabi_dcmplt>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11c      	bne.n	8002cce <Irany_valaszto+0x9e>
 8002c94:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <Irany_valaszto+0x158>)
 8002c96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c9a:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <Irany_valaszto+0x154>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3b10      	subs	r3, #16
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc01 	bl	80004ac <__aeabi_i2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd faad 	bl	8000210 <__aeabi_dsub>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <Irany_valaszto+0x160>)
 8002cc4:	f7fd feec 	bl	8000aa0 <__aeabi_dcmpgt>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <Irany_valaszto+0xa2>
					//if((-9.5 > vonal_kovetni_h - (vonalak_h[i] - 16))  ||  (vonal_kovetni_h - (vonalak_h[i] - 16) > 9.5)) {
				// ha barhol van olyan vonal, ami tul messze van az aktualisan kovetettol
						ok = false;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	71fb      	strb	r3, [r7, #7]
					//}
				}
				i++;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <Irany_valaszto+0x154>)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d9ba      	bls.n	8002c5a <Irany_valaszto+0x2a>
			}
			if(ok == true) {
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d041      	beq.n	8002d6e <Irany_valaszto+0x13e>
				kereszt_cnt++;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <Irany_valaszto+0x164>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <Irany_valaszto+0x164>)
 8002cf4:	701a      	strb	r2, [r3, #0]
				if(11 < kereszt_cnt) {
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <Irany_valaszto+0x164>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b0b      	cmp	r3, #11
 8002cfc:	d937      	bls.n	8002d6e <Irany_valaszto+0x13e>
					keresztezodesben = true;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <Irany_valaszto+0x150>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
					tolatas = false;
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <Irany_valaszto+0x168>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
					aktualis_irany = iranyok[keresztezodes_szam];
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <Irany_valaszto+0x16c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <Irany_valaszto+0x170>)
 8002d12:	5c9a      	ldrb	r2, [r3, r2]
 8002d14:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <Irany_valaszto+0x174>)
 8002d16:	701a      	strb	r2, [r3, #0]
					if(aktualis_irany == 9) {
 8002d18:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <Irany_valaszto+0x174>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	d108      	bne.n	8002d32 <Irany_valaszto+0x102>
						motvez_k = motvez_d / 2;	// ez a megallas
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <Irany_valaszto+0x178>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0fda      	lsrs	r2, r3, #31
 8002d26:	4413      	add	r3, r2
 8002d28:	105b      	asrs	r3, r3, #1
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <Irany_valaszto+0x17c>)
 8002d2e:	601a      	str	r2, [r3, #0]
	} else if(33 < vonalak_e[1]) {
		keresztezodesben = false;
		aktualis_irany = 1;
		kereszt_cnt = 0;
	}
}
 8002d30:	e01d      	b.n	8002d6e <Irany_valaszto+0x13e>
						keresztezodes_szam++;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <Irany_valaszto+0x16c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <Irany_valaszto+0x16c>)
 8002d3c:	701a      	strb	r2, [r3, #0]
						motvez_k = 450;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Irany_valaszto+0x17c>)
 8002d40:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002d44:	601a      	str	r2, [r3, #0]
						kormanyzas_agresszivitas = 0.35;
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <Irany_valaszto+0x180>)
 8002d48:	a30b      	add	r3, pc, #44	; (adr r3, 8002d78 <Irany_valaszto+0x148>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d52:	e00c      	b.n	8002d6e <Irany_valaszto+0x13e>
	} else if(33 < vonalak_e[1]) {
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <Irany_valaszto+0x154>)
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b21      	cmp	r3, #33	; 0x21
 8002d5a:	d908      	bls.n	8002d6e <Irany_valaszto+0x13e>
		keresztezodesben = false;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <Irany_valaszto+0x150>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
		aktualis_irany = 1;
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <Irany_valaszto+0x174>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
		kereszt_cnt = 0;
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <Irany_valaszto+0x164>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bdb0      	pop	{r4, r5, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	66666666 	.word	0x66666666
 8002d7c:	3fd66666 	.word	0x3fd66666
 8002d80:	20000251 	.word	0x20000251
 8002d84:	20000138 	.word	0x20000138
 8002d88:	20000248 	.word	0x20000248
 8002d8c:	c0200000 	.word	0xc0200000
 8002d90:	40200000 	.word	0x40200000
 8002d94:	20000252 	.word	0x20000252
 8002d98:	20000253 	.word	0x20000253
 8002d9c:	20000250 	.word	0x20000250
 8002da0:	20000270 	.word	0x20000270
 8002da4:	2000013d 	.word	0x2000013d
 8002da8:	20000150 	.word	0x20000150
 8002dac:	20000260 	.word	0x20000260
 8002db0:	20000148 	.word	0x20000148
 8002db4:	00000000 	.word	0x00000000

08002db8 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(double* elso, double* hatso, uint8_t irany) {
 8002db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dbc:	b092      	sub	sp, #72	; 0x48
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6178      	str	r0, [r7, #20]
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	73fb      	strb	r3, [r7, #15]
	double elso_sum = 0.0;
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double hatso_sum = 0.0;
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double e_db = 0.0001;
 8002de0:	a399      	add	r3, pc, #612	; (adr r3, 8003048 <Kovetendo_vonal_valaszto+0x290>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double h_db = 0.0001;
 8002dea:	a397      	add	r3, pc, #604	; (adr r3, 8003048 <Kovetendo_vonal_valaszto+0x290>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if(irany == 0) {							// jobbra at
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 8083 	bne.w	8002f02 <Kovetendo_vonal_valaszto+0x14a>
		*elso = vonalak_e[0] - 16;
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	; (8003030 <Kovetendo_vonal_valaszto+0x278>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3b10      	subs	r3, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb52 	bl	80004ac <__aeabi_i2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e05f      	b.n	8002ed8 <Kovetendo_vonal_valaszto+0x120>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002e18:	4a86      	ldr	r2, [pc, #536]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d856      	bhi.n	8002ed2 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e24:	4b84      	ldr	r3, [pc, #528]	; (8003038 <Kovetendo_vonal_valaszto+0x280>)
 8002e26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e2a:	4a82      	ldr	r2, [pc, #520]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3b10      	subs	r3, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb39 	bl	80004ac <__aeabi_i2d>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd f9e5 	bl	8000210 <__aeabi_dsub>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	4b7a      	ldr	r3, [pc, #488]	; (800303c <Kovetendo_vonal_valaszto+0x284>)
 8002e54:	f7fd fe24 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d039      	beq.n	8002ed2 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <Kovetendo_vonal_valaszto+0x280>)
 8002e60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e64:	4a73      	ldr	r2, [pc, #460]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	3b10      	subs	r3, #16
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb1c 	bl	80004ac <__aeabi_i2d>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4620      	mov	r0, r4
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	f7fd f9c8 	bl	8000210 <__aeabi_dsub>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <Kovetendo_vonal_valaszto+0x288>)
 8002e8e:	f7fd fde9 	bl	8000a64 <__aeabi_dcmplt>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01c      	beq.n	8002ed2 <Kovetendo_vonal_valaszto+0x11a>
				hatso_sum += vonalak_h[i] - 16;
 8002e98:	4a66      	ldr	r2, [pc, #408]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	3b10      	subs	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb02 	bl	80004ac <__aeabi_i2d>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb0:	f7fd f9b0 	bl	8000214 <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	4b60      	ldr	r3, [pc, #384]	; (8003044 <Kovetendo_vonal_valaszto+0x28c>)
 8002ec2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ec6:	f7fd f9a5 	bl	8000214 <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	dd9c      	ble.n	8002e18 <Kovetendo_vonal_valaszto+0x60>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ef2:	f7fd fc6f 	bl	80007d4 <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	6939      	ldr	r1, [r7, #16]
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
 8002f00:	e165      	b.n	80031ce <Kovetendo_vonal_valaszto+0x416>
	} else if (irany == 2) {					// balra at
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f040 808f 	bne.w	8003028 <Kovetendo_vonal_valaszto+0x270>
		int j = 4;								// 4: vonalak_e merete
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002f0e:	e002      	b.n	8002f16 <Kovetendo_vonal_valaszto+0x15e>
			j--;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002f16:	4a46      	ldr	r2, [pc, #280]	; (8003030 <Kovetendo_vonal_valaszto+0x278>)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b21      	cmp	r3, #33	; 0x21
 8002f20:	d8f6      	bhi.n	8002f10 <Kovetendo_vonal_valaszto+0x158>
		}
		*elso = vonalak_e[j] - 16;
 8002f22:	4a43      	ldr	r2, [pc, #268]	; (8003030 <Kovetendo_vonal_valaszto+0x278>)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3b10      	subs	r3, #16
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fabd 	bl	80004ac <__aeabi_i2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e05f      	b.n	8003002 <Kovetendo_vonal_valaszto+0x24a>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f42:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d856      	bhi.n	8002ffc <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <Kovetendo_vonal_valaszto+0x280>)
 8002f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f54:	4a37      	ldr	r2, [pc, #220]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b10      	subs	r3, #16
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd faa4 	bl	80004ac <__aeabi_i2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd f950 	bl	8000210 <__aeabi_dsub>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <Kovetendo_vonal_valaszto+0x284>)
 8002f7e:	f7fd fd8f 	bl	8000aa0 <__aeabi_dcmpgt>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d039      	beq.n	8002ffc <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <Kovetendo_vonal_valaszto+0x280>)
 8002f8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	3b10      	subs	r3, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa87 	bl	80004ac <__aeabi_i2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd f933 	bl	8000210 <__aeabi_dsub>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <Kovetendo_vonal_valaszto+0x288>)
 8002fb8:	f7fd fd54 	bl	8000a64 <__aeabi_dcmplt>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01c      	beq.n	8002ffc <Kovetendo_vonal_valaszto+0x244>
				hatso_sum += vonalak_h[i] - 16;
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <Kovetendo_vonal_valaszto+0x27c>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	3b10      	subs	r3, #16
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fa6d 	bl	80004ac <__aeabi_i2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fda:	f7fd f91b 	bl	8000214 <__adddf3>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <Kovetendo_vonal_valaszto+0x28c>)
 8002fec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ff0:	f7fd f910 	bl	8000214 <__adddf3>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	3301      	adds	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b04      	cmp	r3, #4
 8003006:	dd9c      	ble.n	8002f42 <Kovetendo_vonal_valaszto+0x18a>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8003008:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003014:	4620      	mov	r0, r4
 8003016:	4629      	mov	r1, r5
 8003018:	f7fd fbdc 	bl	80007d4 <__aeabi_ddiv>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	6939      	ldr	r1, [r7, #16]
 8003022:	e9c1 2300 	strd	r2, r3, [r1]
 8003026:	e0d2      	b.n	80031ce <Kovetendo_vonal_valaszto+0x416>
	} else {									// irany == 1: kozep es egyeb, rossz iranyokra is ezt csinaljuk
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e093      	b.n	8003156 <Kovetendo_vonal_valaszto+0x39e>
 800302e:	bf00      	nop
 8003030:	20000138 	.word	0x20000138
 8003034:	20000130 	.word	0x20000130
 8003038:	20000240 	.word	0x20000240
 800303c:	c0180000 	.word	0xc0180000
 8003040:	40180000 	.word	0x40180000
 8003044:	3ff00000 	.word	0x3ff00000
 8003048:	eb1c432d 	.word	0xeb1c432d
 800304c:	3f1a36e2 	.word	0x3f1a36e2
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003050:	4a8b      	ldr	r2, [pc, #556]	; (8003280 <Kovetendo_vonal_valaszto+0x4c8>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b20      	cmp	r3, #32
 800305a:	d856      	bhi.n	800310a <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 800305c:	4b89      	ldr	r3, [pc, #548]	; (8003284 <Kovetendo_vonal_valaszto+0x4cc>)
 800305e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003062:	4a87      	ldr	r2, [pc, #540]	; (8003280 <Kovetendo_vonal_valaszto+0x4c8>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	3b10      	subs	r3, #16
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa1d 	bl	80004ac <__aeabi_i2d>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd f8c9 	bl	8000210 <__aeabi_dsub>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <Kovetendo_vonal_valaszto+0x4d0>)
 800308c:	f7fd fd08 	bl	8000aa0 <__aeabi_dcmpgt>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d039      	beq.n	800310a <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <Kovetendo_vonal_valaszto+0x4cc>)
 8003098:	e9d3 4500 	ldrd	r4, r5, [r3]
 800309c:	4a78      	ldr	r2, [pc, #480]	; (8003280 <Kovetendo_vonal_valaszto+0x4c8>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3b10      	subs	r3, #16
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fa00 	bl	80004ac <__aeabi_i2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4620      	mov	r0, r4
 80030b2:	4629      	mov	r1, r5
 80030b4:	f7fd f8ac 	bl	8000210 <__aeabi_dsub>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <Kovetendo_vonal_valaszto+0x4d4>)
 80030c6:	f7fd fccd 	bl	8000a64 <__aeabi_dcmplt>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01c      	beq.n	800310a <Kovetendo_vonal_valaszto+0x352>
				elso_sum += vonalak_e[i] - 16;
 80030d0:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <Kovetendo_vonal_valaszto+0x4c8>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3b10      	subs	r3, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd f9e6 	bl	80004ac <__aeabi_i2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80030e8:	f7fd f894 	bl	8000214 <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				e_db += 1.0;
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b65      	ldr	r3, [pc, #404]	; (8003290 <Kovetendo_vonal_valaszto+0x4d8>)
 80030fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030fe:	f7fd f889 	bl	8000214 <__adddf3>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			}
			if(vonalak_h[i] < 33) {				// kulonben '-' van benne, ami 45
 800310a:	4a62      	ldr	r2, [pc, #392]	; (8003294 <Kovetendo_vonal_valaszto+0x4dc>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b20      	cmp	r3, #32
 8003114:	d81c      	bhi.n	8003150 <Kovetendo_vonal_valaszto+0x398>
				hatso_sum += vonalak_h[i] - 16;
 8003116:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <Kovetendo_vonal_valaszto+0x4dc>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	3b10      	subs	r3, #16
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f9c3 	bl	80004ac <__aeabi_i2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800312e:	f7fd f871 	bl	8000214 <__adddf3>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <Kovetendo_vonal_valaszto+0x4d8>)
 8003140:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003144:	f7fd f866 	bl	8000214 <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	3301      	adds	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b04      	cmp	r3, #4
 800315a:	f77f af79 	ble.w	8003050 <Kovetendo_vonal_valaszto+0x298>
			}
		}
		if(0.9 < e_db) {
 800315e:	a344      	add	r3, pc, #272	; (adr r3, 8003270 <Kovetendo_vonal_valaszto+0x4b8>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003168:	f7fd fc9a 	bl	8000aa0 <__aeabi_dcmpgt>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <Kovetendo_vonal_valaszto+0x3d2>
			*elso = elso_sum / e_db;
 8003172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800317a:	f7fd fb2b 	bl	80007d4 <__aeabi_ddiv>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	e9c1 2300 	strd	r2, r3, [r1]
 8003188:	e005      	b.n	8003196 <Kovetendo_vonal_valaszto+0x3de>
		} else {
			*elso = *elso;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(0.9 < h_db) {
 8003196:	a336      	add	r3, pc, #216	; (adr r3, 8003270 <Kovetendo_vonal_valaszto+0x4b8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031a0:	f7fd fc7e 	bl	8000aa0 <__aeabi_dcmpgt>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <Kovetendo_vonal_valaszto+0x40a>
			*hatso = hatso_sum / h_db;
 80031aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031b2:	f7fd fb0f 	bl	80007d4 <__aeabi_ddiv>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	e9c1 2300 	strd	r2, r3, [r1]
 80031c0:	e005      	b.n	80031ce <Kovetendo_vonal_valaszto+0x416>
		} else {
			*hatso = *hatso;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	if(1.9 < e_db) {
 80031ce:	a32a      	add	r3, pc, #168	; (adr r3, 8003278 <Kovetendo_vonal_valaszto+0x4c0>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031d8:	f7fd fc62 	bl	8000aa0 <__aeabi_dcmpgt>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <Kovetendo_vonal_valaszto+0x436>
		fekezes_cnt += 1;
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <Kovetendo_vonal_valaszto+0x4e0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <Kovetendo_vonal_valaszto+0x4e0>)
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e002      	b.n	80031f4 <Kovetendo_vonal_valaszto+0x43c>
	} else {
		fekezes_cnt = 0;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <Kovetendo_vonal_valaszto+0x4e0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
	}
	if((-5 < *elso && *elso < 5)  &&  (-5 < *hatso && *hatso < 5)) {
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <Kovetendo_vonal_valaszto+0x4d0>)
 8003200:	f7fd fc4e 	bl	8000aa0 <__aeabi_dcmpgt>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d026      	beq.n	8003258 <Kovetendo_vonal_valaszto+0x4a0>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <Kovetendo_vonal_valaszto+0x4d4>)
 8003216:	f7fd fc25 	bl	8000a64 <__aeabi_dcmplt>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <Kovetendo_vonal_valaszto+0x4a0>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <Kovetendo_vonal_valaszto+0x4d0>)
 800322c:	f7fd fc38 	bl	8000aa0 <__aeabi_dcmpgt>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <Kovetendo_vonal_valaszto+0x4a0>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <Kovetendo_vonal_valaszto+0x4d4>)
 8003242:	f7fd fc0f 	bl	8000a64 <__aeabi_dcmplt>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <Kovetendo_vonal_valaszto+0x4a0>
		veretesi_cnt += 1;
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <Kovetendo_vonal_valaszto+0x4e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a12      	ldr	r2, [pc, #72]	; (800329c <Kovetendo_vonal_valaszto+0x4e4>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e003      	b.n	8003260 <Kovetendo_vonal_valaszto+0x4a8>
	} else {
		veretesi_cnt = 0;
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <Kovetendo_vonal_valaszto+0x4e4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
	}
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	3748      	adds	r7, #72	; 0x48
 8003264:	46bd      	mov	sp, r7
 8003266:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w
 8003270:	cccccccd 	.word	0xcccccccd
 8003274:	3feccccc 	.word	0x3feccccc
 8003278:	66666666 	.word	0x66666666
 800327c:	3ffe6666 	.word	0x3ffe6666
 8003280:	20000138 	.word	0x20000138
 8003284:	20000248 	.word	0x20000248
 8003288:	c0140000 	.word	0xc0140000
 800328c:	40140000 	.word	0x40140000
 8003290:	3ff00000 	.word	0x3ff00000
 8003294:	20000130 	.word	0x20000130
 8003298:	20000268 	.word	0x20000268
 800329c:	20000264 	.word	0x20000264

080032a0 <Szervo_szog_beallit>:

void Szervo_szog_beallit(void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	if (btnEnable == 1 && szervoEnable == 1) {
 80032a4:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <Szervo_szog_beallit+0x140>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 8093 	bne.w	80033d4 <Szervo_szog_beallit+0x134>
 80032ae:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <Szervo_szog_beallit+0x144>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 808e 	bne.w	80033d4 <Szervo_szog_beallit+0x134>
		if (tolatas == true) {		// tolatas	// 10 - (10- -7)*0.5 =
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <Szervo_szog_beallit+0x148>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <Szervo_szog_beallit+0x74>
			kormanyzas_agresszivitas = 0.7;
 80032c0:	494a      	ldr	r1, [pc, #296]	; (80033ec <Szervo_szog_beallit+0x14c>)
 80032c2:	a345      	add	r3, pc, #276	; (adr r3, 80033d8 <Szervo_szog_beallit+0x138>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	e9c1 2300 	strd	r2, r3, [r1]
			cel = vonal_kovetni_h + (((vonal_kovetni_h) - (vonal_kovetni_e)) *kormanyzas_agresszivitas);
 80032cc:	4b48      	ldr	r3, [pc, #288]	; (80033f0 <Szervo_szog_beallit+0x150>)
 80032ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d2:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <Szervo_szog_beallit+0x154>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fc ff9a 	bl	8000210 <__aeabi_dsub>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <Szervo_szog_beallit+0x14c>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd f949 	bl	8000580 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <Szervo_szog_beallit+0x150>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f7fc ff8a 	bl	8000214 <__adddf3>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	493c      	ldr	r1, [pc, #240]	; (80033f8 <Szervo_szog_beallit+0x158>)
 8003306:	e9c1 2300 	strd	r2, r3, [r1]
			motvez_k = 560;
 800330a:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <Szervo_szog_beallit+0x15c>)
 800330c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e01e      	b.n	8003352 <Szervo_szog_beallit+0xb2>
		} else {				// elore menet es rossz input
			cel = vonal_kovetni_e + (((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 8003314:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <Szervo_szog_beallit+0x154>)
 8003316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331a:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <Szervo_szog_beallit+0x150>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fc ff76 	bl	8000210 <__aeabi_dsub>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <Szervo_szog_beallit+0x14c>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f925 	bl	8000580 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <Szervo_szog_beallit+0x154>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fc ff66 	bl	8000214 <__adddf3>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	492a      	ldr	r1, [pc, #168]	; (80033f8 <Szervo_szog_beallit+0x158>)
 800334e:	e9c1 2300 	strd	r2, r3, [r1]
			//motvez_k = 455;
		}
		if(cel < -15) {
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <Szervo_szog_beallit+0x158>)
 8003354:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <Szervo_szog_beallit+0x160>)
 800335e:	f7fd fb81 	bl	8000a64 <__aeabi_dcmplt>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <Szervo_szog_beallit+0xd2>
			szervoSzog = 0;
 8003368:	4b26      	ldr	r3, [pc, #152]	; (8003404 <Szervo_szog_beallit+0x164>)
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e028      	b.n	80033c4 <Szervo_szog_beallit+0x124>
		} else if(15 < cel) {
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <Szervo_szog_beallit+0x158>)
 8003374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <Szervo_szog_beallit+0x168>)
 800337e:	f7fd fb8f 	bl	8000aa0 <__aeabi_dcmpgt>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <Szervo_szog_beallit+0xf0>
			szervoSzog = 180;
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <Szervo_szog_beallit+0x164>)
 800338a:	4a20      	ldr	r2, [pc, #128]	; (800340c <Szervo_szog_beallit+0x16c>)
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e019      	b.n	80033c4 <Szervo_szog_beallit+0x124>
		} else {
			szervoSzog = 90 + cel *6;
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <Szervo_szog_beallit+0x158>)
 8003392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <Szervo_szog_beallit+0x170>)
 800339c:	f7fd f8f0 	bl	8000580 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <Szervo_szog_beallit+0x174>)
 80033ae:	f7fc ff31 	bl	8000214 <__adddf3>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f7fd fb9b 	bl	8000af4 <__aeabi_d2f>
 80033be:	4603      	mov	r3, r0
 80033c0:	4a10      	ldr	r2, [pc, #64]	; (8003404 <Szervo_szog_beallit+0x164>)
 80033c2:	6013      	str	r3, [r2, #0]
		}

		SERVO_MoveTo(SZERVO, szervoSzog);
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <Szervo_szog_beallit+0x164>)
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd feec 	bl	80011ac <SERVO_MoveTo>
	}
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	66666666 	.word	0x66666666
 80033dc:	3fe66666 	.word	0x3fe66666
 80033e0:	200001f0 	.word	0x200001f0
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000253 	.word	0x20000253
 80033ec:	20000148 	.word	0x20000148
 80033f0:	20000240 	.word	0x20000240
 80033f4:	20000248 	.word	0x20000248
 80033f8:	20000258 	.word	0x20000258
 80033fc:	20000260 	.word	0x20000260
 8003400:	c02e0000 	.word	0xc02e0000
 8003404:	20000140 	.word	0x20000140
 8003408:	402e0000 	.word	0x402e0000
 800340c:	43340000 	.word	0x43340000
 8003410:	40180000 	.word	0x40180000
 8003414:	40568000 	.word	0x40568000

08003418 <MinDistance>:

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int MinDistance(int dist[], bool sptSet[])
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    // Initialize min value
    int min = INT_MAX, min_index;
 8003422:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003426:	617b      	str	r3, [r7, #20]

    for (int v = 0; v < CSUCS_SZAM; v++)
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e01b      	b.n	8003466 <MinDistance+0x4e>
        if (sptSet[v] == false && dist[v] <= min)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <MinDistance+0x48>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	429a      	cmp	r2, r3
 800344e:	db07      	blt.n	8003460 <MinDistance+0x48>
            min = dist[v], min_index = v;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	613b      	str	r3, [r7, #16]
    for (int v = 0; v < CSUCS_SZAM; v++)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b20      	cmp	r3, #32
 800346a:	dde0      	ble.n	800342e <MinDistance+0x16>

    return min_index;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <Source_Target_allito>:


void Source_Target_allito(void) {
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
    source = road[0];
 8003480:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <Source_Target_allito+0x174>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5b      	ldr	r2, [pc, #364]	; (80035f4 <Source_Target_allito+0x178>)
 8003486:	6013      	str	r3, [r2, #0]

    if            (kapuk[0] == 'A') {
 8003488:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <Source_Target_allito+0x17c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b41      	cmp	r3, #65	; 0x41
 800348e:	d106      	bne.n	800349e <Source_Target_allito+0x22>
            target1 = 1;
 8003490:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <Source_Target_allito+0x180>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
            target2 = 2;
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <Source_Target_allito+0x184>)
 8003498:	2202      	movs	r2, #2
 800349a:	601a      	str	r2, [r3, #0]
            target2 = 29;
    } else if    (kapuk[0] == 'X') {
            target1 = 31;
            target2 = 32;
    }
}
 800349c:	e0a3      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'B') {
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <Source_Target_allito+0x17c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b42      	cmp	r3, #66	; 0x42
 80034a4:	d106      	bne.n	80034b4 <Source_Target_allito+0x38>
            target1 = 3;
 80034a6:	4b55      	ldr	r3, [pc, #340]	; (80035fc <Source_Target_allito+0x180>)
 80034a8:	2203      	movs	r2, #3
 80034aa:	601a      	str	r2, [r3, #0]
            target2 = 4;
 80034ac:	4b54      	ldr	r3, [pc, #336]	; (8003600 <Source_Target_allito+0x184>)
 80034ae:	2204      	movs	r2, #4
 80034b0:	601a      	str	r2, [r3, #0]
}
 80034b2:	e098      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'C') {
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <Source_Target_allito+0x17c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b43      	cmp	r3, #67	; 0x43
 80034ba:	d106      	bne.n	80034ca <Source_Target_allito+0x4e>
            target1 = 5;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <Source_Target_allito+0x180>)
 80034be:	2205      	movs	r2, #5
 80034c0:	601a      	str	r2, [r3, #0]
            target2 = 6;
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <Source_Target_allito+0x184>)
 80034c4:	2206      	movs	r2, #6
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	e08d      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'D') {
 80034ca:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <Source_Target_allito+0x17c>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b44      	cmp	r3, #68	; 0x44
 80034d0:	d106      	bne.n	80034e0 <Source_Target_allito+0x64>
            target1 = 7;
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <Source_Target_allito+0x180>)
 80034d4:	2207      	movs	r2, #7
 80034d6:	601a      	str	r2, [r3, #0]
            target2 = 8;
 80034d8:	4b49      	ldr	r3, [pc, #292]	; (8003600 <Source_Target_allito+0x184>)
 80034da:	2208      	movs	r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	e082      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'E') {
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <Source_Target_allito+0x17c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b45      	cmp	r3, #69	; 0x45
 80034e6:	d106      	bne.n	80034f6 <Source_Target_allito+0x7a>
            target1 = 9;
 80034e8:	4b44      	ldr	r3, [pc, #272]	; (80035fc <Source_Target_allito+0x180>)
 80034ea:	2209      	movs	r2, #9
 80034ec:	601a      	str	r2, [r3, #0]
            target2 = 10;
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <Source_Target_allito+0x184>)
 80034f0:	220a      	movs	r2, #10
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	e077      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'F') {
 80034f6:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <Source_Target_allito+0x17c>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b46      	cmp	r3, #70	; 0x46
 80034fc:	d106      	bne.n	800350c <Source_Target_allito+0x90>
            target1 = 11;
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <Source_Target_allito+0x180>)
 8003500:	220b      	movs	r2, #11
 8003502:	601a      	str	r2, [r3, #0]
            target2 = 12;
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <Source_Target_allito+0x184>)
 8003506:	220c      	movs	r2, #12
 8003508:	601a      	str	r2, [r3, #0]
}
 800350a:	e06c      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'G') {
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <Source_Target_allito+0x17c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b47      	cmp	r3, #71	; 0x47
 8003512:	d106      	bne.n	8003522 <Source_Target_allito+0xa6>
            target1 = 13;
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <Source_Target_allito+0x180>)
 8003516:	220d      	movs	r2, #13
 8003518:	601a      	str	r2, [r3, #0]
            target2 = 14;
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <Source_Target_allito+0x184>)
 800351c:	220e      	movs	r2, #14
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	e061      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'H') {
 8003522:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <Source_Target_allito+0x17c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b48      	cmp	r3, #72	; 0x48
 8003528:	d106      	bne.n	8003538 <Source_Target_allito+0xbc>
            target1 = 15;
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <Source_Target_allito+0x180>)
 800352c:	220f      	movs	r2, #15
 800352e:	601a      	str	r2, [r3, #0]
            target2 = 16;
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <Source_Target_allito+0x184>)
 8003532:	2210      	movs	r2, #16
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	e056      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'I') {
 8003538:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <Source_Target_allito+0x17c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b49      	cmp	r3, #73	; 0x49
 800353e:	d106      	bne.n	800354e <Source_Target_allito+0xd2>
            target1 = 17;
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <Source_Target_allito+0x180>)
 8003542:	2211      	movs	r2, #17
 8003544:	601a      	str	r2, [r3, #0]
            target2 = 18;
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <Source_Target_allito+0x184>)
 8003548:	2212      	movs	r2, #18
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	e04b      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'J') {
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <Source_Target_allito+0x17c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b4a      	cmp	r3, #74	; 0x4a
 8003554:	d106      	bne.n	8003564 <Source_Target_allito+0xe8>
            target1 = 19;
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <Source_Target_allito+0x180>)
 8003558:	2213      	movs	r2, #19
 800355a:	601a      	str	r2, [r3, #0]
            target2 = 20;
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <Source_Target_allito+0x184>)
 800355e:	2214      	movs	r2, #20
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	e040      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'K') {
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <Source_Target_allito+0x17c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b4b      	cmp	r3, #75	; 0x4b
 800356a:	d106      	bne.n	800357a <Source_Target_allito+0xfe>
            target1 = 21;
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <Source_Target_allito+0x180>)
 800356e:	2215      	movs	r2, #21
 8003570:	601a      	str	r2, [r3, #0]
            target2 = 22;
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <Source_Target_allito+0x184>)
 8003574:	2216      	movs	r2, #22
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	e035      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'L') {
 800357a:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <Source_Target_allito+0x17c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b4c      	cmp	r3, #76	; 0x4c
 8003580:	d106      	bne.n	8003590 <Source_Target_allito+0x114>
            target1 = 23;
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <Source_Target_allito+0x180>)
 8003584:	2217      	movs	r2, #23
 8003586:	601a      	str	r2, [r3, #0]
            target2 = 24;
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <Source_Target_allito+0x184>)
 800358a:	2218      	movs	r2, #24
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	e02a      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'M') {
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <Source_Target_allito+0x17c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b4d      	cmp	r3, #77	; 0x4d
 8003596:	d106      	bne.n	80035a6 <Source_Target_allito+0x12a>
            target1 = 25;
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <Source_Target_allito+0x180>)
 800359a:	2219      	movs	r2, #25
 800359c:	601a      	str	r2, [r3, #0]
            target2 = 26;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <Source_Target_allito+0x184>)
 80035a0:	221a      	movs	r2, #26
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	e01f      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'N') {
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <Source_Target_allito+0x17c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b4e      	cmp	r3, #78	; 0x4e
 80035ac:	d106      	bne.n	80035bc <Source_Target_allito+0x140>
            target1 = 27;
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <Source_Target_allito+0x180>)
 80035b0:	221b      	movs	r2, #27
 80035b2:	601a      	str	r2, [r3, #0]
            target2 = 28;
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <Source_Target_allito+0x184>)
 80035b6:	221c      	movs	r2, #28
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	e014      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'O') {
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <Source_Target_allito+0x17c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b4f      	cmp	r3, #79	; 0x4f
 80035c2:	d106      	bne.n	80035d2 <Source_Target_allito+0x156>
            target1 = 29;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <Source_Target_allito+0x180>)
 80035c6:	221d      	movs	r2, #29
 80035c8:	601a      	str	r2, [r3, #0]
            target2 = 29;
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <Source_Target_allito+0x184>)
 80035cc:	221d      	movs	r2, #29
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	e009      	b.n	80035e6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'X') {
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <Source_Target_allito+0x17c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b58      	cmp	r3, #88	; 0x58
 80035d8:	d105      	bne.n	80035e6 <Source_Target_allito+0x16a>
            target1 = 31;
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <Source_Target_allito+0x180>)
 80035dc:	221f      	movs	r2, #31
 80035de:	601a      	str	r2, [r3, #0]
            target2 = 32;
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <Source_Target_allito+0x184>)
 80035e2:	2220      	movs	r2, #32
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	2000015c 	.word	0x2000015c
 80035f4:	20000184 	.word	0x20000184
 80035f8:	20000154 	.word	0x20000154
 80035fc:	20000188 	.word	0x20000188
 8003600:	2000018c 	.word	0x2000018c

08003604 <Dijkstra>:


// Function that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void Dijkstra(int graph[CSUCS_SZAM][CSUCS_SZAM], int src, int target1, int target2) {
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b0d9      	sub	sp, #356	; 0x164
 8003608:	af00      	add	r7, sp, #0
 800360a:	f107 040c 	add.w	r4, r7, #12
 800360e:	6020      	str	r0, [r4, #0]
 8003610:	f107 0008 	add.w	r0, r7, #8
 8003614:	6001      	str	r1, [r0, #0]
 8003616:	1d39      	adds	r1, r7, #4
 8003618:	600a      	str	r2, [r1, #0]
 800361a:	463a      	mov	r2, r7
 800361c:	6013      	str	r3, [r2, #0]
	int dist[CSUCS_SZAM]; // The output array. dist[i] will hold the shortest
	// distance from src to i
  	int r[CSUCS_SZAM];
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003624:	e00c      	b.n	8003640 <Dijkstra+0x3c>
      	r[i] = -1;
 8003626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800362a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800362e:	f04f 31ff 	mov.w	r1, #4294967295
 8003632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 8003636:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800363a:	3301      	adds	r3, #1
 800363c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003640:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003644:	2b20      	cmp	r3, #32
 8003646:	ddee      	ble.n	8003626 <Dijkstra+0x22>

	bool sptSet[CSUCS_SZAM]; // sptSet[i] will be true if vertex i is included in shortest
	// path tree or shortest distance from src to i is finalized

	// Initialize all distances as INFINITE and stpSet[] as false
	for (int i = 0; i < CSUCS_SZAM; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800364e:	e015      	b.n	800367c <Dijkstra+0x78>
		dist[i] = INT_MAX, sptSet[i] = false;
 8003650:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800365a:	4413      	add	r3, r2
 800365c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003660:	f843 2ca8 	str.w	r2, [r3, #-168]
 8003664:	f107 0210 	add.w	r2, r7, #16
 8003668:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800366c:	4413      	add	r3, r2
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CSUCS_SZAM; i++)
 8003672:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003676:	3301      	adds	r3, #1
 8003678:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800367c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003680:	2b20      	cmp	r3, #32
 8003682:	dde5      	ble.n	8003650 <Dijkstra+0x4c>

	// Distance of source vertex from itself is always 0
	dist[src] = 0;
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003690:	4413      	add	r3, r2
 8003692:	2200      	movs	r2, #0
 8003694:	f843 2ca8 	str.w	r2, [r3, #-168]

	// Find shortest path for all vertices
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800369e:	e094      	b.n	80037ca <Dijkstra+0x1c6>
		// Pick the minimum distance vertex from the set of vertices not
		// yet processed. u is always equal to src in the first iteration.
		int u = MinDistance(dist, sptSet);
 80036a0:	f107 0210 	add.w	r2, r7, #16
 80036a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff feb4 	bl	8003418 <MinDistance>
 80036b0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

		// Mark the picked vertex as processed
		sptSet[u] = true;
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036bc:	4413      	add	r3, r2
 80036be:	2201      	movs	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]

		// Update dist value of the adjacent vertices of the picked vertex.
		for (int v = 0; v < CSUCS_SZAM; v++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036c8:	e076      	b.n	80037b8 <Dijkstra+0x1b4>

			// Update dist[v] only if is not in sptSet, there is an edge from
			// u to v, and total weight of path from src to v through u is
			// smaller than current value of dist[v]
			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
 80036ca:	f107 0210 	add.w	r2, r7, #16
 80036ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f083 0301 	eor.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d066      	beq.n	80037ae <Dijkstra+0x1aa>
 80036e0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80036e4:	4613      	mov	r3, r2
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d055      	beq.n	80037ae <Dijkstra+0x1aa>
 8003702:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800370c:	4413      	add	r3, r2
 800370e:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003712:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003716:	4293      	cmp	r3, r2
 8003718:	d049      	beq.n	80037ae <Dijkstra+0x1aa>
				&& dist[u] + graph[u][v] < dist[v]) {
 800371a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003724:	4413      	add	r3, r2
 8003726:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 800372a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800372e:	4613      	mov	r3, r2
 8003730:	015b      	lsls	r3, r3, #5
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4413      	add	r3, r2
 8003740:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	18ca      	adds	r2, r1, r3
 800374a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003754:	440b      	add	r3, r1
 8003756:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800375a:	429a      	cmp	r2, r3
 800375c:	da27      	bge.n	80037ae <Dijkstra+0x1aa>
				dist[v] = dist[u] + graph[u][v];
 800375e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003768:	4413      	add	r3, r2
 800376a:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 800376e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003772:	4613      	mov	r3, r2
 8003774:	015b      	lsls	r3, r3, #5
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	461a      	mov	r2, r3
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	18ca      	adds	r2, r1, r3
 800378e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003798:	440b      	add	r3, r1
 800379a:	f843 2ca8 	str.w	r2, [r3, #-168]
    			r[v] = u; }
 800379e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037a2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80037a6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int v = 0; v < CSUCS_SZAM; v++)
 80037ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037b2:	3301      	adds	r3, #1
 80037b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037bc:	2b20      	cmp	r3, #32
 80037be:	dd84      	ble.n	80036ca <Dijkstra+0xc6>
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 80037c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037c4:	3301      	adds	r3, #1
 80037c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037ce:	2b1f      	cmp	r3, #31
 80037d0:	f77f af66 	ble.w	80036a0 <Dijkstra+0x9c>
	}

  	int ultimate_trg = target1;
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  	if(dist[target2] < dist[target1])
 80037dc:	463b      	mov	r3, r7
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80037e6:	4413      	add	r3, r2
 80037e8:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80037f6:	440b      	add	r3, r1
 80037f8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	da03      	bge.n	8003808 <Dijkstra+0x204>
      	ultimate_trg = target2;
 8003800:	463b      	mov	r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	for(int i = 0; i < 10; i++) {
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800380e:	e00b      	b.n	8003828 <Dijkstra+0x224>
      	road[i] = -1;
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <Dijkstra+0x29c>)
 8003812:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003816:	f04f 31ff 	mov.w	r1, #4294967295
 800381a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	for(int i = 0; i < 10; i++) {
 800381e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003822:	3301      	adds	r3, #1
 8003824:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003828:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800382c:	2b09      	cmp	r3, #9
 800382e:	ddef      	ble.n	8003810 <Dijkstra+0x20c>
    }
  	road[0] = ultimate_trg;
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <Dijkstra+0x29c>)
 8003832:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003836:	6013      	str	r3, [r2, #0]
  	int last_v = r[ultimate_trg];
 8003838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003844:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	int k = 1;
 8003848:	2301      	movs	r3, #1
 800384a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  	//cout <<last_v<< endl;
  	while(last_v != src){
 800384e:	e013      	b.n	8003878 <Dijkstra+0x274>
  		road[k] = last_v;
 8003850:	4913      	ldr	r1, [pc, #76]	; (80038a0 <Dijkstra+0x29c>)
 8003852:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003856:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		k++;
 800385e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003862:	3301      	adds	r3, #1
 8003864:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        last_v = r[last_v];
 8003868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800386c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003874:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	while(last_v != src){
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d1e4      	bne.n	8003850 <Dijkstra+0x24c>
      	//cout <<last_v<< endl;
     }
  	road[k] = last_v;
 8003886:	4906      	ldr	r1, [pc, #24]	; (80038a0 <Dijkstra+0x29c>)
 8003888:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800388c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003894:	bf00      	nop
 8003896:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000015c 	.word	0x2000015c

080038a4 <Graf_csucs_feltolt>:

void Graf_csucs_feltolt(void) {
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	e015      	b.n	80038dc <Graf_csucs_feltolt+0x38>
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 80038b0:	2300      	movs	r3, #0
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	e00c      	b.n	80038d0 <Graf_csucs_feltolt+0x2c>
      		graf_csucs[u][v] = 5000000;
 80038b6:	49d0      	ldr	r1, [pc, #832]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	015b      	lsls	r3, r3, #5
 80038be:	4413      	add	r3, r2
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	4acd      	ldr	r2, [pc, #820]	; (8003bfc <Graf_csucs_feltolt+0x358>)
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	ddef      	ble.n	80038b6 <Graf_csucs_feltolt+0x12>
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3301      	adds	r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b20      	cmp	r3, #32
 80038e0:	dde6      	ble.n	80038b0 <Graf_csucs_feltolt+0xc>
        }
    }
  	graf_csucs[1][3] = 4891;
 80038e2:	4bc5      	ldr	r3, [pc, #788]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80038e4:	f241 321b 	movw	r2, #4891	; 0x131b
 80038e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    graf_csucs[1][5] = 6060;
 80038ec:	4bc2      	ldr	r3, [pc, #776]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80038ee:	f241 72ac 	movw	r2, #6060	; 0x17ac
 80038f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    graf_csucs[1][7] = 7143;
 80038f6:	4bc0      	ldr	r3, [pc, #768]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80038f8:	f641 32e7 	movw	r2, #7143	; 0x1be7
 80038fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    graf_csucs[2][3] = 5260;
 8003900:	4bbd      	ldr	r3, [pc, #756]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003902:	f241 428c 	movw	r2, #5260	; 0x148c
 8003906:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    graf_csucs[2][5] = 6429;
 800390a:	4bbb      	ldr	r3, [pc, #748]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800390c:	f641 121d 	movw	r2, #6429	; 0x191d
 8003910:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    graf_csucs[2][7] = 7512;
 8003914:	4bb8      	ldr	r3, [pc, #736]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003916:	f641 5258 	movw	r2, #7512	; 0x1d58
 800391a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    graf_csucs[3][9] = 4202;
 800391e:	4bb6      	ldr	r3, [pc, #728]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003920:	f241 026a 	movw	r2, #4202	; 0x106a
 8003924:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    graf_csucs[3][11] = 5373;
 8003928:	4bb3      	ldr	r3, [pc, #716]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800392a:	f241 42fd 	movw	r2, #5373	; 0x14fd
 800392e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    graf_csucs[4][1] = 5260;
 8003932:	4bb1      	ldr	r3, [pc, #708]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003934:	f241 428c 	movw	r2, #5260	; 0x148c
 8003938:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    graf_csucs[4][2] = 4891;
 800393c:	4bae      	ldr	r3, [pc, #696]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800393e:	f241 321b 	movw	r2, #4891	; 0x131b
 8003942:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    graf_csucs[5][11] = 3657;
 8003946:	4bac      	ldr	r3, [pc, #688]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003948:	f640 6249 	movw	r2, #3657	; 0xe49
 800394c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    graf_csucs[6][1] = 6429;
 8003950:	4ba9      	ldr	r3, [pc, #676]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003952:	f641 121d 	movw	r2, #6429	; 0x191d
 8003956:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    graf_csucs[6][2] = 6060; 	// C csucs kesz
 800395a:	4ba7      	ldr	r3, [pc, #668]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800395c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 8003960:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
    graf_csucs[7][11] = 2899;
 8003964:	4ba4      	ldr	r3, [pc, #656]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003966:	f640 3253 	movw	r2, #2899	; 0xb53
 800396a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
    graf_csucs[8][1] = 7512;
 800396e:	4ba2      	ldr	r3, [pc, #648]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003970:	f641 5258 	movw	r2, #7512	; 0x1d58
 8003974:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    graf_csucs[8][2] = 7143;
 8003978:	4b9f      	ldr	r3, [pc, #636]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800397a:	f641 32e7 	movw	r2, #7143	; 0x1be7
 800397e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    graf_csucs[9][17] = 6770;
 8003982:	4b9d      	ldr	r3, [pc, #628]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003984:	f641 2272 	movw	r2, #6770	; 0x1a72
 8003988:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
    graf_csucs[9][19] = 8874;
 800398c:	4b9a      	ldr	r3, [pc, #616]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 800398e:	f242 22aa 	movw	r2, #8874	; 0x22aa
 8003992:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
    graf_csucs[10][4] = 4202;
 8003996:	4b98      	ldr	r3, [pc, #608]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003998:	f241 026a 	movw	r2, #4202	; 0x106a
 800399c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    graf_csucs[11][14] = 1697;
 80039a0:	4b95      	ldr	r3, [pc, #596]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039a2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80039a6:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    graf_csucs[11][15] = 2370;
 80039aa:	4b93      	ldr	r3, [pc, #588]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039ac:	f640 1242 	movw	r2, #2370	; 0x942
 80039b0:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
    graf_csucs[11][21] = 8569;
 80039b4:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039b6:	f242 1279 	movw	r2, #8569	; 0x2179
 80039ba:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    graf_csucs[11][23] = 13602;
 80039be:	4b8e      	ldr	r3, [pc, #568]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039c0:	f243 5222 	movw	r2, #13602	; 0x3522
 80039c4:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    graf_csucs[11][25] = 14059;
 80039c8:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039ca:	f243 62eb 	movw	r2, #14059	; 0x36eb
 80039ce:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    graf_csucs[11][27] = 15560;
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039d4:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 80039d8:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    graf_csucs[12][4] = 5373;
 80039dc:	4b86      	ldr	r3, [pc, #536]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039de:	f241 42fd 	movw	r2, #5373	; 0x14fd
 80039e2:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    graf_csucs[12][6] = 3657;
 80039e6:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039e8:	f640 6249 	movw	r2, #3657	; 0xe49
 80039ec:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
    graf_csucs[12][8] = 2899; 	// F csucs kesz
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039f2:	f640 3253 	movw	r2, #2899	; 0xb53
 80039f6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    graf_csucs[13][12] = 1697;
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 80039fc:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8003a00:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
    graf_csucs[14][17] = 4396;
 8003a04:	4b7c      	ldr	r3, [pc, #496]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a06:	f241 122c 	movw	r2, #4396	; 0x112c
 8003a0a:	f8c3 277c 	str.w	r2, [r3, #1916]	; 0x77c
    graf_csucs[14][19] = 6500;
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a10:	f641 1264 	movw	r2, #6500	; 0x1964
 8003a14:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    graf_csucs[15][21] = 6494;
 8003a18:	4b77      	ldr	r3, [pc, #476]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a1a:	f641 125e 	movw	r2, #6494	; 0x195e
 8003a1e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    graf_csucs[15][23] = 11527;
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a24:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003a28:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    graf_csucs[15][25] = 11984;
 8003a2c:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a2e:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003a32:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    graf_csucs[15][27] = 13485;
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a38:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003a3c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
    graf_csucs[16][12] = 2370;
 8003a40:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a42:	f640 1242 	movw	r2, #2370	; 0x942
 8003a46:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
    graf_csucs[17][21] = 2969;
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a4c:	f640 3299 	movw	r2, #2969	; 0xb99
 8003a50:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    graf_csucs[17][23] = 8002;
 8003a54:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a56:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003a5a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    graf_csucs[17][25] = 8459;
 8003a5e:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a60:	f242 120b 	movw	r2, #8459	; 0x210b
 8003a64:	f8c3 2928 	str.w	r2, [r3, #2344]	; 0x928
    graf_csucs[17][27] = 9960;
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a6a:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003a6e:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    graf_csucs[18][13] = 4396;
 8003a72:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a74:	f241 122c 	movw	r2, #4396	; 0x112c
 8003a78:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
    graf_csucs[18][10] = 6770; 	// I csucs kesz
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a7e:	f641 2272 	movw	r2, #6770	; 0x1a72
 8003a82:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    graf_csucs[19][23] = 5615;
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a88:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003a8c:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
    graf_csucs[19][25] = 6072;
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a92:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003a96:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    graf_csucs[19][27] = 7573;
 8003a9a:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003a9c:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003aa0:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
    graf_csucs[20][10] = 8874;
 8003aa4:	4b54      	ldr	r3, [pc, #336]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003aa6:	f242 22aa 	movw	r2, #8874	; 0x22aa
 8003aaa:	f8c3 2a78 	str.w	r2, [r3, #2680]	; 0xa78
    graf_csucs[20][13] = 6500;
 8003aae:	4b52      	ldr	r3, [pc, #328]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ab0:	f641 1264 	movw	r2, #6500	; 0x1964
 8003ab4:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
    graf_csucs[21][23] = 4727;
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003aba:	f241 2277 	movw	r2, #4727	; 0x1277
 8003abe:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    graf_csucs[21][25] = 5184;
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ac4:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003ac8:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38
    graf_csucs[21][27] = 6685;
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ace:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003ad2:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    graf_csucs[22][12] = 8569;
 8003ad6:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ad8:	f242 1279 	movw	r2, #8569	; 0x2179
 8003adc:	f8c3 2b88 	str.w	r2, [r3, #2952]	; 0xb88
    graf_csucs[22][16] = 6494;
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ae2:	f641 125e 	movw	r2, #6494	; 0x195e
 8003ae6:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
    graf_csucs[22][18] = 2969;
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003aec:	f640 3299 	movw	r2, #2969	; 0xb99
 8003af0:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    graf_csucs[23][29] = 10948;
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003af6:	f642 22c4 	movw	r2, #10948	; 0x2ac4
 8003afa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    graf_csucs[23][32] = 13441;
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b00:	f243 4281 	movw	r2, #13441	; 0x3481
 8003b04:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    graf_csucs[24][12] = 13602;
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b0a:	f243 5222 	movw	r2, #13602	; 0x3522
 8003b0e:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    graf_csucs[24][16] = 11527;
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b14:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003b18:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    graf_csucs[24][18] = 8002;
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b1e:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003b22:	f8c3 2ca8 	str.w	r2, [r3, #3240]	; 0xca8
    graf_csucs[24][20] = 5615;
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b28:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003b2c:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    graf_csucs[24][22] = 4727; 	// L csucs kesz
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b32:	f241 2277 	movw	r2, #4727	; 0x1277
 8003b36:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
    graf_csucs[25][29] = 10485;
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b3c:	f642 02f5 	movw	r2, #10485	; 0x28f5
 8003b40:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
    graf_csucs[25][32] = 12978;
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b46:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003b4a:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
    graf_csucs[26][12] = 14059;
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b50:	f243 62eb 	movw	r2, #14059	; 0x36eb
 8003b54:	f8c3 2d98 	str.w	r2, [r3, #3480]	; 0xd98
    graf_csucs[26][16] = 11984;
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b5a:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003b5e:	f8c3 2da8 	str.w	r2, [r3, #3496]	; 0xda8
    graf_csucs[26][18] = 8459;
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b64:	f242 120b 	movw	r2, #8459	; 0x210b
 8003b68:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
    graf_csucs[26][20] = 6072;
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b6e:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003b72:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
    graf_csucs[26][22] = 5184;
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b78:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003b7c:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
    graf_csucs[27][31] = 3047;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b82:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003b86:	f8c3 2e68 	str.w	r2, [r3, #3688]	; 0xe68
    graf_csucs[28][12] = 15560;
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b8c:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 8003b90:	f8c3 2ea0 	str.w	r2, [r3, #3744]	; 0xea0
    graf_csucs[28][16] = 13485;
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003b96:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003b9a:	f8c3 2eb0 	str.w	r2, [r3, #3760]	; 0xeb0
    graf_csucs[28][18] = 9960;
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003ba0:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003ba4:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8
    graf_csucs[28][20] = 7573;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003baa:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003bae:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
    graf_csucs[28][22] = 6685;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bb4:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003bb8:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
    graf_csucs[29][32] = 9659;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bbe:	f242 52bb 	movw	r2, #9659	; 0x25bb
 8003bc2:	f8c3 2f74 	str.w	r2, [r3, #3956]	; 0xf74
    graf_csucs[30][29] = 6981;
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bc8:	f641 3245 	movw	r2, #6981	; 0x1b45
 8003bcc:	f8c3 2fec 	str.w	r2, [r3, #4076]	; 0xfec
    graf_csucs[30][32] = 9474;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bd2:	f242 5202 	movw	r2, #9474	; 0x2502
 8003bd6:	f8c3 2ff8 	str.w	r2, [r3, #4088]	; 0xff8
    graf_csucs[31][24] = 13441;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bdc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003be0:	331c      	adds	r3, #28
 8003be2:	f243 4281 	movw	r2, #13441	; 0x3481
 8003be6:	601a      	str	r2, [r3, #0]
    graf_csucs[31][26] = 12978;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <Graf_csucs_feltolt+0x354>)
 8003bea:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003bee:	3304      	adds	r3, #4
 8003bf0:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <Graf_csucs_feltolt+0x35c>
 8003bf8:	200005b0 	.word	0x200005b0
 8003bfc:	004c4b40 	.word	0x004c4b40
    graf_csucs[32][28] = 3047;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <Graf_csucs_feltolt+0x378>)
 8003c02:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003c06:	3310      	adds	r3, #16
 8003c08:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003c0c:	601a      	str	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	200005b0 	.word	0x200005b0

08003c20 <Graf_irany_feltolt>:

void Graf_irany_feltolt(void) {
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e022      	b.n	8003c72 <Graf_irany_feltolt+0x52>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e019      	b.n	8003c66 <Graf_irany_feltolt+0x46>
			for(int d = 0; d < 8; d++) {
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	e010      	b.n	8003c5a <Graf_irany_feltolt+0x3a>
				graf_irany[u][v][d] = -1;
 8003c38:	49bb      	ldr	r1, [pc, #748]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	015b      	lsls	r3, r3, #5
 8003c40:	4413      	add	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	00da      	lsls	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int d = 0; d < 8; d++) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b07      	cmp	r3, #7
 8003c5e:	ddeb      	ble.n	8003c38 <Graf_irany_feltolt+0x18>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	dde2      	ble.n	8003c32 <Graf_irany_feltolt+0x12>
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	ddd9      	ble.n	8003c2c <Graf_irany_feltolt+0xc>
			}
		}
	}
	graf_irany[1][3][0] = 2;
 8003c78:	4bab      	ldr	r3, [pc, #684]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	graf_irany[1][5][0] = 0;
 8003c80:	4ba9      	ldr	r3, [pc, #676]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
	graf_irany[1][5][1] = 2;
 8003c88:	4ba7      	ldr	r3, [pc, #668]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	graf_irany[1][7][0] = 0;
 8003c90:	4ba5      	ldr	r3, [pc, #660]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	graf_irany[1][7][1] = 0;
 8003c98:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	graf_irany[2][3][0] = 2;
 8003ca0:	4ba1      	ldr	r3, [pc, #644]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f8c3 28a0 	str.w	r2, [r3, #2208]	; 0x8a0
	graf_irany[2][5][0] = 0;
 8003ca8:	4b9f      	ldr	r3, [pc, #636]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
	graf_irany[2][5][1] = 2;
 8003cb0:	4b9d      	ldr	r3, [pc, #628]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
	graf_irany[2][7][0] = 0;
 8003cb8:	4b9b      	ldr	r3, [pc, #620]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
	graf_irany[2][7][1] = 0;
 8003cc0:	4b99      	ldr	r3, [pc, #612]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
	graf_irany[3][9][0] = 2;
 8003cc8:	4b97      	ldr	r3, [pc, #604]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	graf_irany[3][11][0] = 0;
 8003cd0:	4b95      	ldr	r3, [pc, #596]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
	graf_irany[3][11][1] = 1;
 8003cd8:	4b93      	ldr	r3, [pc, #588]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f8c3 2dc4 	str.w	r2, [r3, #3524]	; 0xdc4
	graf_irany[3][11][2] = 2;
 8003ce0:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f8c3 2dc8 	str.w	r2, [r3, #3528]	; 0xdc8
	graf_irany[4][1][0] = 0;
 8003ce8:	4b8f      	ldr	r3, [pc, #572]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cea:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
	graf_irany[4][2][0] = 2;
 8003cf2:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cf4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][0] = 0;
 8003cfc:	4b8a      	ldr	r3, [pc, #552]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003cfe:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][1] = 2;
 8003d06:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d08:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][0] = 0;
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d14:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][1] = 0;
 8003d1c:	4b82      	ldr	r3, [pc, #520]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d1e:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d22:	3304      	adds	r3, #4
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][0] = 1; 	// C csucs kesz
 8003d28:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d2a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][1] = 2; 	// C csucs kesz
 8003d32:	4b7d      	ldr	r3, [pc, #500]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d34:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	601a      	str	r2, [r3, #0]
	graf_irany[7][11][0] = 1;
 8003d3e:	4b7a      	ldr	r3, [pc, #488]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d40:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][0] = 1;
 8003d48:	4b77      	ldr	r3, [pc, #476]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d4a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d4e:	3320      	adds	r3, #32
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][1] = 0;
 8003d54:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][0] = 1;
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d62:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][1] = 2;
 8003d6a:	4b6f      	ldr	r3, [pc, #444]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d6c:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003d70:	3304      	adds	r3, #4
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][0] = 2;
 8003d76:	4b6c      	ldr	r3, [pc, #432]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d78:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][1] = 0;
 8003d80:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d82:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003d86:	3304      	adds	r3, #4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][0] = 2;
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d8e:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003d92:	2202      	movs	r2, #2
 8003d94:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][1] = 2;
 8003d96:	4b64      	ldr	r3, [pc, #400]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003d98:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2202      	movs	r2, #2
 8003da0:	601a      	str	r2, [r3, #0]
	graf_irany[10][4][0] = 0;
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003da4:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
	graf_irany[11][14][0] = 2;
 8003dac:	4b5e      	ldr	r3, [pc, #376]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003db2:	3320      	adds	r3, #32
 8003db4:	2202      	movs	r2, #2
 8003db6:	601a      	str	r2, [r3, #0]
	graf_irany[11][15][0] = 0;
 8003db8:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][0] = 1;
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][1] = 2;
 8003dcc:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][2] = 1;
 8003dd8:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dde:	3308      	adds	r3, #8
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][0] = 1;
 8003de4:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003de6:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][1] = 2;
 8003dee:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003df0:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003df4:	3304      	adds	r3, #4
 8003df6:	2202      	movs	r2, #2
 8003df8:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][2] = 0;
 8003dfa:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003dfc:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e00:	3308      	adds	r3, #8
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][3] = 0;
 8003e06:	4b48      	ldr	r3, [pc, #288]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e08:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][0] = 1;
 8003e12:	4b45      	ldr	r3, [pc, #276]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e14:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][1] = 2;
 8003e1c:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e1e:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e22:	3304      	adds	r3, #4
 8003e24:	2202      	movs	r2, #2
 8003e26:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][2] = 0;
 8003e28:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e2a:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e2e:	3308      	adds	r3, #8
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][3] = 1;
 8003e34:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e36:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][0] = 1;
 8003e40:	4b39      	ldr	r3, [pc, #228]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e42:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][1] = 2;
 8003e4a:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e4c:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e50:	3304      	adds	r3, #4
 8003e52:	2202      	movs	r2, #2
 8003e54:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][2] = 0;
 8003e56:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e58:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][3] = 2;
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e64:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e68:	330c      	adds	r3, #12
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][0] = 0;
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e70:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][1] = 0;
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e7a:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e7e:	3304      	adds	r3, #4
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][2] = 1;
 8003e84:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e86:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][0] = 0;
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e92:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][1] = 2;
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003e9c:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	601a      	str	r2, [r3, #0]
	graf_irany[12][8][0] = 2; 	// F csucs kesz
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ea8:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
	graf_irany[13][12][0] = 1;
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003eb2:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8003eb6:	3320      	adds	r3, #32
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][0] = 1;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ebe:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][1] = 0;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003eca:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][0] = 1;
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ed6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003eda:	3320      	adds	r3, #32
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][1] = 2;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ee2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][0] = 1;
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003eee:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][1] = 1;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003ef8:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003efc:	3304      	adds	r3, #4
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][0] = 1;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003f04:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][1] = 0;
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003f10:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f14:	3344      	adds	r3, #68	; 0x44
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][2] = 0;
 8003f1a:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <Graf_irany_feltolt+0x308>)
 8003f1c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f20:	3348      	adds	r3, #72	; 0x48
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e001      	b.n	8003f2c <Graf_irany_feltolt+0x30c>
 8003f28:	20001824 	.word	0x20001824
	graf_irany[15][25][0] = 1;
 8003f2c:	4bbc      	ldr	r3, [pc, #752]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f2e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][1] = 0;
 8003f36:	4bba      	ldr	r3, [pc, #744]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f38:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][2] = 1;
 8003f42:	4bb7      	ldr	r3, [pc, #732]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f44:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][0] = 1;
 8003f4e:	4bb4      	ldr	r3, [pc, #720]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f50:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][1] = 0;
 8003f5a:	4bb1      	ldr	r3, [pc, #708]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f5c:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f60:	3344      	adds	r3, #68	; 0x44
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][2] = 2;
 8003f66:	4bae      	ldr	r3, [pc, #696]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f68:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f6c:	3348      	adds	r3, #72	; 0x48
 8003f6e:	2202      	movs	r2, #2
 8003f70:	601a      	str	r2, [r3, #0]
	graf_irany[16][12][0] = 1;
 8003f72:	4bab      	ldr	r3, [pc, #684]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f74:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
	graf_irany[17][21][0] = 2;		// vagy kozep, fura keresztezodes
 8003f7c:	4ba8      	ldr	r3, [pc, #672]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f7e:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8003f82:	3340      	adds	r3, #64	; 0x40
 8003f84:	2202      	movs	r2, #2
 8003f86:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][0] = 0;
 8003f88:	4ba5      	ldr	r3, [pc, #660]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f8a:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][1] = 0;
 8003f92:	4ba3      	ldr	r3, [pc, #652]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003f94:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][0] = 0;
 8003f9e:	4ba0      	ldr	r3, [pc, #640]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fa0:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003fa4:	3340      	adds	r3, #64	; 0x40
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][1] = 1;
 8003faa:	4b9d      	ldr	r3, [pc, #628]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fac:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003fb0:	3344      	adds	r3, #68	; 0x44
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][0] = 0;
 8003fb6:	4b9a      	ldr	r3, [pc, #616]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fb8:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][1] = 2;
 8003fc0:	4b97      	ldr	r3, [pc, #604]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fc2:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2202      	movs	r2, #2
 8003fca:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][0] = 1;
 8003fcc:	4b94      	ldr	r3, [pc, #592]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fce:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fd2:	3360      	adds	r3, #96	; 0x60
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][1] = 2;
 8003fd8:	4b91      	ldr	r3, [pc, #580]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fda:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fde:	3364      	adds	r3, #100	; 0x64
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][0] = 1; 	// I csucs kesz
 8003fe4:	4b8e      	ldr	r3, [pc, #568]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003fe6:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][1] = 0; 	// I csucs kesz
 8003fee:	4b8c      	ldr	r3, [pc, #560]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003ff0:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
	graf_irany[19][23][0] = 0;
 8003ffa:	4b89      	ldr	r3, [pc, #548]	; (8004220 <Graf_irany_feltolt+0x600>)
 8003ffc:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 8004000:	3340      	adds	r3, #64	; 0x40
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
	graf_irany[19][25][0] = 1;
 8004006:	4b86      	ldr	r3, [pc, #536]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004008:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
	graf_irany[19][27][0] = 2;
 8004010:	4b83      	ldr	r3, [pc, #524]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004012:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8004016:	3340      	adds	r3, #64	; 0x40
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][0] = 0;
 800401c:	4b80      	ldr	r3, [pc, #512]	; (8004220 <Graf_irany_feltolt+0x600>)
 800401e:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 8004022:	3340      	adds	r3, #64	; 0x40
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][1] = 0;
 8004028:	4b7d      	ldr	r3, [pc, #500]	; (8004220 <Graf_irany_feltolt+0x600>)
 800402a:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 800402e:	3344      	adds	r3, #68	; 0x44
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][0] = 0;
 8004034:	4b7a      	ldr	r3, [pc, #488]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004036:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800403a:	3320      	adds	r3, #32
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][1] = 2;
 8004040:	4b77      	ldr	r3, [pc, #476]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004042:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8004046:	3324      	adds	r3, #36	; 0x24
 8004048:	2202      	movs	r2, #2
 800404a:	601a      	str	r2, [r3, #0]
	graf_irany[21][23][0] = 0;
 800404c:	4b74      	ldr	r3, [pc, #464]	; (8004220 <Graf_irany_feltolt+0x600>)
 800404e:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
	graf_irany[21][25][0] = 1;
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004058:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 800405c:	3340      	adds	r3, #64	; 0x40
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
	graf_irany[21][27][0] = 2;
 8004062:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004064:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8004068:	2202      	movs	r2, #2
 800406a:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][0] = 1;
 800406c:	4b6c      	ldr	r3, [pc, #432]	; (8004220 <Graf_irany_feltolt+0x600>)
 800406e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004072:	3340      	adds	r3, #64	; 0x40
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][1] = 0;
 8004078:	4b69      	ldr	r3, [pc, #420]	; (8004220 <Graf_irany_feltolt+0x600>)
 800407a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800407e:	3344      	adds	r3, #68	; 0x44
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][2] = 1;
 8004084:	4b66      	ldr	r3, [pc, #408]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004086:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800408a:	3348      	adds	r3, #72	; 0x48
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][0] = 1;
 8004090:	4b63      	ldr	r3, [pc, #396]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004092:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 8004096:	3340      	adds	r3, #64	; 0x40
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][1] = 2;
 800409c:	4b60      	ldr	r3, [pc, #384]	; (8004220 <Graf_irany_feltolt+0x600>)
 800409e:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 80040a2:	3344      	adds	r3, #68	; 0x44
 80040a4:	2202      	movs	r2, #2
 80040a6:	601a      	str	r2, [r3, #0]
	graf_irany[22][18][0] = 0;
 80040a8:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040aa:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][0] = 0;
 80040b2:	4b5b      	ldr	r3, [pc, #364]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040b4:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][1] = 0;
 80040bc:	4b58      	ldr	r3, [pc, #352]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040be:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040c2:	3304      	adds	r3, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][0] = 0;
 80040c8:	4b55      	ldr	r3, [pc, #340]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040ca:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040ce:	3360      	adds	r3, #96	; 0x60
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][1] = 2;
 80040d4:	4b52      	ldr	r3, [pc, #328]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040d6:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040da:	3364      	adds	r3, #100	; 0x64
 80040dc:	2202      	movs	r2, #2
 80040de:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][2] = 0;
 80040e0:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040e2:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040e6:	3368      	adds	r3, #104	; 0x68
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][3] = 0;
 80040ec:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040ee:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040f2:	336c      	adds	r3, #108	; 0x6c
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][4] = 0;
 80040f8:	4b49      	ldr	r3, [pc, #292]	; (8004220 <Graf_irany_feltolt+0x600>)
 80040fa:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80040fe:	3370      	adds	r3, #112	; 0x70
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
	//graf_irany[23][32][5] = 0;
	//graf_irany[23][32][6] = 0;
	graf_irany[24][12][0] = 2;
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004106:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 800410a:	2202      	movs	r2, #2
 800410c:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][1] = 2;
 800410e:	4b44      	ldr	r3, [pc, #272]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004110:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004114:	3304      	adds	r3, #4
 8004116:	2202      	movs	r2, #2
 8004118:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][2] = 0;
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <Graf_irany_feltolt+0x600>)
 800411c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004120:	3308      	adds	r3, #8
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][3] = 1;
 8004126:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004128:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 800412c:	330c      	adds	r3, #12
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][0] = 2;
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004134:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004138:	2202      	movs	r2, #2
 800413a:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][1] = 2;
 800413c:	4b38      	ldr	r3, [pc, #224]	; (8004220 <Graf_irany_feltolt+0x600>)
 800413e:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004142:	3304      	adds	r3, #4
 8004144:	2202      	movs	r2, #2
 8004146:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][2] = 2;
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <Graf_irany_feltolt+0x600>)
 800414a:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800414e:	3308      	adds	r3, #8
 8004150:	2202      	movs	r2, #2
 8004152:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][0] = 2;
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004156:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800415a:	3340      	adds	r3, #64	; 0x40
 800415c:	2202      	movs	r2, #2
 800415e:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][1] = 0;
 8004160:	4b2f      	ldr	r3, [pc, #188]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004162:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
	graf_irany[24][20][0] = 0;
 800416c:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <Graf_irany_feltolt+0x600>)
 800416e:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
	graf_irany[24][22][0] = 1; 	// L csucs kesz
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004178:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 800417c:	3340      	adds	r3, #64	; 0x40
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][0] = 0;
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004184:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004188:	3340      	adds	r3, #64	; 0x40
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][1] = 0;
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004190:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004194:	3344      	adds	r3, #68	; 0x44
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][0] = 0;
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <Graf_irany_feltolt+0x600>)
 800419c:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041a0:	3320      	adds	r3, #32
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][1] = 2;
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041a8:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041ac:	3324      	adds	r3, #36	; 0x24
 80041ae:	2202      	movs	r2, #2
 80041b0:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][2] = 0;
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041b4:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041b8:	3328      	adds	r3, #40	; 0x28
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][3] = 0;
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041c0:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041c4:	332c      	adds	r3, #44	; 0x2c
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][4] = 0;
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041cc:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041d0:	3330      	adds	r3, #48	; 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
	//graf_irany[25][32][5] = 0;
	//graf_irany[25][32][6] = 0;
	graf_irany[26][12][0] = 2;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041d8:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041dc:	3340      	adds	r3, #64	; 0x40
 80041de:	2202      	movs	r2, #2
 80041e0:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][1] = 2;
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041e4:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041e8:	3344      	adds	r3, #68	; 0x44
 80041ea:	2202      	movs	r2, #2
 80041ec:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][2] = 0;
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041f0:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80041f4:	3348      	adds	r3, #72	; 0x48
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][3] = 1;
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <Graf_irany_feltolt+0x600>)
 80041fc:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 8004200:	334c      	adds	r3, #76	; 0x4c
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][0] = 2;
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004208:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 800420c:	3340      	adds	r3, #64	; 0x40
 800420e:	2202      	movs	r2, #2
 8004210:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][1] = 2;
 8004212:	4b03      	ldr	r3, [pc, #12]	; (8004220 <Graf_irany_feltolt+0x600>)
 8004214:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8004218:	3344      	adds	r3, #68	; 0x44
 800421a:	2202      	movs	r2, #2
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e001      	b.n	8004224 <Graf_irany_feltolt+0x604>
 8004220:	20001824 	.word	0x20001824
	graf_irany[26][16][2] = 2;
 8004224:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004226:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 800422a:	3348      	adds	r3, #72	; 0x48
 800422c:	2202      	movs	r2, #2
 800422e:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][0] = 2;
 8004230:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004232:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004236:	2202      	movs	r2, #2
 8004238:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][1] = 0;
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800423c:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004240:	3304      	adds	r3, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
	graf_irany[26][20][0] = 0;
 8004246:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004248:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 800424c:	3340      	adds	r3, #64	; 0x40
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
	graf_irany[26][22][0] = 1;
 8004252:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004254:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][0] = 2;
 800425c:	4b52      	ldr	r3, [pc, #328]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800425e:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8004262:	3340      	adds	r3, #64	; 0x40
 8004264:	2202      	movs	r2, #2
 8004266:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][1] = 2;
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800426a:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 800426e:	3344      	adds	r3, #68	; 0x44
 8004270:	2202      	movs	r2, #2
 8004272:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][2] = 2;
 8004274:	4b4c      	ldr	r3, [pc, #304]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004276:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 800427a:	3348      	adds	r3, #72	; 0x48
 800427c:	2202      	movs	r2, #2
 800427e:	601a      	str	r2, [r3, #0]
	//graf_irany[27][31][3] = 2;
	//graf_irany[27][31][4] = 2;
	graf_irany[28][12][0] = 2;
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004282:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004286:	2202      	movs	r2, #2
 8004288:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][1] = 2;
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800428c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004290:	3304      	adds	r3, #4
 8004292:	2202      	movs	r2, #2
 8004294:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][2] = 0;
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004298:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800429c:	3308      	adds	r3, #8
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][3] = 1;
 80042a2:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042a4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80042a8:	330c      	adds	r3, #12
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 2;
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042b0:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][1] = 2;
 80042b8:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042ba:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042be:	3304      	adds	r3, #4
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][2] = 2;
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042c6:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042ca:	3308      	adds	r3, #8
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][0] = 2;
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042d2:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042d6:	3340      	adds	r3, #64	; 0x40
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][1] = 0;
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042de:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042e2:	3344      	adds	r3, #68	; 0x44
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
	graf_irany[28][20][0] = 0;
 80042e8:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042ea:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
	graf_irany[28][22][0] = 1;
 80042f2:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <Graf_irany_feltolt+0x788>)
 80042f4:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
	//graf_irany[29][32][0] = 2;
	graf_irany[29][32][0] = 2;
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004300:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8004304:	3320      	adds	r3, #32
 8004306:	2202      	movs	r2, #2
 8004308:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][1] = 0;
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800430c:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][2] = 0;
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004318:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 800431c:	3328      	adds	r3, #40	; 0x28
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][3] = 0;
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004324:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8004328:	332c      	adds	r3, #44	; 0x2c
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
	//graf_irany[29][32][4] = 0;
	//graf_irany[29][32][5] = 0;
	graf_irany[30][29][0] = 0;
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004330:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 8004334:	3360      	adds	r3, #96	; 0x60
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][0] = 2;
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800433c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004340:	3340      	adds	r3, #64	; 0x40
 8004342:	2202      	movs	r2, #2
 8004344:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][1] = 0;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004348:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800434c:	3344      	adds	r3, #68	; 0x44
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][2] = 0;
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004354:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004358:	3348      	adds	r3, #72	; 0x48
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][3] = 0;
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004360:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004364:	334c      	adds	r3, #76	; 0x4c
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
	//graf_irany[30][32][4] = 0;
	//graf_irany[30][32][5] = 0;
	graf_irany[31][24][0] = 0;
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <Graf_irany_feltolt+0x788>)
 800436c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8004370:	33e0      	adds	r3, #224	; 0xe0
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
	graf_irany[31][24][1] = 2;
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004378:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800437c:	33e4      	adds	r3, #228	; 0xe4
 800437e:	2202      	movs	r2, #2
 8004380:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][0] = 0;
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004384:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 8004388:	3320      	adds	r3, #32
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][1] = 0;
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <Graf_irany_feltolt+0x788>)
 8004390:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
	// graf_irany[32][28][0] = -1;		egyenes ut vezet
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20001824 	.word	0x20001824

080043ac <Kapuk_letilt>:

void Kapuk_letilt(void) {
 80043ac:	b480      	push	{r7}
 80043ae:	b091      	sub	sp, #68	; 0x44
 80043b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; i++) {
 80043b2:	2300      	movs	r3, #0
 80043b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b6:	e1a4      	b.n	8004702 <Kapuk_letilt+0x356>
		if			(kapuk[i] == 'a') {
 80043b8:	4a96      	ldr	r2, [pc, #600]	; (8004614 <Kapuk_letilt+0x268>)
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	4413      	add	r3, r2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b61      	cmp	r3, #97	; 0x61
 80043c2:	d115      	bne.n	80043f0 <Kapuk_letilt+0x44>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043c4:	2301      	movs	r3, #1
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c8:	e00e      	b.n	80043e8 <Kapuk_letilt+0x3c>
				graf_csucs[1][j] = 5000000;
 80043ca:	4a93      	ldr	r2, [pc, #588]	; (8004618 <Kapuk_letilt+0x26c>)
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	3321      	adds	r3, #33	; 0x21
 80043d0:	4992      	ldr	r1, [pc, #584]	; (800461c <Kapuk_letilt+0x270>)
 80043d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[2][j] = 5000000;
 80043d6:	4a90      	ldr	r2, [pc, #576]	; (8004618 <Kapuk_letilt+0x26c>)
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	3342      	adds	r3, #66	; 0x42
 80043dc:	498f      	ldr	r1, [pc, #572]	; (800461c <Kapuk_letilt+0x270>)
 80043de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	3301      	adds	r3, #1
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	dded      	ble.n	80043ca <Kapuk_letilt+0x1e>
 80043ee:	e185      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'b') {
 80043f0:	4a88      	ldr	r2, [pc, #544]	; (8004614 <Kapuk_letilt+0x268>)
 80043f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f4:	4413      	add	r3, r2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b62      	cmp	r3, #98	; 0x62
 80043fa:	d115      	bne.n	8004428 <Kapuk_letilt+0x7c>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043fc:	2301      	movs	r3, #1
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004400:	e00e      	b.n	8004420 <Kapuk_letilt+0x74>
				graf_csucs[3][j] = 5000000;
 8004402:	4a85      	ldr	r2, [pc, #532]	; (8004618 <Kapuk_letilt+0x26c>)
 8004404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004406:	3363      	adds	r3, #99	; 0x63
 8004408:	4984      	ldr	r1, [pc, #528]	; (800461c <Kapuk_letilt+0x270>)
 800440a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[4][j] = 5000000;
 800440e:	4a82      	ldr	r2, [pc, #520]	; (8004618 <Kapuk_letilt+0x26c>)
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	3384      	adds	r3, #132	; 0x84
 8004414:	4981      	ldr	r1, [pc, #516]	; (800461c <Kapuk_letilt+0x270>)
 8004416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	3301      	adds	r3, #1
 800441e:	637b      	str	r3, [r7, #52]	; 0x34
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	2b20      	cmp	r3, #32
 8004424:	dded      	ble.n	8004402 <Kapuk_letilt+0x56>
 8004426:	e169      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'c') {
 8004428:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <Kapuk_letilt+0x268>)
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	4413      	add	r3, r2
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b63      	cmp	r3, #99	; 0x63
 8004432:	d115      	bne.n	8004460 <Kapuk_letilt+0xb4>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004434:	2301      	movs	r3, #1
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
 8004438:	e00e      	b.n	8004458 <Kapuk_letilt+0xac>
				graf_csucs[5][j] = 5000000;
 800443a:	4a77      	ldr	r2, [pc, #476]	; (8004618 <Kapuk_letilt+0x26c>)
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	33a5      	adds	r3, #165	; 0xa5
 8004440:	4976      	ldr	r1, [pc, #472]	; (800461c <Kapuk_letilt+0x270>)
 8004442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[6][j] = 5000000;
 8004446:	4a74      	ldr	r2, [pc, #464]	; (8004618 <Kapuk_letilt+0x26c>)
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	33c6      	adds	r3, #198	; 0xc6
 800444c:	4973      	ldr	r1, [pc, #460]	; (800461c <Kapuk_letilt+0x270>)
 800444e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	3301      	adds	r3, #1
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2b20      	cmp	r3, #32
 800445c:	dded      	ble.n	800443a <Kapuk_letilt+0x8e>
 800445e:	e14d      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'd') {
 8004460:	4a6c      	ldr	r2, [pc, #432]	; (8004614 <Kapuk_letilt+0x268>)
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	4413      	add	r3, r2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b64      	cmp	r3, #100	; 0x64
 800446a:	d116      	bne.n	800449a <Kapuk_letilt+0xee>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800446c:	2301      	movs	r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	e00f      	b.n	8004492 <Kapuk_letilt+0xe6>
				graf_csucs[7][j] = 5000000;
 8004472:	4a69      	ldr	r2, [pc, #420]	; (8004618 <Kapuk_letilt+0x26c>)
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	33e7      	adds	r3, #231	; 0xe7
 8004478:	4968      	ldr	r1, [pc, #416]	; (800461c <Kapuk_letilt+0x270>)
 800447a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[8][j] = 5000000;
 800447e:	4a66      	ldr	r2, [pc, #408]	; (8004618 <Kapuk_letilt+0x26c>)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004486:	4965      	ldr	r1, [pc, #404]	; (800461c <Kapuk_letilt+0x270>)
 8004488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	3301      	adds	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b20      	cmp	r3, #32
 8004496:	ddec      	ble.n	8004472 <Kapuk_letilt+0xc6>
 8004498:	e130      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'e') {
 800449a:	4a5e      	ldr	r2, [pc, #376]	; (8004614 <Kapuk_letilt+0x268>)
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b65      	cmp	r3, #101	; 0x65
 80044a4:	d117      	bne.n	80044d6 <Kapuk_letilt+0x12a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044a6:	2301      	movs	r3, #1
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	e010      	b.n	80044ce <Kapuk_letilt+0x122>
				graf_csucs[9][j] = 5000000;
 80044ac:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <Kapuk_letilt+0x26c>)
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	f203 1329 	addw	r3, r3, #297	; 0x129
 80044b4:	4959      	ldr	r1, [pc, #356]	; (800461c <Kapuk_letilt+0x270>)
 80044b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[10][j] = 5000000;
 80044ba:	4a57      	ldr	r2, [pc, #348]	; (8004618 <Kapuk_letilt+0x26c>)
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 80044c2:	4956      	ldr	r1, [pc, #344]	; (800461c <Kapuk_letilt+0x270>)
 80044c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	3301      	adds	r3, #1
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	ddeb      	ble.n	80044ac <Kapuk_letilt+0x100>
 80044d4:	e112      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'f') {
 80044d6:	4a4f      	ldr	r2, [pc, #316]	; (8004614 <Kapuk_letilt+0x268>)
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044da:	4413      	add	r3, r2
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b66      	cmp	r3, #102	; 0x66
 80044e0:	d117      	bne.n	8004512 <Kapuk_letilt+0x166>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044e2:	2301      	movs	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e010      	b.n	800450a <Kapuk_letilt+0x15e>
				graf_csucs[11][j] = 5000000;
 80044e8:	4a4b      	ldr	r2, [pc, #300]	; (8004618 <Kapuk_letilt+0x26c>)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044f0:	494a      	ldr	r1, [pc, #296]	; (800461c <Kapuk_letilt+0x270>)
 80044f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[12][j] = 5000000;
 80044f6:	4a48      	ldr	r2, [pc, #288]	; (8004618 <Kapuk_letilt+0x26c>)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80044fe:	4947      	ldr	r1, [pc, #284]	; (800461c <Kapuk_letilt+0x270>)
 8004500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	3301      	adds	r3, #1
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	2b20      	cmp	r3, #32
 800450e:	ddeb      	ble.n	80044e8 <Kapuk_letilt+0x13c>
 8004510:	e0f4      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'g') {
 8004512:	4a40      	ldr	r2, [pc, #256]	; (8004614 <Kapuk_letilt+0x268>)
 8004514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b67      	cmp	r3, #103	; 0x67
 800451c:	d117      	bne.n	800454e <Kapuk_letilt+0x1a2>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800451e:	2301      	movs	r3, #1
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e010      	b.n	8004546 <Kapuk_letilt+0x19a>
				graf_csucs[13][j] = 5000000;
 8004524:	4a3c      	ldr	r2, [pc, #240]	; (8004618 <Kapuk_letilt+0x26c>)
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f203 13ad 	addw	r3, r3, #429	; 0x1ad
 800452c:	493b      	ldr	r1, [pc, #236]	; (800461c <Kapuk_letilt+0x270>)
 800452e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[14][j] = 5000000;
 8004532:	4a39      	ldr	r2, [pc, #228]	; (8004618 <Kapuk_letilt+0x26c>)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800453a:	4938      	ldr	r1, [pc, #224]	; (800461c <Kapuk_letilt+0x270>)
 800453c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	3301      	adds	r3, #1
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2b20      	cmp	r3, #32
 800454a:	ddeb      	ble.n	8004524 <Kapuk_letilt+0x178>
 800454c:	e0d6      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'h') {
 800454e:	4a31      	ldr	r2, [pc, #196]	; (8004614 <Kapuk_letilt+0x268>)
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b68      	cmp	r3, #104	; 0x68
 8004558:	d117      	bne.n	800458a <Kapuk_letilt+0x1de>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e010      	b.n	8004582 <Kapuk_letilt+0x1d6>
				graf_csucs[15][j] = 5000000;
 8004560:	4a2d      	ldr	r2, [pc, #180]	; (8004618 <Kapuk_letilt+0x26c>)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 8004568:	492c      	ldr	r1, [pc, #176]	; (800461c <Kapuk_letilt+0x270>)
 800456a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[16][j] = 5000000;
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <Kapuk_letilt+0x26c>)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004576:	4929      	ldr	r1, [pc, #164]	; (800461c <Kapuk_letilt+0x270>)
 8004578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b20      	cmp	r3, #32
 8004586:	ddeb      	ble.n	8004560 <Kapuk_letilt+0x1b4>
 8004588:	e0b8      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'i') {
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <Kapuk_letilt+0x268>)
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b69      	cmp	r3, #105	; 0x69
 8004594:	d117      	bne.n	80045c6 <Kapuk_letilt+0x21a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e010      	b.n	80045be <Kapuk_letilt+0x212>
				graf_csucs[17][j] = 5000000;
 800459c:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <Kapuk_letilt+0x26c>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f203 2331 	addw	r3, r3, #561	; 0x231
 80045a4:	491d      	ldr	r1, [pc, #116]	; (800461c <Kapuk_letilt+0x270>)
 80045a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[18][j] = 5000000;
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <Kapuk_letilt+0x26c>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f203 2352 	addw	r3, r3, #594	; 0x252
 80045b2:	491a      	ldr	r1, [pc, #104]	; (800461c <Kapuk_letilt+0x270>)
 80045b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	ddeb      	ble.n	800459c <Kapuk_letilt+0x1f0>
 80045c4:	e09a      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'j') {
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <Kapuk_letilt+0x268>)
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	4413      	add	r3, r2
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b6a      	cmp	r3, #106	; 0x6a
 80045d0:	d117      	bne.n	8004602 <Kapuk_letilt+0x256>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e010      	b.n	80045fa <Kapuk_letilt+0x24e>
				graf_csucs[19][j] = 5000000;
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <Kapuk_letilt+0x26c>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f203 2373 	addw	r3, r3, #627	; 0x273
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <Kapuk_letilt+0x270>)
 80045e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[20][j] = 5000000;
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <Kapuk_letilt+0x26c>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045ee:	490b      	ldr	r1, [pc, #44]	; (800461c <Kapuk_letilt+0x270>)
 80045f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3301      	adds	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	ddeb      	ble.n	80045d8 <Kapuk_letilt+0x22c>
 8004600:	e07c      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'k') {
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <Kapuk_letilt+0x268>)
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	4413      	add	r3, r2
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b6b      	cmp	r3, #107	; 0x6b
 800460c:	d11d      	bne.n	800464a <Kapuk_letilt+0x29e>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800460e:	2301      	movs	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e016      	b.n	8004642 <Kapuk_letilt+0x296>
 8004614:	20000154 	.word	0x20000154
 8004618:	200005b0 	.word	0x200005b0
 800461c:	004c4b40 	.word	0x004c4b40
				graf_csucs[21][j] = 5000000;
 8004620:	4a3d      	ldr	r2, [pc, #244]	; (8004718 <Kapuk_letilt+0x36c>)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f203 23b5 	addw	r3, r3, #693	; 0x2b5
 8004628:	493c      	ldr	r1, [pc, #240]	; (800471c <Kapuk_letilt+0x370>)
 800462a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[22][j] = 5000000;
 800462e:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <Kapuk_letilt+0x36c>)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004636:	4939      	ldr	r1, [pc, #228]	; (800471c <Kapuk_letilt+0x370>)
 8004638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3301      	adds	r3, #1
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b20      	cmp	r3, #32
 8004646:	ddeb      	ble.n	8004620 <Kapuk_letilt+0x274>
 8004648:	e058      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'l') {
 800464a:	4a35      	ldr	r2, [pc, #212]	; (8004720 <Kapuk_letilt+0x374>)
 800464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b6c      	cmp	r3, #108	; 0x6c
 8004654:	d117      	bne.n	8004686 <Kapuk_letilt+0x2da>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004656:	2301      	movs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e010      	b.n	800467e <Kapuk_letilt+0x2d2>
				graf_csucs[23][j] = 5000000;
 800465c:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <Kapuk_letilt+0x36c>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f203 23f7 	addw	r3, r3, #759	; 0x2f7
 8004664:	492d      	ldr	r1, [pc, #180]	; (800471c <Kapuk_letilt+0x370>)
 8004666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[24][j] = 5000000;
 800466a:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <Kapuk_letilt+0x36c>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004672:	492a      	ldr	r1, [pc, #168]	; (800471c <Kapuk_letilt+0x370>)
 8004674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3301      	adds	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b20      	cmp	r3, #32
 8004682:	ddeb      	ble.n	800465c <Kapuk_letilt+0x2b0>
 8004684:	e03a      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'm') {
 8004686:	4a26      	ldr	r2, [pc, #152]	; (8004720 <Kapuk_letilt+0x374>)
 8004688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b6d      	cmp	r3, #109	; 0x6d
 8004690:	d117      	bne.n	80046c2 <Kapuk_letilt+0x316>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004692:	2301      	movs	r3, #1
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	e010      	b.n	80046ba <Kapuk_letilt+0x30e>
				graf_csucs[25][j] = 5000000;
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <Kapuk_letilt+0x36c>)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f203 3339 	addw	r3, r3, #825	; 0x339
 80046a0:	491e      	ldr	r1, [pc, #120]	; (800471c <Kapuk_letilt+0x370>)
 80046a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[26][j] = 5000000;
 80046a6:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <Kapuk_letilt+0x36c>)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f203 335a 	addw	r3, r3, #858	; 0x35a
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <Kapuk_letilt+0x370>)
 80046b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	ddeb      	ble.n	8004698 <Kapuk_letilt+0x2ec>
 80046c0:	e01c      	b.n	80046fc <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'n') {
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <Kapuk_letilt+0x374>)
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	4413      	add	r3, r2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b6e      	cmp	r3, #110	; 0x6e
 80046cc:	d116      	bne.n	80046fc <Kapuk_letilt+0x350>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046ce:	2301      	movs	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e010      	b.n	80046f6 <Kapuk_letilt+0x34a>
				graf_csucs[27][j] = 5000000;
 80046d4:	4a10      	ldr	r2, [pc, #64]	; (8004718 <Kapuk_letilt+0x36c>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f203 337b 	addw	r3, r3, #891	; 0x37b
 80046dc:	490f      	ldr	r1, [pc, #60]	; (800471c <Kapuk_letilt+0x370>)
 80046de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[28][j] = 5000000;
 80046e2:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <Kapuk_letilt+0x36c>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80046ea:	490c      	ldr	r1, [pc, #48]	; (800471c <Kapuk_letilt+0x370>)
 80046ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3301      	adds	r3, #1
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	ddeb      	ble.n	80046d4 <Kapuk_letilt+0x328>
	for(int i = 0; i < 6; i++) {
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	3301      	adds	r3, #1
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	2b05      	cmp	r3, #5
 8004706:	f77f ae57 	ble.w	80043b8 <Kapuk_letilt+0xc>
			}
		}
	}
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	3744      	adds	r7, #68	; 0x44
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	200005b0 	.word	0x200005b0
 800471c:	004c4b40 	.word	0x004c4b40
 8004720:	20000154 	.word	0x20000154

08004724 <Iranyok_torlo>:

void Iranyok_torlo(void) {
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++) {
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e007      	b.n	8004740 <Iranyok_torlo+0x1c>
		iranyok[i] = 9;				// 9: nem igazi iranyt jelol
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <Iranyok_torlo+0x30>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	2209      	movs	r2, #9
 8004738:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3301      	adds	r3, #1
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b63      	cmp	r3, #99	; 0x63
 8004744:	ddf4      	ble.n	8004730 <Iranyok_torlo+0xc>
	}
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	20000270 	.word	0x20000270

08004758 <Iranyok_osszeallito>:

void Iranyok_osszeallito(void) {
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
	for(int i = 9; 0 < i; i--) {
 800475e:	2309      	movs	r3, #9
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e050      	b.n	8004806 <Iranyok_osszeallito+0xae>
		if(road[i] != -1) {
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <Iranyok_osszeallito+0xc4>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d046      	beq.n	8004800 <Iranyok_osszeallito+0xa8>
			if(road[i] == 29) {
 8004772:	4a2a      	ldr	r2, [pc, #168]	; (800481c <Iranyok_osszeallito+0xc4>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	2b1d      	cmp	r3, #29
 800477c:	d102      	bne.n	8004784 <Iranyok_osszeallito+0x2c>
				tolatas = true;
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <Iranyok_osszeallito+0xc8>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
			}
			for(int j = 0; j < 8; j++) {
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	e037      	b.n	80047fa <Iranyok_osszeallito+0xa2>
				// road[i]-bol road[i-1]-be "0 2 0" beirni az iranyokba
				if(graf_irany[ road[i] ] [ road[i-1] ] [ j ]  != -1) {
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <Iranyok_osszeallito+0xc4>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3b01      	subs	r3, #1
 8004796:	4921      	ldr	r1, [pc, #132]	; (800481c <Iranyok_osszeallito+0xc4>)
 8004798:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800479c:	4821      	ldr	r0, [pc, #132]	; (8004824 <Iranyok_osszeallito+0xcc>)
 800479e:	4613      	mov	r3, r2
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	4413      	add	r3, r2
 80047a4:	440b      	add	r3, r1
 80047a6:	00da      	lsls	r2, r3, #3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d01e      	beq.n	80047f4 <Iranyok_osszeallito+0x9c>
					iranyok[iranyok_elem] = graf_irany[ road[i] ] [ road[i-1] ] [ j ];
 80047b6:	4a19      	ldr	r2, [pc, #100]	; (800481c <Iranyok_osszeallito+0xc4>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4916      	ldr	r1, [pc, #88]	; (800481c <Iranyok_osszeallito+0xc4>)
 80047c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047c8:	4816      	ldr	r0, [pc, #88]	; (8004824 <Iranyok_osszeallito+0xcc>)
 80047ca:	4613      	mov	r3, r2
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	4413      	add	r3, r2
 80047d0:	440b      	add	r3, r1
 80047d2:	00da      	lsls	r2, r3, #3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <Iranyok_osszeallito+0xd0>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	b2c9      	uxtb	r1, r1
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <Iranyok_osszeallito+0xd4>)
 80047e6:	5499      	strb	r1, [r3, r2]
					iranyok_elem++;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <Iranyok_osszeallito+0xd0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <Iranyok_osszeallito+0xd0>)
 80047f2:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 8; j++) {
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b07      	cmp	r3, #7
 80047fe:	ddc4      	ble.n	800478a <Iranyok_osszeallito+0x32>
	for(int i = 9; 0 < i; i--) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dcab      	bgt.n	8004764 <Iranyok_osszeallito+0xc>
				}
			}
		}
	}
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	2000015c 	.word	0x2000015c
 8004820:	20000253 	.word	0x20000253
 8004824:	20001824 	.word	0x20001824
 8004828:	2000026c 	.word	0x2000026c
 800482c:	20000270 	.word	0x20000270

08004830 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d109      	bne.n	8004856 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_GPIO_EXTI_Callback+0x34>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <HAL_GPIO_EXTI_Callback+0x34>)
 8004854:	701a      	strb	r2, [r3, #0]
		/*szervoSzog += 90;
		if(szervoSzog > 200)
			szervoSzog = 0;
		SERVO_MoveTo(SZERVO, szervoSzog);*/
	}
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	200001f0 	.word	0x200001f0

08004868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800486c:	b672      	cpsid	i
}
 800486e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004870:	e7fe      	b.n	8004870 <Error_Handler+0x8>

08004872 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_MspInit+0x4c>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <HAL_MspInit+0x4c>)
 8004898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800489c:	6453      	str	r3, [r2, #68]	; 0x44
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_MspInit+0x4c>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_MspInit+0x4c>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_MspInit+0x4c>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_MspInit+0x4c>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048c6:	2007      	movs	r0, #7
 80048c8:	f000 fe9e 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	; 0x40
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	; (8004aa4 <HAL_I2C_MspInit+0x1cc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d12d      	bne.n	8004956 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a69      	ldr	r2, [pc, #420]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800491c:	2312      	movs	r3, #18
 800491e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	2300      	movs	r3, #0
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004924:	2303      	movs	r3, #3
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004928:	2304      	movs	r3, #4
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800492c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004930:	4619      	mov	r1, r3
 8004932:	485e      	ldr	r0, [pc, #376]	; (8004aac <HAL_I2C_MspInit+0x1d4>)
 8004934:	f001 fbc2 	bl	80060bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4a59      	ldr	r2, [pc, #356]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
 8004948:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004954:	e0a2      	b.n	8004a9c <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <HAL_I2C_MspInit+0x1d8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d14c      	bne.n	80049fa <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4a4f      	ldr	r2, [pc, #316]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	6313      	str	r3, [r2, #48]	; 0x30
 8004970:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	4b49      	ldr	r3, [pc, #292]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	4a48      	ldr	r2, [pc, #288]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	6313      	str	r3, [r2, #48]	; 0x30
 800498c:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800499e:	2312      	movs	r3, #18
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a6:	2303      	movs	r3, #3
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049aa:	2304      	movs	r3, #4
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049b2:	4619      	mov	r1, r3
 80049b4:	483d      	ldr	r0, [pc, #244]	; (8004aac <HAL_I2C_MspInit+0x1d4>)
 80049b6:	f001 fb81 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049c0:	2312      	movs	r3, #18
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c8:	2303      	movs	r3, #3
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049cc:	2304      	movs	r3, #4
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049d4:	4619      	mov	r1, r3
 80049d6:	4837      	ldr	r0, [pc, #220]	; (8004ab4 <HAL_I2C_MspInit+0x1dc>)
 80049d8:	f001 fb70 	bl	80060bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 80049e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ea:	6413      	str	r3, [r2, #64]	; 0x40
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69bb      	ldr	r3, [r7, #24]
}
 80049f8:	e050      	b.n	8004a9c <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <HAL_I2C_MspInit+0x1e0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d14b      	bne.n	8004a9c <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6313      	str	r3, [r2, #48]	; 0x30
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a42:	2312      	movs	r3, #18
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a56:	4619      	mov	r1, r3
 8004a58:	4816      	ldr	r0, [pc, #88]	; (8004ab4 <HAL_I2C_MspInit+0x1dc>)
 8004a5a:	f001 fb2f 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a64:	2312      	movs	r3, #18
 8004a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a70:	2304      	movs	r3, #4
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4810      	ldr	r0, [pc, #64]	; (8004abc <HAL_I2C_MspInit+0x1e4>)
 8004a7c:	f001 fb1e 	bl	80060bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_I2C_MspInit+0x1d0>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	3740      	adds	r7, #64	; 0x40
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40005400 	.word	0x40005400
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40020400 	.word	0x40020400
 8004ab0:	40005800 	.word	0x40005800
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40005c00 	.word	0x40005c00
 8004abc:	40020000 	.word	0x40020000

08004ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b090      	sub	sp, #64	; 0x40
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a98      	ldr	r2, [pc, #608]	; (8004d40 <HAL_SPI_MspInit+0x280>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d12c      	bne.n	8004b3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae6:	4b97      	ldr	r3, [pc, #604]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a96      	ldr	r2, [pc, #600]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b94      	ldr	r3, [pc, #592]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	4b90      	ldr	r3, [pc, #576]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a8f      	ldr	r2, [pc, #572]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0e:	4b8d      	ldr	r3, [pc, #564]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b1a:	23e0      	movs	r3, #224	; 0xe0
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b26:	2303      	movs	r3, #3
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b2a:	2305      	movs	r3, #5
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b32:	4619      	mov	r1, r3
 8004b34:	4884      	ldr	r0, [pc, #528]	; (8004d48 <HAL_SPI_MspInit+0x288>)
 8004b36:	f001 fac1 	bl	80060bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004b3a:	e0fd      	b.n	8004d38 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a82      	ldr	r2, [pc, #520]	; (8004d4c <HAL_SPI_MspInit+0x28c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d14b      	bne.n	8004bde <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	4b7e      	ldr	r3, [pc, #504]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a7d      	ldr	r2, [pc, #500]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b7b      	ldr	r3, [pc, #492]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	4b77      	ldr	r3, [pc, #476]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	4a76      	ldr	r2, [pc, #472]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b6c:	f043 0304 	orr.w	r3, r3, #4
 8004b70:	6313      	str	r3, [r2, #48]	; 0x30
 8004b72:	4b74      	ldr	r3, [pc, #464]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	4b70      	ldr	r3, [pc, #448]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	4a6f      	ldr	r2, [pc, #444]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8e:	4b6d      	ldr	r3, [pc, #436]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004baa:	2307      	movs	r3, #7
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4866      	ldr	r0, [pc, #408]	; (8004d50 <HAL_SPI_MspInit+0x290>)
 8004bb6:	f001 fa81 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bcc:	2305      	movs	r3, #5
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	485f      	ldr	r0, [pc, #380]	; (8004d54 <HAL_SPI_MspInit+0x294>)
 8004bd8:	f001 fa70 	bl	80060bc <HAL_GPIO_Init>
}
 8004bdc:	e0ac      	b.n	8004d38 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a5d      	ldr	r2, [pc, #372]	; (8004d58 <HAL_SPI_MspInit+0x298>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f040 80a7 	bne.w	8004d38 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a54      	ldr	r2, [pc, #336]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b52      	ldr	r3, [pc, #328]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	4b4e      	ldr	r3, [pc, #312]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a4d      	ldr	r2, [pc, #308]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a46      	ldr	r2, [pc, #280]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c48:	f043 0304 	orr.w	r3, r3, #4
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_SPI_MspInit+0x284>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c66:	2303      	movs	r3, #3
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c72:	4619      	mov	r1, r3
 8004c74:	4837      	ldr	r0, [pc, #220]	; (8004d54 <HAL_SPI_MspInit+0x294>)
 8004c76:	f001 fa21 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c80:	2302      	movs	r3, #2
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c8c:	2306      	movs	r3, #6
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c94:	4619      	mov	r1, r3
 8004c96:	482c      	ldr	r0, [pc, #176]	; (8004d48 <HAL_SPI_MspInit+0x288>)
 8004c98:	f001 fa10 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cae:	2306      	movs	r3, #6
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4825      	ldr	r0, [pc, #148]	; (8004d50 <HAL_SPI_MspInit+0x290>)
 8004cba:	f001 f9ff 	bl	80060bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cce:	2306      	movs	r3, #6
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	481e      	ldr	r0, [pc, #120]	; (8004d54 <HAL_SPI_MspInit+0x294>)
 8004cda:	f001 f9ef 	bl	80060bc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_SPI_MspInit+0x2a0>)
 8004ce2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cea:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004cec:	2240      	movs	r2, #64	; 0x40
 8004cee:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cfc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cfe:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004d1c:	480f      	ldr	r0, [pc, #60]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d1e:	f000 fce3 	bl	80056e8 <HAL_DMA_Init>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8004d28:	f7ff fd9e 	bl	8004868 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d30:	649a      	str	r2, [r3, #72]	; 0x48
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <HAL_SPI_MspInit+0x29c>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004d38:	bf00      	nop
 8004d3a:	3740      	adds	r7, #64	; 0x40
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40013000 	.word	0x40013000
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	40003800 	.word	0x40003800
 8004d50:	40020800 	.word	0x40020800
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40003c00 	.word	0x40003c00
 8004d5c:	2000050c 	.word	0x2000050c
 8004d60:	40026088 	.word	0x40026088

08004d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d116      	bne.n	8004da4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	201c      	movs	r0, #28
 8004d98:	f000 fc56 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d9c:	201c      	movs	r0, #28
 8004d9e:	f000 fc7f 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004da2:	e036      	b.n	8004e12 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_TIM_Base_MspInit+0xbc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d116      	bne.n	8004ddc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dbe:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8004dca:	2201      	movs	r2, #1
 8004dcc:	2100      	movs	r1, #0
 8004dce:	202b      	movs	r0, #43	; 0x2b
 8004dd0:	f000 fc3a 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004dd4:	202b      	movs	r0, #43	; 0x2b
 8004dd6:	f000 fc63 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8004dda:	e01a      	b.n	8004e12 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a10      	ldr	r2, [pc, #64]	; (8004e24 <HAL_TIM_Base_MspInit+0xc0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d115      	bne.n	8004e12 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_TIM_Base_MspInit+0xb8>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8004e02:	2201      	movs	r2, #1
 8004e04:	2100      	movs	r1, #0
 8004e06:	202b      	movs	r0, #43	; 0x2b
 8004e08:	f000 fc1e 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004e0c:	202b      	movs	r0, #43	; 0x2b
 8004e0e:	f000 fc47 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40001800 	.word	0x40001800

08004e28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_TIM_PWM_MspInit+0x48>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d115      	bne.n	8004e66 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e56:	2200      	movs	r2, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	201d      	movs	r0, #29
 8004e5c:	f000 fbf4 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e60:	201d      	movs	r0, #29
 8004e62:	f000 fc1d 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40023800 	.word	0x40023800

08004e78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x94>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d133      	bne.n	8004f02 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ed2:	23c0      	movs	r3, #192	; 0xc0
 8004ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee6:	f107 0314 	add.w	r3, r7, #20
 8004eea:	4619      	mov	r1, r3
 8004eec:	4809      	ldr	r0, [pc, #36]	; (8004f14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004eee:	f001 f8e5 	bl	80060bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	201e      	movs	r0, #30
 8004ef8:	f000 fba6 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004efc:	201e      	movs	r0, #30
 8004efe:	f000 fbcf 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f02:	bf00      	nop
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40020400 	.word	0x40020400

08004f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a37      	ldr	r2, [pc, #220]	; (8005014 <HAL_TIM_MspPostInit+0xfc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d11e      	bne.n	8004f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4a35      	ldr	r2, [pc, #212]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4a:	4b33      	ldr	r3, [pc, #204]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f66:	2302      	movs	r3, #2
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	4619      	mov	r1, r3
 8004f70:	482a      	ldr	r0, [pc, #168]	; (800501c <HAL_TIM_MspPostInit+0x104>)
 8004f72:	f001 f8a3 	bl	80060bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004f76:	e048      	b.n	800500a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a28      	ldr	r2, [pc, #160]	; (8005020 <HAL_TIM_MspPostInit+0x108>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d11f      	bne.n	8004fc2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	4a23      	ldr	r2, [pc, #140]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	6313      	str	r3, [r2, #48]	; 0x30
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004f9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fac:	2300      	movs	r3, #0
 8004fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4818      	ldr	r0, [pc, #96]	; (800501c <HAL_TIM_MspPostInit+0x104>)
 8004fbc:	f001 f87e 	bl	80060bc <HAL_GPIO_Init>
}
 8004fc0:	e023      	b.n	800500a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a17      	ldr	r2, [pc, #92]	; (8005024 <HAL_TIM_MspPostInit+0x10c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d11e      	bne.n	800500a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4a10      	ldr	r2, [pc, #64]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004fd6:	f043 0302 	orr.w	r3, r3, #2
 8004fda:	6313      	str	r3, [r2, #48]	; 0x30
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_TIM_MspPostInit+0x100>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004fe8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004ffa:	2309      	movs	r3, #9
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	4808      	ldr	r0, [pc, #32]	; (8005028 <HAL_TIM_MspPostInit+0x110>)
 8005006:	f001 f859 	bl	80060bc <HAL_GPIO_Init>
}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40000400 	.word	0x40000400
 8005018:	40023800 	.word	0x40023800
 800501c:	40020800 	.word	0x40020800
 8005020:	40010400 	.word	0x40010400
 8005024:	40001800 	.word	0x40001800
 8005028:	40020400 	.word	0x40020400

0800502c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08e      	sub	sp, #56	; 0x38
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a5f      	ldr	r2, [pc, #380]	; (80051c8 <HAL_UART_MspInit+0x19c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d153      	bne.n	80050f6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a5d      	ldr	r2, [pc, #372]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b5b      	ldr	r3, [pc, #364]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	4b57      	ldr	r3, [pc, #348]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b54      	ldr	r3, [pc, #336]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	4b50      	ldr	r3, [pc, #320]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a4f      	ldr	r2, [pc, #316]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b4d      	ldr	r3, [pc, #308]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80050a2:	2301      	movs	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ae:	2303      	movs	r3, #3
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050b2:	2308      	movs	r3, #8
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ba:	4619      	mov	r1, r3
 80050bc:	4844      	ldr	r0, [pc, #272]	; (80051d0 <HAL_UART_MspInit+0x1a4>)
 80050be:	f000 fffd 	bl	80060bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c8:	2302      	movs	r3, #2
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050cc:	2301      	movs	r3, #1
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d0:	2303      	movs	r3, #3
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050d4:	2308      	movs	r3, #8
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050dc:	4619      	mov	r1, r3
 80050de:	483d      	ldr	r0, [pc, #244]	; (80051d4 <HAL_UART_MspInit+0x1a8>)
 80050e0:	f000 ffec 	bl	80060bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80050e4:	2200      	movs	r2, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	2034      	movs	r0, #52	; 0x34
 80050ea:	f000 faad 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80050ee:	2034      	movs	r0, #52	; 0x34
 80050f0:	f000 fad6 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050f4:	e063      	b.n	80051be <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a37      	ldr	r2, [pc, #220]	; (80051d8 <HAL_UART_MspInit+0x1ac>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d12d      	bne.n	800515c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	4a30      	ldr	r2, [pc, #192]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800510a:	f043 0310 	orr.w	r3, r3, #16
 800510e:	6453      	str	r3, [r2, #68]	; 0x44
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6313      	str	r3, [r2, #48]	; 0x30
 800512c:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005138:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513e:	2302      	movs	r3, #2
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	2300      	movs	r3, #0
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005146:	2303      	movs	r3, #3
 8005148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800514a:	2307      	movs	r3, #7
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	4619      	mov	r1, r3
 8005154:	481e      	ldr	r0, [pc, #120]	; (80051d0 <HAL_UART_MspInit+0x1a4>)
 8005156:	f000 ffb1 	bl	80060bc <HAL_GPIO_Init>
}
 800515a:	e030      	b.n	80051be <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_UART_MspInit+0x1b0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d12b      	bne.n	80051be <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005174:	6413      	str	r3, [r2, #64]	; 0x40
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_UART_MspInit+0x1a0>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800519e:	230c      	movs	r3, #12
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051aa:	2303      	movs	r3, #3
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051ae:	2307      	movs	r3, #7
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b6:	4619      	mov	r1, r3
 80051b8:	4805      	ldr	r0, [pc, #20]	; (80051d0 <HAL_UART_MspInit+0x1a4>)
 80051ba:	f000 ff7f 	bl	80060bc <HAL_GPIO_Init>
}
 80051be:	bf00      	nop
 80051c0:	3738      	adds	r7, #56	; 0x38
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40020800 	.word	0x40020800
 80051d8:	40011000 	.word	0x40011000
 80051dc:	40004400 	.word	0x40004400

080051e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051e4:	e7fe      	b.n	80051e4 <NMI_Handler+0x4>

080051e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051e6:	b480      	push	{r7}
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ea:	e7fe      	b.n	80051ea <HardFault_Handler+0x4>

080051ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051f0:	e7fe      	b.n	80051f0 <MemManage_Handler+0x4>

080051f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051f6:	e7fe      	b.n	80051f6 <BusFault_Handler+0x4>

080051f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051fc:	e7fe      	b.n	80051fc <UsageFault_Handler+0x4>

080051fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800521a:	b480      	push	{r7}
 800521c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800522c:	f000 f8d8 	bl	80053e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}

08005234 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005238:	4802      	ldr	r0, [pc, #8]	; (8005244 <DMA1_Stream5_IRQHandler+0x10>)
 800523a:	f000 fd03 	bl	8005c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	2000050c 	.word	0x2000050c

08005248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800524c:	4802      	ldr	r0, [pc, #8]	; (8005258 <TIM2_IRQHandler+0x10>)
 800524e:	f004 fea1 	bl	8009f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20001750 	.word	0x20001750

0800525c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005260:	4802      	ldr	r0, [pc, #8]	; (800526c <TIM3_IRQHandler+0x10>)
 8005262:	f004 fe97 	bl	8009f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	2000046c 	.word	0x2000046c

08005270 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005274:	4802      	ldr	r0, [pc, #8]	; (8005280 <TIM4_IRQHandler+0x10>)
 8005276:	f004 fe8d 	bl	8009f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	2000037c 	.word	0x2000037c

08005284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005288:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800528c:	f001 fa6c 	bl	8006768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}

08005294 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005298:	4803      	ldr	r0, [pc, #12]	; (80052a8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800529a:	f004 fe7b 	bl	8009f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800529e:	4803      	ldr	r0, [pc, #12]	; (80052ac <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80052a0:	f004 fe78 	bl	8009f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000334 	.word	0x20000334
 80052ac:	200017dc 	.word	0x200017dc

080052b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80052b4:	4802      	ldr	r0, [pc, #8]	; (80052c0 <UART4_IRQHandler+0x10>)
 80052b6:	f006 fb85 	bl	800b9c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200016b4 	.word	0x200016b4

080052c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <SystemInit+0x20>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <SystemInit+0x20>)
 80052d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000ed00 	.word	0xe000ed00

080052e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052ec:	480d      	ldr	r0, [pc, #52]	; (8005324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052ee:	490e      	ldr	r1, [pc, #56]	; (8005328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052f0:	4a0e      	ldr	r2, [pc, #56]	; (800532c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052f4:	e002      	b.n	80052fc <LoopCopyDataInit>

080052f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052fa:	3304      	adds	r3, #4

080052fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005300:	d3f9      	bcc.n	80052f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005304:	4c0b      	ldr	r4, [pc, #44]	; (8005334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005308:	e001      	b.n	800530e <LoopFillZerobss>

0800530a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800530a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800530c:	3204      	adds	r2, #4

0800530e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800530e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005310:	d3fb      	bcc.n	800530a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005312:	f7ff ffd7 	bl	80052c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005316:	f00c fe17 	bl	8011f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800531a:	f7fb ffdb 	bl	80012d4 <main>
  bx  lr    
 800531e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005328:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800532c:	080122f4 	.word	0x080122f4
  ldr r2, =_sbss
 8005330:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8005334:	2000a148 	.word	0x2000a148

08005338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005338:	e7fe      	b.n	8005338 <ADC_IRQHandler>
	...

0800533c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_Init+0x40>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_Init+0x40>)
 8005346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_Init+0x40>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_Init+0x40>)
 8005352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_Init+0x40>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_Init+0x40>)
 800535e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005364:	2003      	movs	r0, #3
 8005366:	f000 f94f 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536a:	2000      	movs	r0, #0
 800536c:	f000 f808 	bl	8005380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005370:	f7ff fa8a 	bl	8004888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023c00 	.word	0x40023c00

08005380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <HAL_InitTick+0x54>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_InitTick+0x58>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005396:	fbb3 f3f1 	udiv	r3, r3, r1
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f996 	bl	80056d0 <HAL_SYSTICK_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00e      	b.n	80053cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d80a      	bhi.n	80053ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053b4:	2200      	movs	r2, #0
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	f000 f944 	bl	8005648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053c0:	4a06      	ldr	r2, [pc, #24]	; (80053dc <HAL_InitTick+0x5c>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000190 	.word	0x20000190
 80053d8:	20000198 	.word	0x20000198
 80053dc:	20000194 	.word	0x20000194

080053e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_IncTick+0x20>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_IncTick+0x24>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_IncTick+0x24>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000198 	.word	0x20000198
 8005404:	2000a044 	.word	0x2000a044

08005408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return uwTick;
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <HAL_GetTick+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	2000a044 	.word	0x2000a044

08005420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7ff ffee 	bl	8005408 <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d005      	beq.n	8005446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_Delay+0x44>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005446:	bf00      	nop
 8005448:	f7ff ffde 	bl	8005408 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d8f7      	bhi.n	8005448 <HAL_Delay+0x28>
  {
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000198 	.word	0x20000198

08005468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <__NVIC_SetPriorityGrouping+0x44>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005484:	4013      	ands	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549a:	4a04      	ldr	r2, [pc, #16]	; (80054ac <__NVIC_SetPriorityGrouping+0x44>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	60d3      	str	r3, [r2, #12]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <__NVIC_GetPriorityGrouping+0x18>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	0a1b      	lsrs	r3, r3, #8
 80054ba:	f003 0307 	and.w	r3, r3, #7
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	e000ed00 	.word	0xe000ed00

080054cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	db0b      	blt.n	80054f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	4907      	ldr	r1, [pc, #28]	; (8005504 <__NVIC_EnableIRQ+0x38>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2001      	movs	r0, #1
 80054ee:	fa00 f202 	lsl.w	r2, r0, r2
 80054f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	e000e100 	.word	0xe000e100

08005508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005518:	2b00      	cmp	r3, #0
 800551a:	db0a      	blt.n	8005532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	490c      	ldr	r1, [pc, #48]	; (8005554 <__NVIC_SetPriority+0x4c>)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	0112      	lsls	r2, r2, #4
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	440b      	add	r3, r1
 800552c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005530:	e00a      	b.n	8005548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4908      	ldr	r1, [pc, #32]	; (8005558 <__NVIC_SetPriority+0x50>)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	3b04      	subs	r3, #4
 8005540:	0112      	lsls	r2, r2, #4
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	440b      	add	r3, r1
 8005546:	761a      	strb	r2, [r3, #24]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000e100 	.word	0xe000e100
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	; 0x24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f1c3 0307 	rsb	r3, r3, #7
 8005576:	2b04      	cmp	r3, #4
 8005578:	bf28      	it	cs
 800557a:	2304      	movcs	r3, #4
 800557c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3304      	adds	r3, #4
 8005582:	2b06      	cmp	r3, #6
 8005584:	d902      	bls.n	800558c <NVIC_EncodePriority+0x30>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3b03      	subs	r3, #3
 800558a:	e000      	b.n	800558e <NVIC_EncodePriority+0x32>
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	401a      	ands	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a4:	f04f 31ff 	mov.w	r1, #4294967295
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	43d9      	mvns	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b4:	4313      	orrs	r3, r2
         );
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3724      	adds	r7, #36	; 0x24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055d4:	d301      	bcc.n	80055da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00f      	b.n	80055fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <SysTick_Config+0x40>)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055e2:	210f      	movs	r1, #15
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	f7ff ff8e 	bl	8005508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <SysTick_Config+0x40>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f2:	4b04      	ldr	r3, [pc, #16]	; (8005604 <SysTick_Config+0x40>)
 80055f4:	2207      	movs	r2, #7
 80055f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	e000e010 	.word	0xe000e010

08005608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b07      	cmp	r3, #7
 8005614:	d00f      	beq.n	8005636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d00c      	beq.n	8005636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b05      	cmp	r3, #5
 8005620:	d009      	beq.n	8005636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d006      	beq.n	8005636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d003      	beq.n	8005636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800562e:	2192      	movs	r1, #146	; 0x92
 8005630:	4804      	ldr	r0, [pc, #16]	; (8005644 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005632:	f7ff f91e 	bl	8004872 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff16 	bl	8005468 <__NVIC_SetPriorityGrouping>
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	08011ffc 	.word	0x08011ffc

08005648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d903      	bls.n	8005668 <HAL_NVIC_SetPriority+0x20>
 8005660:	21aa      	movs	r1, #170	; 0xaa
 8005662:	480e      	ldr	r0, [pc, #56]	; (800569c <HAL_NVIC_SetPriority+0x54>)
 8005664:	f7ff f905 	bl	8004872 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d903      	bls.n	8005676 <HAL_NVIC_SetPriority+0x2e>
 800566e:	21ab      	movs	r1, #171	; 0xab
 8005670:	480a      	ldr	r0, [pc, #40]	; (800569c <HAL_NVIC_SetPriority+0x54>)
 8005672:	f7ff f8fe 	bl	8004872 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005676:	f7ff ff1b 	bl	80054b0 <__NVIC_GetPriorityGrouping>
 800567a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	6978      	ldr	r0, [r7, #20]
 8005682:	f7ff ff6b 	bl	800555c <NVIC_EncodePriority>
 8005686:	4602      	mov	r2, r0
 8005688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff3a 	bl	8005508 <__NVIC_SetPriority>
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	08011ffc 	.word	0x08011ffc

080056a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da03      	bge.n	80056ba <HAL_NVIC_EnableIRQ+0x1a>
 80056b2:	21be      	movs	r1, #190	; 0xbe
 80056b4:	4805      	ldr	r0, [pc, #20]	; (80056cc <HAL_NVIC_EnableIRQ+0x2c>)
 80056b6:	f7ff f8dc 	bl	8004872 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff04 	bl	80054cc <__NVIC_EnableIRQ>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	08011ffc 	.word	0x08011ffc

080056d0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff73 	bl	80055c4 <SysTick_Config>
 80056de:	4603      	mov	r3, r0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056f4:	f7ff fe88 	bl	8005408 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e204      	b.n	8005b0e <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a97      	ldr	r2, [pc, #604]	; (8005968 <HAL_DMA_Init+0x280>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d04e      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a96      	ldr	r2, [pc, #600]	; (800596c <HAL_DMA_Init+0x284>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d049      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a94      	ldr	r2, [pc, #592]	; (8005970 <HAL_DMA_Init+0x288>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d044      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a93      	ldr	r2, [pc, #588]	; (8005974 <HAL_DMA_Init+0x28c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d03f      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a91      	ldr	r2, [pc, #580]	; (8005978 <HAL_DMA_Init+0x290>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d03a      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a90      	ldr	r2, [pc, #576]	; (800597c <HAL_DMA_Init+0x294>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d035      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a8e      	ldr	r2, [pc, #568]	; (8005980 <HAL_DMA_Init+0x298>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d030      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a8d      	ldr	r2, [pc, #564]	; (8005984 <HAL_DMA_Init+0x29c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d02b      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a8b      	ldr	r2, [pc, #556]	; (8005988 <HAL_DMA_Init+0x2a0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d026      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a8a      	ldr	r2, [pc, #552]	; (800598c <HAL_DMA_Init+0x2a4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d021      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a88      	ldr	r2, [pc, #544]	; (8005990 <HAL_DMA_Init+0x2a8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01c      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a87      	ldr	r2, [pc, #540]	; (8005994 <HAL_DMA_Init+0x2ac>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d017      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a85      	ldr	r2, [pc, #532]	; (8005998 <HAL_DMA_Init+0x2b0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d012      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a84      	ldr	r2, [pc, #528]	; (800599c <HAL_DMA_Init+0x2b4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00d      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a82      	ldr	r2, [pc, #520]	; (80059a0 <HAL_DMA_Init+0x2b8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d008      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a81      	ldr	r2, [pc, #516]	; (80059a4 <HAL_DMA_Init+0x2bc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <HAL_DMA_Init+0xc4>
 80057a4:	21b8      	movs	r1, #184	; 0xb8
 80057a6:	4880      	ldr	r0, [pc, #512]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 80057a8:	f7ff f863 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d026      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057bc:	d021      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c6:	d01c      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80057d0:	d017      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d012      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80057e4:	d00d      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057ee:	d008      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80057f8:	d003      	beq.n	8005802 <HAL_DMA_Init+0x11a>
 80057fa:	21b9      	movs	r1, #185	; 0xb9
 80057fc:	486a      	ldr	r0, [pc, #424]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 80057fe:	f7ff f838 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <HAL_DMA_Init+0x13a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d007      	beq.n	8005822 <HAL_DMA_Init+0x13a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b80      	cmp	r3, #128	; 0x80
 8005818:	d003      	beq.n	8005822 <HAL_DMA_Init+0x13a>
 800581a:	21ba      	movs	r1, #186	; 0xba
 800581c:	4862      	ldr	r0, [pc, #392]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 800581e:	f7ff f828 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582a:	d007      	beq.n	800583c <HAL_DMA_Init+0x154>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_DMA_Init+0x154>
 8005834:	21bb      	movs	r1, #187	; 0xbb
 8005836:	485c      	ldr	r0, [pc, #368]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005838:	f7ff f81b 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d007      	beq.n	8005856 <HAL_DMA_Init+0x16e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_DMA_Init+0x16e>
 800584e:	21bc      	movs	r1, #188	; 0xbc
 8005850:	4855      	ldr	r0, [pc, #340]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005852:	f7ff f80e 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_DMA_Init+0x192>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005866:	d008      	beq.n	800587a <HAL_DMA_Init+0x192>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d003      	beq.n	800587a <HAL_DMA_Init+0x192>
 8005872:	21bd      	movs	r1, #189	; 0xbd
 8005874:	484c      	ldr	r0, [pc, #304]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005876:	f7fe fffc 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <HAL_DMA_Init+0x1b6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588a:	d008      	beq.n	800589e <HAL_DMA_Init+0x1b6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005894:	d003      	beq.n	800589e <HAL_DMA_Init+0x1b6>
 8005896:	21be      	movs	r1, #190	; 0xbe
 8005898:	4843      	ldr	r0, [pc, #268]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 800589a:	f7fe ffea 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <HAL_DMA_Init+0x1d8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	d007      	beq.n	80058c0 <HAL_DMA_Init+0x1d8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d003      	beq.n	80058c0 <HAL_DMA_Init+0x1d8>
 80058b8:	21bf      	movs	r1, #191	; 0xbf
 80058ba:	483b      	ldr	r0, [pc, #236]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 80058bc:	f7fe ffd9 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d012      	beq.n	80058ee <HAL_DMA_Init+0x206>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d00d      	beq.n	80058ee <HAL_DMA_Init+0x206>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058da:	d008      	beq.n	80058ee <HAL_DMA_Init+0x206>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e4:	d003      	beq.n	80058ee <HAL_DMA_Init+0x206>
 80058e6:	21c0      	movs	r1, #192	; 0xc0
 80058e8:	482f      	ldr	r0, [pc, #188]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 80058ea:	f7fe ffc2 	bl	8004872 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_DMA_Init+0x21e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d003      	beq.n	8005906 <HAL_DMA_Init+0x21e>
 80058fe:	21c1      	movs	r1, #193	; 0xc1
 8005900:	4829      	ldr	r0, [pc, #164]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005902:	f7fe ffb6 	bl	8004872 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d065      	beq.n	80059da <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <HAL_DMA_Init+0x24e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	2b01      	cmp	r3, #1
 800591c:	d00b      	beq.n	8005936 <HAL_DMA_Init+0x24e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	2b02      	cmp	r3, #2
 8005924:	d007      	beq.n	8005936 <HAL_DMA_Init+0x24e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	2b03      	cmp	r3, #3
 800592c:	d003      	beq.n	8005936 <HAL_DMA_Init+0x24e>
 800592e:	21c6      	movs	r1, #198	; 0xc6
 8005930:	481d      	ldr	r0, [pc, #116]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005932:	f7fe ff9e 	bl	8004872 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d036      	beq.n	80059ac <HAL_DMA_Init+0x2c4>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005946:	d031      	beq.n	80059ac <HAL_DMA_Init+0x2c4>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005950:	d02c      	beq.n	80059ac <HAL_DMA_Init+0x2c4>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800595a:	d027      	beq.n	80059ac <HAL_DMA_Init+0x2c4>
 800595c:	21c7      	movs	r1, #199	; 0xc7
 800595e:	4812      	ldr	r0, [pc, #72]	; (80059a8 <HAL_DMA_Init+0x2c0>)
 8005960:	f7fe ff87 	bl	8004872 <assert_failed>
 8005964:	e022      	b.n	80059ac <HAL_DMA_Init+0x2c4>
 8005966:	bf00      	nop
 8005968:	40026010 	.word	0x40026010
 800596c:	40026028 	.word	0x40026028
 8005970:	40026040 	.word	0x40026040
 8005974:	40026058 	.word	0x40026058
 8005978:	40026070 	.word	0x40026070
 800597c:	40026088 	.word	0x40026088
 8005980:	400260a0 	.word	0x400260a0
 8005984:	400260b8 	.word	0x400260b8
 8005988:	40026410 	.word	0x40026410
 800598c:	40026428 	.word	0x40026428
 8005990:	40026440 	.word	0x40026440
 8005994:	40026458 	.word	0x40026458
 8005998:	40026470 	.word	0x40026470
 800599c:	40026488 	.word	0x40026488
 80059a0:	400264a0 	.word	0x400264a0
 80059a4:	400264b8 	.word	0x400264b8
 80059a8:	08012038 	.word	0x08012038
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <HAL_DMA_Init+0x2f2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059bc:	d00d      	beq.n	80059da <HAL_DMA_Init+0x2f2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c6:	d008      	beq.n	80059da <HAL_DMA_Init+0x2f2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059d0:	d003      	beq.n	80059da <HAL_DMA_Init+0x2f2>
 80059d2:	21c8      	movs	r1, #200	; 0xc8
 80059d4:	4850      	ldr	r0, [pc, #320]	; (8005b18 <HAL_DMA_Init+0x430>)
 80059d6:	f7fe ff4c 	bl	8004872 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fa:	e00f      	b.n	8005a1c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059fc:	f7ff fd04 	bl	8005408 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d908      	bls.n	8005a1c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2203      	movs	r2, #3
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e078      	b.n	8005b0e <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e8      	bne.n	80059fc <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <HAL_DMA_Init+0x434>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d107      	bne.n	8005a86 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0307 	bic.w	r3, r3, #7
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d117      	bne.n	8005ae0 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa7e 	bl	8005fc4 <DMA_CheckFifoParam>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2240      	movs	r2, #64	; 0x40
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005adc:	2301      	movs	r3, #1
 8005ade:	e016      	b.n	8005b0e <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fa35 	bl	8005f58 <DMA_CalcBaseAndBitshift>
 8005aee:	4603      	mov	r3, r0
 8005af0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	223f      	movs	r2, #63	; 0x3f
 8005af8:	409a      	lsls	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	08012038 	.word	0x08012038
 8005b1c:	f010803f 	.word	0xf010803f

08005b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b2e:	f7ff fc6b 	bl	8005408 <HAL_GetTick>
 8005b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d008      	beq.n	8005b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e052      	b.n	8005bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0216 	bic.w	r2, r2, #22
 8005b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_DMA_Abort+0x62>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0208 	bic.w	r2, r2, #8
 8005b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ba2:	e013      	b.n	8005bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ba4:	f7ff fc30 	bl	8005408 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d90c      	bls.n	8005bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e015      	b.n	8005bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e4      	bne.n	8005ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	223f      	movs	r2, #63	; 0x3f
 8005be0:	409a      	lsls	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d004      	beq.n	8005c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e00c      	b.n	8005c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2205      	movs	r2, #5
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c50:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <HAL_DMA_IRQHandler+0x258>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a92      	ldr	r2, [pc, #584]	; (8005ea0 <HAL_DMA_IRQHandler+0x25c>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	0a9b      	lsrs	r3, r3, #10
 8005c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6e:	2208      	movs	r2, #8
 8005c70:	409a      	lsls	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01a      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0204 	bic.w	r2, r2, #4
 8005c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	f043 0201 	orr.w	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d012      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cde:	f043 0202 	orr.w	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	2204      	movs	r2, #4
 8005cec:	409a      	lsls	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d012      	beq.n	8005d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	2204      	movs	r2, #4
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	f043 0204 	orr.w	r2, r3, #4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	2210      	movs	r2, #16
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d043      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d03c      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3e:	2210      	movs	r2, #16
 8005d40:	409a      	lsls	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d024      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
 8005d72:	e01f      	b.n	8005db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01b      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
 8005d84:	e016      	b.n	8005db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d107      	bne.n	8005da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0208 	bic.w	r2, r2, #8
 8005da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	2220      	movs	r2, #32
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 808e 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8086 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dda:	2220      	movs	r2, #32
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d136      	bne.n	8005e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0216 	bic.w	r2, r2, #22
 8005dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <HAL_DMA_IRQHandler+0x1da>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0208 	bic.w	r2, r2, #8
 8005e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e32:	223f      	movs	r2, #63	; 0x3f
 8005e34:	409a      	lsls	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d07d      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
        }
        return;
 8005e5a:	e078      	b.n	8005f4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01c      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d030      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	e02b      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d027      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	e022      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x29e>
 8005e9c:	20000190 	.word	0x20000190
 8005ea0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0210 	bic.w	r2, r2, #16
 8005ec0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d032      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d022      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2205      	movs	r2, #5
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d307      	bcc.n	8005f2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f2      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x2ca>
 8005f28:	e000      	b.n	8005f2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f2a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
 8005f4c:	e000      	b.n	8005f50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f4e:	bf00      	nop
    }
  }
}
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop

08005f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	3b10      	subs	r3, #16
 8005f68:	4a14      	ldr	r2, [pc, #80]	; (8005fbc <DMA_CalcBaseAndBitshift+0x64>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f72:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d909      	bls.n	8005f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	659a      	str	r2, [r3, #88]	; 0x58
 8005f98:	e007      	b.n	8005faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	aaaaaaab 	.word	0xaaaaaaab
 8005fc0:	080122b4 	.word	0x080122b4

08005fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d11f      	bne.n	800601e <DMA_CheckFifoParam+0x5a>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d856      	bhi.n	8006092 <DMA_CheckFifoParam+0xce>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <DMA_CheckFifoParam+0x28>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	0800600f 	.word	0x0800600f
 8005ff4:	08005ffd 	.word	0x08005ffd
 8005ff8:	08006093 	.word	0x08006093
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d046      	beq.n	8006096 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800600c:	e043      	b.n	8006096 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006016:	d140      	bne.n	800609a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800601c:	e03d      	b.n	800609a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006026:	d121      	bne.n	800606c <DMA_CheckFifoParam+0xa8>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d837      	bhi.n	800609e <DMA_CheckFifoParam+0xda>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <DMA_CheckFifoParam+0x70>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	0800604b 	.word	0x0800604b
 800603c:	08006045 	.word	0x08006045
 8006040:	0800605d 	.word	0x0800605d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e030      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d025      	beq.n	80060a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800605a:	e022      	b.n	80060a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006064:	d11f      	bne.n	80060a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800606a:	e01c      	b.n	80060a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d903      	bls.n	800607a <DMA_CheckFifoParam+0xb6>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d003      	beq.n	8006080 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006078:	e018      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
      break;
 800607e:	e015      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e00b      	b.n	80060aa <DMA_CheckFifoParam+0xe6>
      break;
 8006092:	bf00      	nop
 8006094:	e00a      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;
 8006096:	bf00      	nop
 8006098:	e008      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;
 800609a:	bf00      	nop
 800609c:	e006      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;
 800609e:	bf00      	nop
 80060a0:	e004      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;   
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <DMA_CheckFifoParam+0xe8>
      break;
 80060aa:	bf00      	nop
    }
  } 
  
  return status; 
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop

080060bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a37      	ldr	r2, [pc, #220]	; (80061b4 <HAL_GPIO_Init+0xf8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a36      	ldr	r2, [pc, #216]	; (80061b8 <HAL_GPIO_Init+0xfc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a35      	ldr	r2, [pc, #212]	; (80061bc <HAL_GPIO_Init+0x100>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_GPIO_Init+0x104>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a33      	ldr	r2, [pc, #204]	; (80061c4 <HAL_GPIO_Init+0x108>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a32      	ldr	r2, [pc, #200]	; (80061c8 <HAL_GPIO_Init+0x10c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a31      	ldr	r2, [pc, #196]	; (80061cc <HAL_GPIO_Init+0x110>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <HAL_GPIO_Init+0x114>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <HAL_GPIO_Init+0x5e>
 8006112:	21ac      	movs	r1, #172	; 0xac
 8006114:	482f      	ldr	r0, [pc, #188]	; (80061d4 <HAL_GPIO_Init+0x118>)
 8006116:	f7fe fbac 	bl	8004872 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_GPIO_Init+0x74>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x7c>
 8006130:	21ad      	movs	r1, #173	; 0xad
 8006132:	4828      	ldr	r0, [pc, #160]	; (80061d4 <HAL_GPIO_Init+0x118>)
 8006134:	f7fe fb9d 	bl	8004872 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d035      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d031      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b11      	cmp	r3, #17
 800614e:	d02d      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d029      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b12      	cmp	r3, #18
 800615e:	d025      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8006168:	d020      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006172:	d01b      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800617c:	d016      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8006186:	d011      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8006190:	d00c      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800619a:	d007      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0xf0>
 80061a4:	21ae      	movs	r1, #174	; 0xae
 80061a6:	480b      	ldr	r0, [pc, #44]	; (80061d4 <HAL_GPIO_Init+0x118>)
 80061a8:	f7fe fb63 	bl	8004872 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e289      	b.n	80066c6 <HAL_GPIO_Init+0x60a>
 80061b2:	bf00      	nop
 80061b4:	40020000 	.word	0x40020000
 80061b8:	40020400 	.word	0x40020400
 80061bc:	40020800 	.word	0x40020800
 80061c0:	40020c00 	.word	0x40020c00
 80061c4:	40021000 	.word	0x40021000
 80061c8:	40021400 	.word	0x40021400
 80061cc:	40021800 	.word	0x40021800
 80061d0:	40021c00 	.word	0x40021c00
 80061d4:	08012070 	.word	0x08012070
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061d8:	2201      	movs	r2, #1
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4013      	ands	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	f040 8265 	bne.w	80066c0 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d005      	beq.n	800620e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800620a:	2b02      	cmp	r3, #2
 800620c:	d144      	bne.n	8006298 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00f      	beq.n	8006236 <HAL_GPIO_Init+0x17a>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d00b      	beq.n	8006236 <HAL_GPIO_Init+0x17a>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d007      	beq.n	8006236 <HAL_GPIO_Init+0x17a>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_Init+0x17a>
 800622e:	21c0      	movs	r1, #192	; 0xc0
 8006230:	4831      	ldr	r0, [pc, #196]	; (80062f8 <HAL_GPIO_Init+0x23c>)
 8006232:	f7fe fb1e 	bl	8004872 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	2203      	movs	r2, #3
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4313      	orrs	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800626c:	2201      	movs	r2, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4013      	ands	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 0201 	and.w	r2, r3, #1
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d02b      	beq.n	80062fc <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_GPIO_Init+0x208>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d007      	beq.n	80062c4 <HAL_GPIO_Init+0x208>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d003      	beq.n	80062c4 <HAL_GPIO_Init+0x208>
 80062bc:	21d1      	movs	r1, #209	; 0xd1
 80062be:	480e      	ldr	r0, [pc, #56]	; (80062f8 <HAL_GPIO_Init+0x23c>)
 80062c0:	f7fe fad7 	bl	8004872 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	2203      	movs	r2, #3
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e002      	b.n	80062fc <HAL_GPIO_Init+0x240>
 80062f6:	bf00      	nop
 80062f8:	08012070 	.word	0x08012070
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b02      	cmp	r3, #2
 8006306:	f040 810c 	bne.w	8006522 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80e3 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b09      	cmp	r3, #9
 800631a:	f000 80de 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80d9 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80d4 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80cf 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80ca 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b01      	cmp	r3, #1
 800634c:	f000 80c5 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b01      	cmp	r3, #1
 8006356:	f000 80c0 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b02      	cmp	r3, #2
 8006360:	f000 80bb 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b02      	cmp	r3, #2
 800636a:	f000 80b6 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b02      	cmp	r3, #2
 8006374:	f000 80b1 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b03      	cmp	r3, #3
 800637e:	f000 80ac 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b04      	cmp	r3, #4
 8006388:	f000 80a7 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b04      	cmp	r3, #4
 8006392:	f000 80a2 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b04      	cmp	r3, #4
 800639c:	f000 809d 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	f000 8098 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	f000 8093 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	f000 808e 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b06      	cmp	r3, #6
 80063c4:	f000 8089 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	f000 8084 	beq.w	80064da <HAL_GPIO_Init+0x41e>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b07      	cmp	r3, #7
 80063d8:	d07f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b07      	cmp	r3, #7
 80063e0:	d07b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b07      	cmp	r3, #7
 80063e8:	d077      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d073      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d06f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d06b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b09      	cmp	r3, #9
 8006408:	d067      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b09      	cmp	r3, #9
 8006410:	d063      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b0a      	cmp	r3, #10
 8006418:	d05f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b0a      	cmp	r3, #10
 8006420:	d05b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b0b      	cmp	r3, #11
 8006428:	d057      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d053      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d04f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b0d      	cmp	r3, #13
 8006440:	d04b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d047      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b05      	cmp	r3, #5
 8006450:	d043      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d03f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b06      	cmp	r3, #6
 8006460:	d03b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d037      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d033      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b05      	cmp	r3, #5
 8006478:	d02f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b06      	cmp	r3, #6
 8006480:	d02b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d027      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b07      	cmp	r3, #7
 8006490:	d023      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b07      	cmp	r3, #7
 8006498:	d01f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b07      	cmp	r3, #7
 80064a0:	d01b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	d017      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d013      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d00f      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b09      	cmp	r3, #9
 80064c0:	d00b      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b0a      	cmp	r3, #10
 80064c8:	d007      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b0a      	cmp	r3, #10
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x41e>
 80064d2:	21de      	movs	r1, #222	; 0xde
 80064d4:	4880      	ldr	r0, [pc, #512]	; (80066d8 <HAL_GPIO_Init+0x61c>)
 80064d6:	f7fe f9cc 	bl	8004872 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	08da      	lsrs	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3208      	adds	r2, #8
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	220f      	movs	r2, #15
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4013      	ands	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	08da      	lsrs	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3208      	adds	r2, #8
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	2203      	movs	r2, #3
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0203 	and.w	r2, r3, #3
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4313      	orrs	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80ae 	beq.w	80066c0 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	4b5c      	ldr	r3, [pc, #368]	; (80066dc <HAL_GPIO_Init+0x620>)
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	4a5b      	ldr	r2, [pc, #364]	; (80066dc <HAL_GPIO_Init+0x620>)
 800656e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006572:	6453      	str	r3, [r2, #68]	; 0x44
 8006574:	4b59      	ldr	r3, [pc, #356]	; (80066dc <HAL_GPIO_Init+0x620>)
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006580:	4a57      	ldr	r2, [pc, #348]	; (80066e0 <HAL_GPIO_Init+0x624>)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	3302      	adds	r3, #2
 8006588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	220f      	movs	r2, #15
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4013      	ands	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a4f      	ldr	r2, [pc, #316]	; (80066e4 <HAL_GPIO_Init+0x628>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d025      	beq.n	80065f8 <HAL_GPIO_Init+0x53c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a4e      	ldr	r2, [pc, #312]	; (80066e8 <HAL_GPIO_Init+0x62c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01f      	beq.n	80065f4 <HAL_GPIO_Init+0x538>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_GPIO_Init+0x630>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d019      	beq.n	80065f0 <HAL_GPIO_Init+0x534>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a4c      	ldr	r2, [pc, #304]	; (80066f0 <HAL_GPIO_Init+0x634>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_GPIO_Init+0x530>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a4b      	ldr	r2, [pc, #300]	; (80066f4 <HAL_GPIO_Init+0x638>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00d      	beq.n	80065e8 <HAL_GPIO_Init+0x52c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a4a      	ldr	r2, [pc, #296]	; (80066f8 <HAL_GPIO_Init+0x63c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <HAL_GPIO_Init+0x528>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a49      	ldr	r2, [pc, #292]	; (80066fc <HAL_GPIO_Init+0x640>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d101      	bne.n	80065e0 <HAL_GPIO_Init+0x524>
 80065dc:	2306      	movs	r3, #6
 80065de:	e00c      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065e0:	2307      	movs	r3, #7
 80065e2:	e00a      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065e4:	2305      	movs	r3, #5
 80065e6:	e008      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065e8:	2304      	movs	r3, #4
 80065ea:	e006      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065ec:	2303      	movs	r3, #3
 80065ee:	e004      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e002      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <HAL_GPIO_Init+0x53e>
 80065f8:	2300      	movs	r3, #0
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	f002 0203 	and.w	r2, r2, #3
 8006600:	0092      	lsls	r2, r2, #2
 8006602:	4093      	lsls	r3, r2
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800660a:	4935      	ldr	r1, [pc, #212]	; (80066e0 <HAL_GPIO_Init+0x624>)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	3302      	adds	r3, #2
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006618:	4b39      	ldr	r3, [pc, #228]	; (8006700 <HAL_GPIO_Init+0x644>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	43db      	mvns	r3, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800663c:	4a30      	ldr	r2, [pc, #192]	; (8006700 <HAL_GPIO_Init+0x644>)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <HAL_GPIO_Init+0x644>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	43db      	mvns	r3, r3
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	4013      	ands	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006666:	4a26      	ldr	r2, [pc, #152]	; (8006700 <HAL_GPIO_Init+0x644>)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <HAL_GPIO_Init+0x644>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	43db      	mvns	r3, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4013      	ands	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_GPIO_Init+0x644>)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <HAL_GPIO_Init+0x644>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	43db      	mvns	r3, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4013      	ands	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066ba:	4a11      	ldr	r2, [pc, #68]	; (8006700 <HAL_GPIO_Init+0x644>)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	f67f ad85 	bls.w	80061d8 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80066ce:	bf00      	nop
 80066d0:	bf00      	nop
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08012070 	.word	0x08012070
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40013800 	.word	0x40013800
 80066e4:	40020000 	.word	0x40020000
 80066e8:	40020400 	.word	0x40020400
 80066ec:	40020800 	.word	0x40020800
 80066f0:	40020c00 	.word	0x40020c00
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40021400 	.word	0x40021400
 80066fc:	40021800 	.word	0x40021800
 8006700:	40013c00 	.word	0x40013c00

08006704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
 8006710:	4613      	mov	r3, r2
 8006712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006714:	887b      	ldrh	r3, [r7, #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <HAL_GPIO_WritePin+0x20>
 800671a:	887b      	ldrh	r3, [r7, #2]
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <HAL_GPIO_WritePin+0x2a>
 8006724:	f240 119d 	movw	r1, #413	; 0x19d
 8006728:	480e      	ldr	r0, [pc, #56]	; (8006764 <HAL_GPIO_WritePin+0x60>)
 800672a:	f7fe f8a2 	bl	8004872 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800672e:	787b      	ldrb	r3, [r7, #1]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_GPIO_WritePin+0x40>
 8006734:	787b      	ldrb	r3, [r7, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d004      	beq.n	8006744 <HAL_GPIO_WritePin+0x40>
 800673a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800673e:	4809      	ldr	r0, [pc, #36]	; (8006764 <HAL_GPIO_WritePin+0x60>)
 8006740:	f7fe f897 	bl	8004872 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006744:	787b      	ldrb	r3, [r7, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006750:	e003      	b.n	800675a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	041a      	lsls	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	619a      	str	r2, [r3, #24]
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	08012070 	.word	0x08012070

08006768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006772:	4b08      	ldr	r3, [pc, #32]	; (8006794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d006      	beq.n	800678c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe f852 	bl	8004830 <HAL_GPIO_EXTI_Callback>
  }
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40013c00 	.word	0x40013c00

08006798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e1be      	b.n	8006b28 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a9f      	ldr	r2, [pc, #636]	; (8006a2c <HAL_I2C_Init+0x294>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_I2C_Init+0x3a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a9d      	ldr	r2, [pc, #628]	; (8006a30 <HAL_I2C_Init+0x298>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_I2C_Init+0x3a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a9c      	ldr	r2, [pc, #624]	; (8006a34 <HAL_I2C_Init+0x29c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_I2C_Init+0x3a>
 80067c8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80067cc:	489a      	ldr	r0, [pc, #616]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 80067ce:	f7fe f850 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <HAL_I2C_Init+0x4c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a97      	ldr	r2, [pc, #604]	; (8006a3c <HAL_I2C_Init+0x2a4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d904      	bls.n	80067ee <HAL_I2C_Init+0x56>
 80067e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80067e8:	4893      	ldr	r0, [pc, #588]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 80067ea:	f7fe f842 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_I2C_Init+0x72>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067fe:	d004      	beq.n	800680a <HAL_I2C_Init+0x72>
 8006800:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006804:	488c      	ldr	r0, [pc, #560]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 8006806:	f7fe f834 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_I2C_Init+0x8c>
 800681a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800681e:	4886      	ldr	r0, [pc, #536]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 8006820:	f7fe f827 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800682c:	d009      	beq.n	8006842 <HAL_I2C_Init+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006836:	d004      	beq.n	8006842 <HAL_I2C_Init+0xaa>
 8006838:	f240 11c3 	movw	r1, #451	; 0x1c3
 800683c:	487e      	ldr	r0, [pc, #504]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 800683e:	f7fe f818 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <HAL_I2C_Init+0xc4>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d004      	beq.n	800685c <HAL_I2C_Init+0xc4>
 8006852:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006856:	4878      	ldr	r0, [pc, #480]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 8006858:	f7fe f80b 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_I2C_Init+0xda>
 8006868:	f240 11c5 	movw	r1, #453	; 0x1c5
 800686c:	4872      	ldr	r0, [pc, #456]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 800686e:	f7fe f800 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_I2C_Init+0xf4>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d004      	beq.n	800688c <HAL_I2C_Init+0xf4>
 8006882:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006886:	486c      	ldr	r0, [pc, #432]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 8006888:	f7fd fff3 	bl	8004872 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_I2C_Init+0x10e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d004      	beq.n	80068a6 <HAL_I2C_Init+0x10e>
 800689c:	f240 11c7 	movw	r1, #455	; 0x1c7
 80068a0:	4865      	ldr	r0, [pc, #404]	; (8006a38 <HAL_I2C_Init+0x2a0>)
 80068a2:	f7fd ffe6 	bl	8004872 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fe f80c 	bl	80048d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068f8:	f001 f96e 	bl	8007bd8 <HAL_RCC_GetPCLK1Freq>
 80068fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4a4f      	ldr	r2, [pc, #316]	; (8006a40 <HAL_I2C_Init+0x2a8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d807      	bhi.n	8006918 <HAL_I2C_Init+0x180>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a4e      	ldr	r2, [pc, #312]	; (8006a44 <HAL_I2C_Init+0x2ac>)
 800690c:	4293      	cmp	r3, r2
 800690e:	bf94      	ite	ls
 8006910:	2301      	movls	r3, #1
 8006912:	2300      	movhi	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e006      	b.n	8006926 <HAL_I2C_Init+0x18e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a4b      	ldr	r2, [pc, #300]	; (8006a48 <HAL_I2C_Init+0x2b0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	bf94      	ite	ls
 8006920:	2301      	movls	r3, #1
 8006922:	2300      	movhi	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e0fc      	b.n	8006b28 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a46      	ldr	r2, [pc, #280]	; (8006a4c <HAL_I2C_Init+0x2b4>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0c9b      	lsrs	r3, r3, #18
 8006938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a38      	ldr	r2, [pc, #224]	; (8006a40 <HAL_I2C_Init+0x2a8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d802      	bhi.n	8006968 <HAL_I2C_Init+0x1d0>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	3301      	adds	r3, #1
 8006966:	e009      	b.n	800697c <HAL_I2C_Init+0x1e4>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	4a37      	ldr	r2, [pc, #220]	; (8006a50 <HAL_I2C_Init+0x2b8>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	099b      	lsrs	r3, r3, #6
 800697a:	3301      	adds	r3, #1
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	430b      	orrs	r3, r1
 8006982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800698e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	492a      	ldr	r1, [pc, #168]	; (8006a40 <HAL_I2C_Init+0x2a8>)
 8006998:	428b      	cmp	r3, r1
 800699a:	d819      	bhi.n	80069d0 <HAL_I2C_Init+0x238>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1e59      	subs	r1, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069b0:	400b      	ands	r3, r1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_I2C_Init+0x234>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1e59      	subs	r1, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80069c4:	3301      	adds	r3, #1
 80069c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ca:	e066      	b.n	8006a9a <HAL_I2C_Init+0x302>
 80069cc:	2304      	movs	r3, #4
 80069ce:	e064      	b.n	8006a9a <HAL_I2C_Init+0x302>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d111      	bne.n	80069fc <HAL_I2C_Init+0x264>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1e58      	subs	r0, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	440b      	add	r3, r1
 80069e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e012      	b.n	8006a22 <HAL_I2C_Init+0x28a>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1e58      	subs	r0, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	0099      	lsls	r1, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_I2C_Init+0x2bc>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e037      	b.n	8006a9a <HAL_I2C_Init+0x302>
 8006a2a:	bf00      	nop
 8006a2c:	40005400 	.word	0x40005400
 8006a30:	40005800 	.word	0x40005800
 8006a34:	40005c00 	.word	0x40005c00
 8006a38:	080120ac 	.word	0x080120ac
 8006a3c:	00061a80 	.word	0x00061a80
 8006a40:	000186a0 	.word	0x000186a0
 8006a44:	001e847f 	.word	0x001e847f
 8006a48:	003d08ff 	.word	0x003d08ff
 8006a4c:	431bde83 	.word	0x431bde83
 8006a50:	10624dd3 	.word	0x10624dd3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <HAL_I2C_Init+0x2e2>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1e58      	subs	r0, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6859      	ldr	r1, [r3, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	440b      	add	r3, r1
 8006a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a6e:	3301      	adds	r3, #1
 8006a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	e00f      	b.n	8006a9a <HAL_I2C_Init+0x302>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1e58      	subs	r0, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	0099      	lsls	r1, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	6809      	ldr	r1, [r1, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6911      	ldr	r1, [r2, #16]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68d2      	ldr	r2, [r2, #12]
 8006ad4:	4311      	orrs	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	817b      	strh	r3, [r7, #10]
 8006b40:	4613      	mov	r3, r2
 8006b42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b44:	f7fe fc60 	bl	8005408 <HAL_GetTick>
 8006b48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	f040 80e0 	bne.w	8006d18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	2319      	movs	r3, #25
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4970      	ldr	r1, [pc, #448]	; (8006d24 <HAL_I2C_Master_Transmit+0x1f4>)
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fc58 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0d3      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_I2C_Master_Transmit+0x50>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e0cc      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d007      	beq.n	8006ba6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0201 	orr.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2221      	movs	r2, #33	; 0x21
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2210      	movs	r2, #16
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	893a      	ldrh	r2, [r7, #8]
 8006bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a50      	ldr	r2, [pc, #320]	; (8006d28 <HAL_I2C_Master_Transmit+0x1f8>)
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006be8:	8979      	ldrh	r1, [r7, #10]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a3a      	ldr	r2, [r7, #32]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fac2 	bl	8007178 <I2C_MasterRequestWrite>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e08d      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c14:	e066      	b.n	8006ce4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	6a39      	ldr	r1, [r7, #32]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fcd2 	bl	80075c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d107      	bne.n	8006c3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e06b      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d11b      	bne.n	8006cb8 <HAL_I2C_Master_Transmit+0x188>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d017      	beq.n	8006cb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	6a39      	ldr	r1, [r7, #32]
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fcc2 	bl	8007646 <I2C_WaitOnBTFFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d107      	bne.n	8006ce0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e01a      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d194      	bne.n	8006c16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	00100002 	.word	0x00100002
 8006d28:	ffff0000 	.word	0xffff0000

08006d2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	460b      	mov	r3, r1
 8006d3a:	817b      	strh	r3, [r7, #10]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d40:	f7fe fb62 	bl	8005408 <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	f040 820b 	bne.w	800716a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2319      	movs	r3, #25
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	497c      	ldr	r1, [pc, #496]	; (8006f50 <HAL_I2C_Master_Receive+0x224>)
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fb5a 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e1fe      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_I2C_Master_Receive+0x50>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e1f7      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d007      	beq.n	8006da2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0201 	orr.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2222      	movs	r2, #34	; 0x22
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2210      	movs	r2, #16
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	893a      	ldrh	r2, [r7, #8]
 8006dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a5c      	ldr	r2, [pc, #368]	; (8006f54 <HAL_I2C_Master_Receive+0x228>)
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006de4:	8979      	ldrh	r1, [r7, #10]
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa46 	bl	800727c <I2C_MasterRequestRead>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e1b8      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d113      	bne.n	8006e2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e18c      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11b      	bne.n	8006e6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e16c      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d11b      	bne.n	8006eaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e92:	2300      	movs	r3, #0
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	e14c      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ed0:	e138      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	f200 80f1 	bhi.w	80070be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d123      	bne.n	8006f2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fbed 	bl	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e139      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f2a:	e10b      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d14e      	bne.n	8006fd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4906      	ldr	r1, [pc, #24]	; (8006f58 <HAL_I2C_Master_Receive+0x22c>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fa6a 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e10e      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
 8006f4e:	bf00      	nop
 8006f50:	00100002 	.word	0x00100002
 8006f54:	ffff0000 	.word	0xffff0000
 8006f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fd0:	e0b8      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4966      	ldr	r1, [pc, #408]	; (8007174 <HAL_I2C_Master_Receive+0x448>)
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fa1b 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0bf      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	2200      	movs	r2, #0
 8007036:	494f      	ldr	r1, [pc, #316]	; (8007174 <HAL_I2C_Master_Receive+0x448>)
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f9ed 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e091      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070bc:	e042      	b.n	8007144 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fb00 	bl	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e04c      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d118      	bne.n	8007144 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f aec2 	bne.w	8006ed2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800716a:	2302      	movs	r3, #2
  }
}
 800716c:	4618      	mov	r0, r3
 800716e:	3728      	adds	r7, #40	; 0x28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	00010004 	.word	0x00010004

08007178 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d006      	beq.n	80071a2 <I2C_MasterRequestWrite+0x2a>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <I2C_MasterRequestWrite+0x2a>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071a0:	d108      	bne.n	80071b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e00b      	b.n	80071cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	2b12      	cmp	r3, #18
 80071ba:	d107      	bne.n	80071cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f91d 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d103      	bne.n	80071fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e035      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007208:	d108      	bne.n	800721c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007218:	611a      	str	r2, [r3, #16]
 800721a:	e01b      	b.n	8007254 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800721c:	897b      	ldrh	r3, [r7, #10]
 800721e:	11db      	asrs	r3, r3, #7
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0306 	and.w	r3, r3, #6
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f063 030f 	orn	r3, r3, #15
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	490e      	ldr	r1, [pc, #56]	; (8007274 <I2C_MasterRequestWrite+0xfc>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f943 	bl	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e010      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4907      	ldr	r1, [pc, #28]	; (8007278 <I2C_MasterRequestWrite+0x100>)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f933 	bl	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	00010008 	.word	0x00010008
 8007278:	00010002 	.word	0x00010002

0800727c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	460b      	mov	r3, r1
 800728a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d006      	beq.n	80072b6 <I2C_MasterRequestRead+0x3a>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d003      	beq.n	80072b6 <I2C_MasterRequestRead+0x3a>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072b4:	d108      	bne.n	80072c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e00b      	b.n	80072e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	2b11      	cmp	r3, #17
 80072ce:	d107      	bne.n	80072e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f893 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	d103      	bne.n	8007310 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e079      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731c:	d108      	bne.n	8007330 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	e05f      	b.n	80073f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	11db      	asrs	r3, r3, #7
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f063 030f 	orn	r3, r3, #15
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4930      	ldr	r1, [pc, #192]	; (8007410 <I2C_MasterRequestRead+0x194>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f8b9 	bl	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e054      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800735e:	897b      	ldrh	r3, [r7, #10]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4929      	ldr	r1, [pc, #164]	; (8007414 <I2C_MasterRequestRead+0x198>)
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f8a9 	bl	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e044      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f831 	bl	8007418 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ca:	d103      	bne.n	80073d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e017      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80073d8:	897b      	ldrh	r3, [r7, #10]
 80073da:	11db      	asrs	r3, r3, #7
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 0306 	and.w	r3, r3, #6
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f063 030e 	orn	r3, r3, #14
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4907      	ldr	r1, [pc, #28]	; (8007414 <I2C_MasterRequestRead+0x198>)
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f865 	bl	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	00010008 	.word	0x00010008
 8007414:	00010002 	.word	0x00010002

08007418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007428:	e025      	b.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d021      	beq.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fd ffe9 	bl	8005408 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d116      	bne.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e023      	b.n	80074be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10d      	bne.n	800749c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	43da      	mvns	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	e00c      	b.n	80074b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	43da      	mvns	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4013      	ands	r3, r2
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d0b6      	beq.n	800742a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074d4:	e051      	b.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e4:	d123      	bne.n	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0204 	orr.w	r2, r3, #4
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e046      	b.n	80075bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d021      	beq.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fd ff67 	bl	8005408 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d116      	bne.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e020      	b.n	80075bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d10c      	bne.n	800759e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	43da      	mvns	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4013      	ands	r3, r2
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	e00b      	b.n	80075b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	43da      	mvns	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d18d      	bne.n	80074d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075d0:	e02d      	b.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f8ce 	bl	8007774 <I2C_IsAcknowledgeFailed>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e02d      	b.n	800763e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d021      	beq.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fd ff0d 	bl	8005408 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d116      	bne.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e007      	b.n	800763e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007638:	2b80      	cmp	r3, #128	; 0x80
 800763a:	d1ca      	bne.n	80075d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007652:	e02d      	b.n	80076b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f88d 	bl	8007774 <I2C_IsAcknowledgeFailed>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e02d      	b.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d021      	beq.n	80076b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766c:	f7fd fecc 	bl	8005408 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d302      	bcc.n	8007682 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d116      	bne.n	80076b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e007      	b.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d1ca      	bne.n	8007654 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d4:	e042      	b.n	800775c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d119      	bne.n	8007718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0210 	mvn.w	r2, #16
 80076ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e029      	b.n	800776c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007718:	f7fd fe76 	bl	8005408 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	429a      	cmp	r2, r3
 8007726:	d302      	bcc.n	800772e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d116      	bne.n	800775c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e007      	b.n	800776c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d1b5      	bne.n	80076d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d11b      	bne.n	80077c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	f043 0204 	orr.w	r2, r3, #4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4b20      	ldr	r3, [pc, #128]	; (8007864 <HAL_PWREx_EnableOverDrive+0x90>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <HAL_PWREx_EnableOverDrive+0x90>)
 80077e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ec:	6413      	str	r3, [r2, #64]	; 0x40
 80077ee:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <HAL_PWREx_EnableOverDrive+0x90>)
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077fa:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <HAL_PWREx_EnableOverDrive+0x94>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007800:	f7fd fe02 	bl	8005408 <HAL_GetTick>
 8007804:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007806:	e009      	b.n	800781c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007808:	f7fd fdfe 	bl	8005408 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007816:	d901      	bls.n	800781c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e01f      	b.n	800785c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800781c:	4b13      	ldr	r3, [pc, #76]	; (800786c <HAL_PWREx_EnableOverDrive+0x98>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007828:	d1ee      	bne.n	8007808 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800782a:	4b11      	ldr	r3, [pc, #68]	; (8007870 <HAL_PWREx_EnableOverDrive+0x9c>)
 800782c:	2201      	movs	r2, #1
 800782e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007830:	f7fd fdea 	bl	8005408 <HAL_GetTick>
 8007834:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007836:	e009      	b.n	800784c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007838:	f7fd fde6 	bl	8005408 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007846:	d901      	bls.n	800784c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e007      	b.n	800785c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800784c:	4b07      	ldr	r3, [pc, #28]	; (800786c <HAL_PWREx_EnableOverDrive+0x98>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007858:	d1ee      	bne.n	8007838 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40023800 	.word	0x40023800
 8007868:	420e0040 	.word	0x420e0040
 800786c:	40007000 	.word	0x40007000
 8007870:	420e0044 	.word	0x420e0044

08007874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e18c      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCC_ClockConfig+0x24>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b0f      	cmp	r3, #15
 8007896:	d904      	bls.n	80078a2 <HAL_RCC_ClockConfig+0x2e>
 8007898:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800789c:	4887      	ldr	r0, [pc, #540]	; (8007abc <HAL_RCC_ClockConfig+0x248>)
 800789e:	f7fc ffe8 	bl	8004872 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d031      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d02e      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d02b      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d028      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d025      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d022      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	d01f      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b07      	cmp	r3, #7
 80078d0:	d01c      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d019      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b09      	cmp	r3, #9
 80078dc:	d016      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b0a      	cmp	r3, #10
 80078e2:	d013      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b0b      	cmp	r3, #11
 80078e8:	d010      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b0c      	cmp	r3, #12
 80078ee:	d00d      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b0d      	cmp	r3, #13
 80078f4:	d00a      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b0e      	cmp	r3, #14
 80078fa:	d007      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	d004      	beq.n	800790c <HAL_RCC_ClockConfig+0x98>
 8007902:	f240 215d 	movw	r1, #605	; 0x25d
 8007906:	486d      	ldr	r0, [pc, #436]	; (8007abc <HAL_RCC_ClockConfig+0x248>)
 8007908:	f7fc ffb3 	bl	8004872 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800790c:	4b6c      	ldr	r3, [pc, #432]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d90c      	bls.n	8007934 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791a:	4b69      	ldr	r3, [pc, #420]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007922:	4b67      	ldr	r3, [pc, #412]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d001      	beq.n	8007934 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e136      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d049      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800794c:	4b5d      	ldr	r3, [pc, #372]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	4a5c      	ldr	r2, [pc, #368]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007964:	4b57      	ldr	r3, [pc, #348]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	4a56      	ldr	r2, [pc, #344]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 800796a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800796e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d024      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d020      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b90      	cmp	r3, #144	; 0x90
 8007986:	d01c      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2ba0      	cmp	r3, #160	; 0xa0
 800798e:	d018      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2bb0      	cmp	r3, #176	; 0xb0
 8007996:	d014      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2bc0      	cmp	r3, #192	; 0xc0
 800799e:	d010      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2bd0      	cmp	r3, #208	; 0xd0
 80079a6:	d00c      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2be0      	cmp	r3, #224	; 0xe0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2bf0      	cmp	r3, #240	; 0xf0
 80079b6:	d004      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x14e>
 80079b8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80079bc:	483f      	ldr	r0, [pc, #252]	; (8007abc <HAL_RCC_ClockConfig+0x248>)
 80079be:	f7fc ff58 	bl	8004872 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	493d      	ldr	r1, [pc, #244]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d059      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x196>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d00c      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x196>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d008      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x196>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d004      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x196>
 8007a00:	f240 2187 	movw	r1, #647	; 0x287
 8007a04:	482d      	ldr	r0, [pc, #180]	; (8007abc <HAL_RCC_ClockConfig+0x248>)
 8007a06:	f7fc ff34 	bl	8004872 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d107      	bne.n	8007a22 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d119      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e0bf      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d003      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d107      	bne.n	8007a42 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a32:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e0af      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a42:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e0a7      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f023 0203 	bic.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	4919      	ldr	r1, [pc, #100]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a64:	f7fd fcd0 	bl	8005408 <HAL_GetTick>
 8007a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6a:	e00a      	b.n	8007a82 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a6c:	f7fd fccc 	bl	8005408 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e08f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <HAL_RCC_ClockConfig+0x250>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 020c 	and.w	r2, r3, #12
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d1eb      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d212      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <HAL_RCC_ClockConfig+0x24c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d007      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e072      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x32e>
 8007abc:	080120e4 	.word	0x080120e4
 8007ac0:	40023c00 	.word	0x40023c00
 8007ac4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d025      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d018      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x29a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae4:	d013      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x29a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007aee:	d00e      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x29a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007af8:	d009      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x29a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007b02:	d004      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x29a>
 8007b04:	f240 21c5 	movw	r1, #709	; 0x2c5
 8007b08:	4828      	ldr	r0, [pc, #160]	; (8007bac <HAL_RCC_ClockConfig+0x338>)
 8007b0a:	f7fc feb2 	bl	8004872 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b0e:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <HAL_RCC_ClockConfig+0x33c>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	4925      	ldr	r1, [pc, #148]	; (8007bb0 <HAL_RCC_ClockConfig+0x33c>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d026      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d018      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x2f2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3c:	d013      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x2f2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b46:	d00e      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x2f2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007b50:	d009      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x2f2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007b5a:	d004      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x2f2>
 8007b5c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8007b60:	4812      	ldr	r0, [pc, #72]	; (8007bac <HAL_RCC_ClockConfig+0x338>)
 8007b62:	f7fc fe86 	bl	8004872 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <HAL_RCC_ClockConfig+0x33c>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	490e      	ldr	r1, [pc, #56]	; (8007bb0 <HAL_RCC_ClockConfig+0x33c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b7a:	f000 f855 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <HAL_RCC_ClockConfig+0x33c>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <HAL_RCC_ClockConfig+0x340>)
 8007b8c:	5ccb      	ldrb	r3, [r1, r3]
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <HAL_RCC_ClockConfig+0x344>)
 8007b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b96:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <HAL_RCC_ClockConfig+0x348>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fbf0 	bl	8005380 <HAL_InitTick>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	080120e4 	.word	0x080120e4
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	0801229c 	.word	0x0801229c
 8007bb8:	20000190 	.word	0x20000190
 8007bbc:	20000194 	.word	0x20000194

08007bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bc4:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000190 	.word	0x20000190

08007bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bdc:	f7ff fff0 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0a9b      	lsrs	r3, r3, #10
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	4903      	ldr	r1, [pc, #12]	; (8007bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bee:	5ccb      	ldrb	r3, [r1, r3]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	080122ac 	.word	0x080122ac

08007c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c04:	f7ff ffdc 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	0b5b      	lsrs	r3, r3, #13
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	4903      	ldr	r1, [pc, #12]	; (8007c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c16:	5ccb      	ldrb	r3, [r1, r3]
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40023800 	.word	0x40023800
 8007c24:	080122ac 	.word	0x080122ac

08007c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c44:	4bce      	ldr	r3, [pc, #824]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b0c      	cmp	r3, #12
 8007c4e:	f200 818d 	bhi.w	8007f6c <HAL_RCC_GetSysClockFreq+0x344>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <HAL_RCC_GetSysClockFreq+0x30>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007f6d 	.word	0x08007f6d
 8007c60:	08007f6d 	.word	0x08007f6d
 8007c64:	08007f6d 	.word	0x08007f6d
 8007c68:	08007c93 	.word	0x08007c93
 8007c6c:	08007f6d 	.word	0x08007f6d
 8007c70:	08007f6d 	.word	0x08007f6d
 8007c74:	08007f6d 	.word	0x08007f6d
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007f6d 	.word	0x08007f6d
 8007c80:	08007f6d 	.word	0x08007f6d
 8007c84:	08007f6d 	.word	0x08007f6d
 8007c88:	08007e0d 	.word	0x08007e0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c8c:	4bbd      	ldr	r3, [pc, #756]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007c8e:	61bb      	str	r3, [r7, #24]
       break;
 8007c90:	e16f      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c92:	4bbd      	ldr	r3, [pc, #756]	; (8007f88 <HAL_RCC_GetSysClockFreq+0x360>)
 8007c94:	61bb      	str	r3, [r7, #24]
      break;
 8007c96:	e16c      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c98:	4bb9      	ldr	r3, [pc, #740]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ca0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ca2:	4bb7      	ldr	r3, [pc, #732]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d053      	beq.n	8007d56 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cae:	4bb4      	ldr	r3, [pc, #720]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	099b      	lsrs	r3, r3, #6
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	ea02 0400 	and.w	r4, r2, r0
 8007cc6:	603c      	str	r4, [r7, #0]
 8007cc8:	400b      	ands	r3, r1
 8007cca:	607b      	str	r3, [r7, #4]
 8007ccc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	014b      	lsls	r3, r1, #5
 8007cde:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ce2:	0142      	lsls	r2, r0, #5
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4623      	mov	r3, r4
 8007cea:	1ac0      	subs	r0, r0, r3
 8007cec:	462b      	mov	r3, r5
 8007cee:	eb61 0103 	sbc.w	r1, r1, r3
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	018b      	lsls	r3, r1, #6
 8007cfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d00:	0182      	lsls	r2, r0, #6
 8007d02:	1a12      	subs	r2, r2, r0
 8007d04:	eb63 0301 	sbc.w	r3, r3, r1
 8007d08:	f04f 0000 	mov.w	r0, #0
 8007d0c:	f04f 0100 	mov.w	r1, #0
 8007d10:	00d9      	lsls	r1, r3, #3
 8007d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d16:	00d0      	lsls	r0, r2, #3
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	1852      	adds	r2, r2, r1
 8007d20:	4629      	mov	r1, r5
 8007d22:	eb43 0101 	adc.w	r1, r3, r1
 8007d26:	460b      	mov	r3, r1
 8007d28:	f04f 0000 	mov.w	r0, #0
 8007d2c:	f04f 0100 	mov.w	r1, #0
 8007d30:	0259      	lsls	r1, r3, #9
 8007d32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d36:	0250      	lsls	r0, r2, #9
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	f7f8 ff24 	bl	8000b94 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4613      	mov	r3, r2
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	e04c      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d56:	4b8a      	ldr	r3, [pc, #552]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	099b      	lsrs	r3, r3, #6
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	ea02 0a00 	and.w	sl, r2, r0
 8007d6e:	ea03 0b01 	and.w	fp, r3, r1
 8007d72:	4650      	mov	r0, sl
 8007d74:	4659      	mov	r1, fp
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	014b      	lsls	r3, r1, #5
 8007d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d84:	0142      	lsls	r2, r0, #5
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	ebb0 000a 	subs.w	r0, r0, sl
 8007d8e:	eb61 010b 	sbc.w	r1, r1, fp
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	018b      	lsls	r3, r1, #6
 8007d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007da0:	0182      	lsls	r2, r0, #6
 8007da2:	1a12      	subs	r2, r2, r0
 8007da4:	eb63 0301 	sbc.w	r3, r3, r1
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	f04f 0100 	mov.w	r1, #0
 8007db0:	00d9      	lsls	r1, r3, #3
 8007db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007db6:	00d0      	lsls	r0, r2, #3
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	eb12 020a 	adds.w	r2, r2, sl
 8007dc0:	eb43 030b 	adc.w	r3, r3, fp
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	0299      	lsls	r1, r3, #10
 8007dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dd2:	0290      	lsls	r0, r2, #10
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	f7f8 fed6 	bl	8000b94 <__aeabi_uldivmod>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4613      	mov	r3, r2
 8007dee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007df0:	4b63      	ldr	r3, [pc, #396]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e08:	61bb      	str	r3, [r7, #24]
      break;
 8007e0a:	e0b2      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e0c:	4b5c      	ldr	r3, [pc, #368]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e14:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e16:	4b5a      	ldr	r3, [pc, #360]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d04d      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e22:	4b57      	ldr	r3, [pc, #348]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e32:	f04f 0100 	mov.w	r1, #0
 8007e36:	ea02 0800 	and.w	r8, r2, r0
 8007e3a:	ea03 0901 	and.w	r9, r3, r1
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f04f 0200 	mov.w	r2, #0
 8007e46:	f04f 0300 	mov.w	r3, #0
 8007e4a:	014b      	lsls	r3, r1, #5
 8007e4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e50:	0142      	lsls	r2, r0, #5
 8007e52:	4610      	mov	r0, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	ebb0 0008 	subs.w	r0, r0, r8
 8007e5a:	eb61 0109 	sbc.w	r1, r1, r9
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	018b      	lsls	r3, r1, #6
 8007e68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e6c:	0182      	lsls	r2, r0, #6
 8007e6e:	1a12      	subs	r2, r2, r0
 8007e70:	eb63 0301 	sbc.w	r3, r3, r1
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f04f 0100 	mov.w	r1, #0
 8007e7c:	00d9      	lsls	r1, r3, #3
 8007e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e82:	00d0      	lsls	r0, r2, #3
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	eb12 0208 	adds.w	r2, r2, r8
 8007e8c:	eb43 0309 	adc.w	r3, r3, r9
 8007e90:	f04f 0000 	mov.w	r0, #0
 8007e94:	f04f 0100 	mov.w	r1, #0
 8007e98:	0259      	lsls	r1, r3, #9
 8007e9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007e9e:	0250      	lsls	r0, r2, #9
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	f7f8 fe70 	bl	8000b94 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e04a      	b.n	8007f54 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b30      	ldr	r3, [pc, #192]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ece:	f04f 0100 	mov.w	r1, #0
 8007ed2:	ea02 0400 	and.w	r4, r2, r0
 8007ed6:	ea03 0501 	and.w	r5, r3, r1
 8007eda:	4620      	mov	r0, r4
 8007edc:	4629      	mov	r1, r5
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	014b      	lsls	r3, r1, #5
 8007ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007eec:	0142      	lsls	r2, r0, #5
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	1b00      	subs	r0, r0, r4
 8007ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	018b      	lsls	r3, r1, #6
 8007f02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f06:	0182      	lsls	r2, r0, #6
 8007f08:	1a12      	subs	r2, r2, r0
 8007f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f0e:	f04f 0000 	mov.w	r0, #0
 8007f12:	f04f 0100 	mov.w	r1, #0
 8007f16:	00d9      	lsls	r1, r3, #3
 8007f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f1c:	00d0      	lsls	r0, r2, #3
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	1912      	adds	r2, r2, r4
 8007f24:	eb45 0303 	adc.w	r3, r5, r3
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	0299      	lsls	r1, r3, #10
 8007f32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f36:	0290      	lsls	r0, r2, #10
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	f7f8 fe24 	bl	8000b94 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4613      	mov	r3, r2
 8007f52:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	0f1b      	lsrs	r3, r3, #28
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	61bb      	str	r3, [r7, #24]
      break;
 8007f6a:	e002      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007f6e:	61bb      	str	r3, [r7, #24]
      break;
 8007f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f72:	69bb      	ldr	r3, [r7, #24]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3720      	adds	r7, #32
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f7e:	bf00      	nop
 8007f80:	40023800 	.word	0x40023800
 8007f84:	00f42400 	.word	0x00f42400
 8007f88:	007a1200 	.word	0x007a1200

08007f8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e34b      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b0f      	cmp	r3, #15
 8007fa4:	d904      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x24>
 8007fa6:	f640 5112 	movw	r1, #3346	; 0xd12
 8007faa:	48a5      	ldr	r0, [pc, #660]	; (8008240 <HAL_RCC_OscConfig+0x2b4>)
 8007fac:	f7fc fc61 	bl	8004872 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8096 	beq.w	80080ea <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00e      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x58>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fce:	d009      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x58>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fd8:	d004      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x58>
 8007fda:	f640 5117 	movw	r1, #3351	; 0xd17
 8007fde:	4898      	ldr	r0, [pc, #608]	; (8008240 <HAL_RCC_OscConfig+0x2b4>)
 8007fe0:	f7fc fc47 	bl	8004872 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007fe4:	4b97      	ldr	r3, [pc, #604]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f003 030c 	and.w	r3, r3, #12
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d019      	beq.n	8008024 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ff0:	4b94      	ldr	r3, [pc, #592]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d106      	bne.n	800800a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ffc:	4b91      	ldr	r3, [pc, #580]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008008:	d00c      	beq.n	8008024 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800800a:	4b8e      	ldr	r3, [pc, #568]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008012:	2b0c      	cmp	r3, #12
 8008014:	d112      	bne.n	800803c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008016:	4b8b      	ldr	r3, [pc, #556]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008022:	d10b      	bne.n	800803c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008024:	4b87      	ldr	r3, [pc, #540]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05b      	beq.n	80080e8 <HAL_RCC_OscConfig+0x15c>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d157      	bne.n	80080e8 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e2fc      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008044:	d106      	bne.n	8008054 <HAL_RCC_OscConfig+0xc8>
 8008046:	4b7f      	ldr	r3, [pc, #508]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a7e      	ldr	r2, [pc, #504]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800804c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	e01d      	b.n	8008090 <HAL_RCC_OscConfig+0x104>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800805c:	d10c      	bne.n	8008078 <HAL_RCC_OscConfig+0xec>
 800805e:	4b79      	ldr	r3, [pc, #484]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a78      	ldr	r2, [pc, #480]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	4b76      	ldr	r3, [pc, #472]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a75      	ldr	r2, [pc, #468]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	e00b      	b.n	8008090 <HAL_RCC_OscConfig+0x104>
 8008078:	4b72      	ldr	r3, [pc, #456]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a71      	ldr	r2, [pc, #452]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800807e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	4b6f      	ldr	r3, [pc, #444]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a6e      	ldr	r2, [pc, #440]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800808a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800808e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d013      	beq.n	80080c0 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008098:	f7fd f9b6 	bl	8005408 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080a0:	f7fd f9b2 	bl	8005408 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	; 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e2c1      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b2:	4b64      	ldr	r3, [pc, #400]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCC_OscConfig+0x114>
 80080be:	e014      	b.n	80080ea <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fd f9a2 	bl	8005408 <HAL_GetTick>
 80080c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080c8:	f7fd f99e 	bl	8005408 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b64      	cmp	r3, #100	; 0x64
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e2ad      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080da:	4b5a      	ldr	r3, [pc, #360]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f0      	bne.n	80080c8 <HAL_RCC_OscConfig+0x13c>
 80080e6:	e000      	b.n	80080ea <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8086 	beq.w	8008204 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCC_OscConfig+0x186>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d004      	beq.n	8008112 <HAL_RCC_OscConfig+0x186>
 8008108:	f640 514f 	movw	r1, #3407	; 0xd4f
 800810c:	484c      	ldr	r0, [pc, #304]	; (8008240 <HAL_RCC_OscConfig+0x2b4>)
 800810e:	f7fc fbb0 	bl	8004872 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b1f      	cmp	r3, #31
 8008118:	d904      	bls.n	8008124 <HAL_RCC_OscConfig+0x198>
 800811a:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 800811e:	4848      	ldr	r0, [pc, #288]	; (8008240 <HAL_RCC_OscConfig+0x2b4>)
 8008120:	f7fc fba7 	bl	8004872 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008124:	4b47      	ldr	r3, [pc, #284]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 030c 	and.w	r3, r3, #12
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008130:	4b44      	ldr	r3, [pc, #272]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008138:	2b08      	cmp	r3, #8
 800813a:	d105      	bne.n	8008148 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800813c:	4b41      	ldr	r3, [pc, #260]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008148:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008150:	2b0c      	cmp	r3, #12
 8008152:	d11c      	bne.n	800818e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008154:	4b3b      	ldr	r3, [pc, #236]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d116      	bne.n	800818e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008160:	4b38      	ldr	r3, [pc, #224]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_RCC_OscConfig+0x1ec>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d001      	beq.n	8008178 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e25e      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008178:	4b32      	ldr	r3, [pc, #200]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	492f      	ldr	r1, [pc, #188]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 8008188:	4313      	orrs	r3, r2
 800818a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800818c:	e03a      	b.n	8008204 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008196:	4b2c      	ldr	r3, [pc, #176]	; (8008248 <HAL_RCC_OscConfig+0x2bc>)
 8008198:	2201      	movs	r2, #1
 800819a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819c:	f7fd f934 	bl	8005408 <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a4:	f7fd f930 	bl	8005408 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e23f      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081b6:	4b23      	ldr	r3, [pc, #140]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c2:	4b20      	ldr	r3, [pc, #128]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	491c      	ldr	r1, [pc, #112]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
 80081d6:	e015      	b.n	8008204 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081d8:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <HAL_RCC_OscConfig+0x2bc>)
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081de:	f7fd f913 	bl	8005408 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081e6:	f7fd f90f 	bl	8005408 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e21e      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <HAL_RCC_OscConfig+0x2b8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f0      	bne.n	80081e6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d045      	beq.n	800829c <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_RCC_OscConfig+0x29e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d004      	beq.n	800822a <HAL_RCC_OscConfig+0x29e>
 8008220:	f640 5196 	movw	r1, #3478	; 0xd96
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <HAL_RCC_OscConfig+0x2b4>)
 8008226:	f7fc fb24 	bl	8004872 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01e      	beq.n	8008270 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <HAL_RCC_OscConfig+0x2c0>)
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008238:	f7fd f8e6 	bl	8005408 <HAL_GetTick>
 800823c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800823e:	e010      	b.n	8008262 <HAL_RCC_OscConfig+0x2d6>
 8008240:	0801211c 	.word	0x0801211c
 8008244:	40023800 	.word	0x40023800
 8008248:	42470000 	.word	0x42470000
 800824c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008250:	f7fd f8da 	bl	8005408 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e1e9      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008262:	4ba4      	ldr	r3, [pc, #656]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f0      	beq.n	8008250 <HAL_RCC_OscConfig+0x2c4>
 800826e:	e015      	b.n	800829c <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008270:	4ba1      	ldr	r3, [pc, #644]	; (80084f8 <HAL_RCC_OscConfig+0x56c>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008276:	f7fd f8c7 	bl	8005408 <HAL_GetTick>
 800827a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800827c:	e008      	b.n	8008290 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800827e:	f7fd f8c3 	bl	8005408 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d901      	bls.n	8008290 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e1d2      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008290:	4b98      	ldr	r3, [pc, #608]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f0      	bne.n	800827e <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 80a8 	beq.w	80083fa <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00c      	beq.n	80082d0 <HAL_RCC_OscConfig+0x344>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d008      	beq.n	80082d0 <HAL_RCC_OscConfig+0x344>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d004      	beq.n	80082d0 <HAL_RCC_OscConfig+0x344>
 80082c6:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80082ca:	488c      	ldr	r0, [pc, #560]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 80082cc:	f7fc fad1 	bl	8004872 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082d0:	4b88      	ldr	r3, [pc, #544]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10f      	bne.n	80082fc <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082dc:	2300      	movs	r3, #0
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	4b84      	ldr	r3, [pc, #528]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	4a83      	ldr	r2, [pc, #524]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80082e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ea:	6413      	str	r3, [r2, #64]	; 0x40
 80082ec:	4b81      	ldr	r3, [pc, #516]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f4:	60bb      	str	r3, [r7, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fc:	4b80      	ldr	r3, [pc, #512]	; (8008500 <HAL_RCC_OscConfig+0x574>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d118      	bne.n	800833a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008308:	4b7d      	ldr	r3, [pc, #500]	; (8008500 <HAL_RCC_OscConfig+0x574>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a7c      	ldr	r2, [pc, #496]	; (8008500 <HAL_RCC_OscConfig+0x574>)
 800830e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008314:	f7fd f878 	bl	8005408 <HAL_GetTick>
 8008318:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831a:	e008      	b.n	800832e <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800831c:	f7fd f874 	bl	8005408 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d901      	bls.n	800832e <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e183      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832e:	4b74      	ldr	r3, [pc, #464]	; (8008500 <HAL_RCC_OscConfig+0x574>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f0      	beq.n	800831c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d106      	bne.n	8008350 <HAL_RCC_OscConfig+0x3c4>
 8008342:	4b6c      	ldr	r3, [pc, #432]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	4a6b      	ldr	r2, [pc, #428]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6713      	str	r3, [r2, #112]	; 0x70
 800834e:	e01c      	b.n	800838a <HAL_RCC_OscConfig+0x3fe>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	2b05      	cmp	r3, #5
 8008356:	d10c      	bne.n	8008372 <HAL_RCC_OscConfig+0x3e6>
 8008358:	4b66      	ldr	r3, [pc, #408]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 800835a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835c:	4a65      	ldr	r2, [pc, #404]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 800835e:	f043 0304 	orr.w	r3, r3, #4
 8008362:	6713      	str	r3, [r2, #112]	; 0x70
 8008364:	4b63      	ldr	r3, [pc, #396]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008368:	4a62      	ldr	r2, [pc, #392]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	6713      	str	r3, [r2, #112]	; 0x70
 8008370:	e00b      	b.n	800838a <HAL_RCC_OscConfig+0x3fe>
 8008372:	4b60      	ldr	r3, [pc, #384]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	4a5f      	ldr	r2, [pc, #380]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008378:	f023 0301 	bic.w	r3, r3, #1
 800837c:	6713      	str	r3, [r2, #112]	; 0x70
 800837e:	4b5d      	ldr	r3, [pc, #372]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	4a5c      	ldr	r2, [pc, #368]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008384:	f023 0304 	bic.w	r3, r3, #4
 8008388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d015      	beq.n	80083be <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008392:	f7fd f839 	bl	8005408 <HAL_GetTick>
 8008396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008398:	e00a      	b.n	80083b0 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839a:	f7fd f835 	bl	8005408 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e142      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b0:	4b50      	ldr	r3, [pc, #320]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0ee      	beq.n	800839a <HAL_RCC_OscConfig+0x40e>
 80083bc:	e014      	b.n	80083e8 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083be:	f7fd f823 	bl	8005408 <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083c4:	e00a      	b.n	80083dc <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c6:	f7fd f81f 	bl	8005408 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e12c      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083dc:	4b45      	ldr	r3, [pc, #276]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80083de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1ee      	bne.n	80083c6 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d105      	bne.n	80083fa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ee:	4b41      	ldr	r3, [pc, #260]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	4a40      	ldr	r2, [pc, #256]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 80083f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00c      	beq.n	800841c <HAL_RCC_OscConfig+0x490>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d008      	beq.n	800841c <HAL_RCC_OscConfig+0x490>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d004      	beq.n	800841c <HAL_RCC_OscConfig+0x490>
 8008412:	f640 6105 	movw	r1, #3589	; 0xe05
 8008416:	4839      	ldr	r0, [pc, #228]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 8008418:	f7fc fa2b 	bl	8004872 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8107 	beq.w	8008634 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008426:	4b33      	ldr	r3, [pc, #204]	; (80084f4 <HAL_RCC_OscConfig+0x568>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
 800842e:	2b08      	cmp	r3, #8
 8008430:	f000 80c0 	beq.w	80085b4 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b02      	cmp	r3, #2
 800843a:	f040 80a4 	bne.w	8008586 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <HAL_RCC_OscConfig+0x4ce>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800844e:	d004      	beq.n	800845a <HAL_RCC_OscConfig+0x4ce>
 8008450:	f640 610e 	movw	r1, #3598	; 0xe0e
 8008454:	4829      	ldr	r0, [pc, #164]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 8008456:	f7fc fa0c 	bl	8004872 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	2b3f      	cmp	r3, #63	; 0x3f
 8008460:	d904      	bls.n	800846c <HAL_RCC_OscConfig+0x4e0>
 8008462:	f640 610f 	movw	r1, #3599	; 0xe0f
 8008466:	4825      	ldr	r0, [pc, #148]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 8008468:	f7fc fa03 	bl	8004872 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b31      	cmp	r3, #49	; 0x31
 8008472:	d904      	bls.n	800847e <HAL_RCC_OscConfig+0x4f2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800847c:	d904      	bls.n	8008488 <HAL_RCC_OscConfig+0x4fc>
 800847e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008482:	481e      	ldr	r0, [pc, #120]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 8008484:	f7fc f9f5 	bl	8004872 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	2b02      	cmp	r3, #2
 800848e:	d010      	beq.n	80084b2 <HAL_RCC_OscConfig+0x526>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	2b04      	cmp	r3, #4
 8008496:	d00c      	beq.n	80084b2 <HAL_RCC_OscConfig+0x526>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	2b06      	cmp	r3, #6
 800849e:	d008      	beq.n	80084b2 <HAL_RCC_OscConfig+0x526>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d004      	beq.n	80084b2 <HAL_RCC_OscConfig+0x526>
 80084a8:	f640 6111 	movw	r1, #3601	; 0xe11
 80084ac:	4813      	ldr	r0, [pc, #76]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 80084ae:	f7fc f9e0 	bl	8004872 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d903      	bls.n	80084c2 <HAL_RCC_OscConfig+0x536>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	d904      	bls.n	80084cc <HAL_RCC_OscConfig+0x540>
 80084c2:	f640 6112 	movw	r1, #3602	; 0xe12
 80084c6:	480d      	ldr	r0, [pc, #52]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 80084c8:	f7fc f9d3 	bl	8004872 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d903      	bls.n	80084dc <HAL_RCC_OscConfig+0x550>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d904      	bls.n	80084e6 <HAL_RCC_OscConfig+0x55a>
 80084dc:	f640 6113 	movw	r1, #3603	; 0xe13
 80084e0:	4806      	ldr	r0, [pc, #24]	; (80084fc <HAL_RCC_OscConfig+0x570>)
 80084e2:	f7fc f9c6 	bl	8004872 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <HAL_RCC_OscConfig+0x578>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fc ff8c 	bl	8005408 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f2:	e012      	b.n	800851a <HAL_RCC_OscConfig+0x58e>
 80084f4:	40023800 	.word	0x40023800
 80084f8:	42470e80 	.word	0x42470e80
 80084fc:	0801211c 	.word	0x0801211c
 8008500:	40007000 	.word	0x40007000
 8008504:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008508:	f7fc ff7e 	bl	8005408 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e08d      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800851a:	4b49      	ldr	r3, [pc, #292]	; (8008640 <HAL_RCC_OscConfig+0x6b4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f0      	bne.n	8008508 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69da      	ldr	r2, [r3, #28]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	019b      	lsls	r3, r3, #6
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	3b01      	subs	r3, #1
 8008540:	041b      	lsls	r3, r3, #16
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	061b      	lsls	r3, r3, #24
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	071b      	lsls	r3, r3, #28
 8008552:	493b      	ldr	r1, [pc, #236]	; (8008640 <HAL_RCC_OscConfig+0x6b4>)
 8008554:	4313      	orrs	r3, r2
 8008556:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008558:	4b3a      	ldr	r3, [pc, #232]	; (8008644 <HAL_RCC_OscConfig+0x6b8>)
 800855a:	2201      	movs	r2, #1
 800855c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855e:	f7fc ff53 	bl	8005408 <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008566:	f7fc ff4f 	bl	8005408 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e05e      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008578:	4b31      	ldr	r3, [pc, #196]	; (8008640 <HAL_RCC_OscConfig+0x6b4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x5da>
 8008584:	e056      	b.n	8008634 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b2f      	ldr	r3, [pc, #188]	; (8008644 <HAL_RCC_OscConfig+0x6b8>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fc ff3c 	bl	8005408 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008594:	f7fc ff38 	bl	8005408 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e047      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a6:	4b26      	ldr	r3, [pc, #152]	; (8008640 <HAL_RCC_OscConfig+0x6b4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x608>
 80085b2:	e03f      	b.n	8008634 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e03a      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085c0:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <HAL_RCC_OscConfig+0x6b4>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d030      	beq.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085d8:	429a      	cmp	r2, r3
 80085da:	d129      	bne.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d122      	bne.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085f0:	4013      	ands	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d119      	bne.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	3b01      	subs	r3, #1
 800860a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800860c:	429a      	cmp	r2, r3
 800860e:	d10f      	bne.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800861c:	429a      	cmp	r2, r3
 800861e:	d107      	bne.n	8008630 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800862c:	429a      	cmp	r2, r3
 800862e:	d001      	beq.n	8008634 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40023800 	.word	0x40023800
 8008644:	42470060 	.word	0x42470060

08008648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e184      	b.n	8008964 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a72      	ldr	r2, [pc, #456]	; (8008828 <HAL_SPI_Init+0x1e0>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d013      	beq.n	800868c <HAL_SPI_Init+0x44>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a70      	ldr	r2, [pc, #448]	; (800882c <HAL_SPI_Init+0x1e4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00e      	beq.n	800868c <HAL_SPI_Init+0x44>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6f      	ldr	r2, [pc, #444]	; (8008830 <HAL_SPI_Init+0x1e8>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d009      	beq.n	800868c <HAL_SPI_Init+0x44>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a6d      	ldr	r2, [pc, #436]	; (8008834 <HAL_SPI_Init+0x1ec>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d004      	beq.n	800868c <HAL_SPI_Init+0x44>
 8008682:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008686:	486c      	ldr	r0, [pc, #432]	; (8008838 <HAL_SPI_Init+0x1f0>)
 8008688:	f7fc f8f3 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <HAL_SPI_Init+0x60>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800869c:	d004      	beq.n	80086a8 <HAL_SPI_Init+0x60>
 800869e:	f240 1143 	movw	r1, #323	; 0x143
 80086a2:	4865      	ldr	r0, [pc, #404]	; (8008838 <HAL_SPI_Init+0x1f0>)
 80086a4:	f7fc f8e5 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <HAL_SPI_Init+0x86>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b8:	d009      	beq.n	80086ce <HAL_SPI_Init+0x86>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c2:	d004      	beq.n	80086ce <HAL_SPI_Init+0x86>
 80086c4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80086c8:	485b      	ldr	r0, [pc, #364]	; (8008838 <HAL_SPI_Init+0x1f0>)
 80086ca:	f7fc f8d2 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d6:	d008      	beq.n	80086ea <HAL_SPI_Init+0xa2>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <HAL_SPI_Init+0xa2>
 80086e0:	f240 1145 	movw	r1, #325	; 0x145
 80086e4:	4854      	ldr	r0, [pc, #336]	; (8008838 <HAL_SPI_Init+0x1f0>)
 80086e6:	f7fc f8c4 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f2:	d00d      	beq.n	8008710 <HAL_SPI_Init+0xc8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_SPI_Init+0xc8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008704:	d004      	beq.n	8008710 <HAL_SPI_Init+0xc8>
 8008706:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800870a:	484b      	ldr	r0, [pc, #300]	; (8008838 <HAL_SPI_Init+0x1f0>)
 800870c:	f7fc f8b1 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d020      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	2b08      	cmp	r3, #8
 800871e:	d01c      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	2b10      	cmp	r3, #16
 8008726:	d018      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	2b18      	cmp	r3, #24
 800872e:	d014      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	2b20      	cmp	r3, #32
 8008736:	d010      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	2b28      	cmp	r3, #40	; 0x28
 800873e:	d00c      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	2b30      	cmp	r3, #48	; 0x30
 8008746:	d008      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	2b38      	cmp	r3, #56	; 0x38
 800874e:	d004      	beq.n	800875a <HAL_SPI_Init+0x112>
 8008750:	f240 1147 	movw	r1, #327	; 0x147
 8008754:	4838      	ldr	r0, [pc, #224]	; (8008838 <HAL_SPI_Init+0x1f0>)
 8008756:	f7fc f88c 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_SPI_Init+0x12c>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	2b80      	cmp	r3, #128	; 0x80
 8008768:	d004      	beq.n	8008774 <HAL_SPI_Init+0x12c>
 800876a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800876e:	4832      	ldr	r0, [pc, #200]	; (8008838 <HAL_SPI_Init+0x1f0>)
 8008770:	f7fc f87f 	bl	8004872 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_SPI_Init+0x146>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b10      	cmp	r3, #16
 8008782:	d004      	beq.n	800878e <HAL_SPI_Init+0x146>
 8008784:	f240 1149 	movw	r1, #329	; 0x149
 8008788:	482b      	ldr	r0, [pc, #172]	; (8008838 <HAL_SPI_Init+0x1f0>)
 800878a:	f7fc f872 	bl	8004872 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d152      	bne.n	800883c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d008      	beq.n	80087b0 <HAL_SPI_Init+0x168>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d004      	beq.n	80087b0 <HAL_SPI_Init+0x168>
 80087a6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80087aa:	4823      	ldr	r0, [pc, #140]	; (8008838 <HAL_SPI_Init+0x1f0>)
 80087ac:	f7fc f861 	bl	8004872 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d008      	beq.n	80087ca <HAL_SPI_Init+0x182>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d004      	beq.n	80087ca <HAL_SPI_Init+0x182>
 80087c0:	f240 114d 	movw	r1, #333	; 0x14d
 80087c4:	481c      	ldr	r0, [pc, #112]	; (8008838 <HAL_SPI_Init+0x1f0>)
 80087c6:	f7fc f854 	bl	8004872 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087d2:	d125      	bne.n	8008820 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d05a      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d056      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d052      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	d04e      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d04a      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b28      	cmp	r3, #40	; 0x28
 8008802:	d046      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	2b30      	cmp	r3, #48	; 0x30
 800880a:	d042      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	2b38      	cmp	r3, #56	; 0x38
 8008812:	d03e      	beq.n	8008892 <HAL_SPI_Init+0x24a>
 8008814:	f240 1151 	movw	r1, #337	; 0x151
 8008818:	4807      	ldr	r0, [pc, #28]	; (8008838 <HAL_SPI_Init+0x1f0>)
 800881a:	f7fc f82a 	bl	8004872 <assert_failed>
 800881e:	e038      	b.n	8008892 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	61da      	str	r2, [r3, #28]
 8008826:	e034      	b.n	8008892 <HAL_SPI_Init+0x24a>
 8008828:	40013000 	.word	0x40013000
 800882c:	40003800 	.word	0x40003800
 8008830:	40003c00 	.word	0x40003c00
 8008834:	40013400 	.word	0x40013400
 8008838:	08012158 	.word	0x08012158
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d020      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	2b08      	cmp	r3, #8
 800884a:	d01c      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	2b10      	cmp	r3, #16
 8008852:	d018      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	2b18      	cmp	r3, #24
 800885a:	d014      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	2b20      	cmp	r3, #32
 8008862:	d010      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	2b28      	cmp	r3, #40	; 0x28
 800886a:	d00c      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	2b30      	cmp	r3, #48	; 0x30
 8008872:	d008      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	2b38      	cmp	r3, #56	; 0x38
 800887a:	d004      	beq.n	8008886 <HAL_SPI_Init+0x23e>
 800887c:	f240 115b 	movw	r1, #347	; 0x15b
 8008880:	483a      	ldr	r0, [pc, #232]	; (800896c <HAL_SPI_Init+0x324>)
 8008882:	f7fb fff6 	bl	8004872 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7fc f907 	bl	8004ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	ea42 0103 	orr.w	r1, r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	f003 0104 	and.w	r1, r3, #4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	f003 0210 	and.w	r2, r3, #16
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69da      	ldr	r2, [r3, #28]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008952:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	08012158 	.word	0x08012158

08008970 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_SPI_Transmit+0x30>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008994:	d004      	beq.n	80089a0 <HAL_SPI_Transmit+0x30>
 8008996:	f240 310a 	movw	r1, #778	; 0x30a
 800899a:	4893      	ldr	r0, [pc, #588]	; (8008be8 <HAL_SPI_Transmit+0x278>)
 800899c:	f7fb ff69 	bl	8004872 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_SPI_Transmit+0x3e>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e128      	b.n	8008c00 <HAL_SPI_Transmit+0x290>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089b6:	f7fc fd27 	bl	8005408 <HAL_GetTick>
 80089ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d002      	beq.n	80089d2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80089cc:	2302      	movs	r3, #2
 80089ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089d0:	e10d      	b.n	8008bee <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_SPI_Transmit+0x6e>
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089e2:	e104      	b.n	8008bee <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2203      	movs	r2, #3
 80089e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	88fa      	ldrh	r2, [r7, #6]
 8008a02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a2a:	d10f      	bne.n	8008a4c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a56:	2b40      	cmp	r3, #64	; 0x40
 8008a58:	d007      	beq.n	8008a6a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a72:	d14b      	bne.n	8008b0c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_SPI_Transmit+0x112>
 8008a7c:	8afb      	ldrh	r3, [r7, #22]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d13e      	bne.n	8008b00 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	881a      	ldrh	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	1c9a      	adds	r2, r3, #2
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008aa6:	e02b      	b.n	8008b00 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d112      	bne.n	8008adc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	881a      	ldrh	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	1c9a      	adds	r2, r3, #2
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ada:	e011      	b.n	8008b00 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008adc:	f7fc fc94 	bl	8005408 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d803      	bhi.n	8008af4 <HAL_SPI_Transmit+0x184>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Transmit+0x18a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008afe:	e076      	b.n	8008bee <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1ce      	bne.n	8008aa8 <HAL_SPI_Transmit+0x138>
 8008b0a:	e04c      	b.n	8008ba6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <HAL_SPI_Transmit+0x1aa>
 8008b14:	8afb      	ldrh	r3, [r7, #22]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d140      	bne.n	8008b9c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	7812      	ldrb	r2, [r2, #0]
 8008b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b40:	e02c      	b.n	8008b9c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d113      	bne.n	8008b78 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b76:	e011      	b.n	8008b9c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b78:	f7fc fc46 	bl	8005408 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d803      	bhi.n	8008b90 <HAL_SPI_Transmit+0x220>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d102      	bne.n	8008b96 <HAL_SPI_Transmit+0x226>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b9a:	e028      	b.n	8008bee <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1cd      	bne.n	8008b42 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fbda 	bl	8009364 <SPI_EndRxTxTransaction>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	613b      	str	r3, [r7, #16]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	613b      	str	r3, [r7, #16]
 8008bd8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e002      	b.n	8008bee <HAL_SPI_Transmit+0x27e>
 8008be8:	08012158 	.word	0x08012158
  }

error:
 8008bec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c24:	d112      	bne.n	8008c4c <HAL_SPI_Receive+0x44>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10e      	bne.n	8008c4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2204      	movs	r2, #4
 8008c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f8f2 	bl	8008e2c <HAL_SPI_TransmitReceive>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	e0ea      	b.n	8008e22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_SPI_Receive+0x52>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e0e3      	b.n	8008e22 <HAL_SPI_Receive+0x21a>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c62:	f7fc fbd1 	bl	8005408 <HAL_GetTick>
 8008c66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d002      	beq.n	8008c7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
 8008c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c78:	e0ca      	b.n	8008e10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <HAL_SPI_Receive+0x7e>
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c8a:	e0c1      	b.n	8008e10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	88fa      	ldrh	r2, [r7, #6]
 8008ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd2:	d10f      	bne.n	8008cf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d007      	beq.n	8008d12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d162      	bne.n	8008de0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008d1a:	e02e      	b.n	8008d7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d115      	bne.n	8008d56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f103 020c 	add.w	r2, r3, #12
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	b2d2      	uxtb	r2, r2
 8008d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d54:	e011      	b.n	8008d7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d56:	f7fc fb57 	bl	8005408 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d803      	bhi.n	8008d6e <HAL_SPI_Receive+0x166>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d102      	bne.n	8008d74 <HAL_SPI_Receive+0x16c>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d78:	e04a      	b.n	8008e10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1cb      	bne.n	8008d1c <HAL_SPI_Receive+0x114>
 8008d84:	e031      	b.n	8008dea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d113      	bne.n	8008dbc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	b292      	uxth	r2, r2
 8008da0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	1c9a      	adds	r2, r3, #2
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dba:	e011      	b.n	8008de0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dbc:	f7fc fb24 	bl	8005408 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d803      	bhi.n	8008dd4 <HAL_SPI_Receive+0x1cc>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	d102      	bne.n	8008dda <HAL_SPI_Receive+0x1d2>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008dde:	e017      	b.n	8008e10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1cd      	bne.n	8008d86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 fa52 	bl	8009298 <SPI_EndRxTransaction>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
 8008e0c:	e000      	b.n	8008e10 <HAL_SPI_Receive+0x208>
  }

error :
 8008e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08c      	sub	sp, #48	; 0x30
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <HAL_SPI_TransmitReceive+0x2a>
 8008e4c:	f240 417e 	movw	r1, #1150	; 0x47e
 8008e50:	4884      	ldr	r0, [pc, #528]	; (8009064 <HAL_SPI_TransmitReceive+0x238>)
 8008e52:	f7fb fd0e 	bl	8004872 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x38>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e18d      	b.n	8009180 <HAL_SPI_TransmitReceive+0x354>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e6c:	f7fc facc 	bl	8005408 <HAL_GetTick>
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008e82:	887b      	ldrh	r3, [r7, #2]
 8008e84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d00f      	beq.n	8008eae <HAL_SPI_TransmitReceive+0x82>
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e94:	d107      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d103      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x7a>
 8008e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d003      	beq.n	8008eae <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008eac:	e15e      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x94>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x94>
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ec6:	e151      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d003      	beq.n	8008edc <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	887a      	ldrh	r2, [r7, #2]
 8008eec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	887a      	ldrh	r2, [r7, #2]
 8008ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	887a      	ldrh	r2, [r7, #2]
 8008efe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	887a      	ldrh	r2, [r7, #2]
 8008f04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	d007      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f38:	d178      	bne.n	800902c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <HAL_SPI_TransmitReceive+0x11c>
 8008f42:	8b7b      	ldrh	r3, [r7, #26]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d166      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	881a      	ldrh	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	1c9a      	adds	r2, r3, #2
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6c:	e053      	b.n	8009016 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d11b      	bne.n	8008fb4 <HAL_SPI_TransmitReceive+0x188>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d016      	beq.n	8008fb4 <HAL_SPI_TransmitReceive+0x188>
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d113      	bne.n	8008fb4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	1c9a      	adds	r2, r3, #2
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d119      	bne.n	8008ff6 <HAL_SPI_TransmitReceive+0x1ca>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d014      	beq.n	8008ff6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	1c9a      	adds	r2, r3, #2
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ff6:	f7fc fa07 	bl	8005408 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009002:	429a      	cmp	r2, r3
 8009004:	d807      	bhi.n	8009016 <HAL_SPI_TransmitReceive+0x1ea>
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900c:	d003      	beq.n	8009016 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009014:	e0aa      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1a6      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x142>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009024:	b29b      	uxth	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1a1      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x142>
 800902a:	e07f      	b.n	800912c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_SPI_TransmitReceive+0x20e>
 8009034:	8b7b      	ldrh	r3, [r7, #26]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d16e      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	330c      	adds	r3, #12
 8009044:	7812      	ldrb	r2, [r2, #0]
 8009046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009060:	e05a      	b.n	8009118 <HAL_SPI_TransmitReceive+0x2ec>
 8009062:	bf00      	nop
 8009064:	08012158 	.word	0x08012158
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b02      	cmp	r3, #2
 8009074:	d11c      	bne.n	80090b0 <HAL_SPI_TransmitReceive+0x284>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d017      	beq.n	80090b0 <HAL_SPI_TransmitReceive+0x284>
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d114      	bne.n	80090b0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	330c      	adds	r3, #12
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d119      	bne.n	80090f2 <HAL_SPI_TransmitReceive+0x2c6>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d014      	beq.n	80090f2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090ee:	2301      	movs	r3, #1
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090f2:	f7fc f989 	bl	8005408 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090fe:	429a      	cmp	r2, r3
 8009100:	d803      	bhi.n	800910a <HAL_SPI_TransmitReceive+0x2de>
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009108:	d102      	bne.n	8009110 <HAL_SPI_TransmitReceive+0x2e4>
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009116:	e029      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1a2      	bne.n	8009068 <HAL_SPI_TransmitReceive+0x23c>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d19d      	bne.n	8009068 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f917 	bl	8009364 <SPI_EndRxTxTransaction>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d006      	beq.n	800914a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2220      	movs	r2, #32
 8009146:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009148:	e010      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10b      	bne.n	800916a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	e000      	b.n	800916c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800916a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800917c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009180:	4618      	mov	r0, r3
 8009182:	3730      	adds	r7, #48	; 0x30
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009198:	f7fc f936 	bl	8005408 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4413      	add	r3, r2
 80091a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091a8:	f7fc f92e 	bl	8005408 <HAL_GetTick>
 80091ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ae:	4b39      	ldr	r3, [pc, #228]	; (8009294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	015b      	lsls	r3, r3, #5
 80091b4:	0d1b      	lsrs	r3, r3, #20
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
 80091bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091be:	e054      	b.n	800926a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d050      	beq.n	800926a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091c8:	f7fc f91e 	bl	8005408 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d902      	bls.n	80091de <SPI_WaitFlagStateUntilTimeout+0x56>
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d13d      	bne.n	800925a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091f6:	d111      	bne.n	800921c <SPI_WaitFlagStateUntilTimeout+0x94>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009200:	d004      	beq.n	800920c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920a:	d107      	bne.n	800921c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009224:	d10f      	bne.n	8009246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e017      	b.n	800928a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3b01      	subs	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4013      	ands	r3, r2
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	429a      	cmp	r2, r3
 8009278:	bf0c      	ite	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	2300      	movne	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	461a      	mov	r2, r3
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	429a      	cmp	r2, r3
 8009286:	d19b      	bne.n	80091c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000190 	.word	0x20000190

08009298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af02      	add	r7, sp, #8
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ac:	d111      	bne.n	80092d2 <SPI_EndRxTransaction+0x3a>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b6:	d004      	beq.n	80092c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c0:	d107      	bne.n	80092d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092da:	d12a      	bne.n	8009332 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e4:	d012      	beq.n	800930c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2200      	movs	r2, #0
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff ff49 	bl	8009188 <SPI_WaitFlagStateUntilTimeout>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d02d      	beq.n	8009358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009300:	f043 0220 	orr.w	r2, r3, #32
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e026      	b.n	800935a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2200      	movs	r2, #0
 8009314:	2101      	movs	r1, #1
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff ff36 	bl	8009188 <SPI_WaitFlagStateUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01a      	beq.n	8009358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	f043 0220 	orr.w	r2, r3, #32
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e013      	b.n	800935a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	2101      	movs	r1, #1
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff ff23 	bl	8009188 <SPI_WaitFlagStateUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934c:	f043 0220 	orr.w	r2, r3, #32
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e000      	b.n	800935a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009370:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <SPI_EndRxTxTransaction+0x7c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <SPI_EndRxTxTransaction+0x80>)
 8009376:	fba2 2303 	umull	r2, r3, r2, r3
 800937a:	0d5b      	lsrs	r3, r3, #21
 800937c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800938e:	d112      	bne.n	80093b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2200      	movs	r2, #0
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff fef4 	bl	8009188 <SPI_WaitFlagStateUntilTimeout>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d016      	beq.n	80093d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	f043 0220 	orr.w	r2, r3, #32
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e00f      	b.n	80093d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	3b01      	subs	r3, #1
 80093c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	2b80      	cmp	r3, #128	; 0x80
 80093ce:	d0f2      	beq.n	80093b6 <SPI_EndRxTxTransaction+0x52>
 80093d0:	e000      	b.n	80093d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80093d2:	bf00      	nop
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000190 	.word	0x20000190
 80093e4:	165e9f81 	.word	0x165e9f81

080093e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e0c5      	b.n	8009586 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a64      	ldr	r2, [pc, #400]	; (8009590 <HAL_TIM_Base_Init+0x1a8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d045      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940c:	d040      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a60      	ldr	r2, [pc, #384]	; (8009594 <HAL_TIM_Base_Init+0x1ac>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d03b      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a5e      	ldr	r2, [pc, #376]	; (8009598 <HAL_TIM_Base_Init+0x1b0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d036      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a5d      	ldr	r2, [pc, #372]	; (800959c <HAL_TIM_Base_Init+0x1b4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d031      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a5b      	ldr	r2, [pc, #364]	; (80095a0 <HAL_TIM_Base_Init+0x1b8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d02c      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a5a      	ldr	r2, [pc, #360]	; (80095a4 <HAL_TIM_Base_Init+0x1bc>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d027      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a58      	ldr	r2, [pc, #352]	; (80095a8 <HAL_TIM_Base_Init+0x1c0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d022      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a57      	ldr	r2, [pc, #348]	; (80095ac <HAL_TIM_Base_Init+0x1c4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d01d      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a55      	ldr	r2, [pc, #340]	; (80095b0 <HAL_TIM_Base_Init+0x1c8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d018      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a54      	ldr	r2, [pc, #336]	; (80095b4 <HAL_TIM_Base_Init+0x1cc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a52      	ldr	r2, [pc, #328]	; (80095b8 <HAL_TIM_Base_Init+0x1d0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00e      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a51      	ldr	r2, [pc, #324]	; (80095bc <HAL_TIM_Base_Init+0x1d4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d009      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a4f      	ldr	r2, [pc, #316]	; (80095c0 <HAL_TIM_Base_Init+0x1d8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIM_Base_Init+0xa8>
 8009486:	f240 1113 	movw	r1, #275	; 0x113
 800948a:	484e      	ldr	r0, [pc, #312]	; (80095c4 <HAL_TIM_Base_Init+0x1dc>)
 800948c:	f7fb f9f1 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d014      	beq.n	80094c2 <HAL_TIM_Base_Init+0xda>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b10      	cmp	r3, #16
 800949e:	d010      	beq.n	80094c2 <HAL_TIM_Base_Init+0xda>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d00c      	beq.n	80094c2 <HAL_TIM_Base_Init+0xda>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	d008      	beq.n	80094c2 <HAL_TIM_Base_Init+0xda>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b60      	cmp	r3, #96	; 0x60
 80094b6:	d004      	beq.n	80094c2 <HAL_TIM_Base_Init+0xda>
 80094b8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80094bc:	4841      	ldr	r0, [pc, #260]	; (80095c4 <HAL_TIM_Base_Init+0x1dc>)
 80094be:	f7fb f9d8 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <HAL_TIM_Base_Init+0x100>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d2:	d009      	beq.n	80094e8 <HAL_TIM_Base_Init+0x100>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094dc:	d004      	beq.n	80094e8 <HAL_TIM_Base_Init+0x100>
 80094de:	f240 1115 	movw	r1, #277	; 0x115
 80094e2:	4838      	ldr	r0, [pc, #224]	; (80095c4 <HAL_TIM_Base_Init+0x1dc>)
 80094e4:	f7fb f9c5 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <HAL_TIM_Base_Init+0x11a>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d004      	beq.n	8009502 <HAL_TIM_Base_Init+0x11a>
 80094f8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80094fc:	4831      	ldr	r0, [pc, #196]	; (80095c4 <HAL_TIM_Base_Init+0x1dc>)
 80094fe:	f7fb f9b8 	bl	8004872 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fb fc24 	bl	8004d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3304      	adds	r3, #4
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f001 fbb8 	bl	800aca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	40010000 	.word	0x40010000
 8009594:	40000400 	.word	0x40000400
 8009598:	40000800 	.word	0x40000800
 800959c:	40000c00 	.word	0x40000c00
 80095a0:	40001000 	.word	0x40001000
 80095a4:	40001400 	.word	0x40001400
 80095a8:	40010400 	.word	0x40010400
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40014400 	.word	0x40014400
 80095b4:	40014800 	.word	0x40014800
 80095b8:	40001800 	.word	0x40001800
 80095bc:	40001c00 	.word	0x40001c00
 80095c0:	40002000 	.word	0x40002000
 80095c4:	08012190 	.word	0x08012190

080095c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a51      	ldr	r2, [pc, #324]	; (800971c <HAL_TIM_Base_Start_IT+0x154>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d045      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e2:	d040      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a4d      	ldr	r2, [pc, #308]	; (8009720 <HAL_TIM_Base_Start_IT+0x158>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d03b      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a4c      	ldr	r2, [pc, #304]	; (8009724 <HAL_TIM_Base_Start_IT+0x15c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d036      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a4a      	ldr	r2, [pc, #296]	; (8009728 <HAL_TIM_Base_Start_IT+0x160>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d031      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a49      	ldr	r2, [pc, #292]	; (800972c <HAL_TIM_Base_Start_IT+0x164>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d02c      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a47      	ldr	r2, [pc, #284]	; (8009730 <HAL_TIM_Base_Start_IT+0x168>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d027      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a46      	ldr	r2, [pc, #280]	; (8009734 <HAL_TIM_Base_Start_IT+0x16c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a44      	ldr	r2, [pc, #272]	; (8009738 <HAL_TIM_Base_Start_IT+0x170>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01d      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a43      	ldr	r2, [pc, #268]	; (800973c <HAL_TIM_Base_Start_IT+0x174>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d018      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a41      	ldr	r2, [pc, #260]	; (8009740 <HAL_TIM_Base_Start_IT+0x178>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a40      	ldr	r2, [pc, #256]	; (8009744 <HAL_TIM_Base_Start_IT+0x17c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a3e      	ldr	r2, [pc, #248]	; (8009748 <HAL_TIM_Base_Start_IT+0x180>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a3d      	ldr	r2, [pc, #244]	; (800974c <HAL_TIM_Base_Start_IT+0x184>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x9e>
 800965c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009660:	483b      	ldr	r0, [pc, #236]	; (8009750 <HAL_TIM_Base_Start_IT+0x188>)
 8009662:	f7fb f906 	bl	8004872 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b01      	cmp	r3, #1
 8009670:	d001      	beq.n	8009676 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e04e      	b.n	8009714 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2202      	movs	r2, #2
 800967a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0201 	orr.w	r2, r2, #1
 800968c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a22      	ldr	r2, [pc, #136]	; (800971c <HAL_TIM_Base_Start_IT+0x154>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d022      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a0:	d01d      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <HAL_TIM_Base_Start_IT+0x158>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d018      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <HAL_TIM_Base_Start_IT+0x15c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <HAL_TIM_Base_Start_IT+0x160>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00e      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <HAL_TIM_Base_Start_IT+0x16c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d009      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1a      	ldr	r2, [pc, #104]	; (8009738 <HAL_TIM_Base_Start_IT+0x170>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d004      	beq.n	80096de <HAL_TIM_Base_Start_IT+0x116>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1a      	ldr	r2, [pc, #104]	; (8009744 <HAL_TIM_Base_Start_IT+0x17c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d111      	bne.n	8009702 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b06      	cmp	r3, #6
 80096ee:	d010      	beq.n	8009712 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009700:	e007      	b.n	8009712 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f042 0201 	orr.w	r2, r2, #1
 8009710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	40010000 	.word	0x40010000
 8009720:	40000400 	.word	0x40000400
 8009724:	40000800 	.word	0x40000800
 8009728:	40000c00 	.word	0x40000c00
 800972c:	40001000 	.word	0x40001000
 8009730:	40001400 	.word	0x40001400
 8009734:	40010400 	.word	0x40010400
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800
 8009744:	40001800 	.word	0x40001800
 8009748:	40001c00 	.word	0x40001c00
 800974c:	40002000 	.word	0x40002000
 8009750:	08012190 	.word	0x08012190

08009754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e0c5      	b.n	80098f2 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a64      	ldr	r2, [pc, #400]	; (80098fc <HAL_TIM_PWM_Init+0x1a8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d045      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009778:	d040      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a60      	ldr	r2, [pc, #384]	; (8009900 <HAL_TIM_PWM_Init+0x1ac>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d03b      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a5e      	ldr	r2, [pc, #376]	; (8009904 <HAL_TIM_PWM_Init+0x1b0>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d036      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a5d      	ldr	r2, [pc, #372]	; (8009908 <HAL_TIM_PWM_Init+0x1b4>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d031      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a5b      	ldr	r2, [pc, #364]	; (800990c <HAL_TIM_PWM_Init+0x1b8>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d02c      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a5a      	ldr	r2, [pc, #360]	; (8009910 <HAL_TIM_PWM_Init+0x1bc>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d027      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a58      	ldr	r2, [pc, #352]	; (8009914 <HAL_TIM_PWM_Init+0x1c0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d022      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a57      	ldr	r2, [pc, #348]	; (8009918 <HAL_TIM_PWM_Init+0x1c4>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d01d      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a55      	ldr	r2, [pc, #340]	; (800991c <HAL_TIM_PWM_Init+0x1c8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a54      	ldr	r2, [pc, #336]	; (8009920 <HAL_TIM_PWM_Init+0x1cc>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a52      	ldr	r2, [pc, #328]	; (8009924 <HAL_TIM_PWM_Init+0x1d0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a51      	ldr	r2, [pc, #324]	; (8009928 <HAL_TIM_PWM_Init+0x1d4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a4f      	ldr	r2, [pc, #316]	; (800992c <HAL_TIM_PWM_Init+0x1d8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIM_PWM_Init+0xa8>
 80097f2:	f240 5129 	movw	r1, #1321	; 0x529
 80097f6:	484e      	ldr	r0, [pc, #312]	; (8009930 <HAL_TIM_PWM_Init+0x1dc>)
 80097f8:	f7fb f83b 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d014      	beq.n	800982e <HAL_TIM_PWM_Init+0xda>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b10      	cmp	r3, #16
 800980a:	d010      	beq.n	800982e <HAL_TIM_PWM_Init+0xda>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b20      	cmp	r3, #32
 8009812:	d00c      	beq.n	800982e <HAL_TIM_PWM_Init+0xda>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d008      	beq.n	800982e <HAL_TIM_PWM_Init+0xda>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b60      	cmp	r3, #96	; 0x60
 8009822:	d004      	beq.n	800982e <HAL_TIM_PWM_Init+0xda>
 8009824:	f240 512a 	movw	r1, #1322	; 0x52a
 8009828:	4841      	ldr	r0, [pc, #260]	; (8009930 <HAL_TIM_PWM_Init+0x1dc>)
 800982a:	f7fb f822 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <HAL_TIM_PWM_Init+0x100>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983e:	d009      	beq.n	8009854 <HAL_TIM_PWM_Init+0x100>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009848:	d004      	beq.n	8009854 <HAL_TIM_PWM_Init+0x100>
 800984a:	f240 512b 	movw	r1, #1323	; 0x52b
 800984e:	4838      	ldr	r0, [pc, #224]	; (8009930 <HAL_TIM_PWM_Init+0x1dc>)
 8009850:	f7fb f80f 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <HAL_TIM_PWM_Init+0x11a>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b80      	cmp	r3, #128	; 0x80
 8009862:	d004      	beq.n	800986e <HAL_TIM_PWM_Init+0x11a>
 8009864:	f240 512c 	movw	r1, #1324	; 0x52c
 8009868:	4831      	ldr	r0, [pc, #196]	; (8009930 <HAL_TIM_PWM_Init+0x1dc>)
 800986a:	f7fb f802 	bl	8004872 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fb fad0 	bl	8004e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	4619      	mov	r1, r3
 800989a:	4610      	mov	r0, r2
 800989c:	f001 fa02 	bl	800aca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40010000 	.word	0x40010000
 8009900:	40000400 	.word	0x40000400
 8009904:	40000800 	.word	0x40000800
 8009908:	40000c00 	.word	0x40000c00
 800990c:	40001000 	.word	0x40001000
 8009910:	40001400 	.word	0x40001400
 8009914:	40010400 	.word	0x40010400
 8009918:	40014000 	.word	0x40014000
 800991c:	40014400 	.word	0x40014400
 8009920:	40014800 	.word	0x40014800
 8009924:	40001800 	.word	0x40001800
 8009928:	40001c00 	.word	0x40001c00
 800992c:	40002000 	.word	0x40002000
 8009930:	08012190 	.word	0x08012190

08009934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a84      	ldr	r2, [pc, #528]	; (8009b54 <HAL_TIM_PWM_Start+0x220>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d10f      	bne.n	8009968 <HAL_TIM_PWM_Start+0x34>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 809f 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b04      	cmp	r3, #4
 8009954:	f000 809b 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2b08      	cmp	r3, #8
 800995c:	f000 8097 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b0c      	cmp	r3, #12
 8009964:	f000 8093 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009970:	d10e      	bne.n	8009990 <HAL_TIM_PWM_Start+0x5c>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 808a 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b04      	cmp	r3, #4
 800997e:	f000 8086 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b08      	cmp	r3, #8
 8009986:	f000 8082 	beq.w	8009a8e <HAL_TIM_PWM_Start+0x15a>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b0c      	cmp	r3, #12
 800998e:	d07e      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a70      	ldr	r2, [pc, #448]	; (8009b58 <HAL_TIM_PWM_Start+0x224>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d10b      	bne.n	80099b2 <HAL_TIM_PWM_Start+0x7e>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d076      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d073      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d070      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b0c      	cmp	r3, #12
 80099b0:	d06d      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a69      	ldr	r2, [pc, #420]	; (8009b5c <HAL_TIM_PWM_Start+0x228>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d10b      	bne.n	80099d4 <HAL_TIM_PWM_Start+0xa0>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d065      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d062      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b08      	cmp	r3, #8
 80099cc:	d05f      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b0c      	cmp	r3, #12
 80099d2:	d05c      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a61      	ldr	r2, [pc, #388]	; (8009b60 <HAL_TIM_PWM_Start+0x22c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d10b      	bne.n	80099f6 <HAL_TIM_PWM_Start+0xc2>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d054      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d051      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d04e      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b0c      	cmp	r3, #12
 80099f4:	d04b      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a5a      	ldr	r2, [pc, #360]	; (8009b64 <HAL_TIM_PWM_Start+0x230>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10b      	bne.n	8009a18 <HAL_TIM_PWM_Start+0xe4>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d043      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d040      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b08      	cmp	r3, #8
 8009a10:	d03d      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b0c      	cmp	r3, #12
 8009a16:	d03a      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a52      	ldr	r2, [pc, #328]	; (8009b68 <HAL_TIM_PWM_Start+0x234>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d105      	bne.n	8009a2e <HAL_TIM_PWM_Start+0xfa>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d032      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d02f      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a4e      	ldr	r2, [pc, #312]	; (8009b6c <HAL_TIM_PWM_Start+0x238>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d102      	bne.n	8009a3e <HAL_TIM_PWM_Start+0x10a>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d027      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a4b      	ldr	r2, [pc, #300]	; (8009b70 <HAL_TIM_PWM_Start+0x23c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d102      	bne.n	8009a4e <HAL_TIM_PWM_Start+0x11a>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d01f      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a48      	ldr	r2, [pc, #288]	; (8009b74 <HAL_TIM_PWM_Start+0x240>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d105      	bne.n	8009a64 <HAL_TIM_PWM_Start+0x130>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d017      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d014      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a43      	ldr	r2, [pc, #268]	; (8009b78 <HAL_TIM_PWM_Start+0x244>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d102      	bne.n	8009a74 <HAL_TIM_PWM_Start+0x140>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a40      	ldr	r2, [pc, #256]	; (8009b7c <HAL_TIM_PWM_Start+0x248>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d102      	bne.n	8009a84 <HAL_TIM_PWM_Start+0x150>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x15a>
 8009a84:	f240 51af 	movw	r1, #1455	; 0x5af
 8009a88:	483d      	ldr	r0, [pc, #244]	; (8009b80 <HAL_TIM_PWM_Start+0x24c>)
 8009a8a:	f7fa fef2 	bl	8004872 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d109      	bne.n	8009aa8 <HAL_TIM_PWM_Start+0x174>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	bf14      	ite	ne
 8009aa0:	2301      	movne	r3, #1
 8009aa2:	2300      	moveq	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	e022      	b.n	8009aee <HAL_TIM_PWM_Start+0x1ba>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d109      	bne.n	8009ac2 <HAL_TIM_PWM_Start+0x18e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	bf14      	ite	ne
 8009aba:	2301      	movne	r3, #1
 8009abc:	2300      	moveq	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	e015      	b.n	8009aee <HAL_TIM_PWM_Start+0x1ba>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d109      	bne.n	8009adc <HAL_TIM_PWM_Start+0x1a8>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	bf14      	ite	ne
 8009ad4:	2301      	movne	r3, #1
 8009ad6:	2300      	moveq	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	e008      	b.n	8009aee <HAL_TIM_PWM_Start+0x1ba>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	bf14      	ite	ne
 8009ae8:	2301      	movne	r3, #1
 8009aea:	2300      	moveq	r3, #0
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e094      	b.n	8009c20 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <HAL_TIM_PWM_Start+0x1d2>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b04:	e013      	b.n	8009b2e <HAL_TIM_PWM_Start+0x1fa>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d104      	bne.n	8009b16 <HAL_TIM_PWM_Start+0x1e2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b14:	e00b      	b.n	8009b2e <HAL_TIM_PWM_Start+0x1fa>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d104      	bne.n	8009b26 <HAL_TIM_PWM_Start+0x1f2>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b24:	e003      	b.n	8009b2e <HAL_TIM_PWM_Start+0x1fa>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2201      	movs	r2, #1
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fc28 	bl	800b38c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <HAL_TIM_PWM_Start+0x220>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d004      	beq.n	8009b50 <HAL_TIM_PWM_Start+0x21c>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a06      	ldr	r2, [pc, #24]	; (8009b64 <HAL_TIM_PWM_Start+0x230>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d119      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x250>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e018      	b.n	8009b86 <HAL_TIM_PWM_Start+0x252>
 8009b54:	40010000 	.word	0x40010000
 8009b58:	40000400 	.word	0x40000400
 8009b5c:	40000800 	.word	0x40000800
 8009b60:	40000c00 	.word	0x40000c00
 8009b64:	40010400 	.word	0x40010400
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800
 8009b74:	40001800 	.word	0x40001800
 8009b78:	40001c00 	.word	0x40001c00
 8009b7c:	40002000 	.word	0x40002000
 8009b80:	08012190 	.word	0x08012190
 8009b84:	2300      	movs	r3, #0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d007      	beq.n	8009b9a <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a22      	ldr	r2, [pc, #136]	; (8009c28 <HAL_TIM_PWM_Start+0x2f4>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d022      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bac:	d01d      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1e      	ldr	r2, [pc, #120]	; (8009c2c <HAL_TIM_PWM_Start+0x2f8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d018      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1c      	ldr	r2, [pc, #112]	; (8009c30 <HAL_TIM_PWM_Start+0x2fc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <HAL_TIM_PWM_Start+0x300>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00e      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a19      	ldr	r2, [pc, #100]	; (8009c38 <HAL_TIM_PWM_Start+0x304>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d009      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a18      	ldr	r2, [pc, #96]	; (8009c3c <HAL_TIM_PWM_Start+0x308>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d004      	beq.n	8009bea <HAL_TIM_PWM_Start+0x2b6>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <HAL_TIM_PWM_Start+0x30c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d111      	bne.n	8009c0e <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b06      	cmp	r3, #6
 8009bfa:	d010      	beq.n	8009c1e <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0201 	orr.w	r2, r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0c:	e007      	b.n	8009c1e <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f042 0201 	orr.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40000400 	.word	0x40000400
 8009c30:	40000800 	.word	0x40000800
 8009c34:	40000c00 	.word	0x40000c00
 8009c38:	40010400 	.word	0x40010400
 8009c3c:	40014000 	.word	0x40014000
 8009c40:	40001800 	.word	0x40001800

08009c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e198      	b.n	8009f8a <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a7d      	ldr	r2, [pc, #500]	; (8009e54 <HAL_TIM_Encoder_Init+0x210>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d027      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6a:	d022      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a79      	ldr	r2, [pc, #484]	; (8009e58 <HAL_TIM_Encoder_Init+0x214>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d01d      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a78      	ldr	r2, [pc, #480]	; (8009e5c <HAL_TIM_Encoder_Init+0x218>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d018      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a76      	ldr	r2, [pc, #472]	; (8009e60 <HAL_TIM_Encoder_Init+0x21c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d013      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a75      	ldr	r2, [pc, #468]	; (8009e64 <HAL_TIM_Encoder_Init+0x220>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00e      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a73      	ldr	r2, [pc, #460]	; (8009e68 <HAL_TIM_Encoder_Init+0x224>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d009      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a72      	ldr	r2, [pc, #456]	; (8009e6c <HAL_TIM_Encoder_Init+0x228>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d004      	beq.n	8009cb2 <HAL_TIM_Encoder_Init+0x6e>
 8009ca8:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8009cac:	4870      	ldr	r0, [pc, #448]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009cae:	f7fa fde0 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d014      	beq.n	8009ce4 <HAL_TIM_Encoder_Init+0xa0>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d010      	beq.n	8009ce4 <HAL_TIM_Encoder_Init+0xa0>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d00c      	beq.n	8009ce4 <HAL_TIM_Encoder_Init+0xa0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	2b40      	cmp	r3, #64	; 0x40
 8009cd0:	d008      	beq.n	8009ce4 <HAL_TIM_Encoder_Init+0xa0>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b60      	cmp	r3, #96	; 0x60
 8009cd8:	d004      	beq.n	8009ce4 <HAL_TIM_Encoder_Init+0xa0>
 8009cda:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8009cde:	4864      	ldr	r0, [pc, #400]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009ce0:	f7fa fdc7 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00e      	beq.n	8009d0a <HAL_TIM_Encoder_Init+0xc6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf4:	d009      	beq.n	8009d0a <HAL_TIM_Encoder_Init+0xc6>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cfe:	d004      	beq.n	8009d0a <HAL_TIM_Encoder_Init+0xc6>
 8009d00:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8009d04:	485a      	ldr	r0, [pc, #360]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009d06:	f7fa fdb4 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <HAL_TIM_Encoder_Init+0xe0>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	2b80      	cmp	r3, #128	; 0x80
 8009d18:	d004      	beq.n	8009d24 <HAL_TIM_Encoder_Init+0xe0>
 8009d1a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8009d1e:	4854      	ldr	r0, [pc, #336]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009d20:	f7fa fda7 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d00c      	beq.n	8009d46 <HAL_TIM_Encoder_Init+0x102>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d008      	beq.n	8009d46 <HAL_TIM_Encoder_Init+0x102>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d004      	beq.n	8009d46 <HAL_TIM_Encoder_Init+0x102>
 8009d3c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8009d40:	484b      	ldr	r0, [pc, #300]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009d42:	f7fa fd96 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d00c      	beq.n	8009d68 <HAL_TIM_Encoder_Init+0x124>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d008      	beq.n	8009d68 <HAL_TIM_Encoder_Init+0x124>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d004      	beq.n	8009d68 <HAL_TIM_Encoder_Init+0x124>
 8009d5e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8009d62:	4843      	ldr	r0, [pc, #268]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009d64:	f7fa fd85 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d00c      	beq.n	8009d8a <HAL_TIM_Encoder_Init+0x146>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d008      	beq.n	8009d8a <HAL_TIM_Encoder_Init+0x146>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d004      	beq.n	8009d8a <HAL_TIM_Encoder_Init+0x146>
 8009d80:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8009d84:	483a      	ldr	r0, [pc, #232]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009d86:	f7fa fd74 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d008      	beq.n	8009da4 <HAL_TIM_Encoder_Init+0x160>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d004      	beq.n	8009da4 <HAL_TIM_Encoder_Init+0x160>
 8009d9a:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8009d9e:	4834      	ldr	r0, [pc, #208]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009da0:	f7fa fd67 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_TIM_Encoder_Init+0x17a>
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d004      	beq.n	8009dbe <HAL_TIM_Encoder_Init+0x17a>
 8009db4:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8009db8:	482d      	ldr	r0, [pc, #180]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009dba:	f7fa fd5a 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d010      	beq.n	8009de8 <HAL_TIM_Encoder_Init+0x1a4>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d00c      	beq.n	8009de8 <HAL_TIM_Encoder_Init+0x1a4>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b08      	cmp	r3, #8
 8009dd4:	d008      	beq.n	8009de8 <HAL_TIM_Encoder_Init+0x1a4>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	2b0c      	cmp	r3, #12
 8009ddc:	d004      	beq.n	8009de8 <HAL_TIM_Encoder_Init+0x1a4>
 8009dde:	f640 31da 	movw	r1, #3034	; 0xbda
 8009de2:	4823      	ldr	r0, [pc, #140]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009de4:	f7fa fd45 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d010      	beq.n	8009e12 <HAL_TIM_Encoder_Init+0x1ce>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d00c      	beq.n	8009e12 <HAL_TIM_Encoder_Init+0x1ce>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	d008      	beq.n	8009e12 <HAL_TIM_Encoder_Init+0x1ce>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	2b0c      	cmp	r3, #12
 8009e06:	d004      	beq.n	8009e12 <HAL_TIM_Encoder_Init+0x1ce>
 8009e08:	f640 31db 	movw	r1, #3035	; 0xbdb
 8009e0c:	4818      	ldr	r0, [pc, #96]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009e0e:	f7fa fd30 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d904      	bls.n	8009e24 <HAL_TIM_Encoder_Init+0x1e0>
 8009e1a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8009e1e:	4814      	ldr	r0, [pc, #80]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009e20:	f7fa fd27 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	2b0f      	cmp	r3, #15
 8009e2a:	d904      	bls.n	8009e36 <HAL_TIM_Encoder_Init+0x1f2>
 8009e2c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8009e30:	480f      	ldr	r0, [pc, #60]	; (8009e70 <HAL_TIM_Encoder_Init+0x22c>)
 8009e32:	f7fa fd1e 	bl	8004872 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d118      	bne.n	8009e74 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fb f814 	bl	8004e78 <HAL_TIM_Encoder_MspInit>
 8009e50:	e010      	b.n	8009e74 <HAL_TIM_Encoder_Init+0x230>
 8009e52:	bf00      	nop
 8009e54:	40010000 	.word	0x40010000
 8009e58:	40000400 	.word	0x40000400
 8009e5c:	40000800 	.word	0x40000800
 8009e60:	40000c00 	.word	0x40000c00
 8009e64:	40010400 	.word	0x40010400
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40001800 	.word	0x40001800
 8009e70:	08012190 	.word	0x08012190
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6812      	ldr	r2, [r2, #0]
 8009e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e8a:	f023 0307 	bic.w	r3, r3, #7
 8009e8e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f000 ff02 	bl	800aca4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec8:	f023 0303 	bic.w	r3, r3, #3
 8009ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ee6:	f023 030c 	bic.w	r3, r3, #12
 8009eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	4313      	orrs	r3, r2
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	011a      	lsls	r2, r3, #4
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	031b      	lsls	r3, r3, #12
 8009f16:	4313      	orrs	r3, r2
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f24:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f2c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d122      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d11b      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0202 	mvn.w	r2, #2
 8009fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fe46 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 8009fdc:	e005      	b.n	8009fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fe38 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fe49 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d122      	bne.n	800a044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d11b      	bne.n	800a044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0204 	mvn.w	r2, #4
 800a014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fe1c 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a030:	e005      	b.n	800a03e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fe0e 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fe1f 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0308 	and.w	r3, r3, #8
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d122      	bne.n	800a098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0308 	and.w	r3, r3, #8
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d11b      	bne.n	800a098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0208 	mvn.w	r2, #8
 800a068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2204      	movs	r2, #4
 800a06e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fdf2 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a084:	e005      	b.n	800a092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fde4 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fdf5 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f003 0310 	and.w	r3, r3, #16
 800a0a2:	2b10      	cmp	r3, #16
 800a0a4:	d122      	bne.n	800a0ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f003 0310 	and.w	r3, r3, #16
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d11b      	bne.n	800a0ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f06f 0210 	mvn.w	r2, #16
 800a0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fdc8 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a0d8:	e005      	b.n	800a0e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fdba 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fdcb 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d10e      	bne.n	800a118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b01      	cmp	r3, #1
 800a106:	d107      	bne.n	800a118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f06f 0201 	mvn.w	r2, #1
 800a110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7f7 f8a4 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a122:	2b80      	cmp	r3, #128	; 0x80
 800a124:	d10e      	bne.n	800a144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a130:	2b80      	cmp	r3, #128	; 0x80
 800a132:	d107      	bne.n	800a144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 fb5c 	bl	800b7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14e:	2b40      	cmp	r3, #64	; 0x40
 800a150:	d10e      	bne.n	800a170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d107      	bne.n	800a170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fd90 	bl	800ac90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b20      	cmp	r3, #32
 800a17c:	d10e      	bne.n	800a19c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d107      	bne.n	800a19c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f06f 0220 	mvn.w	r2, #32
 800a194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 fb26 	bl	800b7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d010      	beq.n	800a1dc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d00d      	beq.n	800a1dc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b08      	cmp	r3, #8
 800a1c4:	d00a      	beq.n	800a1dc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b0c      	cmp	r3, #12
 800a1ca:	d007      	beq.n	800a1dc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b3c      	cmp	r3, #60	; 0x3c
 800a1d0:	d004      	beq.n	800a1dc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a1d2:	f241 0177 	movw	r1, #4215	; 0x1077
 800a1d6:	4883      	ldr	r0, [pc, #524]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a1d8:	f7fa fb4b 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b60      	cmp	r3, #96	; 0x60
 800a1e2:	d008      	beq.n	800a1f6 <HAL_TIM_PWM_ConfigChannel+0x52>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b70      	cmp	r3, #112	; 0x70
 800a1ea:	d004      	beq.n	800a1f6 <HAL_TIM_PWM_ConfigChannel+0x52>
 800a1ec:	f241 0178 	movw	r1, #4216	; 0x1078
 800a1f0:	487c      	ldr	r0, [pc, #496]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a1f2:	f7fa fb3e 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d008      	beq.n	800a210 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d004      	beq.n	800a210 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800a206:	f241 0179 	movw	r1, #4217	; 0x1079
 800a20a:	4876      	ldr	r0, [pc, #472]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a20c:	f7fa fb31 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d008      	beq.n	800a22a <HAL_TIM_PWM_ConfigChannel+0x86>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d004      	beq.n	800a22a <HAL_TIM_PWM_ConfigChannel+0x86>
 800a220:	f241 017a 	movw	r1, #4218	; 0x107a
 800a224:	486f      	ldr	r0, [pc, #444]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a226:	f7fa fb24 	bl	8004872 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIM_PWM_ConfigChannel+0x94>
 800a234:	2302      	movs	r3, #2
 800a236:	e17c      	b.n	800a532 <HAL_TIM_PWM_ConfigChannel+0x38e>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b0c      	cmp	r3, #12
 800a244:	f200 816d 	bhi.w	800a522 <HAL_TIM_PWM_ConfigChannel+0x37e>
 800a248:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24e:	bf00      	nop
 800a250:	0800a285 	.word	0x0800a285
 800a254:	0800a523 	.word	0x0800a523
 800a258:	0800a523 	.word	0x0800a523
 800a25c:	0800a523 	.word	0x0800a523
 800a260:	0800a347 	.word	0x0800a347
 800a264:	0800a523 	.word	0x0800a523
 800a268:	0800a523 	.word	0x0800a523
 800a26c:	0800a523 	.word	0x0800a523
 800a270:	0800a415 	.word	0x0800a415
 800a274:	0800a523 	.word	0x0800a523
 800a278:	0800a523 	.word	0x0800a523
 800a27c:	0800a523 	.word	0x0800a523
 800a280:	0800a49b 	.word	0x0800a49b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a57      	ldr	r2, [pc, #348]	; (800a3e8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d03b      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a296:	d036      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a53      	ldr	r2, [pc, #332]	; (800a3ec <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d031      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a52      	ldr	r2, [pc, #328]	; (800a3f0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d02c      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a50      	ldr	r2, [pc, #320]	; (800a3f4 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d027      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a4f      	ldr	r2, [pc, #316]	; (800a3f8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d022      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a4d      	ldr	r2, [pc, #308]	; (800a3fc <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d01d      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a4c      	ldr	r2, [pc, #304]	; (800a400 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d018      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a4a      	ldr	r2, [pc, #296]	; (800a404 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d013      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a49      	ldr	r2, [pc, #292]	; (800a408 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00e      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a47      	ldr	r2, [pc, #284]	; (800a40c <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d009      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a46      	ldr	r2, [pc, #280]	; (800a410 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d004      	beq.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a2fc:	f241 0184 	movw	r1, #4228	; 0x1084
 800a300:	4838      	ldr	r0, [pc, #224]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a302:	f7fa fab6 	bl	8004872 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 fd69 	bl	800ade4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0208 	orr.w	r2, r2, #8
 800a320:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	699a      	ldr	r2, [r3, #24]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0204 	bic.w	r2, r2, #4
 800a330:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6999      	ldr	r1, [r3, #24]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	619a      	str	r2, [r3, #24]
      break;
 800a344:	e0f0      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d027      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a358:	d022      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a23      	ldr	r2, [pc, #140]	; (800a3ec <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d01d      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d018      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a20      	ldr	r2, [pc, #128]	; (800a3f4 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d013      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1e      	ldr	r2, [pc, #120]	; (800a3f8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00e      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d009      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d004      	beq.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a396:	f241 0195 	movw	r1, #4245	; 0x1095
 800a39a:	4812      	ldr	r0, [pc, #72]	; (800a3e4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a39c:	f7fa fa69 	bl	8004872 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fdb6 	bl	800af18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6999      	ldr	r1, [r3, #24]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	021a      	lsls	r2, r3, #8
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	619a      	str	r2, [r3, #24]
      break;
 800a3e0:	e0a2      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x384>
 800a3e2:	bf00      	nop
 800a3e4:	08012190 	.word	0x08012190
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40000400 	.word	0x40000400
 800a3f0:	40000800 	.word	0x40000800
 800a3f4:	40000c00 	.word	0x40000c00
 800a3f8:	40010400 	.word	0x40010400
 800a3fc:	40014000 	.word	0x40014000
 800a400:	40014400 	.word	0x40014400
 800a404:	40014800 	.word	0x40014800
 800a408:	40001800 	.word	0x40001800
 800a40c:	40001c00 	.word	0x40001c00
 800a410:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a48      	ldr	r2, [pc, #288]	; (800a53c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d01d      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a426:	d018      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a44      	ldr	r2, [pc, #272]	; (800a540 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a43      	ldr	r2, [pc, #268]	; (800a544 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00e      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a41      	ldr	r2, [pc, #260]	; (800a548 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d009      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a40      	ldr	r2, [pc, #256]	; (800a54c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d004      	beq.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a450:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800a454:	483e      	ldr	r0, [pc, #248]	; (800a550 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a456:	f7fa fa0c 	bl	8004872 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fdf7 	bl	800b054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69da      	ldr	r2, [r3, #28]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f042 0208 	orr.w	r2, r2, #8
 800a474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 0204 	bic.w	r2, r2, #4
 800a484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69d9      	ldr	r1, [r3, #28]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	691a      	ldr	r2, [r3, #16]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	61da      	str	r2, [r3, #28]
      break;
 800a498:	e046      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a27      	ldr	r2, [pc, #156]	; (800a53c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d01d      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ac:	d018      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a23      	ldr	r2, [pc, #140]	; (800a540 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d013      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a21      	ldr	r2, [pc, #132]	; (800a544 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d00e      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a20      	ldr	r2, [pc, #128]	; (800a548 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d009      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a1e      	ldr	r2, [pc, #120]	; (800a54c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d004      	beq.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a4d6:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800a4da:	481d      	ldr	r0, [pc, #116]	; (800a550 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a4dc:	f7fa f9c9 	bl	8004872 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fe52 	bl	800b190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69da      	ldr	r2, [r3, #28]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69da      	ldr	r2, [r3, #28]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69d9      	ldr	r1, [r3, #28]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	021a      	lsls	r2, r3, #8
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	61da      	str	r2, [r3, #28]
      break;
 800a520:	e002      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	75fb      	strb	r3, [r7, #23]
      break;
 800a526:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	40010000 	.word	0x40010000
 800a540:	40000400 	.word	0x40000400
 800a544:	40000800 	.word	0x40000800
 800a548:	40000c00 	.word	0x40000c00
 800a54c:	40010400 	.word	0x40010400
 800a550:	08012190 	.word	0x08012190

0800a554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_TIM_ConfigClockSource+0x1c>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e35c      	b.n	800ac2a <HAL_TIM_ConfigClockSource+0x6d6>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2202      	movs	r2, #2
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a588:	d029      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a592:	d024      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d020      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b10      	cmp	r3, #16
 800a5a2:	d01c      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d018      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b30      	cmp	r3, #48	; 0x30
 800a5b2:	d014      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b40      	cmp	r3, #64	; 0x40
 800a5ba:	d010      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b50      	cmp	r3, #80	; 0x50
 800a5c2:	d00c      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b60      	cmp	r3, #96	; 0x60
 800a5ca:	d008      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b70      	cmp	r3, #112	; 0x70
 800a5d2:	d004      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x8a>
 800a5d4:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800a5d8:	4893      	ldr	r0, [pc, #588]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a5da:	f7fa f94a 	bl	8004872 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a606:	f000 812b 	beq.w	800a860 <HAL_TIM_ConfigClockSource+0x30c>
 800a60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a60e:	f200 82ff 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a616:	d02e      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0x122>
 800a618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61c:	f200 82f8 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a620:	2b70      	cmp	r3, #112	; 0x70
 800a622:	f000 8082 	beq.w	800a72a <HAL_TIM_ConfigClockSource+0x1d6>
 800a626:	2b70      	cmp	r3, #112	; 0x70
 800a628:	f200 82f2 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a62c:	2b60      	cmp	r3, #96	; 0x60
 800a62e:	f000 81e8 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x4ae>
 800a632:	2b60      	cmp	r3, #96	; 0x60
 800a634:	f200 82ec 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a638:	2b50      	cmp	r3, #80	; 0x50
 800a63a:	f000 8182 	beq.w	800a942 <HAL_TIM_ConfigClockSource+0x3ee>
 800a63e:	2b50      	cmp	r3, #80	; 0x50
 800a640:	f200 82e6 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a644:	2b40      	cmp	r3, #64	; 0x40
 800a646:	f000 824d 	beq.w	800aae4 <HAL_TIM_ConfigClockSource+0x590>
 800a64a:	2b40      	cmp	r3, #64	; 0x40
 800a64c:	f200 82e0 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	f000 82a7 	beq.w	800aba4 <HAL_TIM_ConfigClockSource+0x650>
 800a656:	2b30      	cmp	r3, #48	; 0x30
 800a658:	f200 82da 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	f000 82a1 	beq.w	800aba4 <HAL_TIM_ConfigClockSource+0x650>
 800a662:	2b20      	cmp	r3, #32
 800a664:	f200 82d4 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 829b 	beq.w	800aba4 <HAL_TIM_ConfigClockSource+0x650>
 800a66e:	2b10      	cmp	r3, #16
 800a670:	f000 8298 	beq.w	800aba4 <HAL_TIM_ConfigClockSource+0x650>
 800a674:	e2cc      	b.n	800ac10 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a6c      	ldr	r2, [pc, #432]	; (800a82c <HAL_TIM_ConfigClockSource+0x2d8>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	f000 82ca 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a68a:	f000 82c4 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a67      	ldr	r2, [pc, #412]	; (800a830 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a694:	4293      	cmp	r3, r2
 800a696:	f000 82be 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a65      	ldr	r2, [pc, #404]	; (800a834 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	f000 82b8 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a63      	ldr	r2, [pc, #396]	; (800a838 <HAL_TIM_ConfigClockSource+0x2e4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	f000 82b2 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a61      	ldr	r2, [pc, #388]	; (800a83c <HAL_TIM_ConfigClockSource+0x2e8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	f000 82ac 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a5f      	ldr	r2, [pc, #380]	; (800a840 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	f000 82a6 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a5d      	ldr	r2, [pc, #372]	; (800a844 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	f000 82a0 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a5b      	ldr	r2, [pc, #364]	; (800a848 <HAL_TIM_ConfigClockSource+0x2f4>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	f000 829a 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a59      	ldr	r2, [pc, #356]	; (800a84c <HAL_TIM_ConfigClockSource+0x2f8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	f000 8294 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a57      	ldr	r2, [pc, #348]	; (800a850 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	f000 828e 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a55      	ldr	r2, [pc, #340]	; (800a854 <HAL_TIM_ConfigClockSource+0x300>)
 800a700:	4293      	cmp	r3, r2
 800a702:	f000 8288 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a53      	ldr	r2, [pc, #332]	; (800a858 <HAL_TIM_ConfigClockSource+0x304>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	f000 8282 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a51      	ldr	r2, [pc, #324]	; (800a85c <HAL_TIM_ConfigClockSource+0x308>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	f000 827c 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
 800a71e:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800a722:	4841      	ldr	r0, [pc, #260]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a724:	f7fa f8a5 	bl	8004872 <assert_failed>
      break;
 800a728:	e275      	b.n	800ac16 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a3f      	ldr	r2, [pc, #252]	; (800a82c <HAL_TIM_ConfigClockSource+0x2d8>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d027      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a73c:	d022      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a3b      	ldr	r2, [pc, #236]	; (800a830 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d01d      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a39      	ldr	r2, [pc, #228]	; (800a834 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d018      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a38      	ldr	r2, [pc, #224]	; (800a838 <HAL_TIM_ConfigClockSource+0x2e4>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d013      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a38      	ldr	r2, [pc, #224]	; (800a844 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00e      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a37      	ldr	r2, [pc, #220]	; (800a848 <HAL_TIM_ConfigClockSource+0x2f4>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d009      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a37      	ldr	r2, [pc, #220]	; (800a854 <HAL_TIM_ConfigClockSource+0x300>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d004      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x230>
 800a77a:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a77e:	482a      	ldr	r0, [pc, #168]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a780:	f7fa f877 	bl	8004872 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d013      	beq.n	800a7b4 <HAL_TIM_ConfigClockSource+0x260>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a794:	d00e      	beq.n	800a7b4 <HAL_TIM_ConfigClockSource+0x260>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79e:	d009      	beq.n	800a7b4 <HAL_TIM_ConfigClockSource+0x260>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7a8:	d004      	beq.n	800a7b4 <HAL_TIM_ConfigClockSource+0x260>
 800a7aa:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800a7ae:	481e      	ldr	r0, [pc, #120]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a7b0:	f7fa f85f 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7bc:	d014      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0x294>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d010      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0x294>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00c      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0x294>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d008      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0x294>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b0a      	cmp	r3, #10
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIM_ConfigClockSource+0x294>
 800a7de:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800a7e2:	4811      	ldr	r0, [pc, #68]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a7e4:	f7fa f845 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b0f      	cmp	r3, #15
 800a7ee:	d904      	bls.n	800a7fa <HAL_TIM_ConfigClockSource+0x2a6>
 800a7f0:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800a7f4:	480c      	ldr	r0, [pc, #48]	; (800a828 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a7f6:	f7fa f83c 	bl	8004872 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	6899      	ldr	r1, [r3, #8]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f000 fd9f 	bl	800b34c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a81c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	609a      	str	r2, [r3, #8]
      break;
 800a826:	e1f7      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
 800a828:	08012190 	.word	0x08012190
 800a82c:	40010000 	.word	0x40010000
 800a830:	40000400 	.word	0x40000400
 800a834:	40000800 	.word	0x40000800
 800a838:	40000c00 	.word	0x40000c00
 800a83c:	40001000 	.word	0x40001000
 800a840:	40001400 	.word	0x40001400
 800a844:	40010400 	.word	0x40010400
 800a848:	40014000 	.word	0x40014000
 800a84c:	40014400 	.word	0x40014400
 800a850:	40014800 	.word	0x40014800
 800a854:	40001800 	.word	0x40001800
 800a858:	40001c00 	.word	0x40001c00
 800a85c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a97      	ldr	r2, [pc, #604]	; (800aac4 <HAL_TIM_ConfigClockSource+0x570>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d01d      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d018      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a93      	ldr	r2, [pc, #588]	; (800aac8 <HAL_TIM_ConfigClockSource+0x574>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d013      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a92      	ldr	r2, [pc, #584]	; (800aacc <HAL_TIM_ConfigClockSource+0x578>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00e      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a90      	ldr	r2, [pc, #576]	; (800aad0 <HAL_TIM_ConfigClockSource+0x57c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d009      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a8f      	ldr	r2, [pc, #572]	; (800aad4 <HAL_TIM_ConfigClockSource+0x580>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d004      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x352>
 800a89c:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a8a0:	488d      	ldr	r0, [pc, #564]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a8a2:	f7f9 ffe6 	bl	8004872 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d013      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0x382>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b6:	d00e      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0x382>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c0:	d009      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0x382>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8ca:	d004      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0x382>
 800a8cc:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800a8d0:	4881      	ldr	r0, [pc, #516]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a8d2:	f7f9 ffce 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8de:	d014      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x3b6>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d010      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x3b6>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00c      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x3b6>
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d008      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x3b6>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	2b0a      	cmp	r3, #10
 800a8fe:	d004      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x3b6>
 800a900:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800a904:	4874      	ldr	r0, [pc, #464]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a906:	f7f9 ffb4 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	2b0f      	cmp	r3, #15
 800a910:	d904      	bls.n	800a91c <HAL_TIM_ConfigClockSource+0x3c8>
 800a912:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800a916:	4870      	ldr	r0, [pc, #448]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a918:	f7f9 ffab 	bl	8004872 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6899      	ldr	r1, [r3, #8]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f000 fd0e 	bl	800b34c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a93e:	609a      	str	r2, [r3, #8]
      break;
 800a940:	e16a      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a5f      	ldr	r2, [pc, #380]	; (800aac4 <HAL_TIM_ConfigClockSource+0x570>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d027      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a954:	d022      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a5b      	ldr	r2, [pc, #364]	; (800aac8 <HAL_TIM_ConfigClockSource+0x574>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d01d      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a59      	ldr	r2, [pc, #356]	; (800aacc <HAL_TIM_ConfigClockSource+0x578>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d018      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a58      	ldr	r2, [pc, #352]	; (800aad0 <HAL_TIM_ConfigClockSource+0x57c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d013      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a56      	ldr	r2, [pc, #344]	; (800aad4 <HAL_TIM_ConfigClockSource+0x580>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00e      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a56      	ldr	r2, [pc, #344]	; (800aadc <HAL_TIM_ConfigClockSource+0x588>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d009      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a54      	ldr	r2, [pc, #336]	; (800aae0 <HAL_TIM_ConfigClockSource+0x58c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d004      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x448>
 800a992:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a996:	4850      	ldr	r0, [pc, #320]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a998:	f7f9 ff6b 	bl	8004872 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a4:	d014      	beq.n	800a9d0 <HAL_TIM_ConfigClockSource+0x47c>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d010      	beq.n	800a9d0 <HAL_TIM_ConfigClockSource+0x47c>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00c      	beq.n	800a9d0 <HAL_TIM_ConfigClockSource+0x47c>
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d008      	beq.n	800a9d0 <HAL_TIM_ConfigClockSource+0x47c>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b0a      	cmp	r3, #10
 800a9c4:	d004      	beq.n	800a9d0 <HAL_TIM_ConfigClockSource+0x47c>
 800a9c6:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800a9ca:	4843      	ldr	r0, [pc, #268]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a9cc:	f7f9 ff51 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b0f      	cmp	r3, #15
 800a9d6:	d904      	bls.n	800a9e2 <HAL_TIM_ConfigClockSource+0x48e>
 800a9d8:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800a9dc:	483e      	ldr	r0, [pc, #248]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800a9de:	f7f9 ff48 	bl	8004872 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6859      	ldr	r1, [r3, #4]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f000 fc32 	bl	800b258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2150      	movs	r1, #80	; 0x50
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fc8b 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800aa00:	e10a      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a2f      	ldr	r2, [pc, #188]	; (800aac4 <HAL_TIM_ConfigClockSource+0x570>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d027      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa14:	d022      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a2b      	ldr	r2, [pc, #172]	; (800aac8 <HAL_TIM_ConfigClockSource+0x574>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d01d      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a29      	ldr	r2, [pc, #164]	; (800aacc <HAL_TIM_ConfigClockSource+0x578>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d018      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a28      	ldr	r2, [pc, #160]	; (800aad0 <HAL_TIM_ConfigClockSource+0x57c>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d013      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <HAL_TIM_ConfigClockSource+0x580>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d00e      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a26      	ldr	r2, [pc, #152]	; (800aadc <HAL_TIM_ConfigClockSource+0x588>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d009      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a24      	ldr	r2, [pc, #144]	; (800aae0 <HAL_TIM_ConfigClockSource+0x58c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d004      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0x508>
 800aa52:	f241 510a 	movw	r1, #5386	; 0x150a
 800aa56:	4820      	ldr	r0, [pc, #128]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800aa58:	f7f9 ff0b 	bl	8004872 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa64:	d014      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x53c>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d010      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x53c>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00c      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x53c>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d008      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x53c>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2b0a      	cmp	r3, #10
 800aa84:	d004      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x53c>
 800aa86:	f241 510d 	movw	r1, #5389	; 0x150d
 800aa8a:	4813      	ldr	r0, [pc, #76]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800aa8c:	f7f9 fef1 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	2b0f      	cmp	r3, #15
 800aa96:	d904      	bls.n	800aaa2 <HAL_TIM_ConfigClockSource+0x54e>
 800aa98:	f241 510e 	movw	r1, #5390	; 0x150e
 800aa9c:	480e      	ldr	r0, [pc, #56]	; (800aad8 <HAL_TIM_ConfigClockSource+0x584>)
 800aa9e:	f7f9 fee8 	bl	8004872 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	6859      	ldr	r1, [r3, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f000 fc01 	bl	800b2b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2160      	movs	r1, #96	; 0x60
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fc2b 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800aac0:	e0aa      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
 800aac2:	bf00      	nop
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40000400 	.word	0x40000400
 800aacc:	40000800 	.word	0x40000800
 800aad0:	40000c00 	.word	0x40000c00
 800aad4:	40010400 	.word	0x40010400
 800aad8:	08012190 	.word	0x08012190
 800aadc:	40014000 	.word	0x40014000
 800aae0:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a52      	ldr	r2, [pc, #328]	; (800ac34 <HAL_TIM_ConfigClockSource+0x6e0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d027      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf6:	d022      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a4e      	ldr	r2, [pc, #312]	; (800ac38 <HAL_TIM_ConfigClockSource+0x6e4>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d01d      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a4d      	ldr	r2, [pc, #308]	; (800ac3c <HAL_TIM_ConfigClockSource+0x6e8>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d018      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a4b      	ldr	r2, [pc, #300]	; (800ac40 <HAL_TIM_ConfigClockSource+0x6ec>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d013      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a4a      	ldr	r2, [pc, #296]	; (800ac44 <HAL_TIM_ConfigClockSource+0x6f0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00e      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a48      	ldr	r2, [pc, #288]	; (800ac48 <HAL_TIM_ConfigClockSource+0x6f4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d009      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a47      	ldr	r2, [pc, #284]	; (800ac4c <HAL_TIM_ConfigClockSource+0x6f8>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d004      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x5ea>
 800ab34:	f241 511a 	movw	r1, #5402	; 0x151a
 800ab38:	4845      	ldr	r0, [pc, #276]	; (800ac50 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ab3a:	f7f9 fe9a 	bl	8004872 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab46:	d014      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0x61e>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d010      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0x61e>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00c      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0x61e>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d008      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0x61e>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b0a      	cmp	r3, #10
 800ab66:	d004      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0x61e>
 800ab68:	f241 511d 	movw	r1, #5405	; 0x151d
 800ab6c:	4838      	ldr	r0, [pc, #224]	; (800ac50 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ab6e:	f7f9 fe80 	bl	8004872 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b0f      	cmp	r3, #15
 800ab78:	d904      	bls.n	800ab84 <HAL_TIM_ConfigClockSource+0x630>
 800ab7a:	f241 511e 	movw	r1, #5406	; 0x151e
 800ab7e:	4834      	ldr	r0, [pc, #208]	; (800ac50 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ab80:	f7f9 fe77 	bl	8004872 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	6859      	ldr	r1, [r3, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f000 fb61 	bl	800b258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2140      	movs	r1, #64	; 0x40
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fbba 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800aba2:	e039      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a22      	ldr	r2, [pc, #136]	; (800ac34 <HAL_TIM_ConfigClockSource+0x6e0>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d027      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb6:	d022      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1e      	ldr	r2, [pc, #120]	; (800ac38 <HAL_TIM_ConfigClockSource+0x6e4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01d      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1d      	ldr	r2, [pc, #116]	; (800ac3c <HAL_TIM_ConfigClockSource+0x6e8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d018      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a1b      	ldr	r2, [pc, #108]	; (800ac40 <HAL_TIM_ConfigClockSource+0x6ec>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d013      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a1a      	ldr	r2, [pc, #104]	; (800ac44 <HAL_TIM_ConfigClockSource+0x6f0>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00e      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <HAL_TIM_ConfigClockSource+0x6f4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d009      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a17      	ldr	r2, [pc, #92]	; (800ac4c <HAL_TIM_ConfigClockSource+0x6f8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d004      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x6aa>
 800abf4:	f241 512d 	movw	r1, #5421	; 0x152d
 800abf8:	4815      	ldr	r0, [pc, #84]	; (800ac50 <HAL_TIM_ConfigClockSource+0x6fc>)
 800abfa:	f7f9 fe3a 	bl	8004872 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 fb84 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800ac0e:	e003      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800ac16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40000400 	.word	0x40000400
 800ac3c:	40000800 	.word	0x40000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	40010400 	.word	0x40010400
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	40001800 	.word	0x40001800
 800ac50:	08012190 	.word	0x08012190

0800ac54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a40      	ldr	r2, [pc, #256]	; (800adb8 <TIM_Base_SetConfig+0x114>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d013      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc2:	d00f      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a3d      	ldr	r2, [pc, #244]	; (800adbc <TIM_Base_SetConfig+0x118>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00b      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a3c      	ldr	r2, [pc, #240]	; (800adc0 <TIM_Base_SetConfig+0x11c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d007      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a3b      	ldr	r2, [pc, #236]	; (800adc4 <TIM_Base_SetConfig+0x120>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a3a      	ldr	r2, [pc, #232]	; (800adc8 <TIM_Base_SetConfig+0x124>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d108      	bne.n	800acf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a2f      	ldr	r2, [pc, #188]	; (800adb8 <TIM_Base_SetConfig+0x114>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d02b      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad04:	d027      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a2c      	ldr	r2, [pc, #176]	; (800adbc <TIM_Base_SetConfig+0x118>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d023      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a2b      	ldr	r2, [pc, #172]	; (800adc0 <TIM_Base_SetConfig+0x11c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d01f      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a2a      	ldr	r2, [pc, #168]	; (800adc4 <TIM_Base_SetConfig+0x120>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01b      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a29      	ldr	r2, [pc, #164]	; (800adc8 <TIM_Base_SetConfig+0x124>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d017      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a28      	ldr	r2, [pc, #160]	; (800adcc <TIM_Base_SetConfig+0x128>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d013      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a27      	ldr	r2, [pc, #156]	; (800add0 <TIM_Base_SetConfig+0x12c>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d00f      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a26      	ldr	r2, [pc, #152]	; (800add4 <TIM_Base_SetConfig+0x130>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00b      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a25      	ldr	r2, [pc, #148]	; (800add8 <TIM_Base_SetConfig+0x134>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d007      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a24      	ldr	r2, [pc, #144]	; (800addc <TIM_Base_SetConfig+0x138>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d003      	beq.n	800ad56 <TIM_Base_SetConfig+0xb2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a23      	ldr	r2, [pc, #140]	; (800ade0 <TIM_Base_SetConfig+0x13c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d108      	bne.n	800ad68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a0a      	ldr	r2, [pc, #40]	; (800adb8 <TIM_Base_SetConfig+0x114>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d003      	beq.n	800ad9c <TIM_Base_SetConfig+0xf8>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a0c      	ldr	r2, [pc, #48]	; (800adc8 <TIM_Base_SetConfig+0x124>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d103      	bne.n	800ada4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	691a      	ldr	r2, [r3, #16]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	615a      	str	r2, [r3, #20]
}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40010000 	.word	0x40010000
 800adbc:	40000400 	.word	0x40000400
 800adc0:	40000800 	.word	0x40000800
 800adc4:	40000c00 	.word	0x40000c00
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40014400 	.word	0x40014400
 800add4:	40014800 	.word	0x40014800
 800add8:	40001800 	.word	0x40001800
 800addc:	40001c00 	.word	0x40001c00
 800ade0:	40002000 	.word	0x40002000

0800ade4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	f023 0201 	bic.w	r2, r3, #1
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 0303 	bic.w	r3, r3, #3
 800ae1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f023 0302 	bic.w	r3, r3, #2
 800ae2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a34      	ldr	r2, [pc, #208]	; (800af0c <TIM_OC1_SetConfig+0x128>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_OC1_SetConfig+0x64>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a33      	ldr	r2, [pc, #204]	; (800af10 <TIM_OC1_SetConfig+0x12c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d119      	bne.n	800ae7c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d008      	beq.n	800ae62 <TIM_OC1_SetConfig+0x7e>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	2b08      	cmp	r3, #8
 800ae56:	d004      	beq.n	800ae62 <TIM_OC1_SetConfig+0x7e>
 800ae58:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800ae5c:	482d      	ldr	r0, [pc, #180]	; (800af14 <TIM_OC1_SetConfig+0x130>)
 800ae5e:	f7f9 fd08 	bl	8004872 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f023 0308 	bic.w	r3, r3, #8
 800ae68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f023 0304 	bic.w	r3, r3, #4
 800ae7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a23      	ldr	r2, [pc, #140]	; (800af0c <TIM_OC1_SetConfig+0x128>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d003      	beq.n	800ae8c <TIM_OC1_SetConfig+0xa8>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a22      	ldr	r2, [pc, #136]	; (800af10 <TIM_OC1_SetConfig+0x12c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d12d      	bne.n	800aee8 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae94:	d008      	beq.n	800aea8 <TIM_OC1_SetConfig+0xc4>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <TIM_OC1_SetConfig+0xc4>
 800ae9e:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800aea2:	481c      	ldr	r0, [pc, #112]	; (800af14 <TIM_OC1_SetConfig+0x130>)
 800aea4:	f7f9 fce5 	bl	8004872 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	695b      	ldr	r3, [r3, #20]
 800aeac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb0:	d008      	beq.n	800aec4 <TIM_OC1_SetConfig+0xe0>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <TIM_OC1_SetConfig+0xe0>
 800aeba:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800aebe:	4815      	ldr	r0, [pc, #84]	; (800af14 <TIM_OC1_SetConfig+0x130>)
 800aec0:	f7f9 fcd7 	bl	8004872 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	621a      	str	r2, [r3, #32]
}
 800af02:	bf00      	nop
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	40010000 	.word	0x40010000
 800af10:	40010400 	.word	0x40010400
 800af14:	08012190 	.word	0x08012190

0800af18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	4313      	orrs	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f023 0320 	bic.w	r3, r3, #32
 800af62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a35      	ldr	r2, [pc, #212]	; (800b048 <TIM_OC2_SetConfig+0x130>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d003      	beq.n	800af80 <TIM_OC2_SetConfig+0x68>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a34      	ldr	r2, [pc, #208]	; (800b04c <TIM_OC2_SetConfig+0x134>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d11a      	bne.n	800afb6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d008      	beq.n	800af9a <TIM_OC2_SetConfig+0x82>
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d004      	beq.n	800af9a <TIM_OC2_SetConfig+0x82>
 800af90:	f641 3116 	movw	r1, #6934	; 0x1b16
 800af94:	482e      	ldr	r0, [pc, #184]	; (800b050 <TIM_OC2_SetConfig+0x138>)
 800af96:	f7f9 fc6c 	bl	8004872 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	4313      	orrs	r3, r2
 800afac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a23      	ldr	r2, [pc, #140]	; (800b048 <TIM_OC2_SetConfig+0x130>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d003      	beq.n	800afc6 <TIM_OC2_SetConfig+0xae>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a22      	ldr	r2, [pc, #136]	; (800b04c <TIM_OC2_SetConfig+0x134>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d12f      	bne.n	800b026 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afce:	d008      	beq.n	800afe2 <TIM_OC2_SetConfig+0xca>
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <TIM_OC2_SetConfig+0xca>
 800afd8:	f641 3124 	movw	r1, #6948	; 0x1b24
 800afdc:	481c      	ldr	r0, [pc, #112]	; (800b050 <TIM_OC2_SetConfig+0x138>)
 800afde:	f7f9 fc48 	bl	8004872 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afea:	d008      	beq.n	800affe <TIM_OC2_SetConfig+0xe6>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <TIM_OC2_SetConfig+0xe6>
 800aff4:	f641 3125 	movw	r1, #6949	; 0x1b25
 800aff8:	4815      	ldr	r0, [pc, #84]	; (800b050 <TIM_OC2_SetConfig+0x138>)
 800affa:	f7f9 fc3a 	bl	8004872 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	4313      	orrs	r3, r2
 800b018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	621a      	str	r2, [r3, #32]
}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010400 	.word	0x40010400
 800b050:	08012190 	.word	0x08012190

0800b054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a35      	ldr	r2, [pc, #212]	; (800b184 <TIM_OC3_SetConfig+0x130>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d003      	beq.n	800b0ba <TIM_OC3_SetConfig+0x66>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a34      	ldr	r2, [pc, #208]	; (800b188 <TIM_OC3_SetConfig+0x134>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d11a      	bne.n	800b0f0 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d008      	beq.n	800b0d4 <TIM_OC3_SetConfig+0x80>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	2b08      	cmp	r3, #8
 800b0c8:	d004      	beq.n	800b0d4 <TIM_OC3_SetConfig+0x80>
 800b0ca:	f641 3161 	movw	r1, #7009	; 0x1b61
 800b0ce:	482f      	ldr	r0, [pc, #188]	; (800b18c <TIM_OC3_SetConfig+0x138>)
 800b0d0:	f7f9 fbcf 	bl	8004872 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a24      	ldr	r2, [pc, #144]	; (800b184 <TIM_OC3_SetConfig+0x130>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d003      	beq.n	800b100 <TIM_OC3_SetConfig+0xac>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a23      	ldr	r2, [pc, #140]	; (800b188 <TIM_OC3_SetConfig+0x134>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d12f      	bne.n	800b160 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b108:	d008      	beq.n	800b11c <TIM_OC3_SetConfig+0xc8>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <TIM_OC3_SetConfig+0xc8>
 800b112:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800b116:	481d      	ldr	r0, [pc, #116]	; (800b18c <TIM_OC3_SetConfig+0x138>)
 800b118:	f7f9 fbab 	bl	8004872 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b124:	d008      	beq.n	800b138 <TIM_OC3_SetConfig+0xe4>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <TIM_OC3_SetConfig+0xe4>
 800b12e:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800b132:	4816      	ldr	r0, [pc, #88]	; (800b18c <TIM_OC3_SetConfig+0x138>)
 800b134:	f7f9 fb9d 	bl	8004872 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b13e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	011b      	lsls	r3, r3, #4
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	621a      	str	r2, [r3, #32]
}
 800b17a:	bf00      	nop
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	40010000 	.word	0x40010000
 800b188:	40010400 	.word	0x40010400
 800b18c:	08012190 	.word	0x08012190

0800b190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	031b      	lsls	r3, r3, #12
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a18      	ldr	r2, [pc, #96]	; (800b24c <TIM_OC4_SetConfig+0xbc>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC4_SetConfig+0x68>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a17      	ldr	r2, [pc, #92]	; (800b250 <TIM_OC4_SetConfig+0xc0>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d117      	bne.n	800b228 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b200:	d008      	beq.n	800b214 <TIM_OC4_SetConfig+0x84>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <TIM_OC4_SetConfig+0x84>
 800b20a:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800b20e:	4811      	ldr	r0, [pc, #68]	; (800b254 <TIM_OC4_SetConfig+0xc4>)
 800b210:	f7f9 fb2f 	bl	8004872 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b21a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	019b      	lsls	r3, r3, #6
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	621a      	str	r2, [r3, #32]
}
 800b242:	bf00      	nop
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40010000 	.word	0x40010000
 800b250:	40010400 	.word	0x40010400
 800b254:	08012190 	.word	0x08012190

0800b258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	f023 0201 	bic.w	r2, r3, #1
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f023 030a 	bic.w	r3, r3, #10
 800b294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	621a      	str	r2, [r3, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 0210 	bic.w	r2, r3, #16
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	031b      	lsls	r3, r3, #12
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	f043 0307 	orr.w	r3, r3, #7
 800b338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	609a      	str	r2, [r3, #8]
}
 800b340:	bf00      	nop
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	021a      	lsls	r2, r3, #8
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	431a      	orrs	r2, r3
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4313      	orrs	r3, r2
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	609a      	str	r2, [r3, #8]
}
 800b380:	bf00      	nop
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4a32      	ldr	r2, [pc, #200]	; (800b464 <TIM_CCxChannelCmd+0xd8>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d030      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a6:	d02c      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	4a2f      	ldr	r2, [pc, #188]	; (800b468 <TIM_CCxChannelCmd+0xdc>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d028      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <TIM_CCxChannelCmd+0xe0>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d024      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4a2d      	ldr	r2, [pc, #180]	; (800b470 <TIM_CCxChannelCmd+0xe4>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d020      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a2c      	ldr	r2, [pc, #176]	; (800b474 <TIM_CCxChannelCmd+0xe8>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d01c      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4a2b      	ldr	r2, [pc, #172]	; (800b478 <TIM_CCxChannelCmd+0xec>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d018      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4a2a      	ldr	r2, [pc, #168]	; (800b47c <TIM_CCxChannelCmd+0xf0>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d014      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4a29      	ldr	r2, [pc, #164]	; (800b480 <TIM_CCxChannelCmd+0xf4>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d010      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4a28      	ldr	r2, [pc, #160]	; (800b484 <TIM_CCxChannelCmd+0xf8>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d00c      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a27      	ldr	r2, [pc, #156]	; (800b488 <TIM_CCxChannelCmd+0xfc>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d008      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a26      	ldr	r2, [pc, #152]	; (800b48c <TIM_CCxChannelCmd+0x100>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d004      	beq.n	800b402 <TIM_CCxChannelCmd+0x76>
 800b3f8:	f641 5198 	movw	r1, #7576	; 0x1d98
 800b3fc:	4824      	ldr	r0, [pc, #144]	; (800b490 <TIM_CCxChannelCmd+0x104>)
 800b3fe:	f7f9 fa38 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d010      	beq.n	800b42a <TIM_CCxChannelCmd+0x9e>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	d00d      	beq.n	800b42a <TIM_CCxChannelCmd+0x9e>
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b08      	cmp	r3, #8
 800b412:	d00a      	beq.n	800b42a <TIM_CCxChannelCmd+0x9e>
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b0c      	cmp	r3, #12
 800b418:	d007      	beq.n	800b42a <TIM_CCxChannelCmd+0x9e>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b3c      	cmp	r3, #60	; 0x3c
 800b41e:	d004      	beq.n	800b42a <TIM_CCxChannelCmd+0x9e>
 800b420:	f641 5199 	movw	r1, #7577	; 0x1d99
 800b424:	481a      	ldr	r0, [pc, #104]	; (800b490 <TIM_CCxChannelCmd+0x104>)
 800b426:	f7f9 fa24 	bl	8004872 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f003 031f 	and.w	r3, r3, #31
 800b430:	2201      	movs	r2, #1
 800b432:	fa02 f303 	lsl.w	r3, r2, r3
 800b436:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a1a      	ldr	r2, [r3, #32]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	43db      	mvns	r3, r3
 800b440:	401a      	ands	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a1a      	ldr	r2, [r3, #32]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	fa01 f303 	lsl.w	r3, r1, r3
 800b456:	431a      	orrs	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	621a      	str	r2, [r3, #32]
}
 800b45c:	bf00      	nop
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	40010000 	.word	0x40010000
 800b468:	40000400 	.word	0x40000400
 800b46c:	40000800 	.word	0x40000800
 800b470:	40000c00 	.word	0x40000c00
 800b474:	40010400 	.word	0x40010400
 800b478:	40014000 	.word	0x40014000
 800b47c:	40014400 	.word	0x40014400
 800b480:	40014800 	.word	0x40014800
 800b484:	40001800 	.word	0x40001800
 800b488:	40001c00 	.word	0x40001c00
 800b48c:	40002000 	.word	0x40002000
 800b490:	08012190 	.word	0x08012190

0800b494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a61      	ldr	r2, [pc, #388]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d027      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4b0:	d022      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a5d      	ldr	r2, [pc, #372]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d01d      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a5b      	ldr	r2, [pc, #364]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d018      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a5a      	ldr	r2, [pc, #360]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d013      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a58      	ldr	r2, [pc, #352]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00e      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a57      	ldr	r2, [pc, #348]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d009      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a55      	ldr	r2, [pc, #340]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d004      	beq.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b4ee:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800b4f2:	4854      	ldr	r0, [pc, #336]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b4f4:	f7f9 f9bd 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d020      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b10      	cmp	r3, #16
 800b506:	d01c      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d018      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b30      	cmp	r3, #48	; 0x30
 800b516:	d014      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d010      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b50      	cmp	r3, #80	; 0x50
 800b526:	d00c      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b60      	cmp	r3, #96	; 0x60
 800b52e:	d008      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b70      	cmp	r3, #112	; 0x70
 800b536:	d004      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b538:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800b53c:	4841      	ldr	r0, [pc, #260]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b53e:	f7f9 f998 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b80      	cmp	r3, #128	; 0x80
 800b548:	d008      	beq.n	800b55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b552:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800b556:	483b      	ldr	r0, [pc, #236]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b558:	f7f9 f98b 	bl	8004872 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d101      	bne.n	800b56a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b566:	2302      	movs	r3, #2
 800b568:	e05a      	b.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2202      	movs	r2, #2
 800b576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	4313      	orrs	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a1f      	ldr	r2, [pc, #124]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d022      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b6:	d01d      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a1b      	ldr	r2, [pc, #108]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d018      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a1a      	ldr	r2, [pc, #104]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d013      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a18      	ldr	r2, [pc, #96]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00e      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a19      	ldr	r2, [pc, #100]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d009      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a18      	ldr	r2, [pc, #96]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d004      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a17      	ldr	r2, [pc, #92]	; (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d10c      	bne.n	800b60e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	4313      	orrs	r3, r2
 800b604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40010000 	.word	0x40010000
 800b62c:	40000400 	.word	0x40000400
 800b630:	40000800 	.word	0x40000800
 800b634:	40000c00 	.word	0x40000c00
 800b638:	40001000 	.word	0x40001000
 800b63c:	40001400 	.word	0x40001400
 800b640:	40010400 	.word	0x40010400
 800b644:	080121c8 	.word	0x080121c8
 800b648:	40014000 	.word	0x40014000
 800b64c:	40001800 	.word	0x40001800

0800b650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a5e      	ldr	r2, [pc, #376]	; (800b7dc <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d009      	beq.n	800b67c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a5c      	ldr	r2, [pc, #368]	; (800b7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d004      	beq.n	800b67c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b672:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800b676:	485b      	ldr	r0, [pc, #364]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b678:	f7f9 f8fb 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b684:	d008      	beq.n	800b698 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b68e:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800b692:	4854      	ldr	r0, [pc, #336]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b694:	f7f9 f8ed 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a0:	d008      	beq.n	800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d004      	beq.n	800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b6aa:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800b6ae:	484d      	ldr	r0, [pc, #308]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b6b0:	f7f9 f8df 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d013      	beq.n	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c4:	d00e      	beq.n	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ce:	d009      	beq.n	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6d8:	d004      	beq.n	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b6da:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800b6de:	4841      	ldr	r0, [pc, #260]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b6e0:	f7f9 f8c7 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2bff      	cmp	r3, #255	; 0xff
 800b6ea:	d904      	bls.n	800b6f6 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800b6ec:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800b6f0:	483c      	ldr	r0, [pc, #240]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b6f2:	f7f9 f8be 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fe:	d008      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b708:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800b70c:	4835      	ldr	r0, [pc, #212]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b70e:	f7f9 f8b0 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b722:	d004      	beq.n	800b72e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b724:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800b728:	482e      	ldr	r0, [pc, #184]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b72a:	f7f9 f8a2 	bl	8004872 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b736:	d008      	beq.n	800b74a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d004      	beq.n	800b74a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b740:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800b744:	4827      	ldr	r0, [pc, #156]	; (800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b746:	f7f9 f894 	bl	8004872 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800b754:	2302      	movs	r3, #2
 800b756:	e03d      	b.n	800b7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4313      	orrs	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	40010000 	.word	0x40010000
 800b7e0:	40010400 	.word	0x40010400
 800b7e4:	080121c8 	.word	0x080121c8

0800b7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e0be      	b.n	800b9a0 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d03b      	beq.n	800b8a2 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a5e      	ldr	r2, [pc, #376]	; (800b9a8 <HAL_UART_Init+0x198>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d01d      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a5c      	ldr	r2, [pc, #368]	; (800b9ac <HAL_UART_Init+0x19c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d018      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a5b      	ldr	r2, [pc, #364]	; (800b9b0 <HAL_UART_Init+0x1a0>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d013      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a59      	ldr	r2, [pc, #356]	; (800b9b4 <HAL_UART_Init+0x1a4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d00e      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a58      	ldr	r2, [pc, #352]	; (800b9b8 <HAL_UART_Init+0x1a8>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d009      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a56      	ldr	r2, [pc, #344]	; (800b9bc <HAL_UART_Init+0x1ac>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d004      	beq.n	800b870 <HAL_UART_Init+0x60>
 800b866:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800b86a:	4855      	ldr	r0, [pc, #340]	; (800b9c0 <HAL_UART_Init+0x1b0>)
 800b86c:	f7f9 f801 	bl	8004872 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d037      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b880:	d032      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b88a:	d02d      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b894:	d028      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b896:	f240 1173 	movw	r1, #371	; 0x173
 800b89a:	4849      	ldr	r0, [pc, #292]	; (800b9c0 <HAL_UART_Init+0x1b0>)
 800b89c:	f7f8 ffe9 	bl	8004872 <assert_failed>
 800b8a0:	e022      	b.n	800b8e8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a40      	ldr	r2, [pc, #256]	; (800b9a8 <HAL_UART_Init+0x198>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d01d      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a3e      	ldr	r2, [pc, #248]	; (800b9ac <HAL_UART_Init+0x19c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d018      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a3d      	ldr	r2, [pc, #244]	; (800b9b0 <HAL_UART_Init+0x1a0>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d013      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a3b      	ldr	r2, [pc, #236]	; (800b9b4 <HAL_UART_Init+0x1a4>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00e      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a3a      	ldr	r2, [pc, #232]	; (800b9b8 <HAL_UART_Init+0x1a8>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d009      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a38      	ldr	r2, [pc, #224]	; (800b9bc <HAL_UART_Init+0x1ac>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d004      	beq.n	800b8e8 <HAL_UART_Init+0xd8>
 800b8de:	f240 1177 	movw	r1, #375	; 0x177
 800b8e2:	4837      	ldr	r0, [pc, #220]	; (800b9c0 <HAL_UART_Init+0x1b0>)
 800b8e4:	f7f8 ffc5 	bl	8004872 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <HAL_UART_Init+0xf4>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f8:	d004      	beq.n	800b904 <HAL_UART_Init+0xf4>
 800b8fa:	f240 1179 	movw	r1, #377	; 0x179
 800b8fe:	4830      	ldr	r0, [pc, #192]	; (800b9c0 <HAL_UART_Init+0x1b0>)
 800b900:	f7f8 ffb7 	bl	8004872 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <HAL_UART_Init+0x110>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b914:	d004      	beq.n	800b920 <HAL_UART_Init+0x110>
 800b916:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b91a:	4829      	ldr	r0, [pc, #164]	; (800b9c0 <HAL_UART_Init+0x1b0>)
 800b91c:	f7f8 ffa9 	bl	8004872 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7f9 fb79 	bl	800502c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2224      	movs	r2, #36	; 0x24
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b950:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fc7e 	bl	800c254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	691a      	ldr	r2, [r3, #16]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b966:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b976:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b986:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	40011000 	.word	0x40011000
 800b9ac:	40004400 	.word	0x40004400
 800b9b0:	40004800 	.word	0x40004800
 800b9b4:	40004c00 	.word	0x40004c00
 800b9b8:	40005000 	.word	0x40005000
 800b9bc:	40011400 	.word	0x40011400
 800b9c0:	08012204 	.word	0x08012204

0800b9c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0ba      	sub	sp, #232	; 0xe8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10f      	bne.n	800ba2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
 800ba16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fb5b 	bl	800c0de <UART_Receive_IT>
      return;
 800ba28:	e256      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80de 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
 800ba34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80d1 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00b      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	f043 0201 	orr.w	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
 800ba7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8e:	f043 0202 	orr.w	r2, r3, #2
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
 800baa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	f043 0204 	orr.w	r2, r3, #4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babe:	f003 0308 	and.w	r3, r3, #8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d011      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
 800bac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d105      	bne.n	800bade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae2:	f043 0208 	orr.w	r2, r3, #8
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 81ed 	beq.w	800bece <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fae6 	bl	800c0de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1c:	2b40      	cmp	r3, #64	; 0x40
 800bb1e:	bf0c      	ite	eq
 800bb20:	2301      	moveq	r3, #1
 800bb22:	2300      	movne	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <HAL_UART_IRQHandler+0x17a>
 800bb36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d04f      	beq.n	800bbde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9ee 	bl	800bf20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b40      	cmp	r3, #64	; 0x40
 800bb50:	d141      	bne.n	800bbd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3314      	adds	r3, #20
 800bb58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3314      	adds	r3, #20
 800bb7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb8e:	e841 2300 	strex	r3, r2, [r1]
 800bb92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1d9      	bne.n	800bb52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d013      	beq.n	800bbce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	4a7d      	ldr	r2, [pc, #500]	; (800bda0 <HAL_UART_IRQHandler+0x3dc>)
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fa f824 	bl	8005c00 <HAL_DMA_Abort_IT>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d016      	beq.n	800bbec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbcc:	e00e      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f990 	bl	800bef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd4:	e00a      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f98c 	bl	800bef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbdc:	e006      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f988 	bl	800bef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bbea:	e170      	b.n	800bece <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbec:	bf00      	nop
    return;
 800bbee:	e16e      	b.n	800bece <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	f040 814a 	bne.w	800be8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	f003 0310 	and.w	r3, r3, #16
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8143 	beq.w	800be8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 813c 	beq.w	800be8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc16:	2300      	movs	r3, #0
 800bc18:	60bb      	str	r3, [r7, #8]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60bb      	str	r3, [r7, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc36:	2b40      	cmp	r3, #64	; 0x40
 800bc38:	f040 80b4 	bne.w	800bda4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8140 	beq.w	800bed2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	f080 8139 	bcs.w	800bed2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc72:	f000 8088 	beq.w	800bd86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	330c      	adds	r3, #12
 800bc7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	330c      	adds	r3, #12
 800bc9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcb2:	e841 2300 	strex	r3, r2, [r1]
 800bcb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1d9      	bne.n	800bc76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bccc:	e853 3f00 	ldrex	r3, [r3]
 800bcd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcd4:	f023 0301 	bic.w	r3, r3, #1
 800bcd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3314      	adds	r3, #20
 800bce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bce6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e1      	bne.n	800bcc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3314      	adds	r3, #20
 800bd04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd08:	e853 3f00 	ldrex	r3, [r3]
 800bd0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e3      	bne.n	800bcfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	330c      	adds	r3, #12
 800bd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd56:	f023 0310 	bic.w	r3, r3, #16
 800bd5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	330c      	adds	r3, #12
 800bd64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd68:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e3      	bne.n	800bd44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f9 fecd 	bl	8005b20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f8b6 	bl	800bf08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd9c:	e099      	b.n	800bed2 <HAL_UART_IRQHandler+0x50e>
 800bd9e:	bf00      	nop
 800bda0:	0800bfe7 	.word	0x0800bfe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 808b 	beq.w	800bed6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bdc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 8086 	beq.w	800bed6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	330c      	adds	r3, #12
 800bdd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	e853 3f00 	ldrex	r3, [r3]
 800bdd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bde0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	330c      	adds	r3, #12
 800bdea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdee:	647a      	str	r2, [r7, #68]	; 0x44
 800bdf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdf6:	e841 2300 	strex	r3, r2, [r1]
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1e3      	bne.n	800bdca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3314      	adds	r3, #20
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	e853 3f00 	ldrex	r3, [r3]
 800be10:	623b      	str	r3, [r7, #32]
   return(result);
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	f023 0301 	bic.w	r3, r3, #1
 800be18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3314      	adds	r3, #20
 800be22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be26:	633a      	str	r2, [r7, #48]	; 0x30
 800be28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1e3      	bne.n	800be02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2220      	movs	r2, #32
 800be3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	330c      	adds	r3, #12
 800be4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	60fb      	str	r3, [r7, #12]
   return(result);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f023 0310 	bic.w	r3, r3, #16
 800be5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be6c:	61fa      	str	r2, [r7, #28]
 800be6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	69b9      	ldr	r1, [r7, #24]
 800be72:	69fa      	ldr	r2, [r7, #28]
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	617b      	str	r3, [r7, #20]
   return(result);
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e3      	bne.n	800be48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f83e 	bl	800bf08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be8c:	e023      	b.n	800bed6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <HAL_UART_IRQHandler+0x4ea>
 800be9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f8b1 	bl	800c00e <UART_Transmit_IT>
    return;
 800beac:	e014      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800beae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <HAL_UART_IRQHandler+0x514>
 800beba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d008      	beq.n	800bed8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f8f1 	bl	800c0ae <UART_EndTransmit_IT>
    return;
 800becc:	e004      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
    return;
 800bece:	bf00      	nop
 800bed0:	e002      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
      return;
 800bed2:	bf00      	nop
 800bed4:	e000      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
      return;
 800bed6:	bf00      	nop
  }
}
 800bed8:	37e8      	adds	r7, #232	; 0xe8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop

0800bee0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b095      	sub	sp, #84	; 0x54
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf32:	e853 3f00 	ldrex	r3, [r3]
 800bf36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf48:	643a      	str	r2, [r7, #64]	; 0x40
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf50:	e841 2300 	strex	r3, r2, [r1]
 800bf54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e5      	bne.n	800bf28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3314      	adds	r3, #20
 800bf62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	f023 0301 	bic.w	r3, r3, #1
 800bf72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3314      	adds	r3, #20
 800bf7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf84:	e841 2300 	strex	r3, r2, [r1]
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e5      	bne.n	800bf5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d119      	bne.n	800bfcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f023 0310 	bic.w	r3, r3, #16
 800bfae:	647b      	str	r3, [r7, #68]	; 0x44
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb8:	61ba      	str	r2, [r7, #24]
 800bfba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	6979      	ldr	r1, [r7, #20]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e5      	bne.n	800bf98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfda:	bf00      	nop
 800bfdc:	3754      	adds	r7, #84	; 0x54
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff ff77 	bl	800bef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c00e:	b480      	push	{r7}
 800c010:	b085      	sub	sp, #20
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b21      	cmp	r3, #33	; 0x21
 800c020:	d13e      	bne.n	800c0a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02a:	d114      	bne.n	800c056 <UART_Transmit_IT+0x48>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d110      	bne.n	800c056 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c048:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	1c9a      	adds	r2, r3, #2
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	621a      	str	r2, [r3, #32]
 800c054:	e008      	b.n	800c068 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	1c59      	adds	r1, r3, #1
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6211      	str	r1, [r2, #32]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	3b01      	subs	r3, #1
 800c070:	b29b      	uxth	r3, r3
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4619      	mov	r1, r3
 800c076:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10f      	bne.n	800c09c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68da      	ldr	r2, [r3, #12]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c08a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c09a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	e000      	b.n	800c0a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0a0:	2302      	movs	r3, #2
  }
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff ff06 	bl	800bee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b08c      	sub	sp, #48	; 0x30
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b22      	cmp	r3, #34	; 0x22
 800c0f0:	f040 80ab 	bne.w	800c24a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fc:	d117      	bne.n	800c12e <UART_Receive_IT+0x50>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d113      	bne.n	800c12e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	b29b      	uxth	r3, r3
 800c118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	1c9a      	adds	r2, r3, #2
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28
 800c12c:	e026      	b.n	800c17c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c134:	2300      	movs	r3, #0
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c140:	d007      	beq.n	800c152 <UART_Receive_IT+0x74>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <UART_Receive_IT+0x82>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d106      	bne.n	800c160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	701a      	strb	r2, [r3, #0]
 800c15e:	e008      	b.n	800c172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c180:	b29b      	uxth	r3, r3
 800c182:	3b01      	subs	r3, #1
 800c184:	b29b      	uxth	r3, r3
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4619      	mov	r1, r3
 800c18a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d15a      	bne.n	800c246 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68da      	ldr	r2, [r3, #12]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0220 	bic.w	r2, r2, #32
 800c19e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695a      	ldr	r2, [r3, #20]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f022 0201 	bic.w	r2, r2, #1
 800c1be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d135      	bne.n	800c23c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	330c      	adds	r3, #12
 800c1dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	e853 3f00 	ldrex	r3, [r3]
 800c1e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f023 0310 	bic.w	r3, r3, #16
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	330c      	adds	r3, #12
 800c1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f6:	623a      	str	r2, [r7, #32]
 800c1f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	69f9      	ldr	r1, [r7, #28]
 800c1fc:	6a3a      	ldr	r2, [r7, #32]
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	61bb      	str	r3, [r7, #24]
   return(result);
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e5      	bne.n	800c1d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 0310 	and.w	r3, r3, #16
 800c214:	2b10      	cmp	r3, #16
 800c216:	d10a      	bne.n	800c22e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	60fb      	str	r3, [r7, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff fe67 	bl	800bf08 <HAL_UARTEx_RxEventCallback>
 800c23a:	e002      	b.n	800c242 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7f5 f805 	bl	800124c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	e002      	b.n	800c24c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	e000      	b.n	800c24c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c24a:	2302      	movs	r3, #2
  }
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3730      	adds	r7, #48	; 0x30
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	b09f      	sub	sp, #124	; 0x7c
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	4b9b      	ldr	r3, [pc, #620]	; (800c4d0 <UART_SetConfig+0x27c>)
 800c264:	429a      	cmp	r2, r3
 800c266:	d904      	bls.n	800c272 <UART_SetConfig+0x1e>
 800c268:	f640 6156 	movw	r1, #3670	; 0xe56
 800c26c:	4899      	ldr	r0, [pc, #612]	; (800c4d4 <UART_SetConfig+0x280>)
 800c26e:	f7f8 fb00 	bl	8004872 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d009      	beq.n	800c28e <UART_SetConfig+0x3a>
 800c27a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c282:	d004      	beq.n	800c28e <UART_SetConfig+0x3a>
 800c284:	f640 6157 	movw	r1, #3671	; 0xe57
 800c288:	4892      	ldr	r0, [pc, #584]	; (800c4d4 <UART_SetConfig+0x280>)
 800c28a:	f7f8 faf2 	bl	8004872 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00e      	beq.n	800c2b4 <UART_SetConfig+0x60>
 800c296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c29e:	d009      	beq.n	800c2b4 <UART_SetConfig+0x60>
 800c2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c2a8:	d004      	beq.n	800c2b4 <UART_SetConfig+0x60>
 800c2aa:	f640 6158 	movw	r1, #3672	; 0xe58
 800c2ae:	4889      	ldr	r0, [pc, #548]	; (800c4d4 <UART_SetConfig+0x280>)
 800c2b0:	f7f8 fadf 	bl	8004872 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c2b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b6:	695a      	ldr	r2, [r3, #20]
 800c2b8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800c2bc:	4013      	ands	r3, r2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d103      	bne.n	800c2ca <UART_SetConfig+0x76>
 800c2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d104      	bne.n	800c2d4 <UART_SetConfig+0x80>
 800c2ca:	f640 6159 	movw	r1, #3673	; 0xe59
 800c2ce:	4881      	ldr	r0, [pc, #516]	; (800c4d4 <UART_SetConfig+0x280>)
 800c2d0:	f7f8 facf 	bl	8004872 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e0:	68d9      	ldr	r1, [r3, #12]
 800c2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	ea40 0301 	orr.w	r3, r0, r1
 800c2ea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	4313      	orrs	r3, r2
 800c302:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c30e:	f021 010c 	bic.w	r1, r1, #12
 800c312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c318:	430b      	orrs	r3, r1
 800c31a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c328:	6999      	ldr	r1, [r3, #24]
 800c32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	ea40 0301 	orr.w	r3, r0, r1
 800c332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	4b67      	ldr	r3, [pc, #412]	; (800c4d8 <UART_SetConfig+0x284>)
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d004      	beq.n	800c348 <UART_SetConfig+0xf4>
 800c33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b66      	ldr	r3, [pc, #408]	; (800c4dc <UART_SetConfig+0x288>)
 800c344:	429a      	cmp	r2, r3
 800c346:	d103      	bne.n	800c350 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c348:	f7fb fc5a 	bl	8007c00 <HAL_RCC_GetPCLK2Freq>
 800c34c:	6778      	str	r0, [r7, #116]	; 0x74
 800c34e:	e002      	b.n	800c356 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c350:	f7fb fc42 	bl	8007bd8 <HAL_RCC_GetPCLK1Freq>
 800c354:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c35e:	f040 80c1 	bne.w	800c4e4 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c364:	461c      	mov	r4, r3
 800c366:	f04f 0500 	mov.w	r5, #0
 800c36a:	4622      	mov	r2, r4
 800c36c:	462b      	mov	r3, r5
 800c36e:	1891      	adds	r1, r2, r2
 800c370:	6439      	str	r1, [r7, #64]	; 0x40
 800c372:	415b      	adcs	r3, r3
 800c374:	647b      	str	r3, [r7, #68]	; 0x44
 800c376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c37a:	1912      	adds	r2, r2, r4
 800c37c:	eb45 0303 	adc.w	r3, r5, r3
 800c380:	f04f 0000 	mov.w	r0, #0
 800c384:	f04f 0100 	mov.w	r1, #0
 800c388:	00d9      	lsls	r1, r3, #3
 800c38a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c38e:	00d0      	lsls	r0, r2, #3
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	1911      	adds	r1, r2, r4
 800c396:	6639      	str	r1, [r7, #96]	; 0x60
 800c398:	416b      	adcs	r3, r5
 800c39a:	667b      	str	r3, [r7, #100]	; 0x64
 800c39c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f04f 0300 	mov.w	r3, #0
 800c3a6:	1891      	adds	r1, r2, r2
 800c3a8:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3aa:	415b      	adcs	r3, r3
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3b2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c3b6:	f7f4 fbed 	bl	8000b94 <__aeabi_uldivmod>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4b48      	ldr	r3, [pc, #288]	; (800c4e0 <UART_SetConfig+0x28c>)
 800c3c0:	fba3 2302 	umull	r2, r3, r3, r2
 800c3c4:	095b      	lsrs	r3, r3, #5
 800c3c6:	011e      	lsls	r6, r3, #4
 800c3c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3ca:	461c      	mov	r4, r3
 800c3cc:	f04f 0500 	mov.w	r5, #0
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	462b      	mov	r3, r5
 800c3d4:	1891      	adds	r1, r2, r2
 800c3d6:	6339      	str	r1, [r7, #48]	; 0x30
 800c3d8:	415b      	adcs	r3, r3
 800c3da:	637b      	str	r3, [r7, #52]	; 0x34
 800c3dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c3e0:	1912      	adds	r2, r2, r4
 800c3e2:	eb45 0303 	adc.w	r3, r5, r3
 800c3e6:	f04f 0000 	mov.w	r0, #0
 800c3ea:	f04f 0100 	mov.w	r1, #0
 800c3ee:	00d9      	lsls	r1, r3, #3
 800c3f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3f4:	00d0      	lsls	r0, r2, #3
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	1911      	adds	r1, r2, r4
 800c3fc:	65b9      	str	r1, [r7, #88]	; 0x58
 800c3fe:	416b      	adcs	r3, r5
 800c400:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	461a      	mov	r2, r3
 800c408:	f04f 0300 	mov.w	r3, #0
 800c40c:	1891      	adds	r1, r2, r2
 800c40e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c410:	415b      	adcs	r3, r3
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c418:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c41c:	f7f4 fbba 	bl	8000b94 <__aeabi_uldivmod>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4b2e      	ldr	r3, [pc, #184]	; (800c4e0 <UART_SetConfig+0x28c>)
 800c426:	fba3 1302 	umull	r1, r3, r3, r2
 800c42a:	095b      	lsrs	r3, r3, #5
 800c42c:	2164      	movs	r1, #100	; 0x64
 800c42e:	fb01 f303 	mul.w	r3, r1, r3
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	3332      	adds	r3, #50	; 0x32
 800c438:	4a29      	ldr	r2, [pc, #164]	; (800c4e0 <UART_SetConfig+0x28c>)
 800c43a:	fba2 2303 	umull	r2, r3, r2, r3
 800c43e:	095b      	lsrs	r3, r3, #5
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c446:	441e      	add	r6, r3
 800c448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c44a:	4618      	mov	r0, r3
 800c44c:	f04f 0100 	mov.w	r1, #0
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	1894      	adds	r4, r2, r2
 800c456:	623c      	str	r4, [r7, #32]
 800c458:	415b      	adcs	r3, r3
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
 800c45c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c460:	1812      	adds	r2, r2, r0
 800c462:	eb41 0303 	adc.w	r3, r1, r3
 800c466:	f04f 0400 	mov.w	r4, #0
 800c46a:	f04f 0500 	mov.w	r5, #0
 800c46e:	00dd      	lsls	r5, r3, #3
 800c470:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c474:	00d4      	lsls	r4, r2, #3
 800c476:	4622      	mov	r2, r4
 800c478:	462b      	mov	r3, r5
 800c47a:	1814      	adds	r4, r2, r0
 800c47c:	653c      	str	r4, [r7, #80]	; 0x50
 800c47e:	414b      	adcs	r3, r1
 800c480:	657b      	str	r3, [r7, #84]	; 0x54
 800c482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	461a      	mov	r2, r3
 800c488:	f04f 0300 	mov.w	r3, #0
 800c48c:	1891      	adds	r1, r2, r2
 800c48e:	61b9      	str	r1, [r7, #24]
 800c490:	415b      	adcs	r3, r3
 800c492:	61fb      	str	r3, [r7, #28]
 800c494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c498:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c49c:	f7f4 fb7a 	bl	8000b94 <__aeabi_uldivmod>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <UART_SetConfig+0x28c>)
 800c4a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c4aa:	095b      	lsrs	r3, r3, #5
 800c4ac:	2164      	movs	r1, #100	; 0x64
 800c4ae:	fb01 f303 	mul.w	r3, r1, r3
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	3332      	adds	r3, #50	; 0x32
 800c4b8:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <UART_SetConfig+0x28c>)
 800c4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c4be:	095b      	lsrs	r3, r3, #5
 800c4c0:	f003 0207 	and.w	r2, r3, #7
 800c4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4432      	add	r2, r6
 800c4ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c4cc:	e0c4      	b.n	800c658 <UART_SetConfig+0x404>
 800c4ce:	bf00      	nop
 800c4d0:	00a037a0 	.word	0x00a037a0
 800c4d4:	08012204 	.word	0x08012204
 800c4d8:	40011000 	.word	0x40011000
 800c4dc:	40011400 	.word	0x40011400
 800c4e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c4e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4e6:	461c      	mov	r4, r3
 800c4e8:	f04f 0500 	mov.w	r5, #0
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	1891      	adds	r1, r2, r2
 800c4f2:	6139      	str	r1, [r7, #16]
 800c4f4:	415b      	adcs	r3, r3
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c4fc:	1912      	adds	r2, r2, r4
 800c4fe:	eb45 0303 	adc.w	r3, r5, r3
 800c502:	f04f 0000 	mov.w	r0, #0
 800c506:	f04f 0100 	mov.w	r1, #0
 800c50a:	00d9      	lsls	r1, r3, #3
 800c50c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c510:	00d0      	lsls	r0, r2, #3
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	eb12 0804 	adds.w	r8, r2, r4
 800c51a:	eb43 0905 	adc.w	r9, r3, r5
 800c51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	f04f 0200 	mov.w	r2, #0
 800c52c:	f04f 0300 	mov.w	r3, #0
 800c530:	008b      	lsls	r3, r1, #2
 800c532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c536:	0082      	lsls	r2, r0, #2
 800c538:	4640      	mov	r0, r8
 800c53a:	4649      	mov	r1, r9
 800c53c:	f7f4 fb2a 	bl	8000b94 <__aeabi_uldivmod>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4b47      	ldr	r3, [pc, #284]	; (800c664 <UART_SetConfig+0x410>)
 800c546:	fba3 2302 	umull	r2, r3, r3, r2
 800c54a:	095b      	lsrs	r3, r3, #5
 800c54c:	011e      	lsls	r6, r3, #4
 800c54e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c550:	4618      	mov	r0, r3
 800c552:	f04f 0100 	mov.w	r1, #0
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	1894      	adds	r4, r2, r2
 800c55c:	60bc      	str	r4, [r7, #8]
 800c55e:	415b      	adcs	r3, r3
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c566:	1812      	adds	r2, r2, r0
 800c568:	eb41 0303 	adc.w	r3, r1, r3
 800c56c:	f04f 0400 	mov.w	r4, #0
 800c570:	f04f 0500 	mov.w	r5, #0
 800c574:	00dd      	lsls	r5, r3, #3
 800c576:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c57a:	00d4      	lsls	r4, r2, #3
 800c57c:	4622      	mov	r2, r4
 800c57e:	462b      	mov	r3, r5
 800c580:	1814      	adds	r4, r2, r0
 800c582:	64bc      	str	r4, [r7, #72]	; 0x48
 800c584:	414b      	adcs	r3, r1
 800c586:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f04f 0100 	mov.w	r1, #0
 800c592:	f04f 0200 	mov.w	r2, #0
 800c596:	f04f 0300 	mov.w	r3, #0
 800c59a:	008b      	lsls	r3, r1, #2
 800c59c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c5a0:	0082      	lsls	r2, r0, #2
 800c5a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c5a6:	f7f4 faf5 	bl	8000b94 <__aeabi_uldivmod>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4b2d      	ldr	r3, [pc, #180]	; (800c664 <UART_SetConfig+0x410>)
 800c5b0:	fba3 1302 	umull	r1, r3, r3, r2
 800c5b4:	095b      	lsrs	r3, r3, #5
 800c5b6:	2164      	movs	r1, #100	; 0x64
 800c5b8:	fb01 f303 	mul.w	r3, r1, r3
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	011b      	lsls	r3, r3, #4
 800c5c0:	3332      	adds	r3, #50	; 0x32
 800c5c2:	4a28      	ldr	r2, [pc, #160]	; (800c664 <UART_SetConfig+0x410>)
 800c5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c8:	095b      	lsrs	r3, r3, #5
 800c5ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ce:	441e      	add	r6, r3
 800c5d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f04f 0100 	mov.w	r1, #0
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	1894      	adds	r4, r2, r2
 800c5de:	603c      	str	r4, [r7, #0]
 800c5e0:	415b      	adcs	r3, r3
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e8:	1812      	adds	r2, r2, r0
 800c5ea:	eb41 0303 	adc.w	r3, r1, r3
 800c5ee:	f04f 0400 	mov.w	r4, #0
 800c5f2:	f04f 0500 	mov.w	r5, #0
 800c5f6:	00dd      	lsls	r5, r3, #3
 800c5f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c5fc:	00d4      	lsls	r4, r2, #3
 800c5fe:	4622      	mov	r2, r4
 800c600:	462b      	mov	r3, r5
 800c602:	eb12 0a00 	adds.w	sl, r2, r0
 800c606:	eb43 0b01 	adc.w	fp, r3, r1
 800c60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	4618      	mov	r0, r3
 800c610:	f04f 0100 	mov.w	r1, #0
 800c614:	f04f 0200 	mov.w	r2, #0
 800c618:	f04f 0300 	mov.w	r3, #0
 800c61c:	008b      	lsls	r3, r1, #2
 800c61e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c622:	0082      	lsls	r2, r0, #2
 800c624:	4650      	mov	r0, sl
 800c626:	4659      	mov	r1, fp
 800c628:	f7f4 fab4 	bl	8000b94 <__aeabi_uldivmod>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <UART_SetConfig+0x410>)
 800c632:	fba3 1302 	umull	r1, r3, r3, r2
 800c636:	095b      	lsrs	r3, r3, #5
 800c638:	2164      	movs	r1, #100	; 0x64
 800c63a:	fb01 f303 	mul.w	r3, r1, r3
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	011b      	lsls	r3, r3, #4
 800c642:	3332      	adds	r3, #50	; 0x32
 800c644:	4a07      	ldr	r2, [pc, #28]	; (800c664 <UART_SetConfig+0x410>)
 800c646:	fba2 2303 	umull	r2, r3, r2, r3
 800c64a:	095b      	lsrs	r3, r3, #5
 800c64c:	f003 020f 	and.w	r2, r3, #15
 800c650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4432      	add	r2, r6
 800c656:	609a      	str	r2, [r3, #8]
}
 800c658:	bf00      	nop
 800c65a:	377c      	adds	r7, #124	; 0x7c
 800c65c:	46bd      	mov	sp, r7
 800c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c662:	bf00      	nop
 800c664:	51eb851f 	.word	0x51eb851f

0800c668 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800c674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d105      	bne.n	800c688 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800c67c:	2101      	movs	r1, #1
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 f824 	bl	800d6cc <VL53L1_data_init>
 800c684:	4603      	mov	r3, r0
 800c686:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800c688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d103      	bne.n	800c698 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800c698:	2300      	movs	r3, #0
 800c69a:	73bb      	strb	r3, [r7, #14]
 800c69c:	e012      	b.n	800c6c4 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800c69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d112      	bne.n	800c6cc <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fbd3 	bl	800ce5a <VL53L1_SetLimitCheckEnable>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	73bb      	strb	r3, [r7, #14]
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d9e9      	bls.n	800c69e <VL53L1_DataInit+0x36>
 800c6ca:	e000      	b.n	800c6ce <VL53L1_DataInit+0x66>
		else
			break;
 800c6cc:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	7bba      	ldrb	r2, [r7, #14]
 800c6f6:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800c6f8:	2108      	movs	r1, #8
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f8f9 	bl	800c8f2 <VL53L1_SetPresetMode>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2208      	movs	r2, #8
 800c708:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800c70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800c724:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f004 ffe0 	bl	80116ee <VL53L1_poll_for_boot_completion>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800c732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800c740:	b480      	push	{r7}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	603a      	str	r2, [r7, #0]
 800c74a:	71fb      	strb	r3, [r7, #7]
 800c74c:	460b      	mov	r3, r1
 800c74e:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c750:	2300      	movs	r3, #0
 800c752:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800c754:	4a2c      	ldr	r2, [pc, #176]	; (800c808 <ComputeDevicePresetMode+0xc8>)
 800c756:	f107 0310 	add.w	r3, r7, #16
 800c75a:	6812      	ldr	r2, [r2, #0]
 800c75c:	4611      	mov	r1, r2
 800c75e:	8019      	strh	r1, [r3, #0]
 800c760:	3302      	adds	r3, #2
 800c762:	0c12      	lsrs	r2, r2, #16
 800c764:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800c766:	4a29      	ldr	r2, [pc, #164]	; (800c80c <ComputeDevicePresetMode+0xcc>)
 800c768:	f107 030c 	add.w	r3, r7, #12
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	4611      	mov	r1, r2
 800c770:	8019      	strh	r1, [r3, #0]
 800c772:	3302      	adds	r3, #2
 800c774:	0c12      	lsrs	r2, r2, #16
 800c776:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800c778:	4a25      	ldr	r2, [pc, #148]	; (800c810 <ComputeDevicePresetMode+0xd0>)
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	6812      	ldr	r2, [r2, #0]
 800c780:	4611      	mov	r1, r2
 800c782:	8019      	strh	r1, [r3, #0]
 800c784:	3302      	adds	r3, #2
 800c786:	0c12      	lsrs	r2, r2, #16
 800c788:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2201      	movs	r2, #1
 800c78e:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800c790:	79bb      	ldrb	r3, [r7, #6]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d002      	beq.n	800c79c <ComputeDevicePresetMode+0x5c>
 800c796:	2b02      	cmp	r3, #2
 800c798:	d003      	beq.n	800c7a2 <ComputeDevicePresetMode+0x62>
 800c79a:	e005      	b.n	800c7a8 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75bb      	strb	r3, [r7, #22]
		break;
 800c7a0:	e004      	b.n	800c7ac <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	75bb      	strb	r3, [r7, #22]
		break;
 800c7a6:	e001      	b.n	800c7ac <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800c7ac:	79fb      	ldrb	r3, [r7, #7]
 800c7ae:	2b08      	cmp	r3, #8
 800c7b0:	d017      	beq.n	800c7e2 <ComputeDevicePresetMode+0xa2>
 800c7b2:	2b08      	cmp	r3, #8
 800c7b4:	dc1e      	bgt.n	800c7f4 <ComputeDevicePresetMode+0xb4>
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d00a      	beq.n	800c7d0 <ComputeDevicePresetMode+0x90>
 800c7ba:	2b04      	cmp	r3, #4
 800c7bc:	d11a      	bne.n	800c7f4 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800c7be:	7dbb      	ldrb	r3, [r7, #22]
 800c7c0:	f107 0218 	add.w	r2, r7, #24
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	701a      	strb	r2, [r3, #0]
		break;
 800c7ce:	e013      	b.n	800c7f8 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800c7d0:	7dbb      	ldrb	r3, [r7, #22]
 800c7d2:	f107 0218 	add.w	r2, r7, #24
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	701a      	strb	r2, [r3, #0]
		break;
 800c7e0:	e00a      	b.n	800c7f8 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800c7e2:	7dbb      	ldrb	r3, [r7, #22]
 800c7e4:	f107 0218 	add.w	r2, r7, #24
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	701a      	strb	r2, [r3, #0]
		break;
 800c7f2:	e001      	b.n	800c7f8 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800c7f4:	23f8      	movs	r3, #248	; 0xf8
 800c7f6:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800c7f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	371c      	adds	r7, #28
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	0801226c 	.word	0x0801226c
 800c80c:	08012270 	.word	0x08012270
 800c810:	08012274 	.word	0x08012274

0800c814 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800c814:	b5b0      	push	{r4, r5, r7, lr}
 800c816:	b08e      	sub	sp, #56	; 0x38
 800c818:	af04      	add	r7, sp, #16
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	607b      	str	r3, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	72fb      	strb	r3, [r7, #11]
 800c822:	4613      	mov	r3, r2
 800c824:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c826:	2300      	movs	r3, #0
 800c828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d002      	beq.n	800c848 <SetPresetMode+0x34>
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	2b08      	cmp	r3, #8
 800c846:	d103      	bne.n	800c850 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800c848:	2340      	movs	r3, #64	; 0x40
 800c84a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c84e:	e002      	b.n	800c856 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800c850:	2320      	movs	r3, #32
 800c852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800c856:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800c85a:	7ab9      	ldrb	r1, [r7, #10]
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff ff6e 	bl	800c740 <ComputeDevicePresetMode>
 800c864:	4603      	mov	r3, r0
 800c866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800c86a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d112      	bne.n	800c898 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800c872:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800c876:	f107 001c 	add.w	r0, r7, #28
 800c87a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800c87e:	f107 0314 	add.w	r3, r7, #20
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	f107 0318 	add.w	r3, r7, #24
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	4603      	mov	r3, r0
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f001 f9dd 	bl	800dc4c <VL53L1_get_preset_mode_timing_cfg>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800c898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d112      	bne.n	800c8c6 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800c8a0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800c8a4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800c8a6:	69fd      	ldr	r5, [r7, #28]
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	9102      	str	r1, [sp, #8]
 800c8b0:	9201      	str	r2, [sp, #4]
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f001 fa70 	bl	800dda0 <VL53L1_set_preset_mode>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800c8c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d103      	bne.n	800c8d6 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c8d4:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800c8d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d103      	bne.n	800c8e6 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	7afa      	ldrb	r2, [r7, #11]
 800c8e2:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800c8e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3728      	adds	r7, #40	; 0x28
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bdb0      	pop	{r4, r5, r7, pc}

0800c8f2 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c8fe:	2300      	movs	r3, #0
 800c900:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800c902:	2303      	movs	r3, #3
 800c904:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f003 fd2c 	bl	8010364 <VL53L1_low_power_auto_data_init>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800c910:	7bba      	ldrb	r2, [r7, #14]
 800c912:	78f9      	ldrb	r1, [r7, #3]
 800c914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ff7b 	bl	800c814 <SetPresetMode>
 800c91e:	4603      	mov	r3, r0
 800c920:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800c922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d117      	bne.n	800c95a <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d005      	beq.n	800c93c <VL53L1_SetPresetMode+0x4a>
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b03      	cmp	r3, #3
 800c934:	d002      	beq.n	800c93c <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800c936:	78fb      	ldrb	r3, [r7, #3]
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d107      	bne.n	800c94c <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800c93c:	f24a 0128 	movw	r1, #41000	; 0xa028
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f891 	bl	800ca68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]
 800c94a:	e006      	b.n	800c95a <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800c94c:	f248 2135 	movw	r1, #33333	; 0x8235
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f889 	bl	800ca68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800c95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800c962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fa0a 	bl	800cd80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c988:	2300      	movs	r3, #0
 800c98a:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800c99e:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d008      	beq.n	800c9b8 <VL53L1_SetDistanceMode+0x3c>
 800c9a6:	78fb      	ldrb	r3, [r7, #3]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d005      	beq.n	800c9b8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d002      	beq.n	800c9b8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800c9b2:	f06f 0303 	mvn.w	r3, #3
 800c9b6:	e052      	b.n	800ca5e <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800c9b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d107      	bne.n	800c9d0 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800c9c0:	f107 0308 	add.w	r3, r7, #8
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 f8e9 	bl	800db9e <VL53L1_get_user_zone>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800c9d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800c9de:	f107 0314 	add.w	r3, r7, #20
 800c9e2:	f107 0210 	add.w	r2, r7, #16
 800c9e6:	f107 010c 	add.w	r1, r7, #12
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 f812 	bl	800da14 <VL53L1_get_timeouts_us>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800c9f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d107      	bne.n	800ca0c <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800c9fc:	78fa      	ldrb	r2, [r7, #3]
 800c9fe:	7fb9      	ldrb	r1, [r7, #30]
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff ff06 	bl	800c814 <SetPresetMode>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800ca0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d103      	bne.n	800ca1c <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	78fa      	ldrb	r2, [r7, #3]
 800ca18:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ca1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10e      	bne.n	800ca42 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800ca24:	68f9      	ldr	r1, [r7, #12]
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 ffba 	bl	800d9a4 <VL53L1_set_timeouts_us>
 800ca30:	4603      	mov	r3, r0
 800ca32:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800ca34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ca42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800ca4a:	f107 0308 	add.w	r3, r7, #8
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f001 f881 	bl	800db58 <VL53L1_set_user_zone>
 800ca56:	4603      	mov	r3, r0
 800ca58:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800ca5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3720      	adds	r7, #32
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08c      	sub	sp, #48	; 0x30
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ca72:	2300      	movs	r3, #0
 800ca74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800ca8c:	4b64      	ldr	r3, [pc, #400]	; (800cc20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800ca8e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	4a64      	ldr	r2, [pc, #400]	; (800cc24 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d902      	bls.n	800ca9e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ca98:	23fc      	movs	r3, #252	; 0xfc
 800ca9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800ca9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d109      	bne.n	800caba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800caa6:	f107 031a 	add.w	r3, r7, #26
 800caaa:	461a      	mov	r2, r3
 800caac:	2105      	movs	r1, #5
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa8d 	bl	800cfce <VL53L1_GetSequenceStepEnable>
 800cab4:	4603      	mov	r3, r0
 800cab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800caba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800cac2:	f107 0319 	add.w	r3, r7, #25
 800cac6:	461a      	mov	r2, r3
 800cac8:	2106      	movs	r1, #6
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fa7f 	bl	800cfce <VL53L1_GetSequenceStepEnable>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800cad6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10b      	bne.n	800caf6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	f107 0210 	add.w	r2, r7, #16
 800cae6:	f107 010c 	add.w	r1, r7, #12
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 ff92 	bl	800da14 <VL53L1_get_timeouts_us>
 800caf0:	4603      	mov	r3, r0
 800caf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800caf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f040 8081 	bne.w	800cc02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800cb06:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800cb10:	7efb      	ldrb	r3, [r7, #27]
 800cb12:	2b08      	cmp	r3, #8
 800cb14:	d026      	beq.n	800cb64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800cb16:	2b08      	cmp	r3, #8
 800cb18:	dc43      	bgt.n	800cba2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800cb1a:	2b03      	cmp	r3, #3
 800cb1c:	d00f      	beq.n	800cb3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d13f      	bne.n	800cba2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800cb22:	7ebb      	ldrb	r3, [r7, #26]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d002      	beq.n	800cb2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800cb28:	7e7b      	ldrb	r3, [r7, #25]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d103      	bne.n	800cb36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800cb2e:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb32:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800cb34:	e038      	b.n	800cba8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800cb36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800cb3c:	e034      	b.n	800cba8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800cb44:	7ebb      	ldrb	r3, [r7, #26]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d002      	beq.n	800cb50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800cb4a:	7e7b      	ldrb	r3, [r7, #25]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d103      	bne.n	800cb58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800cb50:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800cb54:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb56:	e002      	b.n	800cb5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800cb58:	f245 4360 	movw	r3, #21600	; 0x5460
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800cb62:	e021      	b.n	800cba8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800cb6a:	23f5      	movs	r3, #245	; 0xf5
 800cb6c:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800cb6e:	f107 0308 	add.w	r3, r7, #8
 800cb72:	461a      	mov	r2, r3
 800cb74:	f248 0136 	movw	r1, #32822	; 0x8036
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f001 ff75 	bl	800ea68 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dd07      	ble.n	800cb94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	22f5      	movs	r2, #245	; 0xf5
 800cb88:	fb02 f303 	mul.w	r3, r2, r3
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	4413      	add	r3, r2
 800cb92:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800cb9a:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800cba0:	e002      	b.n	800cba8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800cba2:	23f8      	movs	r3, #248	; 0xf8
 800cba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d803      	bhi.n	800cbb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800cbb0:	23fc      	movs	r3, #252	; 0xfc
 800cbb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cbb6:	e003      	b.n	800cbc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800cbbe:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800cbc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d11c      	bne.n	800cc02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	69fa      	ldr	r2, [r7, #28]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d203      	bcs.n	800cbd8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800cbd0:	23fc      	movs	r3, #252	; 0xfc
 800cbd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cbd6:	e00d      	b.n	800cbf4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe0:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fedb 	bl	800d9a4 <VL53L1_set_timeouts_us>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800cbf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d102      	bne.n	800cc02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800cc02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cc12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3730      	adds	r7, #48	; 0x30
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	00086470 	.word	0x00086470
 800cc24:	00989680 	.word	0x00989680

0800cc28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800cc56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d109      	bne.n	800cc72 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800cc5e:	f107 031b 	add.w	r3, r7, #27
 800cc62:	461a      	mov	r2, r3
 800cc64:	2105      	movs	r1, #5
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9b1 	bl	800cfce <VL53L1_GetSequenceStepEnable>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800cc72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d109      	bne.n	800cc8e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800cc7a:	f107 031a 	add.w	r3, r7, #26
 800cc7e:	461a      	mov	r2, r3
 800cc80:	2106      	movs	r1, #6
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9a3 	bl	800cfce <VL53L1_GetSequenceStepEnable>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800cc8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10b      	bne.n	800ccae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800cc96:	f107 0310 	add.w	r3, r7, #16
 800cc9a:	f107 0214 	add.w	r2, r7, #20
 800cc9e:	f107 010c 	add.w	r1, r7, #12
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 feb6 	bl	800da14 <VL53L1_get_timeouts_us>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800ccae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d156      	bne.n	800cd64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ccbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800ccc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	d02a      	beq.n	800cd1e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800ccc8:	2b08      	cmp	r3, #8
 800ccca:	dc47      	bgt.n	800cd5c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d012      	beq.n	800ccf6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d143      	bne.n	800cd5c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ccd4:	7efb      	ldrb	r3, [r7, #27]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d002      	beq.n	800cce0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800ccda:	7ebb      	ldrb	r3, [r7, #26]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d105      	bne.n	800ccec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800cce6:	3308      	adds	r3, #8
 800cce8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800ccea:	e03c      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ccf2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ccf4:	e037      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ccf6:	7efb      	ldrb	r3, [r7, #27]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d002      	beq.n	800cd02 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800ccfc:	7ebb      	ldrb	r3, [r7, #26]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d106      	bne.n	800cd10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800cd08:	3334      	adds	r3, #52	; 0x34
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800cd0e:	e02a      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800cd16:	3330      	adds	r3, #48	; 0x30
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800cd1c:	e023      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800cd1e:	23f5      	movs	r3, #245	; 0xf5
 800cd20:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800cd22:	f107 0308 	add.w	r3, r7, #8
 800cd26:	461a      	mov	r2, r3
 800cd28:	f248 0136 	movw	r1, #32822	; 0x8036
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 fe9b 	bl	800ea68 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dd07      	ble.n	800cd48 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	22f5      	movs	r2, #245	; 0xf5
 800cd3c:	fb02 f303 	mul.w	r3, r2, r3
 800cd40:	461a      	mov	r2, r3
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	4413      	add	r3, r2
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800cd4e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	69fa      	ldr	r2, [r7, #28]
 800cd56:	4413      	add	r3, r2
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800cd5a:	e004      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800cd5c:	23f8      	movs	r3, #248	; 0xf8
 800cd5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd62:	e000      	b.n	800cd66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800cd64:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800cd66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd72:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800cd74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3730      	adds	r7, #48	; 0x30
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	019b      	lsls	r3, r3, #6
 800cd96:	4a09      	ldr	r2, [pc, #36]	; (800cdbc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800cd98:	fba2 2303 	umull	r2, r3, r2, r3
 800cd9c:	099b      	lsrs	r3, r3, #6
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	4413      	add	r3, r2
 800cda2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800cda4:	68b9      	ldr	r1, [r7, #8]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fdad 	bl	800d906 <VL53L1_set_inter_measurement_period_ms>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800cdb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	10624dd3 	.word	0x10624dd3

0800cdc0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fdbf 	bl	800d958 <VL53L1_get_inter_measurement_period_ms>
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	019b      	lsls	r3, r3, #6
 800cde4:	4907      	ldr	r1, [pc, #28]	; (800ce04 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800cde6:	fba1 1303 	umull	r1, r3, r1, r3
 800cdea:	099b      	lsrs	r3, r3, #6
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800cdf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	10624dd3 	.word	0x10624dd3

0800ce08 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	460b      	mov	r3, r1
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ce16:	2300      	movs	r3, #0
 800ce18:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ce1a:	897b      	ldrh	r3, [r7, #10]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d002      	beq.n	800ce26 <SetLimitValue+0x1e>
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d009      	beq.n	800ce38 <SetLimitValue+0x30>
 800ce24:	e011      	b.n	800ce4a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	0b9b      	lsrs	r3, r3, #14
 800ce2a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800ce2c:	8abb      	ldrh	r3, [r7, #20]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f001 f941 	bl	800e0b8 <VL53L1_set_lite_sigma_threshold>
		break;
 800ce36:	e00a      	b.n	800ce4e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	0a5b      	lsrs	r3, r3, #9
 800ce3c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800ce3e:	8abb      	ldrh	r3, [r7, #20]
 800ce40:	4619      	mov	r1, r3
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f001 f964 	bl	800e110 <VL53L1_set_lite_min_count_rate>
		break;
 800ce48:	e001      	b.n	800ce4e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ce4a:	23fc      	movs	r3, #252	; 0xfc
 800ce4c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ce4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	807b      	strh	r3, [r7, #2]
 800ce66:	4613      	mov	r3, r2
 800ce68:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ce72:	887b      	ldrh	r3, [r7, #2]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d902      	bls.n	800ce7e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ce78:	23fc      	movs	r3, #252	; 0xfc
 800ce7a:	73fb      	strb	r3, [r7, #15]
 800ce7c:	e014      	b.n	800cea8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800ce7e:	787b      	ldrb	r3, [r7, #1]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d102      	bne.n	800ce8a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60bb      	str	r3, [r7, #8]
 800ce88:	e006      	b.n	800ce98 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ce8a:	887b      	ldrh	r3, [r7, #2]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	33e0      	adds	r3, #224	; 0xe0
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800ce98:	887b      	ldrh	r3, [r7, #2]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff ffb2 	bl	800ce08 <SetLimitValue>
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800cea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10c      	bne.n	800ceca <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ceb0:	787b      	ldrb	r3, [r7, #1]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	bf14      	ite	ne
 800ceb6:	2301      	movne	r3, #1
 800ceb8:	2300      	moveq	r3, #0
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	887b      	ldrh	r3, [r7, #2]
 800cebe:	4611      	mov	r1, r2
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	4413      	add	r3, r2
 800cec4:	460a      	mov	r2, r1
 800cec6:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800ceca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b087      	sub	sp, #28
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	460b      	mov	r3, r1
 800cee0:	607a      	str	r2, [r7, #4]
 800cee2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800cee8:	897b      	ldrh	r3, [r7, #10]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d905      	bls.n	800cefa <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ceee:	23fc      	movs	r3, #252	; 0xfc
 800cef0:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	e008      	b.n	800cf0c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800cefa:	897b      	ldrh	r3, [r7, #10]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	4413      	add	r3, r2
 800cf00:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800cf04:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7dba      	ldrb	r2, [r7, #22]
 800cf0a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800cf0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	371c      	adds	r7, #28
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	460b      	mov	r3, r1
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800cf32:	897b      	ldrh	r3, [r7, #10]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <VL53L1_GetLimitCheckValue+0x22>
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d00c      	beq.n	800cf56 <VL53L1_GetLimitCheckValue+0x3a>
 800cf3c:	e017      	b.n	800cf6e <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800cf3e:	f107 0314 	add.w	r3, r7, #20
 800cf42:	4619      	mov	r1, r3
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f001 f8a1 	bl	800e08c <VL53L1_get_lite_sigma_threshold>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800cf4e:	8abb      	ldrh	r3, [r7, #20]
 800cf50:	039b      	lsls	r3, r3, #14
 800cf52:	61bb      	str	r3, [r7, #24]
		break;
 800cf54:	e00d      	b.n	800cf72 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800cf56:	f107 0316 	add.w	r3, r7, #22
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f001 f8c1 	bl	800e0e4 <VL53L1_get_lite_min_count_rate>
 800cf62:	4603      	mov	r3, r0
 800cf64:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800cf66:	8afb      	ldrh	r3, [r7, #22]
 800cf68:	025b      	lsls	r3, r3, #9
 800cf6a:	61bb      	str	r3, [r7, #24]
		break;
 800cf6c:	e001      	b.n	800cf72 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800cf6e:	23fc      	movs	r3, #252	; 0xfc
 800cf70:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800cf72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d123      	bne.n	800cfc2 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d110      	bne.n	800cfa2 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800cf80:	897b      	ldrh	r3, [r7, #10]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	33e0      	adds	r3, #224	; 0xe0
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	69ba      	ldr	r2, [r7, #24]
 800cf92:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800cf94:	897b      	ldrh	r3, [r7, #10]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800cfa0:	e00f      	b.n	800cfc2 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800cfa8:	897b      	ldrh	r3, [r7, #10]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	33e0      	adds	r3, #224	; 0xe0
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800cfb6:	897b      	ldrh	r3, [r7, #10]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4413      	add	r3, r2
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800cfc2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3720      	adds	r7, #32
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b086      	sub	sp, #24
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 fd7f 	bl	800daea <VL53L1_get_sequence_config_bit>
 800cfec:	4603      	mov	r3, r0
 800cfee:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800cff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d004:	2300      	movs	r3, #0
 800d006:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	789b      	ldrb	r3, [r3, #2]
 800d00c:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800d00e:	7dbb      	ldrb	r3, [r7, #22]
 800d010:	2b40      	cmp	r3, #64	; 0x40
 800d012:	d002      	beq.n	800d01a <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fa6b 	bl	800d4f0 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800d020:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800d022:	7d7b      	ldrb	r3, [r7, #21]
 800d024:	2b63      	cmp	r3, #99	; 0x63
 800d026:	dc12      	bgt.n	800d04e <VL53L1_StartMeasurement+0x52>
 800d028:	2b62      	cmp	r3, #98	; 0x62
 800d02a:	da0d      	bge.n	800d048 <VL53L1_StartMeasurement+0x4c>
 800d02c:	2b05      	cmp	r3, #5
 800d02e:	dc0e      	bgt.n	800d04e <VL53L1_StartMeasurement+0x52>
 800d030:	2b04      	cmp	r3, #4
 800d032:	da09      	bge.n	800d048 <VL53L1_StartMeasurement+0x4c>
 800d034:	2b02      	cmp	r3, #2
 800d036:	dc02      	bgt.n	800d03e <VL53L1_StartMeasurement+0x42>
 800d038:	2b00      	cmp	r3, #0
 800d03a:	da05      	bge.n	800d048 <VL53L1_StartMeasurement+0x4c>
 800d03c:	e007      	b.n	800d04e <VL53L1_StartMeasurement+0x52>
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d105      	bne.n	800d04e <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800d042:	2300      	movs	r3, #0
 800d044:	75fb      	strb	r3, [r7, #23]
		break;
 800d046:	e004      	b.n	800d052 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800d048:	23f2      	movs	r3, #242	; 0xf2
 800d04a:	75fb      	strb	r3, [r7, #23]
		break;
 800d04c:	e001      	b.n	800d052 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800d04e:	23fd      	movs	r3, #253	; 0xfd
 800d050:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800d052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d11f      	bne.n	800d09a <VL53L1_StartMeasurement+0x9e>
 800d05a:	7dbb      	ldrb	r3, [r7, #22]
 800d05c:	2b40      	cmp	r3, #64	; 0x40
 800d05e:	d11c      	bne.n	800d09a <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800d060:	f107 0310 	add.w	r3, r7, #16
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fdde 	bl	800cc28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800d06c:	4603      	mov	r3, r0
 800d06e:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	4a17      	ldr	r2, [pc, #92]	; (800d0d0 <VL53L1_StartMeasurement+0xd4>)
 800d074:	fba2 2303 	umull	r2, r3, r2, r3
 800d078:	099b      	lsrs	r3, r3, #6
 800d07a:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800d07c:	f107 030c 	add.w	r3, r7, #12
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff fe9c 	bl	800cdc0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800d088:	4603      	mov	r3, r0
 800d08a:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	1d1a      	adds	r2, r3, #4
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	429a      	cmp	r2, r3
 800d094:	d901      	bls.n	800d09a <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800d096:	23fc      	movs	r3, #252	; 0xfc
 800d098:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800d09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800d0a2:	7dbb      	ldrb	r3, [r7, #22]
 800d0a4:	2206      	movs	r2, #6
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f001 f867 	bl	800e17c <VL53L1_init_and_start_range>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800d0b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2204      	movs	r2, #4
 800d0be:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800d0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	10624dd3 	.word	0x10624dd3

0800d0d4 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	789b      	ldrb	r3, [r3, #2]
 800d0e4:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800d0e6:	7bbb      	ldrb	r3, [r7, #14]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f001 fb87 	bl	800e7fe <VL53L1_clear_interrupt_and_enable_next_range>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800d0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800d10c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f004 fb18 	bl	8011746 <VL53L1_poll_for_range_completion>
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800d11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800d128:	b480      	push	{r7}
 800d12a:	b08d      	sub	sp, #52	; 0x34
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	603a      	str	r2, [r7, #0]
 800d132:	71fb      	strb	r3, [r7, #7]
 800d134:	460b      	mov	r3, r1
 800d136:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800d138:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d13c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800d13e:	231e      	movs	r3, #30
 800d140:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800d142:	4b33      	ldr	r3, [pc, #204]	; (800d210 <ComputeRQL+0xe8>)
 800d144:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800d146:	4b33      	ldr	r3, [pc, #204]	; (800d214 <ComputeRQL+0xec>)
 800d148:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800d14a:	f641 139a 	movw	r3, #6554	; 0x199a
 800d14e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d103      	bne.n	800d15e <ComputeRQL+0x36>
		returnvalue = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d15c:	e04f      	b.n	800d1fe <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800d15e:	79bb      	ldrb	r3, [r7, #6]
 800d160:	2b07      	cmp	r3, #7
 800d162:	d103      	bne.n	800d16c <ComputeRQL+0x44>
		returnvalue = 50;
 800d164:	2332      	movs	r3, #50	; 0x32
 800d166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d16a:	e048      	b.n	800d1fe <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d172:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800d176:	429a      	cmp	r2, r3
 800d178:	dd03      	ble.n	800d182 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800d17a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d17c:	041b      	lsls	r3, r3, #16
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d180:	e007      	b.n	800d192 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d188:	461a      	mov	r2, r3
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	fb02 f303 	mul.w	r3, r2, r3
 800d190:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	d020      	beq.n	800d1da <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d19c:	461a      	mov	r2, r3
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	fb02 f303 	mul.w	r3, r2, r3
 800d1a4:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	085b      	lsrs	r3, r3, #1
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b8:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	041b      	lsls	r3, r3, #16
 800d1be:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d804      	bhi.n	800d1d2 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800d1c8:	69fa      	ldr	r2, [r7, #28]
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d0:	e006      	b.n	800d1e0 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800d1d2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d1d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d8:	e002      	b.n	800d1e0 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800d1da:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800d1de:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800d1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e2:	0c1b      	lsrs	r3, r3, #16
 800d1e4:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
 800d1e8:	2b32      	cmp	r3, #50	; 0x32
 800d1ea:	d905      	bls.n	800d1f8 <ComputeRQL+0xd0>
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	2b64      	cmp	r3, #100	; 0x64
 800d1f0:	bf28      	it	cs
 800d1f2:	2364      	movcs	r3, #100	; 0x64
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	e000      	b.n	800d1fa <ComputeRQL+0xd2>
 800d1f8:	2332      	movs	r3, #50	; 0x32
 800d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800d1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d202:	4618      	mov	r0, r3
 800d204:	3734      	adds	r7, #52	; 0x34
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	0075b333 	.word	0x0075b333
 800d214:	0030cccd 	.word	0x0030cccd

0800d218 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	3b04      	subs	r3, #4
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d83d      	bhi.n	800d2a6 <ConvertStatusLite+0x8e>
 800d22a:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <ConvertStatusLite+0x18>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d283 	.word	0x0800d283
 800d234:	0800d27d 	.word	0x0800d27d
 800d238:	0800d289 	.word	0x0800d289
 800d23c:	0800d28f 	.word	0x0800d28f
 800d240:	0800d29b 	.word	0x0800d29b
 800d244:	0800d2a1 	.word	0x0800d2a1
 800d248:	0800d2a7 	.word	0x0800d2a7
 800d24c:	0800d2a7 	.word	0x0800d2a7
 800d250:	0800d295 	.word	0x0800d295
 800d254:	0800d2a7 	.word	0x0800d2a7
 800d258:	0800d2a7 	.word	0x0800d2a7
 800d25c:	0800d2a7 	.word	0x0800d2a7
 800d260:	0800d2a7 	.word	0x0800d2a7
 800d264:	0800d2a7 	.word	0x0800d2a7
 800d268:	0800d271 	.word	0x0800d271
 800d26c:	0800d277 	.word	0x0800d277
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800d270:	230a      	movs	r3, #10
 800d272:	73fb      	strb	r3, [r7, #15]
		break;
 800d274:	e019      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800d276:	2306      	movs	r3, #6
 800d278:	73fb      	strb	r3, [r7, #15]
		break;
 800d27a:	e016      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800d27c:	2304      	movs	r3, #4
 800d27e:	73fb      	strb	r3, [r7, #15]
		break;
 800d280:	e013      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800d282:	2302      	movs	r3, #2
 800d284:	73fb      	strb	r3, [r7, #15]
		break;
 800d286:	e010      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800d288:	2301      	movs	r3, #1
 800d28a:	73fb      	strb	r3, [r7, #15]
		break;
 800d28c:	e00d      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800d28e:	2307      	movs	r3, #7
 800d290:	73fb      	strb	r3, [r7, #15]
		break;
 800d292:	e00a      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800d294:	2309      	movs	r3, #9
 800d296:	73fb      	strb	r3, [r7, #15]
		break;
 800d298:	e007      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800d29a:	2303      	movs	r3, #3
 800d29c:	73fb      	strb	r3, [r7, #15]
		break;
 800d29e:	e004      	b.n	800d2aa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	73fb      	strb	r3, [r7, #15]
		break;
 800d2a4:	e001      	b.n	800d2aa <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800d2a6:	23ff      	movs	r3, #255	; 0xff
 800d2a8:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08c      	sub	sp, #48	; 0x30
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	607b      	str	r3, [r7, #4]
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	72fb      	strb	r3, [r7, #11]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2de:	f003 031f 	and.w	r3, r3, #31
 800d2e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800d2e6:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800d2ea:	7afb      	ldrb	r3, [r7, #11]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7ff ff1a 	bl	800d128 <ComputeRQL>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d300:	025b      	lsls	r3, r3, #9
 800d302:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d308:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d30e:	025b      	lsls	r3, r3, #9
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d316:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d324:	025b      	lsls	r3, r3, #9
 800d326:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	6a3a      	ldr	r2, [r7, #32]
 800d32c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800d334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d336:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	2200      	movs	r2, #0
 800d33c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800d33e:	7abb      	ldrb	r3, [r7, #10]
 800d340:	2b11      	cmp	r3, #17
 800d342:	d009      	beq.n	800d358 <SetSimpleData+0xa0>
 800d344:	2b11      	cmp	r3, #17
 800d346:	dc0f      	bgt.n	800d368 <SetSimpleData+0xb0>
 800d348:	2b03      	cmp	r3, #3
 800d34a:	dc02      	bgt.n	800d352 <SetSimpleData+0x9a>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dc03      	bgt.n	800d358 <SetSimpleData+0xa0>
 800d350:	e00a      	b.n	800d368 <SetSimpleData+0xb0>
 800d352:	2b0d      	cmp	r3, #13
 800d354:	d004      	beq.n	800d360 <SetSimpleData+0xa8>
 800d356:	e007      	b.n	800d368 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	2205      	movs	r2, #5
 800d35c:	76da      	strb	r2, [r3, #27]
		break;
 800d35e:	e006      	b.n	800d36e <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	220d      	movs	r2, #13
 800d364:	76da      	strb	r2, [r3, #27]
		break;
 800d366:	e002      	b.n	800d36e <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	2200      	movs	r2, #0
 800d36c:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	7edb      	ldrb	r3, [r3, #27]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d108      	bne.n	800d388 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800d376:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff ff4c 	bl	800d218 <ConvertStatusLite>
 800d380:	4603      	mov	r3, r0
 800d382:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d38c:	025b      	lsls	r3, r3, #9
 800d38e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6a3a      	ldr	r2, [r7, #32]
 800d394:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d39c:	025b      	lsls	r3, r3, #9
 800d39e:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a3a      	ldr	r2, [r7, #32]
 800d3a4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800d3a8:	f107 0314 	add.w	r3, r7, #20
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f7ff fdb3 	bl	800cf1c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800d3b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d3ba:	2b06      	cmp	r3, #6
 800d3bc:	bf0c      	ite	eq
 800d3be:	2301      	moveq	r3, #1
 800d3c0:	2300      	movne	r3, #0
 800d3c2:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800d3c4:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800d3c6:	f107 0319 	add.w	r3, r7, #25
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fd81 	bl	800ced6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800d3d4:	7e7b      	ldrb	r3, [r7, #25]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d104      	bne.n	800d3e4 <SetSimpleData+0x12c>
 800d3da:	7ffb      	ldrb	r3, [r7, #31]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d101      	bne.n	800d3e4 <SetSimpleData+0x12c>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e000      	b.n	800d3e6 <SetSimpleData+0x12e>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	7fba      	ldrb	r2, [r7, #30]
 800d3ec:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800d3f0:	f107 0314 	add.w	r3, r7, #20
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff fd8f 	bl	800cf1c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800d3fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d402:	2b04      	cmp	r3, #4
 800d404:	bf0c      	ite	eq
 800d406:	2301      	moveq	r3, #1
 800d408:	2300      	movne	r3, #0
 800d40a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800d40c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800d40e:	f107 0319 	add.w	r3, r7, #25
 800d412:	461a      	mov	r2, r3
 800d414:	2101      	movs	r1, #1
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7ff fd5d 	bl	800ced6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800d41c:	7e7b      	ldrb	r3, [r7, #25]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d104      	bne.n	800d42c <SetSimpleData+0x174>
 800d422:	7f7b      	ldrb	r3, [r7, #29]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d101      	bne.n	800d42c <SetSimpleData+0x174>
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <SetSimpleData+0x176>
 800d42c:	2300      	movs	r3, #0
 800d42e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	7fba      	ldrb	r2, [r7, #30]
 800d434:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	8b1b      	ldrh	r3, [r3, #24]
 800d43c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800d43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d440:	7edb      	ldrb	r3, [r3, #27]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d110      	bne.n	800d468 <SetSimpleData+0x1b0>
 800d446:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	da0c      	bge.n	800d468 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800d44e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800d452:	4b08      	ldr	r3, [pc, #32]	; (800d474 <SetSimpleData+0x1bc>)
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	429a      	cmp	r2, r3
 800d458:	da03      	bge.n	800d462 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	220e      	movs	r2, #14
 800d45e:	76da      	strb	r2, [r3, #27]
 800d460:	e002      	b.n	800d468 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	2200      	movs	r2, #0
 800d466:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800d468:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3730      	adds	r7, #48	; 0x30
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	2000019c 	.word	0x2000019c

0800d478 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b0a8      	sub	sp, #160	; 0xa0
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d482:	2300      	movs	r3, #0
 800d484:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800d488:	f107 0308 	add.w	r3, r7, #8
 800d48c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800d490:	221c      	movs	r2, #28
 800d492:	21ff      	movs	r1, #255	; 0xff
 800d494:	6838      	ldr	r0, [r7, #0]
 800d496:	f004 fd89 	bl	8011fac <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800d49a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d49e:	2102      	movs	r1, #2
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 f93c 	bl	800e71e <VL53L1_get_device_results>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800d4ac:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d117      	bne.n	800d4e4 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800d4b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4b8:	789a      	ldrb	r2, [r3, #2]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800d4be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800d4c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4cc:	78da      	ldrb	r2, [r3, #3]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff feed 	bl	800d2b8 <SetSimpleData>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d4e4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3798      	adds	r7, #152	; 0x98
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b0c6      	sub	sp, #280	; 0x118
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	1d3b      	adds	r3, r7, #4
 800d4f8:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800d506:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d108      	bne.n	800d520 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800d50e:	1d3b      	adds	r3, r7, #4
 800d510:	2200      	movs	r2, #0
 800d512:	2185      	movs	r1, #133	; 0x85
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f004 f9f1 	bl	80118fc <VL53L1_WrByte>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800d520:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d524:	2b00      	cmp	r3, #0
 800d526:	d103      	bne.n	800d530 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800d528:	1d3b      	adds	r3, r7, #4
 800d52a:	6818      	ldr	r0, [r3, #0]
 800d52c:	f002 fce1 	bl	800fef2 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800d530:	4b65      	ldr	r3, [pc, #404]	; (800d6c8 <VL53L1_LoadPatch+0x1d8>)
 800d532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d534:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d81b      	bhi.n	800d578 <VL53L1_LoadPatch+0x88>
 800d540:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <VL53L1_LoadPatch+0x58>)
 800d542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d546:	bf00      	nop
 800d548:	0800d559 	.word	0x0800d559
 800d54c:	0800d561 	.word	0x0800d561
 800d550:	0800d569 	.word	0x0800d569
 800d554:	0800d571 	.word	0x0800d571

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800d558:	2300      	movs	r3, #0
 800d55a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800d55e:	e00e      	b.n	800d57e <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800d560:	2310      	movs	r3, #16
 800d562:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800d566:	e00a      	b.n	800d57e <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800d568:	2320      	movs	r3, #32
 800d56a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800d56e:	e006      	b.n	800d57e <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800d570:	2340      	movs	r3, #64	; 0x40
 800d572:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800d576:	e002      	b.n	800d57e <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800d578:	2300      	movs	r3, #0
 800d57a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800d57e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d582:	2b00      	cmp	r3, #0
 800d584:	d125      	bne.n	800d5d2 <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800d586:	f107 030c 	add.w	r3, r7, #12
 800d58a:	2229      	movs	r2, #41	; 0x29
 800d58c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800d58e:	f107 030c 	add.w	r3, r7, #12
 800d592:	22c9      	movs	r2, #201	; 0xc9
 800d594:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800d596:	f107 030c 	add.w	r3, r7, #12
 800d59a:	220e      	movs	r2, #14
 800d59c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800d59e:	f107 030c 	add.w	r3, r7, #12
 800d5a2:	2240      	movs	r2, #64	; 0x40
 800d5a4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800d5a6:	f107 030c 	add.w	r3, r7, #12
 800d5aa:	2228      	movs	r2, #40	; 0x28
 800d5ac:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800d5ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	f107 030c 	add.w	r3, r7, #12
 800d5b8:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800d5ba:	f107 020c 	add.w	r2, r7, #12
 800d5be:	1d38      	adds	r0, r7, #4
 800d5c0:	2306      	movs	r3, #6
 800d5c2:	f240 4176 	movw	r1, #1142	; 0x476
 800d5c6:	6800      	ldr	r0, [r0, #0]
 800d5c8:	f004 f92c 	bl	8011824 <VL53L1_WriteMulti>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800d5d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d123      	bne.n	800d622 <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800d5da:	f107 030c 	add.w	r3, r7, #12
 800d5de:	2203      	movs	r2, #3
 800d5e0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800d5e2:	f107 030c 	add.w	r3, r7, #12
 800d5e6:	226d      	movs	r2, #109	; 0x6d
 800d5e8:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800d5ea:	f107 030c 	add.w	r3, r7, #12
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800d5f2:	f107 030c 	add.w	r3, r7, #12
 800d5f6:	226f      	movs	r2, #111	; 0x6f
 800d5f8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800d5fa:	f107 030c 	add.w	r3, r7, #12
 800d5fe:	2207      	movs	r2, #7
 800d600:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800d602:	f107 030c 	add.w	r3, r7, #12
 800d606:	2229      	movs	r2, #41	; 0x29
 800d608:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800d60a:	f107 020c 	add.w	r2, r7, #12
 800d60e:	1d38      	adds	r0, r7, #4
 800d610:	2306      	movs	r3, #6
 800d612:	f240 4196 	movw	r1, #1174	; 0x496
 800d616:	6800      	ldr	r0, [r0, #0]
 800d618:	f004 f904 	bl	8011824 <VL53L1_WriteMulti>
 800d61c:	4603      	mov	r3, r0
 800d61e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800d622:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d626:	2b00      	cmp	r3, #0
 800d628:	d113      	bne.n	800d652 <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800d62a:	f107 030c 	add.w	r3, r7, #12
 800d62e:	2200      	movs	r2, #0
 800d630:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800d632:	f107 030c 	add.w	r3, r7, #12
 800d636:	2207      	movs	r2, #7
 800d638:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800d63a:	f107 020c 	add.w	r2, r7, #12
 800d63e:	1d38      	adds	r0, r7, #4
 800d640:	2302      	movs	r3, #2
 800d642:	f240 4172 	movw	r1, #1138	; 0x472
 800d646:	6800      	ldr	r0, [r0, #0]
 800d648:	f004 f8ec 	bl	8011824 <VL53L1_WriteMulti>
 800d64c:	4603      	mov	r3, r0
 800d64e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800d652:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d656:	2b00      	cmp	r3, #0
 800d658:	d113      	bne.n	800d682 <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800d65a:	f107 030c 	add.w	r3, r7, #12
 800d65e:	2200      	movs	r2, #0
 800d660:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800d662:	f107 030c 	add.w	r3, r7, #12
 800d666:	2207      	movs	r2, #7
 800d668:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800d66a:	f107 020c 	add.w	r2, r7, #12
 800d66e:	1d38      	adds	r0, r7, #4
 800d670:	2302      	movs	r3, #2
 800d672:	f240 4174 	movw	r1, #1140	; 0x474
 800d676:	6800      	ldr	r0, [r0, #0]
 800d678:	f004 f8d4 	bl	8011824 <VL53L1_WriteMulti>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800d682:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d686:	2b00      	cmp	r3, #0
 800d688:	d109      	bne.n	800d69e <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800d68a:	1d3b      	adds	r3, r7, #4
 800d68c:	2201      	movs	r2, #1
 800d68e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	f004 f932 	bl	80118fc <VL53L1_WrByte>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800d69e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d108      	bne.n	800d6b8 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800d6a6:	1d3b      	adds	r3, r7, #4
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	2185      	movs	r1, #133	; 0x85
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	f004 f925 	bl	80118fc <VL53L1_WrByte>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800d6b8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	2000019c 	.word	0x2000019c

0800d6cc <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800d6cc:	b5b0      	push	{r4, r5, r7, lr}
 800d6ce:	b088      	sub	sp, #32
 800d6d0:	af04      	add	r7, sp, #16
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800d6e0:	2162      	movs	r1, #98	; 0x62
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f002 f8bf 	bl	800f866 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2201      	movs	r2, #1
 800d704:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d70c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d714:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d71c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2264      	movs	r2, #100	; 0x64
 800d722:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d72a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	f240 72db 	movw	r2, #2011	; 0x7db
 800d73a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f002 f875 	bl	800f82e <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d744:	78fb      	ldrb	r3, [r7, #3]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d008      	beq.n	800d75c <VL53L1_data_init+0x90>
 800d74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d104      	bne.n	800d75c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f857 	bl	800d806 <VL53L1_read_p2p_data>
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800d762:	4618      	mov	r0, r3
 800d764:	f001 fba4 	bl	800eeb0 <VL53L1_init_refspadchar_config_struct>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800d772:	4618      	mov	r0, r3
 800d774:	f001 fbc0 	bl	800eef8 <VL53L1_init_ssc_config_struct>
 800d778:	4603      	mov	r3, r0
 800d77a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d788:	4619      	mov	r1, r3
 800d78a:	4610      	mov	r0, r2
 800d78c:	f001 fbd5 	bl	800ef3a <VL53L1_init_xtalk_config_struct>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d79a:	4618      	mov	r0, r3
 800d79c:	f001 fc2f 	bl	800effe <VL53L1_init_offset_cal_config_struct>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	33a4      	adds	r3, #164	; 0xa4
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f001 fc4f 	bl	800f04c <VL53L1_init_tuning_parm_storage_struct>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800d7b2:	2120      	movs	r1, #32
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fcc1 	bl	800e13c <VL53L1_set_vhv_loopbound>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800d7be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d116      	bne.n	800d7f4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	7858      	ldrb	r0, [r3, #1]
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	8b1c      	ldrh	r4, [r3, #24]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	689d      	ldr	r5, [r3, #8]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	6912      	ldr	r2, [r2, #16]
 800d7da:	68b9      	ldr	r1, [r7, #8]
 800d7dc:	6949      	ldr	r1, [r1, #20]
 800d7de:	9102      	str	r1, [sp, #8]
 800d7e0:	9201      	str	r2, [sp, #4]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	462b      	mov	r3, r5
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fad8 	bl	800dda0 <VL53L1_set_preset_mode>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f002 fdb5 	bl	8010364 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800d7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bdb0      	pop	{r4, r5, r7, pc}

0800d806 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d80e:	2300      	movs	r3, #0
 800d810:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800d816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d108      	bne.n	800d830 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f002 ff39 	bl	801069e <VL53L1_get_static_nvm_managed>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800d830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d107      	bne.n	800d848 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	3342      	adds	r3, #66	; 0x42
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f003 f86b 	bl	801091a <VL53L1_get_customer_nvm_managed>
 800d844:	4603      	mov	r3, r0
 800d846:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800d848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d115      	bne.n	800d87c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f003 ff1d 	bl	8011698 <VL53L1_get_nvm_copy_data>
 800d85e:	4603      	mov	r3, r0
 800d860:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800d862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d108      	bne.n	800d87c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	33f0      	adds	r3, #240	; 0xf0
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f002 f957 	bl	800fb2a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800d87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d109      	bne.n	800d898 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d88a:	461a      	mov	r2, r3
 800d88c:	21de      	movs	r1, #222	; 0xde
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f004 f892 	bl	80119b8 <VL53L1_RdWord>
 800d894:	4603      	mov	r3, r0
 800d896:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800d89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8a2:	d204      	bcs.n	800d8ae <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800d8aa:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800d8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d107      	bne.n	800d8c6 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	339e      	adds	r3, #158	; 0x9e
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f990 	bl	800dbe2 <VL53L1_get_mode_mitigation_roi>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d114      	bne.n	800d8fa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10f      	bne.n	800d8fa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800d8e0:	011b      	lsls	r3, r3, #4
 800d8e2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800d8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d910:	2300      	movs	r3, #0
 800d912:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800d922:	23f1      	movs	r3, #241	; 0xf1
 800d924:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800d926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10c      	bne.n	800d948 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800d93a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800d948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800d974:	23f1      	movs	r3, #241	; 0xf1
 800d976:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800d978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d109      	bne.n	800d994 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800d98c:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800d994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800d9c4:	23f1      	movs	r3, #241	; 0xf1
 800d9c6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800d9c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d11b      	bne.n	800da08 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d9ee:	693a      	ldr	r2, [r7, #16]
 800d9f0:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800d9f4:	9201      	str	r2, [sp, #4]
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	6879      	ldr	r1, [r7, #4]
 800d9fe:	68b8      	ldr	r0, [r7, #8]
 800da00:	f002 fbe2 	bl	80101c8 <VL53L1_calc_timeout_register_values>
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800da08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da22:	2300      	movs	r3, #0
 800da24:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800da2a:	2300      	movs	r3, #0
 800da2c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d101      	bne.n	800da40 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800da3c:	23f1      	movs	r3, #241	; 0xf1
 800da3e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800da40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d14a      	bne.n	800dade <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800da54:	4619      	mov	r1, r3
 800da56:	4610      	mov	r0, r2
 800da58:	f002 fa5d 	bl	800ff16 <VL53L1_calc_macro_period_us>
 800da5c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800da5e:	69bb      	ldr	r3, [r7, #24]
 800da60:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800da64:	6979      	ldr	r1, [r7, #20]
 800da66:	4618      	mov	r0, r3
 800da68:	f002 fb15 	bl	8010096 <VL53L1_calc_timeout_us>
 800da6c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800da78:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800da7a:	8a7b      	ldrh	r3, [r7, #18]
 800da7c:	021b      	lsls	r3, r3, #8
 800da7e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800da86:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800da88:	4413      	add	r3, r2
 800da8a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800da8c:	8a7b      	ldrh	r3, [r7, #18]
 800da8e:	6979      	ldr	r1, [r7, #20]
 800da90:	4618      	mov	r0, r3
 800da92:	f002 fb3e 	bl	8010112 <VL53L1_calc_decoded_timeout_us>
 800da96:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800daa2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800daa4:	8a7b      	ldrh	r3, [r7, #18]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800dab0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800dab2:	4413      	add	r3, r2
 800dab4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800dab6:	8a7b      	ldrh	r3, [r7, #18]
 800dab8:	6979      	ldr	r1, [r7, #20]
 800daba:	4618      	mov	r0, r3
 800dabc:	f002 fb29 	bl	8010112 <VL53L1_calc_decoded_timeout_us>
 800dac0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800dade:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3720      	adds	r7, #32
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800daea:	b480      	push	{r7}
 800daec:	b087      	sub	sp, #28
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	460b      	mov	r3, r1
 800daf4:	607a      	str	r2, [r7, #4]
 800daf6:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800db00:	2301      	movs	r3, #1
 800db02:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800db04:	7afb      	ldrb	r3, [r7, #11]
 800db06:	2b07      	cmp	r3, #7
 800db08:	d81c      	bhi.n	800db44 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800db0a:	7afb      	ldrb	r3, [r7, #11]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800db10:	7afb      	ldrb	r3, [r7, #11]
 800db12:	2201      	movs	r2, #1
 800db14:	fa02 f303 	lsl.w	r3, r2, r3
 800db18:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800db20:	7dbb      	ldrb	r3, [r7, #22]
 800db22:	4013      	ands	r3, r2
 800db24:	b2da      	uxtb	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	7afb      	ldrb	r3, [r7, #11]
 800db38:	fa42 f303 	asr.w	r3, r2, r3
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	701a      	strb	r2, [r3, #0]
 800db42:	e001      	b.n	800db48 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800db44:	23fc      	movs	r3, #252	; 0xfc
 800db46:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800db48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	371c      	adds	r7, #28
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	7858      	ldrb	r0, [r3, #1]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	7819      	ldrb	r1, [r3, #0]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800db78:	461a      	mov	r2, r3
 800db7a:	f002 fb9e 	bl	80102ba <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	7898      	ldrb	r0, [r3, #2]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	78d9      	ldrb	r1, [r3, #3]
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800db8c:	461a      	mov	r2, r3
 800db8e:	f002 fbd3 	bl	8010338 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800db92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	f002 fc8a 	bl	80104d6 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	1c99      	adds	r1, r3, #2
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	3303      	adds	r3, #3
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	f002 fb99 	bl	8010308 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800dbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b086      	sub	sp, #24
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dbec:	2300      	movs	r3, #0
 800dbee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800dc06:	f107 020e 	add.w	r2, r7, #14
 800dc0a:	f107 010d 	add.w	r1, r7, #13
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f002 fc61 	bl	80104d6 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800dc14:	7bba      	ldrb	r2, [r7, #14]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800dc1a:	7b7a      	ldrb	r2, [r7, #13]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800dc26:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	091b      	lsrs	r3, r3, #4
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
 800dc34:	f003 030f 	and.w	r3, r3, #15
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800dc3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	607a      	str	r2, [r7, #4]
 800dc56:	603b      	str	r3, [r7, #0]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800dc64:	7afb      	ldrb	r3, [r7, #11]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	2b25      	cmp	r3, #37	; 0x25
 800dc6a:	f200 808e 	bhi.w	800dd8a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800dc6e:	a201      	add	r2, pc, #4	; (adr r2, 800dc74 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dd0d 	.word	0x0800dd0d
 800dc78:	0800dd0d 	.word	0x0800dd0d
 800dc7c:	0800dd0d 	.word	0x0800dd0d
 800dc80:	0800dd0d 	.word	0x0800dd0d
 800dc84:	0800dd0d 	.word	0x0800dd0d
 800dc88:	0800dd37 	.word	0x0800dd37
 800dc8c:	0800dd37 	.word	0x0800dd37
 800dc90:	0800dd37 	.word	0x0800dd37
 800dc94:	0800dd8b 	.word	0x0800dd8b
 800dc98:	0800dd8b 	.word	0x0800dd8b
 800dc9c:	0800dd8b 	.word	0x0800dd8b
 800dca0:	0800dd8b 	.word	0x0800dd8b
 800dca4:	0800dd8b 	.word	0x0800dd8b
 800dca8:	0800dd8b 	.word	0x0800dd8b
 800dcac:	0800dd8b 	.word	0x0800dd8b
 800dcb0:	0800dd8b 	.word	0x0800dd8b
 800dcb4:	0800dd0d 	.word	0x0800dd0d
 800dcb8:	0800dd37 	.word	0x0800dd37
 800dcbc:	0800dd8b 	.word	0x0800dd8b
 800dcc0:	0800dd8b 	.word	0x0800dd8b
 800dcc4:	0800dd8b 	.word	0x0800dd8b
 800dcc8:	0800dd8b 	.word	0x0800dd8b
 800dccc:	0800dd8b 	.word	0x0800dd8b
 800dcd0:	0800dd8b 	.word	0x0800dd8b
 800dcd4:	0800dd8b 	.word	0x0800dd8b
 800dcd8:	0800dd8b 	.word	0x0800dd8b
 800dcdc:	0800dd8b 	.word	0x0800dd8b
 800dce0:	0800dd8b 	.word	0x0800dd8b
 800dce4:	0800dd8b 	.word	0x0800dd8b
 800dce8:	0800dd8b 	.word	0x0800dd8b
 800dcec:	0800dd8b 	.word	0x0800dd8b
 800dcf0:	0800dd8b 	.word	0x0800dd8b
 800dcf4:	0800dd8b 	.word	0x0800dd8b
 800dcf8:	0800dd8b 	.word	0x0800dd8b
 800dcfc:	0800dd8b 	.word	0x0800dd8b
 800dd00:	0800dd61 	.word	0x0800dd61
 800dd04:	0800dd61 	.word	0x0800dd61
 800dd08:	0800dd61 	.word	0x0800dd61
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	601a      	str	r2, [r3, #0]
	break;
 800dd34:	e02c      	b.n	800dd90 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	601a      	str	r2, [r3, #0]
	break;
 800dd5e:	e017      	b.n	800dd90 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	601a      	str	r2, [r3, #0]
	break;
 800dd88:	e002      	b.n	800dd90 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800dd8a:	23fc      	movs	r3, #252	; 0xfc
 800dd8c:	75fb      	strb	r3, [r7, #23]
		break;
 800dd8e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800dd90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	371c      	adds	r7, #28
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b092      	sub	sp, #72	; 0x48
 800dda4:	af04      	add	r7, sp, #16
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	607b      	str	r3, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	72fb      	strb	r3, [r7, #11]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ddca:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ddda:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dde2:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800dde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde6:	33a4      	adds	r3, #164	; 0xa4
 800dde8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800ddf0:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	7afa      	ldrb	r2, [r7, #11]
 800ddf6:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddfc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de02:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de08:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800de0a:	2103      	movs	r1, #3
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f001 fd2a 	bl	800f866 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800de12:	7afb      	ldrb	r3, [r7, #11]
 800de14:	3b01      	subs	r3, #1
 800de16:	2b25      	cmp	r3, #37	; 0x25
 800de18:	f200 810c 	bhi.w	800e034 <VL53L1_set_preset_mode+0x294>
 800de1c:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <VL53L1_set_preset_mode+0x84>)
 800de1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de22:	bf00      	nop
 800de24:	0800debd 	.word	0x0800debd
 800de28:	0800ded9 	.word	0x0800ded9
 800de2c:	0800def5 	.word	0x0800def5
 800de30:	0800df11 	.word	0x0800df11
 800de34:	0800df2d 	.word	0x0800df2d
 800de38:	0800df49 	.word	0x0800df49
 800de3c:	0800df65 	.word	0x0800df65
 800de40:	0800df81 	.word	0x0800df81
 800de44:	0800e035 	.word	0x0800e035
 800de48:	0800e035 	.word	0x0800e035
 800de4c:	0800e035 	.word	0x0800e035
 800de50:	0800e035 	.word	0x0800e035
 800de54:	0800e035 	.word	0x0800e035
 800de58:	0800e035 	.word	0x0800e035
 800de5c:	0800e035 	.word	0x0800e035
 800de60:	0800e035 	.word	0x0800e035
 800de64:	0800df9d 	.word	0x0800df9d
 800de68:	0800dfb9 	.word	0x0800dfb9
 800de6c:	0800e035 	.word	0x0800e035
 800de70:	0800e035 	.word	0x0800e035
 800de74:	0800e035 	.word	0x0800e035
 800de78:	0800e035 	.word	0x0800e035
 800de7c:	0800e035 	.word	0x0800e035
 800de80:	0800e035 	.word	0x0800e035
 800de84:	0800e035 	.word	0x0800e035
 800de88:	0800e035 	.word	0x0800e035
 800de8c:	0800e035 	.word	0x0800e035
 800de90:	0800e035 	.word	0x0800e035
 800de94:	0800e035 	.word	0x0800e035
 800de98:	0800e035 	.word	0x0800e035
 800de9c:	0800e035 	.word	0x0800e035
 800dea0:	0800e035 	.word	0x0800e035
 800dea4:	0800e035 	.word	0x0800e035
 800dea8:	0800e035 	.word	0x0800e035
 800deac:	0800e035 	.word	0x0800e035
 800deb0:	0800dfd5 	.word	0x0800dfd5
 800deb4:	0800dff5 	.word	0x0800dff5
 800deb8:	0800e015 	.word	0x0800e015

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800decc:	f001 f94d 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800ded0:	4603      	mov	r3, r0
 800ded2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800ded6:	e0b1      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dee8:	f001 fa5d 	bl	800f3a6 <VL53L1_preset_mode_standard_ranging_short_range>
 800deec:	4603      	mov	r3, r0
 800deee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800def2:	e0a3      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df04:	f001 fa90 	bl	800f428 <VL53L1_preset_mode_standard_ranging_long_range>
 800df08:	4603      	mov	r3, r0
 800df0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df0e:	e095      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	6a3b      	ldr	r3, [r7, #32]
 800df1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df20:	f001 fac3 	bl	800f4aa <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800df24:	4603      	mov	r3, r0
 800df26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df2a:	e087      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df3c:	f001 fada 	bl	800f4f4 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800df40:	4603      	mov	r3, r0
 800df42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df46:	e079      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df58:	f001 faf1 	bl	800f53e <VL53L1_preset_mode_timed_ranging>
 800df5c:	4603      	mov	r3, r0
 800df5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df62:	e06b      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	9300      	str	r3, [sp, #0]
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df74:	f001 fb1d 	bl	800f5b2 <VL53L1_preset_mode_timed_ranging_short_range>
 800df78:	4603      	mov	r3, r0
 800df7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df7e:	e05d      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	6a3b      	ldr	r3, [r7, #32]
 800df8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df90:	f001 fb49 	bl	800f626 <VL53L1_preset_mode_timed_ranging_long_range>
 800df94:	4603      	mov	r3, r0
 800df96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800df9a:	e04f      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfac:	f001 fc1d 	bl	800f7ea <VL53L1_preset_mode_olt>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800dfb6:	e041      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfc8:	f001 fbd9 	bl	800f77e <VL53L1_preset_mode_singleshot_ranging>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800dfd2:	e033      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	9302      	str	r3, [sp, #8]
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	9301      	str	r3, [sp, #4]
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfe8:	f001 fb7d 	bl	800f6e6 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800dff2:	e023      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	9302      	str	r3, [sp, #8]
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	6a3b      	ldr	r3, [r7, #32]
 800e002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e008:	f001 fb47 	bl	800f69a <VL53L1_preset_mode_low_power_auto_ranging>
 800e00c:	4603      	mov	r3, r0
 800e00e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800e012:	e013      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	9302      	str	r3, [sp, #8]
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e028:	f001 fb83 	bl	800f732 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800e02c:	4603      	mov	r3, r0
 800e02e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800e032:	e003      	b.n	800e03c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800e034:	23fc      	movs	r3, #252	; 0xfc
 800e036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800e03a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800e03c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e040:	2b00      	cmp	r3, #0
 800e042:	d105      	bne.n	800e050 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	893a      	ldrh	r2, [r7, #8]
 800e048:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	893a      	ldrh	r2, [r7, #8]
 800e04e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800e050:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e054:	2b00      	cmp	r3, #0
 800e056:	d108      	bne.n	800e06a <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800e058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e05a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e05c:	6879      	ldr	r1, [r7, #4]
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f7ff fca0 	bl	800d9a4 <VL53L1_set_timeouts_us>
 800e064:	4603      	mov	r3, r0
 800e066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800e06a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800e072:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7ff fc46 	bl	800d906 <VL53L1_set_inter_measurement_period_ms>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800e080:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e084:	4618      	mov	r0, r3
 800e086:	3738      	adds	r7, #56	; 0x38
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e096:	2300      	movs	r3, #0
 800e098:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800e0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	887a      	ldrh	r2, [r7, #2]
 800e0d0:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800e0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800e100:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	460b      	mov	r3, r1
 800e11a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	887a      	ldrh	r2, [r7, #2]
 800e128:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800e12c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	460b      	mov	r3, r1
 800e146:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e148:	2300      	movs	r3, #0
 800e14a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	78fb      	ldrb	r3, [r7, #3]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	b2db      	uxtb	r3, r3
 800e162:	4413      	add	r3, r2
 800e164:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800e16c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b0d0      	sub	sp, #320	; 0x140
 800e180:	af00      	add	r7, sp, #0
 800e182:	1d3b      	adds	r3, r7, #4
 800e184:	6018      	str	r0, [r3, #0]
 800e186:	4608      	mov	r0, r1
 800e188:	4611      	mov	r1, r2
 800e18a:	1cfb      	adds	r3, r7, #3
 800e18c:	4602      	mov	r2, r0
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	1cbb      	adds	r3, r7, #2
 800e192:	460a      	mov	r2, r1
 800e194:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e196:	2300      	movs	r3, #0
 800e198:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e19c:	1d3b      	adds	r3, r7, #4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800e1a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e1ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800e1b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1b4:	3342      	adds	r3, #66	; 0x42
 800e1b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800e1ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e1c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800e1c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800e1ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800e1d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1d6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800e1da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800e1de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1e2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800e1e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800e1ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e1f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800e1f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1fa:	332c      	adds	r3, #44	; 0x2c
 800e1fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800e200:	f107 030c 	add.w	r3, r7, #12
 800e204:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800e220:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e224:	1cfa      	adds	r2, r7, #3
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800e22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e22e:	791b      	ldrb	r3, [r3, #4]
 800e230:	b25b      	sxtb	r3, r3
 800e232:	f003 030f 	and.w	r3, r3, #15
 800e236:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800e238:	1cfb      	adds	r3, r7, #3
 800e23a:	f993 3000 	ldrsb.w	r3, [r3]
 800e23e:	4313      	orrs	r3, r2
 800e240:	b25b      	sxtb	r3, r3
 800e242:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800e244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e248:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800e24a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e24e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800e252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e256:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800e25a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e25e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800e262:	2bff      	cmp	r3, #255	; 0xff
 800e264:	d104      	bne.n	800e270 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800e266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800e270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e274:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d133      	bne.n	800e2e4 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800e27c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e280:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800e284:	2b00      	cmp	r3, #0
 800e286:	d12d      	bne.n	800e2e4 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800e288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e28c:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800e290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e294:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800e298:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e29c:	2220      	movs	r2, #32
 800e29e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800e2a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2a6:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800e2aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10c      	bne.n	800e2cc <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800e2b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2b6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800e2c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800e2ca:	e004      	b.n	800e2d6 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800e2cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800e2d6:	1cbb      	adds	r3, r7, #2
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b04      	cmp	r3, #4
 800e2dc:	d802      	bhi.n	800e2e4 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800e2de:	1cbb      	adds	r3, r7, #2
 800e2e0:	2205      	movs	r2, #5
 800e2e2:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800e2e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2e8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d110      	bne.n	800e312 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800e2f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2f4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d10a      	bne.n	800e312 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800e2fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e300:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800e304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e308:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800e30c:	1cbb      	adds	r3, r7, #2
 800e30e:	2206      	movs	r2, #6
 800e310:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800e312:	1cbb      	adds	r3, r7, #2
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	3b01      	subs	r3, #1
 800e318:	2b05      	cmp	r3, #5
 800e31a:	d827      	bhi.n	800e36c <VL53L1_init_and_start_range+0x1f0>
 800e31c:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <VL53L1_init_and_start_range+0x1a8>)
 800e31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e322:	bf00      	nop
 800e324:	0800e365 	.word	0x0800e365
 800e328:	0800e35d 	.word	0x0800e35d
 800e32c:	0800e355 	.word	0x0800e355
 800e330:	0800e34d 	.word	0x0800e34d
 800e334:	0800e345 	.word	0x0800e345
 800e338:	0800e33d 	.word	0x0800e33d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800e33c:	2301      	movs	r3, #1
 800e33e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e342:	e017      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800e344:	230d      	movs	r3, #13
 800e346:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e34a:	e013      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800e34c:	2324      	movs	r3, #36	; 0x24
 800e34e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e352:	e00f      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800e354:	2344      	movs	r3, #68	; 0x44
 800e356:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e35a:	e00b      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800e35c:	235a      	movs	r3, #90	; 0x5a
 800e35e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e362:	e007      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800e364:	2371      	movs	r3, #113	; 0x71
 800e366:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e36a:	e003      	b.n	800e374 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800e36c:	2383      	movs	r3, #131	; 0x83
 800e36e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800e372:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800e374:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e378:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800e37c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800e380:	f107 030c 	add.w	r3, r7, #12
 800e384:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800e388:	2300      	movs	r3, #0
 800e38a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e38e:	e00b      	b.n	800e3a8 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800e390:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800e39e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e3a8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800e3ac:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d3ed      	bcc.n	800e390 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800e3b4:	1cbb      	adds	r3, r7, #2
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b05      	cmp	r3, #5
 800e3ba:	d917      	bls.n	800e3ec <VL53L1_init_and_start_range+0x270>
 800e3bc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d113      	bne.n	800e3ec <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800e3c4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e3c8:	f1c3 0301 	rsb	r3, r3, #1
 800e3cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e3d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800e3d4:	f107 020c 	add.w	r2, r7, #12
 800e3d8:	4413      	add	r3, r2
 800e3da:	461a      	mov	r2, r3
 800e3dc:	210b      	movs	r1, #11
 800e3de:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800e3e2:	f002 f8a7 	bl	8010534 <VL53L1_i2c_encode_static_nvm_managed>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800e3ec:	1cbb      	adds	r3, r7, #2
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d917      	bls.n	800e424 <VL53L1_init_and_start_range+0x2a8>
 800e3f4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d113      	bne.n	800e424 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800e3fc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e400:	f1c3 030d 	rsb	r3, r3, #13
 800e404:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e408:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800e40c:	f107 020c 	add.w	r2, r7, #12
 800e410:	4413      	add	r3, r2
 800e412:	461a      	mov	r2, r3
 800e414:	2117      	movs	r1, #23
 800e416:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800e41a:	f002 f967 	bl	80106ec <VL53L1_i2c_encode_customer_nvm_managed>
 800e41e:	4603      	mov	r3, r0
 800e420:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800e424:	1cbb      	adds	r3, r7, #2
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d917      	bls.n	800e45c <VL53L1_init_and_start_range+0x2e0>
 800e42c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e430:	2b00      	cmp	r3, #0
 800e432:	d113      	bne.n	800e45c <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800e434:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e438:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800e43c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e440:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800e444:	f107 020c 	add.w	r2, r7, #12
 800e448:	4413      	add	r3, r2
 800e44a:	461a      	mov	r2, r3
 800e44c:	2120      	movs	r1, #32
 800e44e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e452:	f002 fa89 	bl	8010968 <VL53L1_i2c_encode_static_config>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800e45c:	1cbb      	adds	r3, r7, #2
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	2b02      	cmp	r3, #2
 800e462:	d917      	bls.n	800e494 <VL53L1_init_and_start_range+0x318>
 800e464:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d113      	bne.n	800e494 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800e46c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e470:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800e474:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e478:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800e47c:	f107 020c 	add.w	r2, r7, #12
 800e480:	4413      	add	r3, r2
 800e482:	461a      	mov	r2, r3
 800e484:	2116      	movs	r1, #22
 800e486:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800e48a:	f002 fb50 	bl	8010b2e <VL53L1_i2c_encode_general_config>
 800e48e:	4603      	mov	r3, r0
 800e490:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800e494:	1cbb      	adds	r3, r7, #2
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d917      	bls.n	800e4cc <VL53L1_init_and_start_range+0x350>
 800e49c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d113      	bne.n	800e4cc <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800e4a4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e4a8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800e4ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e4b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800e4b4:	f107 020c 	add.w	r2, r7, #12
 800e4b8:	4413      	add	r3, r2
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	2117      	movs	r1, #23
 800e4be:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800e4c2:	f002 fbb8 	bl	8010c36 <VL53L1_i2c_encode_timing_config>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800e4cc:	1cbb      	adds	r3, r7, #2
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d036      	beq.n	800e542 <VL53L1_init_and_start_range+0x3c6>
 800e4d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d132      	bne.n	800e542 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800e4dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e4e0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800e4e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800e4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ec:	791b      	ldrb	r3, [r3, #4]
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d017      	beq.n	800e526 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800e4f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e4fa:	789b      	ldrb	r3, [r3, #2]
 800e4fc:	f043 0301 	orr.w	r3, r3, #1
 800e500:	b2da      	uxtb	r2, r3
 800e502:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e506:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800e508:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e50c:	789b      	ldrb	r3, [r3, #2]
 800e50e:	f043 0301 	orr.w	r3, r3, #1
 800e512:	b2da      	uxtb	r2, r3
 800e514:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e518:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800e51a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e51e:	789a      	ldrb	r2, [r3, #2]
 800e520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e524:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e526:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800e52a:	f107 020c 	add.w	r2, r7, #12
 800e52e:	4413      	add	r3, r2
 800e530:	461a      	mov	r2, r3
 800e532:	2112      	movs	r1, #18
 800e534:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800e538:	f002 fbff 	bl	8010d3a <VL53L1_i2c_encode_dynamic_config>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800e542:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e546:	2b00      	cmp	r3, #0
 800e548:	d113      	bne.n	800e572 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800e54a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e54e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800e552:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800e556:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800e55a:	f107 020c 	add.w	r2, r7, #12
 800e55e:	4413      	add	r3, r2
 800e560:	461a      	mov	r2, r3
 800e562:	2105      	movs	r1, #5
 800e564:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800e568:	f002 fc6c 	bl	8010e44 <VL53L1_i2c_encode_system_control>
 800e56c:	4603      	mov	r3, r0
 800e56e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800e572:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10c      	bne.n	800e594 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800e57a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800e57e:	f107 020c 	add.w	r2, r7, #12
 800e582:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800e586:	1d38      	adds	r0, r7, #4
 800e588:	6800      	ldr	r0, [r0, #0]
 800e58a:	f003 f94b 	bl	8011824 <VL53L1_WriteMulti>
 800e58e:	4603      	mov	r3, r0
 800e590:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800e594:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d106      	bne.n	800e5aa <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	f001 f98a 	bl	800f8b8 <VL53L1_update_ll_driver_rd_state>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800e5aa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800e5b2:	1d3b      	adds	r3, r7, #4
 800e5b4:	6818      	ldr	r0, [r3, #0]
 800e5b6:	f001 fa52 	bl	800fa5e <VL53L1_update_ll_driver_cfg_state>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800e5c0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop

0800e5d0 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b0c8      	sub	sp, #288	; 0x120
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	1d3b      	adds	r3, r7, #4
 800e5d8:	6018      	str	r0, [r3, #0]
 800e5da:	460a      	mov	r2, r1
 800e5dc:	1cfb      	adds	r3, r7, #3
 800e5de:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e5e6:	1d3b      	adds	r3, r7, #4
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800e5ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e5f2:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800e5f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800e5fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e5fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e602:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800e606:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e60a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800e60e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800e612:	2388      	movs	r3, #136	; 0x88
 800e614:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800e61e:	2300      	movs	r3, #0
 800e620:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800e624:	1cfb      	adds	r3, r7, #3
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d008      	beq.n	800e63e <VL53L1_get_measurement_results+0x6e>
 800e62c:	2b02      	cmp	r3, #2
 800e62e:	d10d      	bne.n	800e64c <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800e630:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e634:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800e638:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800e63c:	e00a      	b.n	800e654 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800e63e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e642:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800e646:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800e64a:	e003      	b.n	800e654 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800e64c:	232c      	movs	r3, #44	; 0x2c
 800e64e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800e652:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e654:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800e65c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800e660:	f107 0208 	add.w	r2, r7, #8
 800e664:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800e668:	1d38      	adds	r0, r7, #4
 800e66a:	6800      	ldr	r0, [r0, #0]
 800e66c:	f003 f910 	bl	8011890 <VL53L1_ReadMulti>
 800e670:	4603      	mov	r3, r0
 800e672:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800e676:	1cfb      	adds	r3, r7, #3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d917      	bls.n	800e6ae <VL53L1_get_measurement_results+0xde>
 800e67e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800e682:	2b00      	cmp	r3, #0
 800e684:	d113      	bne.n	800e6ae <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800e686:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e68a:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800e68e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800e692:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800e696:	f107 0208 	add.w	r2, r7, #8
 800e69a:	4413      	add	r3, r2
 800e69c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	2038      	movs	r0, #56	; 0x38
 800e6a4:	f002 fd60 	bl	8011168 <VL53L1_i2c_decode_debug_results>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800e6ae:	1cfb      	adds	r3, r7, #3
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d017      	beq.n	800e6e6 <VL53L1_get_measurement_results+0x116>
 800e6b6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d113      	bne.n	800e6e6 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800e6be:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e6c2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800e6c6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800e6ca:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800e6ce:	f107 0208 	add.w	r2, r7, #8
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e6d8:	4619      	mov	r1, r3
 800e6da:	2021      	movs	r0, #33	; 0x21
 800e6dc:	f002 fce3 	bl	80110a6 <VL53L1_i2c_decode_core_results>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800e6e6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d110      	bne.n	800e710 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800e6f4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800e6f8:	f107 0208 	add.w	r2, r7, #8
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800e702:	4619      	mov	r1, r3
 800e704:	202c      	movs	r0, #44	; 0x2c
 800e706:	f002 fbd8 	bl	8010eba <VL53L1_i2c_decode_system_results>
 800e70a:	4603      	mov	r3, r0
 800e70c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e710:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800e714:	4618      	mov	r0, r3
 800e716:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b088      	sub	sp, #32
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	460b      	mov	r3, r1
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800e73a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e740:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800e748:	7afb      	ldrb	r3, [r7, #11]
 800e74a:	4619      	mov	r1, r3
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff ff3f 	bl	800e5d0 <VL53L1_get_measurement_results>
 800e752:	4603      	mov	r3, r0
 800e754:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800e756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10c      	bne.n	800e778 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800e764:	4618      	mov	r0, r3
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f000 f85e 	bl	800e834 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d11f      	bne.n	800e7c2 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800e782:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10e      	bne.n	800e7a8 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800e790:	2b00      	cmp	r3, #0
 800e792:	d109      	bne.n	800e7a8 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f001 fe32 	bl	80103fe <VL53L1_low_power_auto_setup_manual_calibration>
 800e79a:	4603      	mov	r3, r0
 800e79c:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800e7a6:	e00c      	b.n	800e7c2 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800e7a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d108      	bne.n	800e7c2 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d103      	bne.n	800e7c2 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	2202      	movs	r2, #2
 800e7be:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800e7d6:	2284      	movs	r2, #132	; 0x84
 800e7d8:	6939      	ldr	r1, [r7, #16]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f003 fbd8 	bl	8011f90 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800e7e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d104      	bne.n	800e7f2 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f001 f8ed 	bl	800f9c8 <VL53L1_check_ll_driver_rd_state>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800e7f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3720      	adds	r7, #32
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e80a:	2300      	movs	r3, #0
 800e80c:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d107      	bne.n	800e826 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800e816:	78fb      	ldrb	r3, [r7, #3]
 800e818:	2203      	movs	r2, #3
 800e81a:	4619      	mov	r1, r3
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff fcad 	bl	800e17c <VL53L1_init_and_start_range>
 800e822:	4603      	mov	r3, r0
 800e824:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800e826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800e834:	b480      	push	{r7}
 800e836:	b089      	sub	sp, #36	; 0x24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	78da      	ldrb	r2, [r3, #3]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	3304      	adds	r3, #4
 800e85a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800e85c:	2300      	movs	r3, #0
 800e85e:	77fb      	strb	r3, [r7, #31]
 800e860:	e0d0      	b.n	800ea04 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	7ffa      	ldrb	r2, [r7, #31]
 800e866:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	2200      	movs	r2, #0
 800e86c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	78db      	ldrb	r3, [r3, #3]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10a      	bne.n	800e88c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	785b      	ldrb	r3, [r3, #1]
 800e87a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800e87e:	2b09      	cmp	r3, #9
 800e880:	d104      	bne.n	800e88c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2213      	movs	r2, #19
 800e886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e88a:	e007      	b.n	800e89c <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	785b      	ldrb	r3, [r3, #1]
 800e890:	f003 031f 	and.w	r3, r3, #31
 800e894:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800e89c:	7ffb      	ldrb	r3, [r7, #31]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d002      	beq.n	800e8a8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d05d      	beq.n	800e962 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800e8a6:	e0a7      	b.n	800e9f8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	789b      	ldrb	r3, [r3, #2]
 800e8ac:	2b07      	cmp	r3, #7
 800e8ae:	d104      	bne.n	800e8ba <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	821a      	strh	r2, [r3, #16]
 800e8b8:	e00c      	b.n	800e8d4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	789b      	ldrb	r3, [r3, #2]
 800e8be:	2b08      	cmp	r3, #8
 800e8c0:	d104      	bne.n	800e8cc <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	821a      	strh	r2, [r3, #16]
 800e8ca:	e003      	b.n	800e8d4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	895b      	ldrh	r3, [r3, #10]
 800e8f0:	015b      	lsls	r3, r3, #5
 800e8f2:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8fa:	d302      	bcc.n	800e902 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800e8fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e900:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	b29a      	uxth	r2, r3
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800e916:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	fb02 f303 	mul.w	r3, r2, r3
 800e920:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e928:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	da01      	bge.n	800e934 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800e930:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e934:	12db      	asrs	r3, r3, #11
 800e936:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	b21a      	sxth	r2, r3
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	621a      	str	r2, [r3, #32]

			break;
 800e960:	e04a      	b.n	800e9f8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e978:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	8bdb      	ldrh	r3, [r3, #30]
 800e986:	015b      	lsls	r3, r3, #5
 800e988:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e990:	d302      	bcc.n	800e998 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800e992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e996:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800e9ac:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	fb02 f303 	mul.w	r3, r2, r3
 800e9b6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9be:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	da01      	bge.n	800e9ca <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800e9c6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e9ca:	12db      	asrs	r3, r3, #11
 800e9cc:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	b21a      	sxth	r2, r3
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	621a      	str	r2, [r3, #32]

			break;
 800e9f6:	bf00      	nop
		}

		pdata++;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	3340      	adds	r3, #64	; 0x40
 800e9fc:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800e9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ea00:	3301      	adds	r3, #1
 800ea02:	77fb      	strb	r3, [r7, #31]
 800ea04:	7ffb      	ldrb	r3, [r7, #31]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	f67f af2b 	bls.w	800e862 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	785b      	ldrb	r3, [r3, #1]
 800ea16:	f003 031f 	and.w	r3, r3, #31
 800ea1a:	2b11      	cmp	r3, #17
 800ea1c:	bf8c      	ite	hi
 800ea1e:	2201      	movhi	r2, #1
 800ea20:	2200      	movls	r2, #0
 800ea22:	b2d2      	uxtb	r2, r2
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	d116      	bne.n	800ea56 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800ea28:	2201      	movs	r2, #1
 800ea2a:	409a      	lsls	r2, r3
 800ea2c:	4b0d      	ldr	r3, [pc, #52]	; (800ea64 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800ea2e:	4013      	ands	r3, r2
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	bf14      	ite	ne
 800ea34:	2301      	movne	r3, #1
 800ea36:	2300      	moveq	r3, #0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00b      	beq.n	800ea56 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	785b      	ldrb	r3, [r3, #1]
 800ea42:	f003 031f 	and.w	r3, r3, #31
 800ea46:	b2da      	uxtb	r2, r3
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800ea54:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800ea56:	bf00      	nop
 800ea58:	3724      	adds	r7, #36	; 0x24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	0002200e 	.word	0x0002200e

0800ea68 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	460b      	mov	r3, r1
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea76:	2300      	movs	r3, #0
 800ea78:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800ea7e:	897b      	ldrh	r3, [r7, #10]
 800ea80:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ea84:	2b38      	cmp	r3, #56	; 0x38
 800ea86:	f200 8204 	bhi.w	800ee92 <VL53L1_get_tuning_parm+0x42a>
 800ea8a:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <VL53L1_get_tuning_parm+0x28>)
 800ea8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea90:	0800eb75 	.word	0x0800eb75
 800ea94:	0800eb83 	.word	0x0800eb83
 800ea98:	0800eb91 	.word	0x0800eb91
 800ea9c:	0800eb9f 	.word	0x0800eb9f
 800eaa0:	0800ebad 	.word	0x0800ebad
 800eaa4:	0800ebbb 	.word	0x0800ebbb
 800eaa8:	0800ebc9 	.word	0x0800ebc9
 800eaac:	0800ebd7 	.word	0x0800ebd7
 800eab0:	0800ebe5 	.word	0x0800ebe5
 800eab4:	0800ebf3 	.word	0x0800ebf3
 800eab8:	0800ec01 	.word	0x0800ec01
 800eabc:	0800ec0f 	.word	0x0800ec0f
 800eac0:	0800ec1d 	.word	0x0800ec1d
 800eac4:	0800ec2b 	.word	0x0800ec2b
 800eac8:	0800ec39 	.word	0x0800ec39
 800eacc:	0800ec47 	.word	0x0800ec47
 800ead0:	0800ec55 	.word	0x0800ec55
 800ead4:	0800ec63 	.word	0x0800ec63
 800ead8:	0800ec71 	.word	0x0800ec71
 800eadc:	0800ec7f 	.word	0x0800ec7f
 800eae0:	0800ec8d 	.word	0x0800ec8d
 800eae4:	0800ec9b 	.word	0x0800ec9b
 800eae8:	0800eca9 	.word	0x0800eca9
 800eaec:	0800ecb7 	.word	0x0800ecb7
 800eaf0:	0800ecc5 	.word	0x0800ecc5
 800eaf4:	0800ecd3 	.word	0x0800ecd3
 800eaf8:	0800ece1 	.word	0x0800ece1
 800eafc:	0800ecef 	.word	0x0800ecef
 800eb00:	0800ecfd 	.word	0x0800ecfd
 800eb04:	0800ed0b 	.word	0x0800ed0b
 800eb08:	0800ed19 	.word	0x0800ed19
 800eb0c:	0800ed27 	.word	0x0800ed27
 800eb10:	0800ed35 	.word	0x0800ed35
 800eb14:	0800ed43 	.word	0x0800ed43
 800eb18:	0800ed51 	.word	0x0800ed51
 800eb1c:	0800ed5f 	.word	0x0800ed5f
 800eb20:	0800ed6d 	.word	0x0800ed6d
 800eb24:	0800ed7b 	.word	0x0800ed7b
 800eb28:	0800ed89 	.word	0x0800ed89
 800eb2c:	0800ed97 	.word	0x0800ed97
 800eb30:	0800eda5 	.word	0x0800eda5
 800eb34:	0800edb3 	.word	0x0800edb3
 800eb38:	0800edc1 	.word	0x0800edc1
 800eb3c:	0800edcf 	.word	0x0800edcf
 800eb40:	0800eddd 	.word	0x0800eddd
 800eb44:	0800edeb 	.word	0x0800edeb
 800eb48:	0800edf9 	.word	0x0800edf9
 800eb4c:	0800ee07 	.word	0x0800ee07
 800eb50:	0800ee15 	.word	0x0800ee15
 800eb54:	0800ee23 	.word	0x0800ee23
 800eb58:	0800ee31 	.word	0x0800ee31
 800eb5c:	0800ee3f 	.word	0x0800ee3f
 800eb60:	0800ee4d 	.word	0x0800ee4d
 800eb64:	0800ee5b 	.word	0x0800ee5b
 800eb68:	0800ee69 	.word	0x0800ee69
 800eb6c:	0800ee77 	.word	0x0800ee77
 800eb70:	0800ee85 	.word	0x0800ee85

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800eb7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	601a      	str	r2, [r3, #0]
	break;
 800eb80:	e18e      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800eb88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	601a      	str	r2, [r3, #0]
	break;
 800eb8e:	e187      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800eb96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	601a      	str	r2, [r3, #0]
	break;
 800eb9c:	e180      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800eba4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	601a      	str	r2, [r3, #0]
	break;
 800ebaa:	e179      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ebb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	601a      	str	r2, [r3, #0]
	break;
 800ebb8:	e172      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ebc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	601a      	str	r2, [r3, #0]
	break;
 800ebc6:	e16b      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ebce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]
	break;
 800ebd4:	e164      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ebdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
	break;
 800ebe2:	e15d      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800ebea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	601a      	str	r2, [r3, #0]
	break;
 800ebf0:	e156      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ebf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	601a      	str	r2, [r3, #0]
	break;
 800ebfe:	e14f      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ec06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	601a      	str	r2, [r3, #0]
	break;
 800ec0c:	e148      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ec14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
	break;
 800ec1a:	e141      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ec22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	601a      	str	r2, [r3, #0]
	break;
 800ec28:	e13a      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800ec30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
	break;
 800ec36:	e133      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800ec3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	601a      	str	r2, [r3, #0]
	break;
 800ec44:	e12c      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ec4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	601a      	str	r2, [r3, #0]
	break;
 800ec52:	e125      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800ec5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	601a      	str	r2, [r3, #0]
	break;
 800ec60:	e11e      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ec68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	601a      	str	r2, [r3, #0]
	break;
 800ec6e:	e117      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800ec76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	601a      	str	r2, [r3, #0]
	break;
 800ec7c:	e110      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800ec84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	601a      	str	r2, [r3, #0]
	break;
 800ec8a:	e109      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ec92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	601a      	str	r2, [r3, #0]
	break;
 800ec98:	e102      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800eca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
	break;
 800eca6:	e0fb      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800ecae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	601a      	str	r2, [r3, #0]
	break;
 800ecb4:	e0f4      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800ecbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]
	break;
 800ecc2:	e0ed      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800ecca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	601a      	str	r2, [r3, #0]
	break;
 800ecd0:	e0e6      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ecd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
	break;
 800ecde:	e0df      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800ece6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
	break;
 800ecec:	e0d8      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ecf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	601a      	str	r2, [r3, #0]
	break;
 800ecfa:	e0d1      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ed02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	601a      	str	r2, [r3, #0]
	break;
 800ed08:	e0ca      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ed10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
	break;
 800ed16:	e0c3      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ed1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	601a      	str	r2, [r3, #0]
	break;
 800ed24:	e0bc      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800ed2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	601a      	str	r2, [r3, #0]
	break;
 800ed32:	e0b5      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	601a      	str	r2, [r3, #0]
	break;
 800ed40:	e0ae      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800ed48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	601a      	str	r2, [r3, #0]
	break;
 800ed4e:	e0a7      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800ed56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	601a      	str	r2, [r3, #0]
	break;
 800ed5c:	e0a0      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800ed64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
	break;
 800ed6a:	e099      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ed72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	601a      	str	r2, [r3, #0]
	break;
 800ed78:	e092      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ed80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
	break;
 800ed86:	e08b      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ed8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	601a      	str	r2, [r3, #0]
	break;
 800ed94:	e084      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ed9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	601a      	str	r2, [r3, #0]
	break;
 800eda2:	e07d      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800edaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	601a      	str	r2, [r3, #0]
	break;
 800edb0:	e076      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800edb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	601a      	str	r2, [r3, #0]
	break;
 800edbe:	e06f      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800edc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	601a      	str	r2, [r3, #0]
	break;
 800edcc:	e068      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800edd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	601a      	str	r2, [r3, #0]
	break;
 800edda:	e061      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800ede2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	601a      	str	r2, [r3, #0]
	break;
 800ede8:	e05a      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800edf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	601a      	str	r2, [r3, #0]
	break;
 800edf6:	e053      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800edfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	601a      	str	r2, [r3, #0]
	break;
 800ee04:	e04c      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800ee0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	601a      	str	r2, [r3, #0]
	break;
 800ee12:	e045      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ee1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	601a      	str	r2, [r3, #0]
	break;
 800ee20:	e03e      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ee28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	601a      	str	r2, [r3, #0]
	break;
 800ee2e:	e037      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ee36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	601a      	str	r2, [r3, #0]
	break;
 800ee3c:	e030      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ee44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	601a      	str	r2, [r3, #0]
	break;
 800ee4a:	e029      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	601a      	str	r2, [r3, #0]
	break;
 800ee58:	e022      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	601a      	str	r2, [r3, #0]
	break;
 800ee66:	e01b      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800ee6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	601a      	str	r2, [r3, #0]
	break;
 800ee74:	e014      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	601a      	str	r2, [r3, #0]
	break;
 800ee82:	e00d      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ee8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	601a      	str	r2, [r3, #0]
	break;
 800ee90:	e006      	b.n	800eea0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ee98:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800ee9a:	23fc      	movs	r3, #252	; 0xfc
 800ee9c:	75fb      	strb	r3, [r7, #23]
	break;
 800ee9e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800eea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	371c      	adds	r7, #28
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2208      	movs	r2, #8
 800eec0:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	220b      	movs	r2, #11
 800eec6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eece:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800eed6:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800eede:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800eee6:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800eee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3714      	adds	r7, #20
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2212      	movs	r2, #18
 800ef0e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	220f      	movs	r2, #15
 800ef14:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2202      	movs	r2, #2
 800ef1a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800ef22:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	220c      	movs	r2, #12
 800ef28:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ef2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ef44:	2300      	movs	r3, #0
 800ef46:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	895b      	ldrh	r3, [r3, #10]
 800ef4c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	895b      	ldrh	r3, [r3, #10]
 800ef6a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2200      	movs	r2, #0
 800ef88:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	2240      	movs	r2, #64	; 0x40
 800ef8e:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10d      	bne.n	800efb4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d108      	bne.n	800efb4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d103      	bne.n	800efb4 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2200      	movs	r2, #0
 800efb0:	741a      	strb	r2, [r3, #16]
 800efb2:	e002      	b.n	800efba <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2201      	movs	r2, #1
 800efb8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800efba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d114      	bne.n	800efec <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d110      	bne.n	800efec <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	6818      	ldr	r0, [r3, #0]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	7d1b      	ldrb	r3, [r3, #20]
 800efde:	f000 ffc9 	bl	800ff74 <VL53L1_calc_range_ignore_threshold>
 800efe2:	4603      	mov	r3, r0
 800efe4:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	82da      	strh	r2, [r3, #22]
 800efea:	e002      	b.n	800eff2 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	2200      	movs	r2, #0
 800eff0:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800eff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800effe:	b480      	push	{r7}
 800f000:	b085      	sub	sp, #20
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f006:	2300      	movs	r3, #0
 800f008:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f010:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f018:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800f020:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800f028:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2208      	movs	r2, #8
 800f02e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2228      	movs	r2, #40	; 0x28
 800f034:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2209      	movs	r2, #9
 800f03a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800f03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f248 0203 	movw	r2, #32771	; 0x8003
 800f05e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f248 0201 	movw	r2, #32769	; 0x8001
 800f066:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f248 0241 	movw	r2, #32833	; 0x8041
 800f06e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	220e      	movs	r2, #14
 800f074:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	220a      	movs	r2, #10
 800f07a:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2206      	movs	r2, #6
 800f080:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	220e      	movs	r2, #14
 800f086:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	220a      	movs	r2, #10
 800f08c:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2206      	movs	r2, #6
 800f092:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2202      	movs	r2, #2
 800f098:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2221      	movs	r2, #33	; 0x21
 800f09e:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f0b2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f0ba:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f0c2:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	22c0      	movs	r2, #192	; 0xc0
 800f0c8:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	22c0      	movs	r2, #192	; 0xc0
 800f0ce:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	22c0      	movs	r2, #192	; 0xc0
 800f0d4:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2208      	movs	r2, #8
 800f0da:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2210      	movs	r2, #16
 800f0e0:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2202      	movs	r2, #2
 800f0ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f110:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f118:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f248 0230 	movw	r2, #32816	; 0x8030
 800f120:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f128:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f130:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f138:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f24f 6218 	movw	r2, #63000	; 0xf618
 800f140:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800f148:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800f150:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800f158:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800f15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr

0800f16a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f16a:	b480      	push	{r7}
 800f16c:	b087      	sub	sp, #28
 800f16e:	af00      	add	r7, sp, #0
 800f170:	60f8      	str	r0, [r7, #12]
 800f172:	60b9      	str	r1, [r7, #8]
 800f174:	607a      	str	r2, [r7, #4]
 800f176:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f178:	2300      	movs	r3, #0
 800f17a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f182:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2211      	movs	r2, #17
 800f1c4:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2202      	movs	r2, #2
 800f1ca:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2202      	movs	r2, #2
 800f1d6:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2208      	movs	r2, #8
 800f1dc:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2201      	movs	r2, #1
 800f202:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2200      	movs	r2, #0
 800f214:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	22ff      	movs	r2, #255	; 0xff
 800f21a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2200      	movs	r2, #0
 800f236:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2200      	movs	r2, #0
 800f23c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	2200      	movs	r2, #0
 800f242:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	2200      	movs	r2, #0
 800f248:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	2220      	movs	r2, #32
 800f24e:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	220b      	movs	r2, #11
 800f254:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f258:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2202      	movs	r2, #2
 800f262:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	220d      	movs	r2, #13
 800f268:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2200      	movs	r2, #0
 800f276:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2201      	movs	r2, #1
 800f27c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	2200      	movs	r2, #0
 800f282:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2200      	movs	r2, #0
 800f288:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800f290:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2200      	movs	r2, #0
 800f296:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2238      	movs	r2, #56	; 0x38
 800f29c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	22ff      	movs	r2, #255	; 0xff
 800f2a2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	221a      	movs	r2, #26
 800f2b4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2220      	movs	r2, #32
 800f2c0:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	22cc      	movs	r2, #204	; 0xcc
 800f2cc:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	220b      	movs	r2, #11
 800f2d2:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	22f5      	movs	r2, #245	; 0xf5
 800f2de:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2209      	movs	r2, #9
 800f2e4:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2208      	movs	r2, #8
 800f2fa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2278      	movs	r2, #120	; 0x78
 800f300:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	2201      	movs	r2, #1
 800f312:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2200      	movs	r2, #0
 800f318:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2200      	movs	r2, #0
 800f31e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	2200      	movs	r2, #0
 800f324:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	220b      	movs	r2, #11
 800f334:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	2209      	movs	r2, #9
 800f33a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2201      	movs	r2, #1
 800f350:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	22c7      	movs	r2, #199	; 0xc7
 800f36a:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	22ff      	movs	r2, #255	; 0xff
 800f370:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	22db      	movs	r2, #219	; 0xdb
 800f376:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2202      	movs	r2, #2
 800f37c:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	2200      	movs	r2, #0
 800f382:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800f384:	6a3b      	ldr	r3, [r7, #32]
 800f386:	2201      	movs	r2, #1
 800f388:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	2201      	movs	r2, #1
 800f38e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	2221      	movs	r2, #33	; 0x21
 800f394:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800f396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b088      	sub	sp, #32
 800f3aa:	af02      	add	r7, sp, #8
 800f3ac:	60f8      	str	r0, [r7, #12]
 800f3ae:	60b9      	str	r1, [r7, #8]
 800f3b0:	607a      	str	r2, [r7, #4]
 800f3b2:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f7ff fecf 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f3d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d121      	bne.n	800f41c <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2207      	movs	r2, #7
 800f3dc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2205      	movs	r2, #5
 800f3e2:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2208      	movs	r2, #8
 800f3f8:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2238      	movs	r2, #56	; 0x38
 800f3fe:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2207      	movs	r2, #7
 800f404:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2205      	movs	r2, #5
 800f40a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f41c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3718      	adds	r7, #24
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fe8e 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f44e:	4603      	mov	r3, r0
 800f450:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d121      	bne.n	800f49e <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	220f      	movs	r2, #15
 800f45e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	220d      	movs	r2, #13
 800f464:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800f466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f468:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2208      	movs	r2, #8
 800f47a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	22b8      	movs	r2, #184	; 0xb8
 800f480:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	220f      	movs	r2, #15
 800f486:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	220d      	movs	r2, #13
 800f48c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800f496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f498:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3718      	adds	r7, #24
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b088      	sub	sp, #32
 800f4ae:	af02      	add	r7, sp, #8
 800f4b0:	60f8      	str	r0, [r7, #12]
 800f4b2:	60b9      	str	r1, [r7, #8]
 800f4b4:	607a      	str	r2, [r7, #4]
 800f4b6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	9301      	str	r3, [sp, #4]
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	68b9      	ldr	r1, [r7, #8]
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff fe4d 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f4d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d105      	bne.n	800f4e8 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2202      	movs	r2, #2
 800f4e0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	223b      	movs	r2, #59	; 0x3b
 800f4e6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b088      	sub	sp, #32
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
 800f500:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	68b9      	ldr	r1, [r7, #8]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f7ff fe28 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f51a:	4603      	mov	r3, r0
 800f51c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f51e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d105      	bne.n	800f532 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2202      	movs	r2, #2
 800f52a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	225b      	movs	r2, #91	; 0x5b
 800f530:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b088      	sub	sp, #32
 800f542:	af02      	add	r7, sp, #8
 800f544:	60f8      	str	r0, [r7, #12]
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
 800f54a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	9301      	str	r3, [sp, #4]
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	9300      	str	r3, [sp, #0]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	68b9      	ldr	r1, [r7, #8]
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f7ff fe03 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f564:	4603      	mov	r3, r0
 800f566:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d11a      	bne.n	800f5a6 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2200      	movs	r2, #0
 800f574:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	22b1      	movs	r2, #177	; 0xb1
 800f580:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	22d4      	movs	r2, #212	; 0xd4
 800f58c:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f594:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f598:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800f5a0:	6a3b      	ldr	r3, [r7, #32]
 800f5a2:	2240      	movs	r2, #64	; 0x40
 800f5a4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3718      	adds	r7, #24
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b088      	sub	sp, #32
 800f5b6:	af02      	add	r7, sp, #8
 800f5b8:	60f8      	str	r0, [r7, #12]
 800f5ba:	60b9      	str	r1, [r7, #8]
 800f5bc:	607a      	str	r2, [r7, #4]
 800f5be:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	9301      	str	r3, [sp, #4]
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f7ff fee7 	bl	800f3a6 <VL53L1_preset_mode_standard_ranging_short_range>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f5dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d11a      	bne.n	800f61a <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2284      	movs	r2, #132	; 0x84
 800f5f4:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	22b1      	movs	r2, #177	; 0xb1
 800f600:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f608:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	2240      	movs	r2, #64	; 0x40
 800f618:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f626:	b580      	push	{r7, lr}
 800f628:	b088      	sub	sp, #32
 800f62a:	af02      	add	r7, sp, #8
 800f62c:	60f8      	str	r0, [r7, #12]
 800f62e:	60b9      	str	r1, [r7, #8]
 800f630:	607a      	str	r2, [r7, #4]
 800f632:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f634:	2300      	movs	r3, #0
 800f636:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	68b9      	ldr	r1, [r7, #8]
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f7ff feee 	bl	800f428 <VL53L1_preset_mode_standard_ranging_long_range>
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11a      	bne.n	800f68e <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2200      	movs	r2, #0
 800f65c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2297      	movs	r2, #151	; 0x97
 800f668:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	22b1      	movs	r2, #177	; 0xb1
 800f674:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f67c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800f67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f680:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	2240      	movs	r2, #64	; 0x40
 800f68c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3718      	adds	r7, #24
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b088      	sub	sp, #32
 800f69e:	af02      	add	r7, sp, #8
 800f6a0:	60f8      	str	r0, [r7, #12]
 800f6a2:	60b9      	str	r1, [r7, #8]
 800f6a4:	607a      	str	r2, [r7, #4]
 800f6a6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	9301      	str	r3, [sp, #4]
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	68b9      	ldr	r1, [r7, #8]
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f7ff ff3f 	bl	800f53e <VL53L1_preset_mode_timed_ranging>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800f6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d106      	bne.n	800f6da <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800f6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ce:	6839      	ldr	r1, [r7, #0]
 800f6d0:	68b8      	ldr	r0, [r7, #8]
 800f6d2:	f000 fe7b 	bl	80103cc <VL53L1_config_low_power_auto_mode>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800f6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b088      	sub	sp, #32
 800f6ea:	af02      	add	r7, sp, #8
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	607a      	str	r2, [r7, #4]
 800f6f2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800f6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	6a3b      	ldr	r3, [r7, #32]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	68b9      	ldr	r1, [r7, #8]
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f7ff ff53 	bl	800f5b2 <VL53L1_preset_mode_timed_ranging_short_range>
 800f70c:	4603      	mov	r3, r0
 800f70e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800f710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d106      	bne.n	800f726 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800f718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	68b8      	ldr	r0, [r7, #8]
 800f71e:	f000 fe55 	bl	80103cc <VL53L1_config_low_power_auto_mode>
 800f722:	4603      	mov	r3, r0
 800f724:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800f726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3718      	adds	r7, #24
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b088      	sub	sp, #32
 800f736:	af02      	add	r7, sp, #8
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	607a      	str	r2, [r7, #4]
 800f73e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f740:	2300      	movs	r3, #0
 800f742:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	68b9      	ldr	r1, [r7, #8]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff ff67 	bl	800f626 <VL53L1_preset_mode_timed_ranging_long_range>
 800f758:	4603      	mov	r3, r0
 800f75a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800f75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d106      	bne.n	800f772 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800f764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f766:	6839      	ldr	r1, [r7, #0]
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f000 fe2f 	bl	80103cc <VL53L1_config_low_power_auto_mode>
 800f76e:	4603      	mov	r3, r0
 800f770:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800f772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b088      	sub	sp, #32
 800f782:	af02      	add	r7, sp, #8
 800f784:	60f8      	str	r0, [r7, #12]
 800f786:	60b9      	str	r1, [r7, #8]
 800f788:	607a      	str	r2, [r7, #4]
 800f78a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f78c:	2300      	movs	r3, #0
 800f78e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f792:	9301      	str	r3, [sp, #4]
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	68b9      	ldr	r1, [r7, #8]
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7ff fce3 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d116      	bne.n	800f7de <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	22b1      	movs	r2, #177	; 0xb1
 800f7c0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	22d4      	movs	r2, #212	; 0xd4
 800f7cc:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800f7d8:	6a3b      	ldr	r3, [r7, #32]
 800f7da:	2210      	movs	r2, #16
 800f7dc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800f7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3718      	adds	r7, #24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b088      	sub	sp, #32
 800f7ee:	af02      	add	r7, sp, #8
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
 800f7f6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68b9      	ldr	r1, [r7, #8]
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f7ff fcad 	bl	800f16a <VL53L1_preset_mode_standard_ranging>
 800f810:	4603      	mov	r3, r0
 800f812:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800f814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	2201      	movs	r2, #1
 800f820:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3718      	adds	r7, #24
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800f82e:	b480      	push	{r7}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2202      	movs	r2, #2
 800f846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	220d      	movs	r2, #13
 800f84e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f640 028e 	movw	r2, #2190	; 0x88e
 800f858:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f85a:	bf00      	nop
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800f866:	b480      	push	{r7}
 800f868:	b085      	sub	sp, #20
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
 800f86e:	460b      	mov	r3, r1
 800f870:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	332c      	adds	r3, #44	; 0x2c
 800f87a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	78fa      	ldrb	r2, [r7, #3]
 800f880:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2200      	movs	r2, #0
 800f886:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2202      	movs	r2, #2
 800f88c:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2200      	movs	r2, #0
 800f892:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	78fa      	ldrb	r2, [r7, #3]
 800f898:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2200      	movs	r2, #0
 800f89e:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	71da      	strb	r2, [r3, #7]

}
 800f8ac:	bf00      	nop
 800f8ae:	3714      	adds	r7, #20
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	332c      	adds	r3, #44	; 0x2c
 800f8cc:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800f8d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10c      	bne.n	800f8f6 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2203      	movs	r2, #3
 800f8e0:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2202      	movs	r2, #2
 800f8ec:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	71da      	strb	r2, [r3, #7]
 800f8f4:	e060      	b.n	800f9b8 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	795b      	ldrb	r3, [r3, #5]
 800f8fa:	2bff      	cmp	r3, #255	; 0xff
 800f8fc:	d103      	bne.n	800f906 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2280      	movs	r2, #128	; 0x80
 800f902:	715a      	strb	r2, [r3, #5]
 800f904:	e005      	b.n	800f912 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	795b      	ldrb	r3, [r3, #5]
 800f90a:	3301      	adds	r3, #1
 800f90c:	b2da      	uxtb	r2, r3
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	799b      	ldrb	r3, [r3, #6]
 800f916:	f083 0302 	eor.w	r3, r3, #2
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	791b      	ldrb	r3, [r3, #4]
 800f924:	3b03      	subs	r3, #3
 800f926:	2b05      	cmp	r3, #5
 800f928:	d839      	bhi.n	800f99e <VL53L1_update_ll_driver_rd_state+0xe6>
 800f92a:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <VL53L1_update_ll_driver_rd_state+0x78>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f949 	.word	0x0800f949
 800f934:	0800f99f 	.word	0x0800f99f
 800f938:	0800f99f 	.word	0x0800f99f
 800f93c:	0800f973 	.word	0x0800f973
 800f940:	0800f981 	.word	0x0800f981
 800f944:	0800f989 	.word	0x0800f989

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800f94e:	f003 0302 	and.w	r3, r3, #2
 800f952:	2b00      	cmp	r3, #0
 800f954:	dd03      	ble.n	800f95e <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2206      	movs	r2, #6
 800f95a:	711a      	strb	r2, [r3, #4]
 800f95c:	e002      	b.n	800f964 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2208      	movs	r2, #8
 800f962:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2200      	movs	r2, #0
 800f968:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2200      	movs	r2, #0
 800f96e:	71da      	strb	r2, [r3, #7]

		break;
 800f970:	e022      	b.n	800f9b8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2208      	movs	r2, #8
 800f97c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800f97e:	e01b      	b.n	800f9b8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2208      	movs	r2, #8
 800f984:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800f986:	e017      	b.n	800f9b8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	79db      	ldrb	r3, [r3, #7]
 800f98c:	f083 0301 	eor.w	r3, r3, #1
 800f990:	b2da      	uxtb	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2208      	movs	r2, #8
 800f99a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800f99c:	e00c      	b.n	800f9b8 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2203      	movs	r2, #3
 800f9a2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2202      	movs	r2, #2
 800f9ae:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	71da      	strb	r2, [r3, #7]

		break;
 800f9b6:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800f9b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	371c      	adds	r7, #28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b089      	sub	sp, #36	; 0x24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	332c      	adds	r3, #44	; 0x2c
 800f9dc:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800f9e4:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800f9f6:	f003 031f 	and.w	r3, r3, #31
 800f9fa:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	78db      	ldrb	r3, [r3, #3]
 800fa00:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800fa06:	111b      	asrs	r3, r3, #4
 800fa08:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800fa0a:	f003 0302 	and.w	r3, r3, #2
 800fa0e:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800fa16:	f003 0320 	and.w	r3, r3, #32
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d017      	beq.n	800fa4e <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	791b      	ldrb	r3, [r3, #4]
 800fa22:	2b06      	cmp	r3, #6
 800fa24:	d105      	bne.n	800fa32 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	2b12      	cmp	r3, #18
 800fa2a:	d010      	beq.n	800fa4e <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800fa2c:	23ef      	movs	r3, #239	; 0xef
 800fa2e:	77fb      	strb	r3, [r7, #31]
 800fa30:	e00d      	b.n	800fa4e <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	795b      	ldrb	r3, [r3, #5]
 800fa36:	7bba      	ldrb	r2, [r7, #14]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d001      	beq.n	800fa40 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800fa3c:	23ee      	movs	r3, #238	; 0xee
 800fa3e:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	799b      	ldrb	r3, [r3, #6]
 800fa44:	7b7a      	ldrb	r2, [r7, #13]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d001      	beq.n	800fa4e <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800fa4a:	23ed      	movs	r3, #237	; 0xed
 800fa4c:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800fa4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3724      	adds	r7, #36	; 0x24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b087      	sub	sp, #28
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	332c      	adds	r3, #44	; 0x2c
 800fa72:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800fa7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10c      	bne.n	800fa9c <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2203      	movs	r2, #3
 800fa86:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2202      	movs	r2, #2
 800fa92:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	70da      	strb	r2, [r3, #3]
 800fa9a:	e03e      	b.n	800fb1a <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	785b      	ldrb	r3, [r3, #1]
 800faa0:	2bff      	cmp	r3, #255	; 0xff
 800faa2:	d103      	bne.n	800faac <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2280      	movs	r2, #128	; 0x80
 800faa8:	705a      	strb	r2, [r3, #1]
 800faaa:	e005      	b.n	800fab8 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	785b      	ldrb	r3, [r3, #1]
 800fab0:	3301      	adds	r3, #1
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	789b      	ldrb	r3, [r3, #2]
 800fabc:	f083 0302 	eor.w	r3, r3, #2
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	2b03      	cmp	r3, #3
 800facc:	d002      	beq.n	800fad4 <VL53L1_update_ll_driver_cfg_state+0x76>
 800face:	2b04      	cmp	r3, #4
 800fad0:	d00e      	beq.n	800faf0 <VL53L1_update_ll_driver_cfg_state+0x92>
 800fad2:	e015      	b.n	800fb00 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	78db      	ldrb	r3, [r3, #3]
 800fad8:	f083 0301 	eor.w	r3, r3, #1
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2201      	movs	r2, #1
 800fae6:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2204      	movs	r2, #4
 800faec:	701a      	strb	r2, [r3, #0]
		break;
 800faee:	e014      	b.n	800fb1a <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	78db      	ldrb	r3, [r3, #3]
 800faf4:	f083 0301 	eor.w	r3, r3, #1
 800faf8:	b2da      	uxtb	r2, r3
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	70da      	strb	r2, [r3, #3]

		break;
 800fafe:	e00c      	b.n	800fb1a <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2203      	movs	r2, #3
 800fb04:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2202      	movs	r2, #2
 800fb10:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2200      	movs	r2, #0
 800fb16:	70da      	strb	r2, [r3, #3]

		break;
 800fb18:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800fb1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	b083      	sub	sp, #12
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	7c1a      	ldrb	r2, [r3, #16]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	7c52      	ldrb	r2, [r2, #17]
 800fb44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	3302      	adds	r3, #2
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	7c92      	ldrb	r2, [r2, #18]
 800fb4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	3303      	adds	r3, #3
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	7cd2      	ldrb	r2, [r2, #19]
 800fb58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	7d12      	ldrb	r2, [r2, #20]
 800fb62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	3305      	adds	r3, #5
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	7d52      	ldrb	r2, [r2, #21]
 800fb6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	3306      	adds	r3, #6
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	7d92      	ldrb	r2, [r2, #22]
 800fb76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	3307      	adds	r3, #7
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	7dd2      	ldrb	r2, [r2, #23]
 800fb80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	3308      	adds	r3, #8
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	7e12      	ldrb	r2, [r2, #24]
 800fb8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	3309      	adds	r3, #9
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	7e52      	ldrb	r2, [r2, #25]
 800fb94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	330a      	adds	r3, #10
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	7e92      	ldrb	r2, [r2, #26]
 800fb9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	330b      	adds	r3, #11
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	7ed2      	ldrb	r2, [r2, #27]
 800fba8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	330c      	adds	r3, #12
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	7f12      	ldrb	r2, [r2, #28]
 800fbb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	330d      	adds	r3, #13
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	7f52      	ldrb	r2, [r2, #29]
 800fbbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	330e      	adds	r3, #14
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	7f92      	ldrb	r2, [r2, #30]
 800fbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	330f      	adds	r3, #15
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	7fd2      	ldrb	r2, [r2, #31]
 800fbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	3310      	adds	r3, #16
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800fbdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	3311      	adds	r3, #17
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800fbe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	3312      	adds	r3, #18
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800fbf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	3313      	adds	r3, #19
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800fc00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	3314      	adds	r3, #20
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800fc0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	3315      	adds	r3, #21
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800fc18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	3316      	adds	r3, #22
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800fc24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	3317      	adds	r3, #23
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800fc30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	3318      	adds	r3, #24
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800fc3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	3319      	adds	r3, #25
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800fc48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	331a      	adds	r3, #26
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800fc54:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	331b      	adds	r3, #27
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800fc60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	331c      	adds	r3, #28
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800fc6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	331d      	adds	r3, #29
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800fc78:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	331e      	adds	r3, #30
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800fc84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	331f      	adds	r3, #31
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800fc90:	701a      	strb	r2, [r3, #0]
}
 800fc92:	bf00      	nop
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b085      	sub	sp, #20
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	4603      	mov	r3, r0
 800fca6:	603a      	str	r2, [r7, #0]
 800fca8:	80fb      	strh	r3, [r7, #6]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
 800fcb8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800fcba:	2300      	movs	r3, #0
 800fcbc:	81fb      	strh	r3, [r7, #14]
 800fcbe:	e00e      	b.n	800fcde <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800fcc0:	88ba      	ldrh	r2, [r7, #4]
 800fcc2:	89fb      	ldrh	r3, [r7, #14]
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	4413      	add	r3, r2
 800fccc:	89ba      	ldrh	r2, [r7, #12]
 800fcce:	b2d2      	uxtb	r2, r2
 800fcd0:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800fcd2:	89bb      	ldrh	r3, [r7, #12]
 800fcd4:	0a1b      	lsrs	r3, r3, #8
 800fcd6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800fcd8:	89fb      	ldrh	r3, [r7, #14]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	81fb      	strh	r3, [r7, #14]
 800fcde:	89fa      	ldrh	r2, [r7, #14]
 800fce0:	88bb      	ldrh	r3, [r7, #4]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d3ec      	bcc.n	800fcc0 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800fce6:	bf00      	nop
 800fce8:	bf00      	nop
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	6039      	str	r1, [r7, #0]
 800fcfe:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800fd00:	2300      	movs	r3, #0
 800fd02:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800fd04:	e00a      	b.n	800fd1c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800fd06:	89fb      	ldrh	r3, [r7, #14]
 800fd08:	021b      	lsls	r3, r3, #8
 800fd0a:	b21a      	sxth	r2, r3
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	1c59      	adds	r1, r3, #1
 800fd10:	6039      	str	r1, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	b21b      	sxth	r3, r3
 800fd16:	4313      	orrs	r3, r2
 800fd18:	b21b      	sxth	r3, r3
 800fd1a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800fd1c:	88fb      	ldrh	r3, [r7, #6]
 800fd1e:	1e5a      	subs	r2, r3, #1
 800fd20:	80fa      	strh	r2, [r7, #6]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1ef      	bne.n	800fd06 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800fd26:	89fb      	ldrh	r3, [r7, #14]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b085      	sub	sp, #20
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	603a      	str	r2, [r7, #0]
 800fd3e:	80fb      	strh	r3, [r7, #6]
 800fd40:	460b      	mov	r3, r1
 800fd42:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800fd44:	2300      	movs	r3, #0
 800fd46:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800fd4c:	88fb      	ldrh	r3, [r7, #6]
 800fd4e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800fd50:	2300      	movs	r3, #0
 800fd52:	81fb      	strh	r3, [r7, #14]
 800fd54:	e00f      	b.n	800fd76 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800fd56:	88ba      	ldrh	r2, [r7, #4]
 800fd58:	89fb      	ldrh	r3, [r7, #14]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	4413      	add	r3, r2
 800fd62:	89ba      	ldrh	r2, [r7, #12]
 800fd64:	b2d2      	uxtb	r2, r2
 800fd66:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800fd68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fd6c:	121b      	asrs	r3, r3, #8
 800fd6e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800fd70:	89fb      	ldrh	r3, [r7, #14]
 800fd72:	3301      	adds	r3, #1
 800fd74:	81fb      	strh	r3, [r7, #14]
 800fd76:	89fa      	ldrh	r2, [r7, #14]
 800fd78:	88bb      	ldrh	r3, [r7, #4]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d3eb      	bcc.n	800fd56 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800fd7e:	bf00      	nop
 800fd80:	bf00      	nop
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	4603      	mov	r3, r0
 800fd94:	6039      	str	r1, [r7, #0]
 800fd96:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	b25b      	sxtb	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	da0e      	bge.n	800fdc4 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800fda6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdaa:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800fdac:	e00a      	b.n	800fdc4 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800fdae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fdb2:	021b      	lsls	r3, r3, #8
 800fdb4:	b21a      	sxth	r2, r3
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	1c59      	adds	r1, r3, #1
 800fdba:	6039      	str	r1, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	b21b      	sxth	r3, r3
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800fdc4:	88fb      	ldrh	r3, [r7, #6]
 800fdc6:	1e5a      	subs	r2, r3, #1
 800fdc8:	80fa      	strh	r2, [r7, #6]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1ef      	bne.n	800fdae <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800fdce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fdde:	b480      	push	{r7}
 800fde0:	b087      	sub	sp, #28
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	60f8      	str	r0, [r7, #12]
 800fde6:	460b      	mov	r3, r1
 800fde8:	607a      	str	r2, [r7, #4]
 800fdea:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800fdec:	2300      	movs	r3, #0
 800fdee:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	82fb      	strh	r3, [r7, #22]
 800fdfc:	e00e      	b.n	800fe1c <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800fdfe:	897a      	ldrh	r2, [r7, #10]
 800fe00:	8afb      	ldrh	r3, [r7, #22]
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	3b01      	subs	r3, #1
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	4413      	add	r3, r2
 800fe0a:	693a      	ldr	r2, [r7, #16]
 800fe0c:	b2d2      	uxtb	r2, r2
 800fe0e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	0a1b      	lsrs	r3, r3, #8
 800fe14:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800fe16:	8afb      	ldrh	r3, [r7, #22]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	82fb      	strh	r3, [r7, #22]
 800fe1c:	8afa      	ldrh	r2, [r7, #22]
 800fe1e:	897b      	ldrh	r3, [r7, #10]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d3ec      	bcc.n	800fdfe <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800fe24:	bf00      	nop
 800fe26:	bf00      	nop
 800fe28:	371c      	adds	r7, #28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	4603      	mov	r3, r0
 800fe3a:	6039      	str	r1, [r7, #0]
 800fe3c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800fe42:	e007      	b.n	800fe54 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	021a      	lsls	r2, r3, #8
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	1c59      	adds	r1, r3, #1
 800fe4c:	6039      	str	r1, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800fe54:	88fb      	ldrh	r3, [r7, #6]
 800fe56:	1e5a      	subs	r2, r3, #1
 800fe58:	80fa      	strh	r2, [r7, #6]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1f2      	bne.n	800fe44 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	6039      	str	r1, [r7, #0]
 800fe76:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	b25b      	sxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	da0b      	bge.n	800fe9e <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800fe86:	f04f 33ff 	mov.w	r3, #4294967295
 800fe8a:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800fe8c:	e007      	b.n	800fe9e <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	021a      	lsls	r2, r3, #8
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	1c59      	adds	r1, r3, #1
 800fe96:	6039      	str	r1, [r7, #0]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800fe9e:	88fb      	ldrh	r3, [r7, #6]
 800fea0:	1e5a      	subs	r2, r3, #1
 800fea2:	80fa      	strh	r2, [r7, #6]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1f2      	bne.n	800fe8e <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800fea8:	68fb      	ldr	r3, [r7, #12]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr

0800feb6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b084      	sub	sp, #16
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	460b      	mov	r3, r1
 800fec0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800fec2:	2300      	movs	r3, #0
 800fec4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	78fa      	ldrb	r2, [r7, #3]
 800fece:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800fed8:	461a      	mov	r2, r3
 800feda:	2183      	movs	r1, #131	; 0x83
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f001 fd0d 	bl	80118fc <VL53L1_WrByte>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800fee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b084      	sub	sp, #16
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800fefa:	2300      	movs	r3, #0
 800fefc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800fefe:	2101      	movs	r1, #1
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff ffd8 	bl	800feb6 <VL53L1_set_powerforce_register>
 800ff06:	4603      	mov	r3, r0
 800ff08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ff0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b086      	sub	sp, #24
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	460a      	mov	r2, r1
 800ff20:	80fb      	strh	r3, [r7, #6]
 800ff22:	4613      	mov	r3, r2
 800ff24:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ff32:	88fb      	ldrh	r3, [r7, #6]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 faa7 	bl	8010488 <VL53L1_calc_pll_period_us>
 800ff3a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800ff3c:	797b      	ldrb	r3, [r7, #5]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 fab6 	bl	80104b0 <VL53L1_decode_vcsel_period>
 800ff44:	4603      	mov	r3, r0
 800ff46:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	00db      	lsls	r3, r3, #3
 800ff4e:	4413      	add	r3, r2
 800ff50:	021b      	lsls	r3, r3, #8
 800ff52:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	099b      	lsrs	r3, r3, #6
 800ff58:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800ff5a:	7cfa      	ldrb	r2, [r7, #19]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	fb02 f303 	mul.w	r3, r2, r3
 800ff62:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	099b      	lsrs	r3, r3, #6
 800ff68:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3718      	adds	r7, #24
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b089      	sub	sp, #36	; 0x24
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	4611      	mov	r1, r2
 800ff80:	461a      	mov	r2, r3
 800ff82:	4603      	mov	r3, r0
 800ff84:	817b      	strh	r3, [r7, #10]
 800ff86:	460b      	mov	r3, r1
 800ff88:	813b      	strh	r3, [r7, #8]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800ff92:	2300      	movs	r3, #0
 800ff94:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	011b      	lsls	r3, r3, #4
 800ffa6:	4a23      	ldr	r2, [pc, #140]	; (8010034 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800ffa8:	fb82 1203 	smull	r1, r2, r2, r3
 800ffac:	1192      	asrs	r2, r2, #6
 800ffae:	17db      	asrs	r3, r3, #31
 800ffb0:	1ad3      	subs	r3, r2, r3
 800ffb2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800ffb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	da03      	bge.n	800ffc4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800ffbc:	897b      	ldrh	r3, [r7, #10]
 800ffbe:	425b      	negs	r3, r3
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800ffc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	da03      	bge.n	800ffd4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800ffcc:	893b      	ldrh	r3, [r7, #8]
 800ffce:	425b      	negs	r3, r3
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800ffd4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ffd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ffdc:	4413      	add	r3, r2
 800ffde:	015b      	lsls	r3, r3, #5
 800ffe0:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	4a13      	ldr	r2, [pc, #76]	; (8010034 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800ffe6:	fb82 1203 	smull	r1, r2, r2, r3
 800ffea:	1192      	asrs	r2, r2, #6
 800ffec:	17db      	asrs	r3, r3, #31
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800fff2:	697a      	ldr	r2, [r7, #20]
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	4413      	add	r3, r2
 800fff8:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800fffa:	79fa      	ldrb	r2, [r7, #7]
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	fb02 f303 	mul.w	r3, r2, r3
 8010002:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	3310      	adds	r3, #16
 8010008:	2b00      	cmp	r3, #0
 801000a:	da00      	bge.n	801000e <VL53L1_calc_range_ignore_threshold+0x9a>
 801000c:	331f      	adds	r3, #31
 801000e:	115b      	asrs	r3, r3, #5
 8010010:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010018:	db03      	blt.n	8010022 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 801001a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801001e:	83fb      	strh	r3, [r7, #30]
 8010020:	e001      	b.n	8010026 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8010026:	8bfb      	ldrh	r3, [r7, #30]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3724      	adds	r7, #36	; 0x24
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr
 8010034:	10624dd3 	.word	0x10624dd3

08010038 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8010042:	2300      	movs	r3, #0
 8010044:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	031a      	lsls	r2, r3, #12
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	085b      	lsrs	r3, r3, #1
 801004e:	441a      	add	r2, r3
	timeout_mclks   =
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	fbb2 f3f3 	udiv	r3, r2, r3
 8010056:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8010058:	68fb      	ldr	r3, [r7, #12]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b084      	sub	sp, #16
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
 801006e:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8010078:	6839      	ldr	r1, [r7, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7ff ffdc 	bl	8010038 <VL53L1_calc_timeout_mclks>
 8010080:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f000 f85e 	bl	8010144 <VL53L1_encode_timeout>
 8010088:	4603      	mov	r3, r0
 801008a:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 801008c:	897b      	ldrh	r3, [r7, #10]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8010096:	b4f0      	push	{r4, r5, r6, r7}
 8010098:	b086      	sub	sp, #24
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 80100a4:	f04f 0200 	mov.w	r2, #0
 80100a8:	f04f 0300 	mov.w	r3, #0
 80100ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f04f 0100 	mov.w	r1, #0
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	f04f 0300 	mov.w	r3, #0
 80100c0:	fb02 fc01 	mul.w	ip, r2, r1
 80100c4:	fb00 f603 	mul.w	r6, r0, r3
 80100c8:	4466      	add	r6, ip
 80100ca:	fba0 2302 	umull	r2, r3, r0, r2
 80100ce:	18f1      	adds	r1, r6, r3
 80100d0:	460b      	mov	r3, r1
 80100d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80100d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80100da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80100de:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 80100e2:	f143 0500 	adc.w	r5, r3, #0
 80100e6:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 80100ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80100ee:	f04f 0200 	mov.w	r2, #0
 80100f2:	f04f 0300 	mov.w	r3, #0
 80100f6:	0b02      	lsrs	r2, r0, #12
 80100f8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80100fc:	0b0b      	lsrs	r3, r1, #12
 80100fe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8010106:	697b      	ldr	r3, [r7, #20]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3718      	adds	r7, #24
 801010c:	46bd      	mov	sp, r7
 801010e:	bcf0      	pop	{r4, r5, r6, r7}
 8010110:	4770      	bx	lr

08010112 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	4603      	mov	r3, r0
 801011a:	6039      	str	r1, [r7, #0]
 801011c:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8010122:	2300      	movs	r3, #0
 8010124:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8010126:	88fb      	ldrh	r3, [r7, #6]
 8010128:	4618      	mov	r0, r3
 801012a:	f000 f837 	bl	801019c <VL53L1_decode_timeout>
 801012e:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f7ff ffaf 	bl	8010096 <VL53L1_calc_timeout_us>
 8010138:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 801013a:	68bb      	ldr	r3, [r7, #8]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8010154:	2300      	movs	r3, #0
 8010156:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d017      	beq.n	801018e <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	3b01      	subs	r3, #1
 8010162:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8010164:	e005      	b.n	8010172 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	085b      	lsrs	r3, r3, #1
 801016a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 801016c:	89fb      	ldrh	r3, [r7, #14]
 801016e:	3301      	adds	r3, #1
 8010170:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1f4      	bne.n	8010166 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	021b      	lsls	r3, r3, #8
 8010180:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	b29b      	uxth	r3, r3
 8010186:	b2db      	uxtb	r3, r3
 8010188:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 801018a:	4413      	add	r3, r2
 801018c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 801018e:	8afb      	ldrh	r3, [r7, #22]
}
 8010190:	4618      	mov	r0, r3
 8010192:	371c      	adds	r7, #28
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80101aa:	88fb      	ldrh	r3, [r7, #6]
 80101ac:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80101ae:	88fa      	ldrh	r2, [r7, #6]
 80101b0:	0a12      	lsrs	r2, r2, #8
 80101b2:	b292      	uxth	r2, r2
 80101b4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80101b6:	3301      	adds	r3, #1
 80101b8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80101ba:	68fb      	ldr	r3, [r7, #12]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
 80101d4:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80101d6:	2300      	movs	r3, #0
 80101d8:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80101e6:	887b      	ldrh	r3, [r7, #2]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d102      	bne.n	80101f2 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80101ec:	23f1      	movs	r3, #241	; 0xf1
 80101ee:	77fb      	strb	r3, [r7, #31]
 80101f0:	e05d      	b.n	80102ae <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	799a      	ldrb	r2, [r3, #6]
 80101f6:	887b      	ldrh	r3, [r7, #2]
 80101f8:	4611      	mov	r1, r2
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff fe8b 	bl	800ff16 <VL53L1_calc_macro_period_us>
 8010200:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8010202:	6979      	ldr	r1, [r7, #20]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7ff ff17 	bl	8010038 <VL53L1_calc_timeout_mclks>
 801020a:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	2bff      	cmp	r3, #255	; 0xff
 8010210:	d901      	bls.n	8010216 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8010212:	23ff      	movs	r3, #255	; 0xff
 8010214:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 801021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021c:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801021e:	6979      	ldr	r1, [r7, #20]
 8010220:	68b8      	ldr	r0, [r7, #8]
 8010222:	f7ff ff20 	bl	8010066 <VL53L1_calc_encoded_timeout>
 8010226:	4603      	mov	r3, r0
 8010228:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801022a:	8a7b      	ldrh	r3, [r7, #18]
 801022c:	0a1b      	lsrs	r3, r3, #8
 801022e:	b29b      	uxth	r3, r3
 8010230:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801023e:	6979      	ldr	r1, [r7, #20]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff ff10 	bl	8010066 <VL53L1_calc_encoded_timeout>
 8010246:	4603      	mov	r3, r0
 8010248:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801024a:	8a7b      	ldrh	r3, [r7, #18]
 801024c:	0a1b      	lsrs	r3, r3, #8
 801024e:	b29b      	uxth	r3, r3
 8010250:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8010252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010254:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8010256:	8a7b      	ldrh	r3, [r7, #18]
 8010258:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 801025a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025c:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 801025e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010260:	7a5a      	ldrb	r2, [r3, #9]
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	4611      	mov	r1, r2
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff fe55 	bl	800ff16 <VL53L1_calc_macro_period_us>
 801026c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 801026e:	6979      	ldr	r1, [r7, #20]
 8010270:	68b8      	ldr	r0, [r7, #8]
 8010272:	f7ff fef8 	bl	8010066 <VL53L1_calc_encoded_timeout>
 8010276:	4603      	mov	r3, r0
 8010278:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801027a:	8a7b      	ldrh	r3, [r7, #18]
 801027c:	0a1b      	lsrs	r3, r3, #8
 801027e:	b29b      	uxth	r3, r3
 8010280:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8010286:	8a7b      	ldrh	r3, [r7, #18]
 8010288:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 801028a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028c:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 801028e:	6979      	ldr	r1, [r7, #20]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f7ff fee8 	bl	8010066 <VL53L1_calc_encoded_timeout>
 8010296:	4603      	mov	r3, r0
 8010298:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801029a:	8a7b      	ldrh	r3, [r7, #18]
 801029c:	0a1b      	lsrs	r3, r3, #8
 801029e:	b29b      	uxth	r3, r3
 80102a0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80102a6:	8a7b      	ldrh	r3, [r7, #18]
 80102a8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80102aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ac:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80102ae:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3720      	adds	r7, #32
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}

080102ba <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80102ba:	b480      	push	{r7}
 80102bc:	b083      	sub	sp, #12
 80102be:	af00      	add	r7, sp, #0
 80102c0:	4603      	mov	r3, r0
 80102c2:	603a      	str	r2, [r7, #0]
 80102c4:	71fb      	strb	r3, [r7, #7]
 80102c6:	460b      	mov	r3, r1
 80102c8:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	2b07      	cmp	r3, #7
 80102ce:	d90a      	bls.n	80102e6 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80102d0:	79bb      	ldrb	r3, [r7, #6]
 80102d2:	00db      	lsls	r3, r3, #3
 80102d4:	b2da      	uxtb	r2, r3
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	3b71      	subs	r3, #113	; 0x71
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80102e4:	e00a      	b.n	80102fc <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80102e6:	79bb      	ldrb	r3, [r7, #6]
 80102e8:	f1c3 030f 	rsb	r3, r3, #15
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	79fb      	ldrb	r3, [r7, #7]
 80102f4:	4413      	add	r3, r2
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	701a      	strb	r2, [r3, #0]
}
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	4603      	mov	r3, r0
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
 8010314:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8010316:	7bfb      	ldrb	r3, [r7, #15]
 8010318:	091b      	lsrs	r3, r3, #4
 801031a:	b2da      	uxtb	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8010320:	7bfb      	ldrb	r3, [r7, #15]
 8010322:	f003 030f 	and.w	r3, r3, #15
 8010326:	b2da      	uxtb	r2, r3
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	701a      	strb	r2, [r3, #0]

}
 801032c:	bf00      	nop
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	603a      	str	r2, [r7, #0]
 8010342:	71fb      	strb	r3, [r7, #7]
 8010344:	460b      	mov	r3, r1
 8010346:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8010348:	79bb      	ldrb	r3, [r7, #6]
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	b2da      	uxtb	r2, r3
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	4413      	add	r3, r2
 8010352:	b2da      	uxtb	r2, r3
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	701a      	strb	r2, [r3, #0]

}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801036c:	2300      	movs	r3, #0
 801036e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	2203      	movs	r2, #3
 8010378:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2200      	movs	r2, #0
 8010380:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	2200      	movs	r2, #0
 8010388:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	2200      	movs	r2, #0
 8010390:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80103bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80103d8:	2300      	movs	r3, #0
 80103da:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	229b      	movs	r2, #155	; 0x9b
 80103ec:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80103ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	371c      	adds	r7, #28
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr

080103fe <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80103fe:	b480      	push	{r7}
 8010400:	b085      	sub	sp, #20
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801040a:	2300      	movs	r3, #0
 801040c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 801042c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010430:	b2da      	uxtb	r2, r3
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 801043e:	f003 0303 	and.w	r3, r3, #3
 8010442:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 801044e:	4413      	add	r3, r2
 8010450:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 8010478:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3714      	adds	r7, #20
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8010496:	88fb      	ldrh	r3, [r7, #6]
 8010498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801049c:	fb92 f3f3 	sdiv	r3, r2, r3
 80104a0:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80104a2:	68fb      	ldr	r3, [r7, #12]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	4603      	mov	r3, r0
 80104b8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80104be:	79fb      	ldrb	r3, [r7, #7]
 80104c0:	3301      	adds	r3, #1
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	005b      	lsls	r3, r3, #1
 80104c6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr

080104d6 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80104d6:	b480      	push	{r7}
 80104d8:	b085      	sub	sp, #20
 80104da:	af00      	add	r7, sp, #0
 80104dc:	4603      	mov	r3, r0
 80104de:	60b9      	str	r1, [r7, #8]
 80104e0:	607a      	str	r2, [r7, #4]
 80104e2:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80104e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	da10      	bge.n	801050e <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
 80104ee:	43db      	mvns	r3, r3
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	f003 0307 	and.w	r3, r3, #7
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	3308      	adds	r3, #8
 80104fa:	b2da      	uxtb	r2, r3
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8010500:	7bfb      	ldrb	r3, [r7, #15]
 8010502:	3b80      	subs	r3, #128	; 0x80
 8010504:	10db      	asrs	r3, r3, #3
 8010506:	b2da      	uxtb	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 801050c:	e00c      	b.n	8010528 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	f003 0307 	and.w	r3, r3, #7
 8010514:	b2da      	uxtb	r2, r3
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8010520:	10db      	asrs	r3, r3, #3
 8010522:	b2da      	uxtb	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	701a      	strb	r2, [r3, #0]
}
 8010528:	bf00      	nop
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	460b      	mov	r3, r1
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010542:	2300      	movs	r3, #0
 8010544:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8010546:	897b      	ldrh	r3, [r7, #10]
 8010548:	2b0a      	cmp	r3, #10
 801054a:	d802      	bhi.n	8010552 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801054c:	f06f 0309 	mvn.w	r3, #9
 8010550:	e047      	b.n	80105e2 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801055a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8010568:	f002 020f 	and.w	r2, r2, #15
 801056c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801056e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8010578:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801057c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801057e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8010588:	f002 0203 	and.w	r2, r2, #3
 801058c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801058e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8010598:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801059c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801059e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	88d8      	ldrh	r0, [r3, #6]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3305      	adds	r3, #5
 80105a8:	461a      	mov	r2, r3
 80105aa:	2102      	movs	r1, #2
 80105ac:	f7ff fb77 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80105b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80105c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80105cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80105d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80105d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80105dc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80105de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b086      	sub	sp, #24
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	4603      	mov	r3, r0
 80105f2:	60b9      	str	r1, [r7, #8]
 80105f4:	607a      	str	r2, [r7, #4]
 80105f6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80105f8:	2300      	movs	r3, #0
 80105fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80105fc:	89fb      	ldrh	r3, [r7, #14]
 80105fe:	2b0a      	cmp	r3, #10
 8010600:	d802      	bhi.n	8010608 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010602:	f06f 0309 	mvn.w	r3, #9
 8010606:	e046      	b.n	8010696 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010610:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	3301      	adds	r3, #1
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f003 030f 	and.w	r3, r3, #15
 8010620:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	3302      	adds	r3, #2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010630:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	3303      	adds	r3, #3
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f003 0303 	and.w	r3, r3, #3
 8010640:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	3304      	adds	r3, #4
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010650:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	3305      	adds	r3, #5
 801065a:	4619      	mov	r1, r3
 801065c:	2002      	movs	r0, #2
 801065e:	f7ff fb49 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010662:	4603      	mov	r3, r0
 8010664:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	79da      	ldrb	r2, [r3, #7]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	7a1a      	ldrb	r2, [r3, #8]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	3309      	adds	r3, #9
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010684:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	7a9a      	ldrb	r2, [r3, #10]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8010692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3718      	adds	r7, #24
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b086      	sub	sp, #24
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80106a8:	2300      	movs	r3, #0
 80106aa:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80106ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d108      	bne.n	80106c6 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80106b4:	f107 020c 	add.w	r2, r7, #12
 80106b8:	230b      	movs	r3, #11
 80106ba:	2101      	movs	r1, #1
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f001 f8e7 	bl	8011890 <VL53L1_ReadMulti>
 80106c2:	4603      	mov	r3, r0
 80106c4:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80106c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d108      	bne.n	80106e0 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80106ce:	f107 030c 	add.w	r3, r7, #12
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	4619      	mov	r1, r3
 80106d6:	200b      	movs	r0, #11
 80106d8:	f7ff ff87 	bl	80105ea <VL53L1_i2c_decode_static_nvm_managed>
 80106dc:	4603      	mov	r3, r0
 80106de:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80106e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3718      	adds	r7, #24
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	460b      	mov	r3, r1
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80106fa:	2300      	movs	r3, #0
 80106fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80106fe:	897b      	ldrh	r3, [r7, #10]
 8010700:	2b16      	cmp	r3, #22
 8010702:	d802      	bhi.n	801070a <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010704:	f06f 0309 	mvn.w	r3, #9
 8010708:	e076      	b.n	80107f8 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801071a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801072e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8010742:	f002 020f 	and.w	r2, r2, #15
 8010746:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010748:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8010752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801075c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010760:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010762:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801076c:	f002 0203 	and.w	r2, r2, #3
 8010770:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010772:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	8958      	ldrh	r0, [r3, #10]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	3309      	adds	r3, #9
 801077c:	461a      	mov	r2, r3
 801077e:	2102      	movs	r1, #2
 8010780:	f7ff fa8d 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	330b      	adds	r3, #11
 801078e:	461a      	mov	r2, r3
 8010790:	2102      	movs	r1, #2
 8010792:	f7ff facf 	bl	800fd34 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	330d      	adds	r3, #13
 80107a0:	461a      	mov	r2, r3
 80107a2:	2102      	movs	r1, #2
 80107a4:	f7ff fac6 	bl	800fd34 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	8a18      	ldrh	r0, [r3, #16]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	330f      	adds	r3, #15
 80107b0:	461a      	mov	r2, r3
 80107b2:	2102      	movs	r1, #2
 80107b4:	f7ff fa73 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80107be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107c2:	b218      	sxth	r0, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3311      	adds	r3, #17
 80107c8:	461a      	mov	r2, r3
 80107ca:	2102      	movs	r1, #2
 80107cc:	f7ff fab2 	bl	800fd34 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	3313      	adds	r3, #19
 80107da:	461a      	mov	r2, r3
 80107dc:	2102      	movs	r1, #2
 80107de:	f7ff faa9 	bl	800fd34 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	3315      	adds	r3, #21
 80107ec:	461a      	mov	r2, r3
 80107ee:	2102      	movs	r1, #2
 80107f0:	f7ff faa0 	bl	800fd34 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80107f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
 801080c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801080e:	2300      	movs	r3, #0
 8010810:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8010812:	89fb      	ldrh	r3, [r7, #14]
 8010814:	2b16      	cmp	r3, #22
 8010816:	d802      	bhi.n	801081e <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010818:	f06f 0309 	mvn.w	r3, #9
 801081c:	e079      	b.n	8010912 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	785a      	ldrb	r2, [r3, #1]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	789a      	ldrb	r2, [r3, #2]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	78da      	ldrb	r2, [r3, #3]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	791a      	ldrb	r2, [r3, #4]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	3305      	adds	r3, #5
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f003 030f 	and.w	r3, r3, #15
 8010850:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	799a      	ldrb	r2, [r3, #6]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	3307      	adds	r3, #7
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010868:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	3308      	adds	r3, #8
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f003 0303 	and.w	r3, r3, #3
 8010878:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	3309      	adds	r3, #9
 8010882:	4619      	mov	r1, r3
 8010884:	2002      	movs	r0, #2
 8010886:	f7ff fa35 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801088a:	4603      	mov	r3, r0
 801088c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	330b      	adds	r3, #11
 8010896:	4619      	mov	r1, r3
 8010898:	2002      	movs	r0, #2
 801089a:	f7ff fa77 	bl	800fd8c <VL53L1_i2c_decode_int16_t>
 801089e:	4603      	mov	r3, r0
 80108a0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	330d      	adds	r3, #13
 80108aa:	4619      	mov	r1, r3
 80108ac:	2002      	movs	r0, #2
 80108ae:	f7ff fa6d 	bl	800fd8c <VL53L1_i2c_decode_int16_t>
 80108b2:	4603      	mov	r3, r0
 80108b4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	330f      	adds	r3, #15
 80108be:	4619      	mov	r1, r3
 80108c0:	2002      	movs	r0, #2
 80108c2:	f7ff fa17 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 80108c6:	4603      	mov	r3, r0
 80108c8:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	3311      	adds	r3, #17
 80108d2:	4619      	mov	r1, r3
 80108d4:	2002      	movs	r0, #2
 80108d6:	f7ff fa59 	bl	800fd8c <VL53L1_i2c_decode_int16_t>
 80108da:	4603      	mov	r3, r0
 80108dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108e0:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	3313      	adds	r3, #19
 80108ea:	4619      	mov	r1, r3
 80108ec:	2002      	movs	r0, #2
 80108ee:	f7ff fa4d 	bl	800fd8c <VL53L1_i2c_decode_int16_t>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	3315      	adds	r3, #21
 80108fe:	4619      	mov	r1, r3
 8010900:	2002      	movs	r0, #2
 8010902:	f7ff fa43 	bl	800fd8c <VL53L1_i2c_decode_int16_t>
 8010906:	4603      	mov	r3, r0
 8010908:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 801090e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b088      	sub	sp, #32
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010924:	2300      	movs	r3, #0
 8010926:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8010928:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d108      	bne.n	8010942 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8010930:	f107 0208 	add.w	r2, r7, #8
 8010934:	2317      	movs	r3, #23
 8010936:	210d      	movs	r1, #13
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 ffa9 	bl	8011890 <VL53L1_ReadMulti>
 801093e:	4603      	mov	r3, r0
 8010940:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8010942:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d108      	bne.n	801095c <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801094a:	f107 0308 	add.w	r3, r7, #8
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	4619      	mov	r1, r3
 8010952:	2017      	movs	r0, #23
 8010954:	f7ff ff54 	bl	8010800 <VL53L1_i2c_decode_customer_nvm_managed>
 8010958:	4603      	mov	r3, r0
 801095a:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801095c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3720      	adds	r7, #32
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b086      	sub	sp, #24
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	460b      	mov	r3, r1
 8010972:	607a      	str	r2, [r7, #4]
 8010974:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010976:	2300      	movs	r3, #0
 8010978:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 801097a:	897b      	ldrh	r3, [r7, #10]
 801097c:	2b1f      	cmp	r3, #31
 801097e:	d802      	bhi.n	8010986 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010980:	f06f 0309 	mvn.w	r3, #9
 8010984:	e0cf      	b.n	8010b26 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	2102      	movs	r1, #2
 801098e:	4618      	mov	r0, r3
 8010990:	f7ff f985 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801099c:	f002 0201 	and.w	r2, r2, #1
 80109a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80109a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80109ac:	f002 020f 	and.w	r2, r2, #15
 80109b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80109b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80109bc:	f002 020f 	and.w	r2, r2, #15
 80109c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80109c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80109cc:	f002 021f 	and.w	r2, r2, #31
 80109d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80109d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80109dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80109e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80109e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80109ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80109f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80109f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80109fc:	f002 0201 	and.w	r2, r2, #1
 8010a00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8010a02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8010a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8010a16:	f002 0201 	and.w	r2, r2, #1
 8010a1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010a1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8010a26:	f002 0203 	and.w	r2, r2, #3
 8010a2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010a2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8010a36:	f002 021f 	and.w	r2, r2, #31
 8010a3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010a3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8010a46:	f002 0203 	and.w	r2, r2, #3
 8010a4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010a4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8010a56:	f002 0203 	and.w	r2, r2, #3
 8010a5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8010a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8010a66:	f002 0207 	and.w	r2, r2, #7
 8010a6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8010a6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8010a76:	f002 021f 	and.w	r2, r2, #31
 8010a7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8010a7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8010a86:	f002 0201 	and.w	r2, r2, #1
 8010a8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010a8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010a96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8010aa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8010aaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010ab4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8010abe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8010ac8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	8b18      	ldrh	r0, [r3, #24]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3318      	adds	r3, #24
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	2102      	movs	r1, #2
 8010ad6:	f7ff f8e2 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8010ae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8010aec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8010af6:	f002 020f 	and.w	r2, r2, #15
 8010afa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8010afc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8010b06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8010b10:	f002 020f 	and.w	r2, r2, #15
 8010b14:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8010b16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8010b20:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b086      	sub	sp, #24
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	460b      	mov	r3, r1
 8010b38:	607a      	str	r2, [r7, #4]
 8010b3a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010b40:	897b      	ldrh	r3, [r7, #10]
 8010b42:	2b15      	cmp	r3, #21
 8010b44:	d802      	bhi.n	8010b4c <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010b46:	f06f 0309 	mvn.w	r3, #9
 8010b4a:	e070      	b.n	8010c2e <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010b5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8010b66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8010b70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010b74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010b76:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8010b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b80:	b298      	uxth	r0, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	3304      	adds	r3, #4
 8010b86:	461a      	mov	r2, r3
 8010b88:	2102      	movs	r1, #2
 8010b8a:	f7ff f888 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8010b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010b9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010b9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8010ba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010bb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8010bba:	f002 0201 	and.w	r2, r2, #1
 8010bbe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010bc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8010bca:	f002 0207 	and.w	r2, r2, #7
 8010bce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010bd0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	8998      	ldrh	r0, [r3, #12]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	330c      	adds	r3, #12
 8010bda:	461a      	mov	r2, r3
 8010bdc:	2102      	movs	r1, #2
 8010bde:	f7ff f85e 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	89d8      	ldrh	r0, [r3, #14]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	330e      	adds	r3, #14
 8010bea:	461a      	mov	r2, r3
 8010bec:	2102      	movs	r1, #2
 8010bee:	f7ff f856 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	8a18      	ldrh	r0, [r3, #16]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3310      	adds	r3, #16
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	2102      	movs	r1, #2
 8010bfe:	f7ff f84e 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8010c0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8010c14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8010c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8010c28:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3718      	adds	r7, #24
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b086      	sub	sp, #24
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	60f8      	str	r0, [r7, #12]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	607a      	str	r2, [r7, #4]
 8010c42:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010c44:	2300      	movs	r3, #0
 8010c46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010c48:	897b      	ldrh	r3, [r7, #10]
 8010c4a:	2b16      	cmp	r3, #22
 8010c4c:	d802      	bhi.n	8010c54 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010c4e:	f06f 0309 	mvn.w	r3, #9
 8010c52:	e06e      	b.n	8010d32 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f003 030f 	and.w	r3, r3, #15
 8010c5c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010c6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010c74:	f002 020f 	and.w	r2, r2, #15
 8010c78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010c7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8010c84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010c8e:	f002 020f 	and.w	r2, r2, #15
 8010c92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8010c94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8010c9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8010ca8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010cac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010cae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010cb8:	f002 020f 	and.w	r2, r2, #15
 8010cbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010cbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010cc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8010cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010cd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010cd8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8958      	ldrh	r0, [r3, #10]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	330a      	adds	r3, #10
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	2102      	movs	r1, #2
 8010ce6:	f7fe ffda 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	8998      	ldrh	r0, [r3, #12]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	330c      	adds	r3, #12
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	2102      	movs	r1, #2
 8010cf6:	f7fe ffd2 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8010d02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8010d0c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	6918      	ldr	r0, [r3, #16]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	3312      	adds	r3, #18
 8010d16:	461a      	mov	r2, r3
 8010d18:	2104      	movs	r1, #4
 8010d1a:	f7ff f860 	bl	800fdde <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8010d26:	f002 0201 	and.w	r2, r2, #1
 8010d2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8010d2c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3718      	adds	r7, #24
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}

08010d3a <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b086      	sub	sp, #24
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	60f8      	str	r0, [r7, #12]
 8010d42:	460b      	mov	r3, r1
 8010d44:	607a      	str	r2, [r7, #4]
 8010d46:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010d4c:	897b      	ldrh	r3, [r7, #10]
 8010d4e:	2b11      	cmp	r3, #17
 8010d50:	d802      	bhi.n	8010d58 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010d52:	f06f 0309 	mvn.w	r3, #9
 8010d56:	e071      	b.n	8010e3c <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	f003 0303 	and.w	r3, r3, #3
 8010d60:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	8858      	ldrh	r0, [r3, #2]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	461a      	mov	r2, r3
 8010d70:	2102      	movs	r1, #2
 8010d72:	f7fe ff94 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	8898      	ldrh	r0, [r3, #4]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	3303      	adds	r3, #3
 8010d7e:	461a      	mov	r2, r3
 8010d80:	2102      	movs	r1, #2
 8010d82:	f7fe ff8c 	bl	800fc9e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010d8e:	f002 0201 	and.w	r2, r2, #1
 8010d92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8010d94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8010d9e:	f002 0207 	and.w	r2, r2, #7
 8010da2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010da4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8010dae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010dc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010dc6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010dc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010dd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010dd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010de2:	f002 0203 	and.w	r2, r2, #3
 8010de6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010de8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8010df2:	f002 0203 	and.w	r2, r2, #3
 8010df6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8010e02:	f002 020f 	and.w	r2, r2, #15
 8010e06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010e08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8010e12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8010e1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8010e22:	68fa      	ldr	r2, [r7, #12]
 8010e24:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010e26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8010e30:	f002 0203 	and.w	r2, r2, #3
 8010e34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010e36:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b087      	sub	sp, #28
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010e52:	2300      	movs	r3, #0
 8010e54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8010e56:	897b      	ldrh	r3, [r7, #10]
 8010e58:	2b04      	cmp	r3, #4
 8010e5a:	d802      	bhi.n	8010e62 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010e5c:	f06f 0309 	mvn.w	r3, #9
 8010e60:	e025      	b.n	8010eae <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8010e78:	f002 0201 	and.w	r2, r2, #1
 8010e7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010e7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8010e88:	f002 0201 	and.w	r2, r2, #1
 8010e8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010e8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8010e98:	f002 0203 	and.w	r2, r2, #3
 8010e9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010e9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010ea8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	371c      	adds	r7, #28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b086      	sub	sp, #24
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	60b9      	str	r1, [r7, #8]
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8010ecc:	89fb      	ldrh	r3, [r7, #14]
 8010ece:	2b2b      	cmp	r3, #43	; 0x2b
 8010ed0:	d802      	bhi.n	8010ed8 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010ed2:	f06f 0309 	mvn.w	r3, #9
 8010ed6:	e0e2      	b.n	801109e <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ee0:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	785a      	ldrb	r2, [r3, #1]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	3302      	adds	r3, #2
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	f003 030f 	and.w	r3, r3, #15
 8010ef8:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	78da      	ldrb	r2, [r3, #3]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	2002      	movs	r0, #2
 8010f0e:	f7fe fef1 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	3306      	adds	r3, #6
 8010f1e:	4619      	mov	r1, r3
 8010f20:	2002      	movs	r0, #2
 8010f22:	f7fe fee7 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f26:	4603      	mov	r3, r0
 8010f28:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	3308      	adds	r3, #8
 8010f32:	4619      	mov	r1, r3
 8010f34:	2002      	movs	r0, #2
 8010f36:	f7fe fedd 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	330a      	adds	r3, #10
 8010f46:	4619      	mov	r1, r3
 8010f48:	2002      	movs	r0, #2
 8010f4a:	f7fe fed3 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	330c      	adds	r3, #12
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	2002      	movs	r0, #2
 8010f5e:	f7fe fec9 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f62:	4603      	mov	r3, r0
 8010f64:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	330e      	adds	r3, #14
 8010f6e:	4619      	mov	r1, r3
 8010f70:	2002      	movs	r0, #2
 8010f72:	f7fe febf 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f76:	4603      	mov	r3, r0
 8010f78:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	3310      	adds	r3, #16
 8010f82:	4619      	mov	r1, r3
 8010f84:	2002      	movs	r0, #2
 8010f86:	f7fe feb5 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	3312      	adds	r3, #18
 8010f96:	4619      	mov	r1, r3
 8010f98:	2002      	movs	r0, #2
 8010f9a:	f7fe feab 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	3314      	adds	r3, #20
 8010faa:	4619      	mov	r1, r3
 8010fac:	2002      	movs	r0, #2
 8010fae:	f7fe fea1 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	3316      	adds	r3, #22
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	2002      	movs	r0, #2
 8010fc2:	f7fe fe97 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	3318      	adds	r3, #24
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	2002      	movs	r0, #2
 8010fd6:	f7fe fe8d 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	331a      	adds	r3, #26
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	2002      	movs	r0, #2
 8010fea:	f7fe fe83 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	331c      	adds	r3, #28
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	2002      	movs	r0, #2
 8010ffe:	f7fe fe79 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8011002:	4603      	mov	r3, r0
 8011004:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	331e      	adds	r3, #30
 801100e:	4619      	mov	r1, r3
 8011010:	2002      	movs	r0, #2
 8011012:	f7fe fe6f 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8011016:	4603      	mov	r3, r0
 8011018:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	3320      	adds	r3, #32
 8011022:	4619      	mov	r1, r3
 8011024:	2002      	movs	r0, #2
 8011026:	f7fe fe65 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801102a:	4603      	mov	r3, r0
 801102c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	3322      	adds	r3, #34	; 0x22
 8011036:	4619      	mov	r1, r3
 8011038:	2002      	movs	r0, #2
 801103a:	f7fe fe5b 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801103e:	4603      	mov	r3, r0
 8011040:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	3324      	adds	r3, #36	; 0x24
 801104a:	4619      	mov	r1, r3
 801104c:	2002      	movs	r0, #2
 801104e:	f7fe fe51 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8011052:	4603      	mov	r3, r0
 8011054:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	3326      	adds	r3, #38	; 0x26
 801105e:	4619      	mov	r1, r3
 8011060:	2002      	movs	r0, #2
 8011062:	f7fe fe47 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8011066:	4603      	mov	r3, r0
 8011068:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	3328      	adds	r3, #40	; 0x28
 8011072:	4619      	mov	r1, r3
 8011074:	2002      	movs	r0, #2
 8011076:	f7fe fe3d 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801107a:	4603      	mov	r3, r0
 801107c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801109a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3718      	adds	r7, #24
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b086      	sub	sp, #24
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	4603      	mov	r3, r0
 80110ae:	60b9      	str	r1, [r7, #8]
 80110b0:	607a      	str	r2, [r7, #4]
 80110b2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80110b4:	2300      	movs	r3, #0
 80110b6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80110b8:	89fb      	ldrh	r3, [r7, #14]
 80110ba:	2b20      	cmp	r3, #32
 80110bc:	d802      	bhi.n	80110c4 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80110be:	f06f 0309 	mvn.w	r3, #9
 80110c2:	e04d      	b.n	8011160 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80110c4:	68b9      	ldr	r1, [r7, #8]
 80110c6:	2004      	movs	r0, #4
 80110c8:	f7fe feb3 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 80110cc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	3304      	adds	r3, #4
 80110d6:	4619      	mov	r1, r3
 80110d8:	2004      	movs	r0, #4
 80110da:	f7fe feaa 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 80110de:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	3308      	adds	r3, #8
 80110e8:	4619      	mov	r1, r3
 80110ea:	2004      	movs	r0, #4
 80110ec:	f7fe febe 	bl	800fe6c <VL53L1_i2c_decode_int32_t>
 80110f0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	330c      	adds	r3, #12
 80110fa:	4619      	mov	r1, r3
 80110fc:	2004      	movs	r0, #4
 80110fe:	f7fe fe98 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 8011102:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	3310      	adds	r3, #16
 801110c:	4619      	mov	r1, r3
 801110e:	2004      	movs	r0, #4
 8011110:	f7fe fe8f 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 8011114:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	3314      	adds	r3, #20
 801111e:	4619      	mov	r1, r3
 8011120:	2004      	movs	r0, #4
 8011122:	f7fe fe86 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 8011126:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	3318      	adds	r3, #24
 8011130:	4619      	mov	r1, r3
 8011132:	2004      	movs	r0, #4
 8011134:	f7fe fe9a 	bl	800fe6c <VL53L1_i2c_decode_int32_t>
 8011138:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	331c      	adds	r3, #28
 8011142:	4619      	mov	r1, r3
 8011144:	2004      	movs	r0, #4
 8011146:	f7fe fe74 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 801114a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 801115c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3718      	adds	r7, #24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b086      	sub	sp, #24
 801116c:	af00      	add	r7, sp, #0
 801116e:	4603      	mov	r3, r0
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011176:	2300      	movs	r3, #0
 8011178:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 801117a:	89fb      	ldrh	r3, [r7, #14]
 801117c:	2b37      	cmp	r3, #55	; 0x37
 801117e:	d802      	bhi.n	8011186 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011180:	f06f 0309 	mvn.w	r3, #9
 8011184:	e15e      	b.n	8011444 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	2002      	movs	r0, #2
 801118a:	f7fe fdb3 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801118e:	4603      	mov	r3, r0
 8011190:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	3302      	adds	r3, #2
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111a0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	3303      	adds	r3, #3
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111b0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	3304      	adds	r3, #4
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	f003 0303 	and.w	r3, r3, #3
 80111c0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	3305      	adds	r3, #5
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f003 0301 	and.w	r3, r3, #1
 80111d0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	3306      	adds	r3, #6
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111e0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	3307      	adds	r3, #7
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111f0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	3308      	adds	r3, #8
 80111fa:	4619      	mov	r1, r3
 80111fc:	2002      	movs	r0, #2
 80111fe:	f7fe fd79 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 8011202:	4603      	mov	r3, r0
 8011204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011208:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	330a      	adds	r3, #10
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	330b      	adds	r3, #11
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	f003 0303 	and.w	r3, r3, #3
 8011228:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	330c      	adds	r3, #12
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f003 030f 	and.w	r3, r3, #15
 8011238:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	330d      	adds	r3, #13
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	f003 0307 	and.w	r3, r3, #7
 8011248:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	330e      	adds	r3, #14
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	f003 0301 	and.w	r3, r3, #1
 8011258:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	330f      	adds	r3, #15
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	7c1a      	ldrb	r2, [r3, #16]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	7c5a      	ldrb	r2, [r3, #17]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	3312      	adds	r3, #18
 8011282:	4619      	mov	r1, r3
 8011284:	2002      	movs	r0, #2
 8011286:	f7fe fd35 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801128a:	4603      	mov	r3, r0
 801128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011290:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	3316      	adds	r3, #22
 801129a:	4619      	mov	r1, r3
 801129c:	2002      	movs	r0, #2
 801129e:	f7fe fd29 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 80112a2:	4603      	mov	r3, r0
 80112a4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	3318      	adds	r3, #24
 80112ae:	4619      	mov	r1, r3
 80112b0:	2002      	movs	r0, #2
 80112b2:	f7fe fd1f 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 80112b6:	4603      	mov	r3, r0
 80112b8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	331a      	adds	r3, #26
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f003 0301 	and.w	r3, r3, #1
 80112c8:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	331b      	adds	r3, #27
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	f003 0307 	and.w	r3, r3, #7
 80112d8:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	7f1a      	ldrb	r2, [r3, #28]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	7f5a      	ldrb	r2, [r3, #29]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	331e      	adds	r3, #30
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	331f      	adds	r3, #31
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011308:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	3320      	adds	r3, #32
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	f003 0303 	and.w	r3, r3, #3
 8011318:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	3321      	adds	r3, #33	; 0x21
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	f003 030f 	and.w	r3, r3, #15
 8011328:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	3325      	adds	r3, #37	; 0x25
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3326      	adds	r3, #38	; 0x26
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	f003 0303 	and.w	r3, r3, #3
 801136e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3327      	adds	r3, #39	; 0x27
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f003 031f 	and.w	r3, r3, #31
 8011380:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	3328      	adds	r3, #40	; 0x28
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	f003 031f 	and.w	r3, r3, #31
 8011392:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	3329      	adds	r3, #41	; 0x29
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 031f 	and.w	r3, r3, #31
 80113a4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	332a      	adds	r3, #42	; 0x2a
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	f003 0301 	and.w	r3, r3, #1
 80113b6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	332b      	adds	r3, #43	; 0x2b
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f003 0301 	and.w	r3, r3, #1
 80113c8:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	332c      	adds	r3, #44	; 0x2c
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	f003 0303 	and.w	r3, r3, #3
 80113da:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	332d      	adds	r3, #45	; 0x2d
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113ec:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	332e      	adds	r3, #46	; 0x2e
 80113f8:	4619      	mov	r1, r3
 80113fa:	2004      	movs	r0, #4
 80113fc:	f7fe fd19 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 8011400:	4603      	mov	r3, r0
 8011402:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	3332      	adds	r3, #50	; 0x32
 801140e:	4619      	mov	r1, r3
 8011410:	2004      	movs	r0, #4
 8011412:	f7fe fd0e 	bl	800fe32 <VL53L1_i2c_decode_uint32_t>
 8011416:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	3336      	adds	r3, #54	; 0x36
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	3337      	adds	r3, #55	; 0x37
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 0301 	and.w	r3, r3, #1
 8011438:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8011440:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3718      	adds	r7, #24
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
 8011458:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801145a:	2300      	movs	r3, #0
 801145c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 801145e:	89fb      	ldrh	r3, [r7, #14]
 8011460:	2b30      	cmp	r3, #48	; 0x30
 8011462:	d802      	bhi.n	801146a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011464:	f06f 0309 	mvn.w	r3, #9
 8011468:	e112      	b.n	8011690 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	785a      	ldrb	r2, [r3, #1]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	789a      	ldrb	r2, [r3, #2]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	3303      	adds	r3, #3
 8011486:	4619      	mov	r1, r3
 8011488:	2002      	movs	r0, #2
 801148a:	f7fe fc33 	bl	800fcf4 <VL53L1_i2c_decode_uint16_t>
 801148e:	4603      	mov	r3, r0
 8011490:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	3305      	adds	r3, #5
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114a0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	3306      	adds	r3, #6
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	f003 0307 	and.w	r3, r3, #7
 80114b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	3307      	adds	r3, #7
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	f003 0307 	and.w	r3, r3, #7
 80114c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	3308      	adds	r3, #8
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	3309      	adds	r3, #9
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	330a      	adds	r3, #10
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	f003 0301 	and.w	r3, r3, #1
 80114f0:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	330b      	adds	r3, #11
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011500:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	330c      	adds	r3, #12
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	f003 0301 	and.w	r3, r3, #1
 8011510:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	330d      	adds	r3, #13
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011520:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	330e      	adds	r3, #14
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011530:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	7bda      	ldrb	r2, [r3, #15]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	7c1a      	ldrb	r2, [r3, #16]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	7c5a      	ldrb	r2, [r3, #17]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	7c9a      	ldrb	r2, [r3, #18]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	7cda      	ldrb	r2, [r3, #19]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	7d1a      	ldrb	r2, [r3, #20]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	7d5a      	ldrb	r2, [r3, #21]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	7d9a      	ldrb	r2, [r3, #22]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	7dda      	ldrb	r2, [r3, #23]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	7e1a      	ldrb	r2, [r3, #24]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	7e5a      	ldrb	r2, [r3, #25]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	7e9a      	ldrb	r2, [r3, #26]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	7eda      	ldrb	r2, [r3, #27]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	7f1a      	ldrb	r2, [r3, #28]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	7f5a      	ldrb	r2, [r3, #29]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	7f9a      	ldrb	r2, [r3, #30]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	7fda      	ldrb	r2, [r3, #31]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b090      	sub	sp, #64	; 0x40
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80116a2:	2300      	movs	r3, #0
 80116a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80116a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10a      	bne.n	80116c6 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80116b0:	f107 020c 	add.w	r2, r7, #12
 80116b4:	2331      	movs	r3, #49	; 0x31
 80116b6:	f240 110f 	movw	r1, #271	; 0x10f
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f8e8 	bl	8011890 <VL53L1_ReadMulti>
 80116c0:	4603      	mov	r3, r0
 80116c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80116c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d109      	bne.n	80116e2 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80116ce:	f107 030c 	add.w	r3, r7, #12
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	4619      	mov	r1, r3
 80116d6:	2031      	movs	r0, #49	; 0x31
 80116d8:	f7ff feb8 	bl	801144c <VL53L1_i2c_decode_nvm_copy_data>
 80116dc:	4603      	mov	r3, r0
 80116de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80116e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3740      	adds	r7, #64	; 0x40
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b086      	sub	sp, #24
 80116f2:	af02      	add	r7, sp, #8
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80116f8:	2300      	movs	r3, #0
 80116fa:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 80116fc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f000 f9b9 	bl	8011a78 <VL53L1_WaitUs>
 8011706:	4603      	mov	r3, r0
 8011708:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 801170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10b      	bne.n	801172a <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8011712:	2301      	movs	r3, #1
 8011714:	9301      	str	r3, [sp, #4]
 8011716:	2301      	movs	r3, #1
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	2301      	movs	r3, #1
 801171c:	22e5      	movs	r2, #229	; 0xe5
 801171e:	6839      	ldr	r1, [r7, #0]
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f9bf 	bl	8011aa4 <VL53L1_WaitValueMaskEx>
 8011726:	4603      	mov	r3, r0
 8011728:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 801172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d103      	bne.n	801173a <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8011732:	2103      	movs	r1, #3
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7fe f896 	bl	800f866 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 801173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b088      	sub	sp, #32
 801174a:	af02      	add	r7, sp, #8
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011750:	2300      	movs	r3, #0
 8011752:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801175c:	2300      	movs	r3, #0
 801175e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8011766:	f003 0310 	and.w	r3, r3, #16
 801176a:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801176c:	7bfb      	ldrb	r3, [r7, #15]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d102      	bne.n	8011778 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8011772:	2301      	movs	r3, #1
 8011774:	75fb      	strb	r3, [r7, #23]
 8011776:	e001      	b.n	801177c <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8011778:	2300      	movs	r3, #0
 801177a:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 801177c:	7dfb      	ldrb	r3, [r7, #23]
 801177e:	2201      	movs	r2, #1
 8011780:	9201      	str	r2, [sp, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	9200      	str	r2, [sp, #0]
 8011786:	2231      	movs	r2, #49	; 0x31
 8011788:	6839      	ldr	r1, [r7, #0]
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 f98a 	bl	8011aa4 <VL53L1_WaitValueMaskEx>
 8011790:	4603      	mov	r3, r0
 8011792:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8011794:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b088      	sub	sp, #32
 80117a4:	af02      	add	r7, sp, #8
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	330a      	adds	r3, #10
 80117b0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 80117be:	b299      	uxth	r1, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	9300      	str	r3, [sp, #0]
 80117c8:	4613      	mov	r3, r2
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	f7f5 f9b0 	bl	8006b30 <HAL_I2C_Master_Transmit>
 80117d0:	4603      	mov	r3, r0
 80117d2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80117d4:	693b      	ldr	r3, [r7, #16]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80117de:	b580      	push	{r7, lr}
 80117e0:	b088      	sub	sp, #32
 80117e2:	af02      	add	r7, sp, #8
 80117e4:	60f8      	str	r0, [r7, #12]
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	330a      	adds	r3, #10
 80117ee:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 80117fc:	f043 0301 	orr.w	r3, r3, #1
 8011800:	b2db      	uxtb	r3, r3
 8011802:	b299      	uxth	r1, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	b29a      	uxth	r2, r3
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	4613      	mov	r3, r2
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	f7f5 fa8c 	bl	8006d2c <HAL_I2C_Master_Receive>
 8011814:	4603      	mov	r3, r0
 8011816:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8011818:	693b      	ldr	r3, [r7, #16]
}
 801181a:	4618      	mov	r0, r3
 801181c:	3718      	adds	r7, #24
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
	...

08011824 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	607a      	str	r2, [r7, #4]
 801182e:	603b      	str	r3, [r7, #0]
 8011830:	460b      	mov	r3, r1
 8011832:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011834:	2300      	movs	r3, #0
 8011836:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	2bff      	cmp	r3, #255	; 0xff
 801183c:	d902      	bls.n	8011844 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801183e:	f06f 0303 	mvn.w	r3, #3
 8011842:	e01d      	b.n	8011880 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011844:	897b      	ldrh	r3, [r7, #10]
 8011846:	0a1b      	lsrs	r3, r3, #8
 8011848:	b29b      	uxth	r3, r3
 801184a:	b2da      	uxtb	r2, r3
 801184c:	4b0e      	ldr	r3, [pc, #56]	; (8011888 <VL53L1_WriteMulti+0x64>)
 801184e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011850:	897b      	ldrh	r3, [r7, #10]
 8011852:	b2da      	uxtb	r2, r3
 8011854:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <VL53L1_WriteMulti+0x64>)
 8011856:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	6879      	ldr	r1, [r7, #4]
 801185c:	480b      	ldr	r0, [pc, #44]	; (801188c <VL53L1_WriteMulti+0x68>)
 801185e:	f000 fb97 	bl	8011f90 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	3302      	adds	r3, #2
 8011866:	461a      	mov	r2, r3
 8011868:	4907      	ldr	r1, [pc, #28]	; (8011888 <VL53L1_WriteMulti+0x64>)
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	f7ff ff98 	bl	80117a0 <_I2CWrite>
 8011870:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011878:	23f3      	movs	r3, #243	; 0xf3
 801187a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 801187c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	2000a048 	.word	0x2000a048
 801188c:	2000a04a 	.word	0x2000a04a

08011890 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011890:	b580      	push	{r7, lr}
 8011892:	b086      	sub	sp, #24
 8011894:	af00      	add	r7, sp, #0
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	607a      	str	r2, [r7, #4]
 801189a:	603b      	str	r3, [r7, #0]
 801189c:	460b      	mov	r3, r1
 801189e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80118a0:	2300      	movs	r3, #0
 80118a2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80118a4:	897b      	ldrh	r3, [r7, #10]
 80118a6:	0a1b      	lsrs	r3, r3, #8
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <VL53L1_ReadMulti+0x68>)
 80118ae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80118b0:	897b      	ldrh	r3, [r7, #10]
 80118b2:	b2da      	uxtb	r2, r3
 80118b4:	4b10      	ldr	r3, [pc, #64]	; (80118f8 <VL53L1_ReadMulti+0x68>)
 80118b6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80118b8:	2202      	movs	r2, #2
 80118ba:	490f      	ldr	r1, [pc, #60]	; (80118f8 <VL53L1_ReadMulti+0x68>)
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f7ff ff6f 	bl	80117a0 <_I2CWrite>
 80118c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80118ca:	23f3      	movs	r3, #243	; 0xf3
 80118cc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80118ce:	e00c      	b.n	80118ea <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	6879      	ldr	r1, [r7, #4]
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f7ff ff82 	bl	80117de <_I2CRead>
 80118da:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d002      	beq.n	80118e8 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80118e2:	23f3      	movs	r3, #243	; 0xf3
 80118e4:	75fb      	strb	r3, [r7, #23]
 80118e6:	e000      	b.n	80118ea <VL53L1_ReadMulti+0x5a>
    }
done:
 80118e8:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80118ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3718      	adds	r7, #24
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	2000a048 	.word	0x2000a048

080118fc <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	807b      	strh	r3, [r7, #2]
 8011908:	4613      	mov	r3, r2
 801190a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801190c:	2300      	movs	r3, #0
 801190e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011910:	887b      	ldrh	r3, [r7, #2]
 8011912:	0a1b      	lsrs	r3, r3, #8
 8011914:	b29b      	uxth	r3, r3
 8011916:	b2da      	uxtb	r2, r3
 8011918:	4b0c      	ldr	r3, [pc, #48]	; (801194c <VL53L1_WrByte+0x50>)
 801191a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801191c:	887b      	ldrh	r3, [r7, #2]
 801191e:	b2da      	uxtb	r2, r3
 8011920:	4b0a      	ldr	r3, [pc, #40]	; (801194c <VL53L1_WrByte+0x50>)
 8011922:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011924:	4a09      	ldr	r2, [pc, #36]	; (801194c <VL53L1_WrByte+0x50>)
 8011926:	787b      	ldrb	r3, [r7, #1]
 8011928:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801192a:	2203      	movs	r2, #3
 801192c:	4907      	ldr	r1, [pc, #28]	; (801194c <VL53L1_WrByte+0x50>)
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff ff36 	bl	80117a0 <_I2CWrite>
 8011934:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801193c:	23f3      	movs	r3, #243	; 0xf3
 801193e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8011940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	2000a048 	.word	0x2000a048

08011950 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	460b      	mov	r3, r1
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801195e:	2300      	movs	r3, #0
 8011960:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011962:	897b      	ldrh	r3, [r7, #10]
 8011964:	0a1b      	lsrs	r3, r3, #8
 8011966:	b29b      	uxth	r3, r3
 8011968:	b2da      	uxtb	r2, r3
 801196a:	4b12      	ldr	r3, [pc, #72]	; (80119b4 <VL53L1_RdByte+0x64>)
 801196c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801196e:	897b      	ldrh	r3, [r7, #10]
 8011970:	b2da      	uxtb	r2, r3
 8011972:	4b10      	ldr	r3, [pc, #64]	; (80119b4 <VL53L1_RdByte+0x64>)
 8011974:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011976:	2202      	movs	r2, #2
 8011978:	490e      	ldr	r1, [pc, #56]	; (80119b4 <VL53L1_RdByte+0x64>)
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f7ff ff10 	bl	80117a0 <_I2CWrite>
 8011980:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011988:	23f3      	movs	r3, #243	; 0xf3
 801198a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801198c:	e00c      	b.n	80119a8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801198e:	2201      	movs	r2, #1
 8011990:	6879      	ldr	r1, [r7, #4]
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f7ff ff23 	bl	80117de <_I2CRead>
 8011998:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80119a0:	23f3      	movs	r3, #243	; 0xf3
 80119a2:	75fb      	strb	r3, [r7, #23]
 80119a4:	e000      	b.n	80119a8 <VL53L1_RdByte+0x58>
    }
done:
 80119a6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80119a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3718      	adds	r7, #24
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	2000a048 	.word	0x2000a048

080119b8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	460b      	mov	r3, r1
 80119c2:	607a      	str	r2, [r7, #4]
 80119c4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80119c6:	2300      	movs	r3, #0
 80119c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80119ca:	897b      	ldrh	r3, [r7, #10]
 80119cc:	0a1b      	lsrs	r3, r3, #8
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	4b18      	ldr	r3, [pc, #96]	; (8011a34 <VL53L1_RdWord+0x7c>)
 80119d4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80119d6:	897b      	ldrh	r3, [r7, #10]
 80119d8:	b2da      	uxtb	r2, r3
 80119da:	4b16      	ldr	r3, [pc, #88]	; (8011a34 <VL53L1_RdWord+0x7c>)
 80119dc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80119de:	2202      	movs	r2, #2
 80119e0:	4914      	ldr	r1, [pc, #80]	; (8011a34 <VL53L1_RdWord+0x7c>)
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7ff fedc 	bl	80117a0 <_I2CWrite>
 80119e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d002      	beq.n	80119f6 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80119f0:	23f3      	movs	r3, #243	; 0xf3
 80119f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80119f4:	e017      	b.n	8011a26 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80119f6:	2202      	movs	r2, #2
 80119f8:	490e      	ldr	r1, [pc, #56]	; (8011a34 <VL53L1_RdWord+0x7c>)
 80119fa:	68f8      	ldr	r0, [r7, #12]
 80119fc:	f7ff feef 	bl	80117de <_I2CRead>
 8011a00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d002      	beq.n	8011a0e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011a08:	23f3      	movs	r3, #243	; 0xf3
 8011a0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011a0c:	e00b      	b.n	8011a26 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <VL53L1_RdWord+0x7c>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	021b      	lsls	r3, r3, #8
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	4b06      	ldr	r3, [pc, #24]	; (8011a34 <VL53L1_RdWord+0x7c>)
 8011a1a:	785b      	ldrb	r3, [r3, #1]
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	4413      	add	r3, r2
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8011a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3718      	adds	r7, #24
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	2000a048 	.word	0x2000a048

08011a38 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b085      	sub	sp, #20
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8011a40:	2300      	movs	r3, #0
 8011a42:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3714      	adds	r7, #20
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr

08011a5a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7f3 fcda 	bl	8005420 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
	...

08011a78 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	4a06      	ldr	r2, [pc, #24]	; (8011aa0 <VL53L1_WaitUs+0x28>)
 8011a86:	fb82 1203 	smull	r1, r2, r2, r3
 8011a8a:	1192      	asrs	r2, r2, #6
 8011a8c:	17db      	asrs	r3, r3, #31
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7f3 fcc5 	bl	8005420 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	10624dd3 	.word	0x10624dd3

08011aa4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011aa4:	b590      	push	{r4, r7, lr}
 8011aa6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	f107 040c 	add.w	r4, r7, #12
 8011ab0:	6020      	str	r0, [r4, #0]
 8011ab2:	f107 0008 	add.w	r0, r7, #8
 8011ab6:	6001      	str	r1, [r0, #0]
 8011ab8:	4619      	mov	r1, r3
 8011aba:	1dbb      	adds	r3, r7, #6
 8011abc:	801a      	strh	r2, [r3, #0]
 8011abe:	1d7b      	adds	r3, r7, #5
 8011ac0:	460a      	mov	r2, r1
 8011ac2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8011ae8:	f107 0310 	add.w	r3, r7, #16
 8011aec:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011af0:	4935      	ldr	r1, [pc, #212]	; (8011bc8 <VL53L1_WaitValueMaskEx+0x124>)
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 fa62 	bl	8011fbc <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8011af8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7ff ff9b 	bl	8011a38 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8011b02:	e03f      	b.n	8011b84 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8011b04:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10b      	bne.n	8011b24 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 8011b0c:	f207 2213 	addw	r2, r7, #531	; 0x213
 8011b10:	1dbb      	adds	r3, r7, #6
 8011b12:	8819      	ldrh	r1, [r3, #0]
 8011b14:	f107 030c 	add.w	r3, r7, #12
 8011b18:	6818      	ldr	r0, [r3, #0]
 8011b1a:	f7ff ff19 	bl	8011950 <VL53L1_RdByte>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011b24:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8011b28:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8011b2c:	4013      	ands	r3, r2
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	1d7a      	adds	r2, r7, #5
 8011b32:	7812      	ldrb	r2, [r2, #0]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d102      	bne.n	8011b3e <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8011b3e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d112      	bne.n	8011b6c <VL53L1_WaitValueMaskEx+0xc8>
 8011b46:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d10e      	bne.n	8011b6c <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 8011b4e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00a      	beq.n	8011b6c <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8011b56:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011b5a:	f107 030c 	add.w	r3, r7, #12
 8011b5e:	4611      	mov	r1, r2
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	f7ff ff7a 	bl	8011a5a <VL53L1_WaitMs>
 8011b66:	4603      	mov	r3, r0
 8011b68:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8011b6c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff ff61 	bl	8011a38 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011b76:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011b7a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8011b84:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10a      	bne.n	8011ba2 <VL53L1_WaitValueMaskEx+0xfe>
 8011b8c:	f107 0308 	add.w	r3, r7, #8
 8011b90:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d203      	bcs.n	8011ba2 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 8011b9a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d0b0      	beq.n	8011b04 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8011ba2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d106      	bne.n	8011bb8 <VL53L1_WaitValueMaskEx+0x114>
 8011baa:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d102      	bne.n	8011bb8 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 8011bb2:	23f9      	movs	r3, #249	; 0xf9
 8011bb4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011bb8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd90      	pop	{r4, r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	08012278 	.word	0x08012278

08011bcc <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b0a4      	sub	sp, #144	; 0x90
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011bd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011bda:	2200      	movs	r2, #0
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	605a      	str	r2, [r3, #4]
 8011be0:	609a      	str	r2, [r3, #8]
 8011be2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011be4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8011bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	605a      	str	r2, [r3, #4]
 8011bf8:	609a      	str	r2, [r3, #8]
 8011bfa:	60da      	str	r2, [r3, #12]
 8011bfc:	611a      	str	r2, [r3, #16]
 8011bfe:	615a      	str	r2, [r3, #20]
 8011c00:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8011c20:	e009      	b.n	8011c36 <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 8011c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c26:	005b      	lsls	r3, r3, #1
 8011c28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8011c2c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011c30:	3301      	adds	r3, #1
 8011c32:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8011c36:	79fa      	ldrb	r2, [r7, #7]
 8011c38:	494d      	ldr	r1, [pc, #308]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	4413      	add	r3, r2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	440b      	add	r3, r1
 8011c44:	3310      	adds	r3, #16
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d3e8      	bcc.n	8011c22 <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 8011c50:	79fa      	ldrb	r2, [r7, #7]
 8011c52:	4947      	ldr	r1, [pc, #284]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	440b      	add	r3, r1
 8011c5e:	3308      	adds	r3, #8
 8011c60:	881b      	ldrh	r3, [r3, #0]
 8011c62:	461a      	mov	r2, r3
 8011c64:	4b43      	ldr	r3, [pc, #268]	; (8011d74 <DC_MOTOR_Init+0x1a8>)
 8011c66:	fb03 f302 	mul.w	r3, r3, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	79fa      	ldrb	r2, [r7, #7]
 8011c6e:	4940      	ldr	r1, [pc, #256]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011c70:	4613      	mov	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4413      	add	r3, r2
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	440b      	add	r3, r1
 8011c7a:	330c      	adds	r3, #12
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011c82:	fb02 f303 	mul.w	r3, r2, r3
 8011c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8011c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 8011c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c92:	3b01      	subs	r3, #1
 8011c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 8011c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c9c:	3b02      	subs	r3, #2
 8011c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8011ca2:	79fa      	ldrb	r2, [r7, #7]
 8011ca4:	4932      	ldr	r1, [pc, #200]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	440b      	add	r3, r1
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 8011cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cb8:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8011cba:	2360      	movs	r3, #96	; 0x60
 8011cbc:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 8011cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011cc2:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011cc8:	2380      	movs	r3, #128	; 0x80
 8011cca:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 8011ccc:	f107 0308 	add.w	r3, r7, #8
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7f7 fb89 	bl	80093e8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cda:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8011cdc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011ce0:	f107 0308 	add.w	r3, r7, #8
 8011ce4:	4611      	mov	r1, r2
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7f8 fc34 	bl	800a554 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8011cec:	f107 0308 	add.w	r3, r7, #8
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7f7 fd2f 	bl	8009754 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8011cfe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011d02:	f107 0308 	add.w	r3, r7, #8
 8011d06:	4611      	mov	r1, r2
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7f9 fbc3 	bl	800b494 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011d0e:	2360      	movs	r3, #96	; 0x60
 8011d10:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011d16:	2300      	movs	r3, #0
 8011d18:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8011d1e:	79fa      	ldrb	r2, [r7, #7]
 8011d20:	4913      	ldr	r1, [pc, #76]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011d22:	4613      	mov	r3, r2
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	4413      	add	r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	440b      	add	r3, r1
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011d34:	f107 0308 	add.w	r3, r7, #8
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7f8 fa33 	bl	800a1a4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8011d3e:	f107 0308 	add.w	r3, r7, #8
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7f3 f8e8 	bl	8004f18 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8011d48:	79fa      	ldrb	r2, [r7, #7]
 8011d4a:	4909      	ldr	r1, [pc, #36]	; (8011d70 <DC_MOTOR_Init+0x1a4>)
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	440b      	add	r3, r1
 8011d56:	3304      	adds	r3, #4
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	f107 0308 	add.w	r3, r7, #8
 8011d5e:	4611      	mov	r1, r2
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7f7 fde7 	bl	8009934 <HAL_TIM_PWM_Start>
}
 8011d66:	bf00      	nop
 8011d68:	3790      	adds	r7, #144	; 0x90
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	080122bc 	.word	0x080122bc
 8011d74:	000f4240 	.word	0x000f4240

08011d78 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	4603      	mov	r3, r0
 8011d80:	460a      	mov	r2, r1
 8011d82:	71fb      	strb	r3, [r7, #7]
 8011d84:	4613      	mov	r3, r2
 8011d86:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8011d88:	79fa      	ldrb	r2, [r7, #7]
 8011d8a:	4928      	ldr	r1, [pc, #160]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	4413      	add	r3, r2
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	440b      	add	r3, r1
 8011d96:	3304      	adds	r3, #4
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d10a      	bne.n	8011db4 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8011d9e:	79fa      	ldrb	r2, [r7, #7]
 8011da0:	4922      	ldr	r1, [pc, #136]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011da2:	4613      	mov	r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4413      	add	r3, r2
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	440b      	add	r3, r1
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	88ba      	ldrh	r2, [r7, #4]
 8011db0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8011db2:	e035      	b.n	8011e20 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8011db4:	79fa      	ldrb	r2, [r7, #7]
 8011db6:	491d      	ldr	r1, [pc, #116]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011db8:	4613      	mov	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	440b      	add	r3, r1
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b04      	cmp	r3, #4
 8011dc8:	d10a      	bne.n	8011de0 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8011dca:	79fa      	ldrb	r2, [r7, #7]
 8011dcc:	4917      	ldr	r1, [pc, #92]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011dce:	4613      	mov	r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	4413      	add	r3, r2
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	440b      	add	r3, r1
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	88ba      	ldrh	r2, [r7, #4]
 8011ddc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011dde:	e01f      	b.n	8011e20 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8011de0:	79fa      	ldrb	r2, [r7, #7]
 8011de2:	4912      	ldr	r1, [pc, #72]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011de4:	4613      	mov	r3, r2
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4413      	add	r3, r2
 8011dea:	009b      	lsls	r3, r3, #2
 8011dec:	440b      	add	r3, r1
 8011dee:	3304      	adds	r3, #4
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2b08      	cmp	r3, #8
 8011df4:	d10a      	bne.n	8011e0c <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8011df6:	79fa      	ldrb	r2, [r7, #7]
 8011df8:	490c      	ldr	r1, [pc, #48]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4413      	add	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	440b      	add	r3, r1
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	88ba      	ldrh	r2, [r7, #4]
 8011e08:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8011e0a:	e009      	b.n	8011e20 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8011e0c:	79fa      	ldrb	r2, [r7, #7]
 8011e0e:	4907      	ldr	r1, [pc, #28]	; (8011e2c <DC_MOTOR_Start+0xb4>)
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	440b      	add	r3, r1
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	88ba      	ldrh	r2, [r7, #4]
 8011e1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011e20:	bf00      	nop
 8011e22:	370c      	adds	r7, #12
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr
 8011e2c:	080122bc 	.word	0x080122bc

08011e30 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b083      	sub	sp, #12
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	4603      	mov	r3, r0
 8011e38:	460a      	mov	r2, r1
 8011e3a:	71fb      	strb	r3, [r7, #7]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8011e40:	79fa      	ldrb	r2, [r7, #7]
 8011e42:	4928      	ldr	r1, [pc, #160]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011e44:	4613      	mov	r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	440b      	add	r3, r1
 8011e4e:	3304      	adds	r3, #4
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10a      	bne.n	8011e6c <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8011e56:	79fa      	ldrb	r2, [r7, #7]
 8011e58:	4922      	ldr	r1, [pc, #136]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	440b      	add	r3, r1
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	88ba      	ldrh	r2, [r7, #4]
 8011e68:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8011e6a:	e035      	b.n	8011ed8 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8011e6c:	79fa      	ldrb	r2, [r7, #7]
 8011e6e:	491d      	ldr	r1, [pc, #116]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011e70:	4613      	mov	r3, r2
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	440b      	add	r3, r1
 8011e7a:	3304      	adds	r3, #4
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d10a      	bne.n	8011e98 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8011e82:	79fa      	ldrb	r2, [r7, #7]
 8011e84:	4917      	ldr	r1, [pc, #92]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011e86:	4613      	mov	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	440b      	add	r3, r1
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	88ba      	ldrh	r2, [r7, #4]
 8011e94:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011e96:	e01f      	b.n	8011ed8 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8011e98:	79fa      	ldrb	r2, [r7, #7]
 8011e9a:	4912      	ldr	r1, [pc, #72]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4413      	add	r3, r2
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	440b      	add	r3, r1
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b08      	cmp	r3, #8
 8011eac:	d10a      	bne.n	8011ec4 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8011eae:	79fa      	ldrb	r2, [r7, #7]
 8011eb0:	490c      	ldr	r1, [pc, #48]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4413      	add	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	440b      	add	r3, r1
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	88ba      	ldrh	r2, [r7, #4]
 8011ec0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8011ec2:	e009      	b.n	8011ed8 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8011ec4:	79fa      	ldrb	r2, [r7, #7]
 8011ec6:	4907      	ldr	r1, [pc, #28]	; (8011ee4 <DC_MOTOR_Set_Speed+0xb4>)
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	440b      	add	r3, r1
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	88ba      	ldrh	r2, [r7, #4]
 8011ed6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011ed8:	bf00      	nop
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	080122bc 	.word	0x080122bc

08011ee8 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8011eec:	4b14      	ldr	r3, [pc, #80]	; (8011f40 <DWT_Delay_Init+0x58>)
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	4a13      	ldr	r2, [pc, #76]	; (8011f40 <DWT_Delay_Init+0x58>)
 8011ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011ef6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8011ef8:	4b11      	ldr	r3, [pc, #68]	; (8011f40 <DWT_Delay_Init+0x58>)
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	4a10      	ldr	r2, [pc, #64]	; (8011f40 <DWT_Delay_Init+0x58>)
 8011efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011f02:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a0e      	ldr	r2, [pc, #56]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f0a:	f023 0301 	bic.w	r3, r3, #1
 8011f0e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8011f10:	4b0c      	ldr	r3, [pc, #48]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a0b      	ldr	r2, [pc, #44]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f16:	f043 0301 	orr.w	r3, r3, #1
 8011f1a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8011f1c:	4b09      	ldr	r3, [pc, #36]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8011f22:	bf00      	nop
    __ASM volatile ("NOP");
 8011f24:	bf00      	nop
    __ASM volatile ("NOP");
 8011f26:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8011f28:	4b06      	ldr	r3, [pc, #24]	; (8011f44 <DWT_Delay_Init+0x5c>)
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8011f30:	2300      	movs	r3, #0
 8011f32:	e000      	b.n	8011f36 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8011f34:	2301      	movs	r3, #1
    }
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr
 8011f40:	e000edf0 	.word	0xe000edf0
 8011f44:	e0001000 	.word	0xe0001000

08011f48 <__libc_init_array>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4d0d      	ldr	r5, [pc, #52]	; (8011f80 <__libc_init_array+0x38>)
 8011f4c:	4c0d      	ldr	r4, [pc, #52]	; (8011f84 <__libc_init_array+0x3c>)
 8011f4e:	1b64      	subs	r4, r4, r5
 8011f50:	10a4      	asrs	r4, r4, #2
 8011f52:	2600      	movs	r6, #0
 8011f54:	42a6      	cmp	r6, r4
 8011f56:	d109      	bne.n	8011f6c <__libc_init_array+0x24>
 8011f58:	4d0b      	ldr	r5, [pc, #44]	; (8011f88 <__libc_init_array+0x40>)
 8011f5a:	4c0c      	ldr	r4, [pc, #48]	; (8011f8c <__libc_init_array+0x44>)
 8011f5c:	f000 f842 	bl	8011fe4 <_init>
 8011f60:	1b64      	subs	r4, r4, r5
 8011f62:	10a4      	asrs	r4, r4, #2
 8011f64:	2600      	movs	r6, #0
 8011f66:	42a6      	cmp	r6, r4
 8011f68:	d105      	bne.n	8011f76 <__libc_init_array+0x2e>
 8011f6a:	bd70      	pop	{r4, r5, r6, pc}
 8011f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f70:	4798      	blx	r3
 8011f72:	3601      	adds	r6, #1
 8011f74:	e7ee      	b.n	8011f54 <__libc_init_array+0xc>
 8011f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f7a:	4798      	blx	r3
 8011f7c:	3601      	adds	r6, #1
 8011f7e:	e7f2      	b.n	8011f66 <__libc_init_array+0x1e>
 8011f80:	080122ec 	.word	0x080122ec
 8011f84:	080122ec 	.word	0x080122ec
 8011f88:	080122ec 	.word	0x080122ec
 8011f8c:	080122f0 	.word	0x080122f0

08011f90 <memcpy>:
 8011f90:	440a      	add	r2, r1
 8011f92:	4291      	cmp	r1, r2
 8011f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f98:	d100      	bne.n	8011f9c <memcpy+0xc>
 8011f9a:	4770      	bx	lr
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fa6:	4291      	cmp	r1, r2
 8011fa8:	d1f9      	bne.n	8011f9e <memcpy+0xe>
 8011faa:	bd10      	pop	{r4, pc}

08011fac <memset>:
 8011fac:	4402      	add	r2, r0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d100      	bne.n	8011fb6 <memset+0xa>
 8011fb4:	4770      	bx	lr
 8011fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8011fba:	e7f9      	b.n	8011fb0 <memset+0x4>

08011fbc <strncpy>:
 8011fbc:	b510      	push	{r4, lr}
 8011fbe:	3901      	subs	r1, #1
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	b132      	cbz	r2, 8011fd2 <strncpy+0x16>
 8011fc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011fc8:	f803 4b01 	strb.w	r4, [r3], #1
 8011fcc:	3a01      	subs	r2, #1
 8011fce:	2c00      	cmp	r4, #0
 8011fd0:	d1f7      	bne.n	8011fc2 <strncpy+0x6>
 8011fd2:	441a      	add	r2, r3
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d100      	bne.n	8011fdc <strncpy+0x20>
 8011fda:	bd10      	pop	{r4, pc}
 8011fdc:	f803 1b01 	strb.w	r1, [r3], #1
 8011fe0:	e7f9      	b.n	8011fd6 <strncpy+0x1a>
	...

08011fe4 <_init>:
 8011fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe6:	bf00      	nop
 8011fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fea:	bc08      	pop	{r3}
 8011fec:	469e      	mov	lr, r3
 8011fee:	4770      	bx	lr

08011ff0 <_fini>:
 8011ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff2:	bf00      	nop
 8011ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ff6:	bc08      	pop	{r3}
 8011ff8:	469e      	mov	lr, r3
 8011ffa:	4770      	bx	lr
