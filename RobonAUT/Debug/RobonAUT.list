
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112cc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08011494  08011494  00021494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801177c  0801177c  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801177c  0801177c  0002177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011784  08011784  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011784  08011784  00021784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011788  08011788  00021788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0801178c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f78  200001b8  08011944  000301b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a130  08011944  0003a130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032a08  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003efe  00000000  00000000  00062bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00066af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  00068700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002942e  00000000  00000000  0006a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027765  00000000  00000000  000935ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6980  00000000  00000000  000bad53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b16d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af0  00000000  00000000  001b1728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b8 	.word	0x200001b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0801147c 	.word	0x0801147c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001bc 	.word	0x200001bc
 8000204:	0801147c 	.word	0x0801147c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96e 	b.w	8000e88 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	4604      	mov	r4, r0
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8083 	bne.w	8000cda <__udivmoddi4+0x116>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d947      	bls.n	8000c6a <__udivmoddi4+0xa6>
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	b142      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000be0:	f1c2 0020 	rsb	r0, r2, #32
 8000be4:	fa24 f000 	lsr.w	r0, r4, r0
 8000be8:	4091      	lsls	r1, r2
 8000bea:	4097      	lsls	r7, r2
 8000bec:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf0:	4094      	lsls	r4, r2
 8000bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bfc:	fa1f fe87 	uxth.w	lr, r7
 8000c00:	fb08 c116 	mls	r1, r8, r6, ip
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f10e 	mul.w	r1, r6, lr
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x60>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 8119 	bcs.w	8000e4c <__udivmoddi4+0x288>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 8116 	bls.w	8000e4c <__udivmoddi4+0x288>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	443b      	add	r3, r7
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x8c>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	f080 8105 	bcs.w	8000e50 <__udivmoddi4+0x28c>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f240 8102 	bls.w	8000e50 <__udivmoddi4+0x28c>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	443c      	add	r4, r7
 8000c50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c54:	eba4 040e 	sub.w	r4, r4, lr
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa0>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xaa>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d150      	bne.n	8000d18 <__udivmoddi4+0x154>
 8000c76:	1bcb      	subs	r3, r1, r7
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	2601      	movs	r6, #1
 8000c82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c86:	0c21      	lsrs	r1, r4, #16
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb08 f30c 	mul.w	r3, r8, ip
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xe4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0xe2>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f200 80e9 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1ac9      	subs	r1, r1, r3
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x10c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x10a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80d9 	bhi.w	8000e80 <__udivmoddi4+0x2bc>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e7bf      	b.n	8000c5a <__udivmoddi4+0x96>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d909      	bls.n	8000cf2 <__udivmoddi4+0x12e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <__udivmoddi4+0x282>
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cea:	4630      	mov	r0, r6
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	fab3 f683 	clz	r6, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d14a      	bne.n	8000d90 <__udivmoddi4+0x1cc>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0x140>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 80b8 	bhi.w	8000e74 <__udivmoddi4+0x2b0>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0a8      	beq.n	8000c64 <__udivmoddi4+0xa0>
 8000d12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d20:	4097      	lsls	r7, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2a:	40d9      	lsrs	r1, r3
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d40:	fb06 f108 	mul.w	r1, r6, r8
 8000d44:	4299      	cmp	r1, r3
 8000d46:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x19c>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d52:	f080 808d 	bcs.w	8000e70 <__udivmoddi4+0x2ac>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 808a 	bls.w	8000e70 <__udivmoddi4+0x2ac>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	443b      	add	r3, r7
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b281      	uxth	r1, r0
 8000d64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb00 f308 	mul.w	r3, r0, r8
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1c4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7e:	d273      	bcs.n	8000e68 <__udivmoddi4+0x2a4>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d971      	bls.n	8000e68 <__udivmoddi4+0x2a4>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4439      	add	r1, r7
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8e:	e778      	b.n	8000c82 <__udivmoddi4+0xbe>
 8000d90:	f1c6 0c20 	rsb	ip, r6, #32
 8000d94:	fa03 f406 	lsl.w	r4, r3, r6
 8000d98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da2:	fa01 f306 	lsl.w	r3, r1, r6
 8000da6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	0c3b      	lsrs	r3, r7, #16
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fa1f f884 	uxth.w	r8, r4
 8000dba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x220>
 8000dd2:	1861      	adds	r1, r4, r1
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d248      	bcs.n	8000e6c <__udivmoddi4+0x2a8>
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	d946      	bls.n	8000e6c <__udivmoddi4+0x2a8>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	4421      	add	r1, r4
 8000de4:	eba1 010a 	sub.w	r1, r1, sl
 8000de8:	b2bf      	uxth	r7, r7
 8000dea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df6:	fb00 f808 	mul.w	r8, r0, r8
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x24a>
 8000dfe:	19e7      	adds	r7, r4, r7
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d22e      	bcs.n	8000e64 <__udivmoddi4+0x2a0>
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d92c      	bls.n	8000e64 <__udivmoddi4+0x2a0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4427      	add	r7, r4
 8000e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e12:	eba7 0708 	sub.w	r7, r7, r8
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	454f      	cmp	r7, r9
 8000e1c:	46c6      	mov	lr, r8
 8000e1e:	4649      	mov	r1, r9
 8000e20:	d31a      	bcc.n	8000e58 <__udivmoddi4+0x294>
 8000e22:	d017      	beq.n	8000e54 <__udivmoddi4+0x290>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x27a>
 8000e26:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e32:	40f2      	lsrs	r2, r6
 8000e34:	ea4c 0202 	orr.w	r2, ip, r2
 8000e38:	40f7      	lsrs	r7, r6
 8000e3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	462e      	mov	r6, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fd      	b.n	8000c50 <__udivmoddi4+0x8c>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d2e5      	bcs.n	8000e24 <__udivmoddi4+0x260>
 8000e58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e60:	3801      	subs	r0, #1
 8000e62:	e7df      	b.n	8000e24 <__udivmoddi4+0x260>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e7d2      	b.n	8000e0e <__udivmoddi4+0x24a>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	e78d      	b.n	8000d88 <__udivmoddi4+0x1c4>
 8000e6c:	4681      	mov	r9, r0
 8000e6e:	e7b9      	b.n	8000de4 <__udivmoddi4+0x220>
 8000e70:	4666      	mov	r6, ip
 8000e72:	e775      	b.n	8000d60 <__udivmoddi4+0x19c>
 8000e74:	4630      	mov	r0, r6
 8000e76:	e74a      	b.n	8000d0e <__udivmoddi4+0x14a>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	4439      	add	r1, r7
 8000e7e:	e713      	b.n	8000ca8 <__udivmoddi4+0xe4>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	e724      	b.n	8000cd0 <__udivmoddi4+0x10c>
 8000e86:	bf00      	nop

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b0a8      	sub	sp, #160	; 0xa0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000ece:	f010 fa57 	bl	8011380 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4aaa      	ldr	r2, [pc, #680]	; (8001180 <SERVO_Init+0x2f4>)
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	4413      	add	r3, r2
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fad4 	bl	800048c <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4ba6      	ldr	r3, [pc, #664]	; (8001184 <SERVO_Init+0x2f8>)
 8000eea:	f7ff fc73 	bl	80007d4 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddd 	bl	8000ab4 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a9f      	ldr	r2, [pc, #636]	; (8001180 <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fabd 	bl	800048c <__aeabi_ui2d>
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
 8000f16:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f1a:	f7ff fab7 	bl	800048c <__aeabi_ui2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b99      	ldr	r3, [pc, #612]	; (8001188 <SERVO_Init+0x2fc>)
 8000f24:	f7ff f976 	bl	8000214 <__adddf3>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b95      	ldr	r3, [pc, #596]	; (800118c <SERVO_Init+0x300>)
 8000f36:	f7ff fb23 	bl	8000580 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc47 	bl	80007d4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <SERVO_Init+0x2fc>)
 8000f54:	f7ff f95c 	bl	8000210 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fda8 	bl	8000ab4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f6a:	2313      	movs	r3, #19
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f70:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4a81      	ldr	r2, [pc, #516]	; (8001180 <SERVO_Init+0x2f4>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a82      	ldr	r2, [pc, #520]	; (8001190 <SERVO_Init+0x304>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	; (8001194 <SERVO_Init+0x308>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <SERVO_Init+0x308>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	e046      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a75      	ldr	r2, [pc, #468]	; (8001180 <SERVO_Init+0x2f4>)
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10e      	bne.n	8000fd8 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <SERVO_Init+0x308>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <SERVO_Init+0x308>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e02e      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a69      	ldr	r2, [pc, #420]	; (8001180 <SERVO_Init+0x2f4>)
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <SERVO_Init+0x30c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b69      	ldr	r3, [pc, #420]	; (8001194 <SERVO_Init+0x308>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a68      	ldr	r2, [pc, #416]	; (8001194 <SERVO_Init+0x308>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <SERVO_Init+0x308>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	e016      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <SERVO_Init+0x2f4>)
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4413      	add	r3, r2
 8001010:	3308      	adds	r3, #8
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <SERVO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <SERVO_Init+0x308>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <SERVO_Init+0x308>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <SERVO_Init+0x308>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <SERVO_Init+0x2f4>)
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	4413      	add	r3, r2
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8001044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001048:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 800104e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fc0d 	bl	8008880 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800106e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fcb7 	bl	80099ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fdb2 	bl	8008bec <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001094:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fc44 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4a32      	ldr	r2, [pc, #200]	; (8001180 <SERVO_Init+0x2f4>)
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	4413      	add	r3, r2
 80010bc:	3310      	adds	r3, #16
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fab7 	bl	800963c <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010d2:	f7ff f9db 	bl	800048c <__aeabi_ui2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <SERVO_Init+0x2f4>)
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	4413      	add	r3, r2
 80010e2:	3318      	adds	r3, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9f2 	bl	80004d0 <__aeabi_f2d>
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SERVO_Init+0x314>)
 80010f2:	f7ff fb6f 	bl	80007d4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fa3f 	bl	8000580 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	88fc      	ldrh	r4, [r7, #6]
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcd2 	bl	8000ab4 <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SERVO_Init+0x318>)
 8001116:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800111a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800111e:	f7ff f9b5 	bl	800048c <__aeabi_ui2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SERVO_Init+0x31c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9d1 	bl	80004d0 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SERVO_Init+0x314>)
 8001134:	f7ff fb4e 	bl	80007d4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa1e 	bl	8000580 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	88fc      	ldrh	r4, [r7, #6]
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b299      	uxth	r1, r3
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SERVO_Init+0x318>)
 8001158:	00a3      	lsls	r3, r4, #2
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SERVO_Init+0x2f4>)
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	4413      	add	r3, r2
 8001168:	3310      	adds	r3, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fe2a 	bl	8008dcc <HAL_TIM_PWM_Start>

}
 8001178:	bf00      	nop
 800117a:	37a0      	adds	r7, #160	; 0xa0
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	08011714 	.word	0x08011714
 8001184:	41490000 	.word	0x41490000
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	40490000 	.word	0x40490000
 8001190:	40001800 	.word	0x40001800
 8001194:	40023800 	.word	0x40023800
 8001198:	40000400 	.word	0x40000400
 800119c:	40000800 	.word	0x40000800
 80011a0:	40340000 	.word	0x40340000
 80011a4:	200001d4 	.word	0x200001d4
 80011a8:	400ccccd 	.word	0x400ccccd

080011ac <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	ed87 0a00 	vstr	s0, [r7]
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <SERVO_MoveTo+0x94>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SERVO_MoveTo+0x94>)
 80011ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f972 	bl	80004d0 <__aeabi_f2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SERVO_MoveTo+0x98>)
 80011f2:	f7ff faef 	bl	80007d4 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SERVO_MoveTo+0x94>)
 8001202:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f950 	bl	80004ac <__aeabi_i2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7fe fffe 	bl	8000214 <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc48 	bl	8000ab4 <__aeabi_d2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SERVO_MoveTo+0x9c>)
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	4413      	add	r3, r2
 8001230:	330c      	adds	r3, #12
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	200001d4 	.word	0x200001d4
 8001244:	40668000 	.word	0x40668000
 8001248:	08011714 	.word	0x08011714

0800124c <HAL_UART_RxCpltCallback>:
void Iranyok_osszeallito(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d11f      	bne.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x50>
		timer_counter += 1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800127a:	701a      	strb	r2, [r3, #0]
		if(9 < timer_counter) {
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d915      	bls.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x50>
			Vonalas_tombok_torlese();
 8001284:	f001 fb3a 	bl	80028fc <Vonalas_tombok_torlese>
			Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001288:	490d      	ldr	r1, [pc, #52]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800128c:	f000 fec0 	bl	8002010 <Vonalszenzor_operal>
			Vonalas_tombok_feltoltese();
 8001290:	f001 fb8a 	bl	80029a8 <Vonalas_tombok_feltoltese>
			Irany_valaszto();
 8001294:	f001 fcb2 	bl	8002bfc <Irany_valaszto>
			Kovetendo_vonal_valaszto(&vonal_kovetni_e, &vonal_kovetni_h, aktualis_irany);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	490b      	ldr	r1, [pc, #44]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80012a2:	f001 fd61 	bl	8002d68 <Kovetendo_vonal_valaszto>
			Szervo_szog_beallit();
 80012a6:	f001 ffd7 	bl	8003258 <Szervo_szog_beallit>
			timer_counter = 0;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);*/
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20001738 	.word	0x20001738
 80012bc:	20000255 	.word	0x20000255
 80012c0:	20000200 	.word	0x20000200
 80012c4:	200001dc 	.word	0x200001dc
 80012c8:	2000013d 	.word	0x2000013d
 80012cc:	20000228 	.word	0x20000228
 80012d0:	20000230 	.word	0x20000230

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80012da:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 80012dc:	463b      	mov	r3, r7
 80012de:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f003 fa77 	bl	80047d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f965 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 fdb5 	bl	8001e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ee:	f000 fd69 	bl	8001dc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012f2:	f000 f9d1 	bl	8001698 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012f6:	f000 f9fd 	bl	80016f4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012fa:	f000 fa8d 	bl	8001818 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012fe:	f000 fac1 	bl	8001884 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001302:	f000 fb41 	bl	8001988 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001306:	f000 fb99 	bl	8001a3c <MX_TIM4_Init>
  MX_UART4_Init();
 800130a:	f000 fd07 	bl	8001d1c <MX_UART4_Init>
  MX_TIM8_Init();
 800130e:	f000 fbe9 	bl	8001ae4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001312:	f000 fd2d 	bl	8001d70 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001316:	f000 fa1b 	bl	8001750 <MX_I2C3_Init>
  MX_TIM12_Init();
 800131a:	f000 fc8f 	bl	8001c3c <MX_TIM12_Init>
  MX_DMA_Init();
 800131e:	f000 fd7b 	bl	8001e18 <MX_DMA_Init>
  MX_TIM2_Init();
 8001322:	f000 fae5 	bl	80018f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001326:	f000 fa41 	bl	80017ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fdae 	bl	8000e8c <SERVO_Init>
	SERVO_MoveTo(SZERVO, 90);
 8001330:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8001580 <main+0x2ac>
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff39 	bl	80011ac <SERVO_MoveTo>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800133a:	2000      	movs	r0, #0
 800133c:	f00f fe92 	bl	8011064 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001340:	2001      	movs	r0, #1
 8001342:	f00f fe8f 	bl	8011064 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f00f ff61 	bl	8011210 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2001      	movs	r0, #1
 8001352:	f00f ff5d 	bl	8011210 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135c:	4889      	ldr	r0, [pc, #548]	; (8001584 <main+0x2b0>)
 800135e:	f004 fc1d 	bl	8005b9c <HAL_GPIO_WritePin>
	motvez_k = 455;
 8001362:	4b89      	ldr	r3, [pc, #548]	; (8001588 <main+0x2b4>)
 8001364:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001368:	601a      	str	r2, [r3, #0]

	Vonalszenzor_minta_kuldes(leszed);
 800136a:	4888      	ldr	r0, [pc, #544]	; (800158c <main+0x2b8>)
 800136c:	f001 fa9e 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(teszt_minta);		//csak hogy lassuk, hogy bekapcsolt
 8001370:	4887      	ldr	r0, [pc, #540]	; (8001590 <main+0x2bc>)
 8001372:	f001 fa9b 	bl	80028ac <Vonalszenzor_minta_kuldes>
	HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f003 fa9e 	bl	80048b8 <HAL_Delay>
	Vonalszenzor_minta_kuldes(leszed);
 800137c:	4883      	ldr	r0, [pc, #524]	; (800158c <main+0x2b8>)
 800137e:	f001 fa95 	bl	80028ac <Vonalszenzor_minta_kuldes>
	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001382:	4884      	ldr	r0, [pc, #528]	; (8001594 <main+0x2c0>)
 8001384:	f007 fb6c 	bl	8008a60 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001388:	2104      	movs	r1, #4
 800138a:	4883      	ldr	r0, [pc, #524]	; (8001598 <main+0x2c4>)
 800138c:	f007 fd1e 	bl	8008dcc <HAL_TIM_PWM_Start>

	//Vonalszenzor inicializacio
	Vonalszenzor_Init();
 8001390:	f000 fe2c 	bl	8001fec <Vonalszenzor_Init>

	Graf_irany_feltolt();
 8001394:	f002 f812 	bl	80033bc <Graf_irany_feltolt>
	Iranyok_torlo();
 8001398:	f002 fc10 	bl	8003bbc <Iranyok_torlo>
	Iranyok_osszeallito();
 800139c:	f002 fc28 	bl	8003bf0 <Iranyok_osszeallito>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 80013a0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013a4:	4a7d      	ldr	r2, [pc, #500]	; (800159c <main+0x2c8>)
 80013a6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80013aa:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013ae:	2252      	movs	r2, #82	; 0x52
 80013b0:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 80013b4:	2314      	movs	r3, #20
 80013b6:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 80013ba:	23ff      	movs	r3, #255	; 0xff
 80013bc:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 80013c0:	23ff      	movs	r3, #255	; 0xff
 80013c2:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80013c6:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2303      	movs	r3, #3
 80013d2:	2184      	movs	r1, #132	; 0x84
 80013d4:	4871      	ldr	r0, [pc, #452]	; (800159c <main+0x2c8>)
 80013d6:	f004 fdf7 	bl	8005fc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 80013da:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2303      	movs	r3, #3
 80013e6:	2186      	movs	r1, #134	; 0x86
 80013e8:	486c      	ldr	r0, [pc, #432]	; (800159c <main+0x2c8>)
 80013ea:	f004 fded 	bl	8005fc8 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80013ee:	2313      	movs	r3, #19
 80013f0:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80013f4:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80013f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2184      	movs	r1, #132	; 0x84
 8001402:	4866      	ldr	r0, [pc, #408]	; (800159c <main+0x2c8>)
 8001404:	f004 fde0 	bl	8005fc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001408:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800140c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	2184      	movs	r1, #132	; 0x84
 8001416:	4861      	ldr	r0, [pc, #388]	; (800159c <main+0x2c8>)
 8001418:	f004 fed4 	bl	80061c4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 800141c:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 8001420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800142a:	2313      	movs	r3, #19
 800142c:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001430:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2302      	movs	r3, #2
 800143c:	2184      	movs	r1, #132	; 0x84
 800143e:	4857      	ldr	r0, [pc, #348]	; (800159c <main+0x2c8>)
 8001440:	f004 fdc2 	bl	8005fc8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 8001444:	2002      	movs	r0, #2
 8001446:	f003 fa37 	bl	80048b8 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 800144a:	2313      	movs	r3, #19
 800144c:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001450:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	2184      	movs	r1, #132	; 0x84
 800145e:	484f      	ldr	r0, [pc, #316]	; (800159c <main+0x2c8>)
 8001460:	f004 fdb2 	bl	8005fc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001464:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	2184      	movs	r1, #132	; 0x84
 8001472:	484a      	ldr	r0, [pc, #296]	; (800159c <main+0x2c8>)
 8001474:	f004 fea6 	bl	80061c4 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001478:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 800147c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001486:	2313      	movs	r3, #19
 8001488:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 800148c:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8001490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2302      	movs	r3, #2
 8001498:	2184      	movs	r1, #132	; 0x84
 800149a:	4840      	ldr	r0, [pc, #256]	; (800159c <main+0x2c8>)
 800149c:	f004 fd94 	bl	8005fc8 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 80014a0:	2002      	movs	r0, #2
 80014a2:	f003 fa09 	bl	80048b8 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 80014a6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014aa:	f00a fb81 	bl	800bbb0 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 80014ae:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014b2:	f00a fb25 	bl	800bb00 <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 80014b6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014ba:	f00a fb5a 	bl	800bb72 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 80014be:	2103      	movs	r1, #3
 80014c0:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014c4:	f00a fca6 	bl	800be14 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 80014c8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80014cc:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014d0:	f00a fd16 	bl	800bf00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 80014d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014d8:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014dc:	f00a fe9c 	bl	800c218 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 80014e0:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014e4:	f00a ffd6 	bl	800c494 <VL53L1_StartMeasurement>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 80014e8:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014ec:	f00b f854 	bl	800c598 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80014f0:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80014f4:	4619      	mov	r1, r3
 80014f6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80014fa:	f00b fa09 	bl	800c910 <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 80014fe:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8001502:	f00b f833 	bl	800c56c <VL53L1_ClearInterruptAndStartMeasurement>

		if (btnEnable == 1) {
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <main+0x2cc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d117      	bne.n	800153e <main+0x26a>
			if (motvezEnable == 1) {
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <main+0x2d0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d1e8      	bne.n	80014e8 <main+0x214>
					motvez_k = motvez_d / 2;
					tolatas = true;
					kormanyzas_agresszivitas = 0.7;
				}*/
				//if (motvez_d /2 > motvez_k) {							// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_k); 		// ha pwm1 nagyobb, hatramenet
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <main+0x2b4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	2000      	movs	r0, #0
 8001520:	f00f fed2 	bl	80112c8 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - motvez_k);
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <main+0x2d4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <main+0x2b4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	b29b      	uxth	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	2001      	movs	r0, #1
 8001538:	f00f fec6 	bl	80112c8 <DC_MOTOR_Set_Speed>
 800153c:	e7d4      	b.n	80014e8 <main+0x214>
				//}
			}
		} else {
			veretesi_cnt = 0;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <main+0x2d8>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
			fekezes_cnt = 0;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <main+0x2dc>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
			//SERVO_MoveTo(SZERVO, 90);
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);	// ez a ketto a megallas
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <main+0x2d4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	2000      	movs	r0, #0
 800155a:	f00f feb5 	bl	80112c8 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <main+0x2d4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0fda      	lsrs	r2, r3, #31
 8001564:	4413      	add	r3, r2
 8001566:	105b      	asrs	r3, r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <main+0x2d4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	2001      	movs	r0, #1
 800157a:	f00f fea5 	bl	80112c8 <DC_MOTOR_Set_Speed>
		VL53L1_WaitMeasurementDataReady( Dev );
 800157e:	e7b3      	b.n	80014e8 <main+0x214>
 8001580:	42b40000 	.word	0x42b40000
 8001584:	40020400 	.word	0x40020400
 8001588:	20000248 	.word	0x20000248
 800158c:	20000004 	.word	0x20000004
 8001590:	2000000c 	.word	0x2000000c
 8001594:	20001738 	.word	0x20001738
 8001598:	200017c4 	.word	0x200017c4
 800159c:	200003ac 	.word	0x200003ac
 80015a0:	200001d8 	.word	0x200001d8
 80015a4:	20000001 	.word	0x20000001
 80015a8:	20000150 	.word	0x20000150
 80015ac:	2000024c 	.word	0x2000024c
 80015b0:	20000250 	.word	0x20000250

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2234      	movs	r2, #52	; 0x34
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00f ff3e 	bl	8011444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <SystemClock_Config+0xdc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a2b      	ldr	r2, [pc, #172]	; (8001690 <SystemClock_Config+0xdc>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <SystemClock_Config+0xdc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <SystemClock_Config+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <SystemClock_Config+0xe0>)
 80015fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <SystemClock_Config+0xe0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	2302      	movs	r3, #2
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001624:	2304      	movs	r3, #4
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001628:	23b4      	movs	r3, #180	; 0xb4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fef1 	bl	8007424 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001648:	f002 fb5a 	bl	8003d00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800164c:	f005 fb0e 	bl	8006c6c <HAL_PWREx_EnableOverDrive>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001656:	f002 fb53 	bl	8003d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2302      	movs	r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001666:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800166c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2105      	movs	r1, #5
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fb47 	bl	8006d0c <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001684:	f002 fb3c 	bl	8003d00 <Error_Handler>
  }
}
 8001688:	bf00      	nop
 800168a:	3750      	adds	r7, #80	; 0x50
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f004 faab 	bl	8005c30 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f002 fb0e 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200003ac 	.word	0x200003ac
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C2_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <MX_I2C2_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C2_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_I2C2_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C2_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_I2C2_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_I2C2_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_I2C2_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_I2C2_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_I2C2_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_I2C2_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_I2C2_Init+0x50>)
 8001732:	f004 fa7d 	bl	8005c30 <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800173c:	f002 fae0 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000400 	.word	0x20000400
 8001748:	40005800 	.word	0x40005800
 800174c:	000186a0 	.word	0x000186a0

08001750 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_I2C3_Init+0x54>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C3_Init+0x50>)
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_I2C3_Init+0x58>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_I2C3_Init+0x50>)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_I2C3_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_I2C3_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C3_Init+0x50>)
 800178e:	f004 fa4f 	bl	8005c30 <HAL_I2C_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001798:	f002 fab2 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000270 	.word	0x20000270
 80017a4:	40005c00 	.word	0x40005c00
 80017a8:	000186a0 	.word	0x000186a0

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_SPI1_Init+0x64>)
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <MX_SPI1_Init+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI1_Init+0x64>)
 80017b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI1_Init+0x64>)
 80017d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_SPI1_Init+0x64>)
 80017e0:	2220      	movs	r2, #32
 80017e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI1_Init+0x64>)
 80017f8:	220a      	movs	r2, #10
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_SPI1_Init+0x64>)
 80017fe:	f006 f96f 	bl	8007ae0 <HAL_SPI_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001808:	f002 fa7a 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200016e0 	.word	0x200016e0
 8001814:	40013000 	.word	0x40013000

08001818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_SPI2_Init+0x64>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <MX_SPI2_Init+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_SPI2_Init+0x64>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI2_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_SPI2_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_SPI2_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI2_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_SPI2_Init+0x64>)
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI2_Init+0x64>)
 800184c:	2218      	movs	r2, #24
 800184e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_SPI2_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI2_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_SPI2_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SPI2_Init+0x64>)
 8001864:	220a      	movs	r2, #10
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_SPI2_Init+0x64>)
 800186a:	f006 f939 	bl	8007ae0 <HAL_SPI_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001874:	f002 fa44 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200002c4 	.word	0x200002c4
 8001880:	40003800 	.word	0x40003800

08001884 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_SPI3_Init+0x64>)
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <MX_SPI3_Init+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_SPI3_Init+0x64>)
 8001890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001894:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_SPI3_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_SPI3_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018d0:	220a      	movs	r2, #10
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_SPI3_Init+0x64>)
 80018d6:	f006 f903 	bl	8007ae0 <HAL_SPI_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018e0:	f002 fa0e 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000049c 	.word	0x2000049c
 80018ec:	40003c00 	.word	0x40003c00

080018f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_TIM2_Init+0x94>)
 800190e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_TIM2_Init+0x94>)
 8001916:	f240 12f3 	movw	r2, #499	; 0x1f3
 800191a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_TIM2_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_TIM2_Init+0x94>)
 8001924:	2259      	movs	r2, #89	; 0x59
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_TIM2_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_TIM2_Init+0x94>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_TIM2_Init+0x94>)
 8001936:	f006 ffa3 	bl	8008880 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001940:	f002 f9de 	bl	8003d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_TIM2_Init+0x94>)
 8001952:	f008 f84b 	bl	80099ec <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800195c:	f002 f9d0 	bl	8003d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM2_Init+0x94>)
 800196e:	f008 ffdd 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001978:	f002 f9c2 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20001738 	.word	0x20001738

08001988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019ac:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <MX_TIM3_Init+0xb0>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d0:	4818      	ldr	r0, [pc, #96]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019d2:	f007 f90b 	bl	8008bec <HAL_TIM_PWM_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019dc:	f002 f990 	bl	8003d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4619      	mov	r1, r3
 80019ee:	4811      	ldr	r0, [pc, #68]	; (8001a34 <MX_TIM3_Init+0xac>)
 80019f0:	f008 ff9c 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019fa:	f002 f981 	bl	8003d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fe:	2360      	movs	r3, #96	; 0x60
 8001a00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_TIM3_Init+0xac>)
 8001a16:	f007 fe11 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a20:	f002 f96e 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <MX_TIM3_Init+0xac>)
 8001a26:	f002 fcc3 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000454 	.word	0x20000454
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00f fcfa 	bl	8011444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <MX_TIM4_Init+0xa4>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001aaa:	f007 fb17 	bl	80090dc <HAL_TIM_Encoder_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ab4:	f002 f924 	bl	8003d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_TIM4_Init+0xa0>)
 8001ac6:	f008 ff31 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ad0:	f002 f916 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000364 	.word	0x20000364
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b096      	sub	sp, #88	; 0x58
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2220      	movs	r2, #32
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00f fc91 	bl	8011444 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b24:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <MX_TIM8_Init+0x154>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b30:	2260      	movs	r2, #96	; 0x60
 8001b32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b34:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b4e:	4839      	ldr	r0, [pc, #228]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b50:	f006 fe96 	bl	8008880 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b5a:	f002 f8d1 	bl	8003d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b6c:	f007 ff3e 	bl	80099ec <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b76:	f002 f8c3 	bl	8003d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b7c:	f007 f836 	bl	8008bec <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b86:	f002 f8bb 	bl	8003d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b96:	4619      	mov	r1, r3
 8001b98:	4826      	ldr	r0, [pc, #152]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001b9a:	f008 fec7 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ba4:	f002 f8ac 	bl	8003d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba8:	2360      	movs	r3, #96	; 0x60
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4819      	ldr	r0, [pc, #100]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001bce:	f007 fd35 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001bd8:	f002 f892 	bl	8003d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	2208      	movs	r2, #8
 8001be2:	4619      	mov	r1, r3
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001be6:	f007 fd29 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001bf0:	f002 f886 	bl	8003d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001c18:	f008 ff66 	bl	800aae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c22:	f002 f86d 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM8_Init+0x150>)
 8001c28:	f002 fbc2 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 8001c2c:	bf00      	nop
 8001c2e:	3758      	adds	r7, #88	; 0x58
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000031c 	.word	0x2000031c
 8001c38:	40010400 	.word	0x40010400

08001c3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c64:	4a2c      	ldr	r2, [pc, #176]	; (8001d18 <MX_TIM12_Init+0xdc>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c6a:	2213      	movs	r2, #19
 8001c6c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c76:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c7a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c88:	4822      	ldr	r0, [pc, #136]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001c8a:	f006 fdf9 	bl	8008880 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c94:	f002 f834 	bl	8003d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481b      	ldr	r0, [pc, #108]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001ca6:	f007 fea1 	bl	80099ec <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001cb0:	f002 f826 	bl	8003d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001cb6:	f006 ff99 	bl	8008bec <HAL_TIM_PWM_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001cc0:	f002 f81e 	bl	8003d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc4:	2360      	movs	r3, #96	; 0x60
 8001cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480e      	ldr	r0, [pc, #56]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001cdc:	f007 fcae 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001ce6:	f002 f80b 	bl	8003d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2204      	movs	r2, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001cf2:	f007 fca3 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001cfc:	f002 f800 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001d02:	f006 fead 	bl	8008a60 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d06:	4803      	ldr	r0, [pc, #12]	; (8001d14 <MX_TIM12_Init+0xd8>)
 8001d08:	f002 fb52 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200017c4 	.word	0x200017c4
 8001d18:	40001800 	.word	0x40001800

08001d1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <MX_UART4_Init+0x50>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_UART4_Init+0x4c>)
 8001d54:	f008 ffa8 	bl	800aca8 <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d5e:	f001 ffcf 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000169c 	.word	0x2000169c
 8001d6c:	40004c00 	.word	0x40004c00

08001d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <MX_USART1_UART_Init+0x50>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_USART1_UART_Init+0x4c>)
 8001da8:	f008 ff7e 	bl	800aca8 <HAL_UART_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001db2:	f001 ffa5 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000554 	.word	0x20000554
 8001dc0:	40011000 	.word	0x40011000

08001dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_USART2_UART_Init+0x50>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	f008 ff54 	bl	800aca8 <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e06:	f001 ff7b 	bl	8003d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20001780 	.word	0x20001780
 8001e14:	40004400 	.word	0x40004400

08001e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_DMA_Init+0x3c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <MX_DMA_Init+0x3c>)
 8001e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_DMA_Init+0x3c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2010      	movs	r0, #16
 8001e40:	f002 fe4e 	bl	8004ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e44:	2010      	movs	r0, #16
 8001e46:	f002 fe77 	bl	8004b38 <HAL_NVIC_EnableIRQ>

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a43      	ldr	r2, [pc, #268]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001efa:	2200      	movs	r2, #0
 8001efc:	213d      	movs	r1, #61	; 0x3d
 8001efe:	4837      	ldr	r0, [pc, #220]	; (8001fdc <MX_GPIO_Init+0x184>)
 8001f00:	f003 fe4c 	bl	8005b9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	f641 0102 	movw	r1, #6146	; 0x1802
 8001f0a:	4835      	ldr	r0, [pc, #212]	; (8001fe0 <MX_GPIO_Init+0x188>)
 8001f0c:	f003 fe46 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	f241 0126 	movw	r1, #4134	; 0x1026
 8001f16:	4833      	ldr	r0, [pc, #204]	; (8001fe4 <MX_GPIO_Init+0x18c>)
 8001f18:	f003 fe40 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	482a      	ldr	r0, [pc, #168]	; (8001fdc <MX_GPIO_Init+0x184>)
 8001f34:	f003 fb0e 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f38:	233d      	movs	r3, #61	; 0x3d
 8001f3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4823      	ldr	r0, [pc, #140]	; (8001fdc <MX_GPIO_Init+0x184>)
 8001f50:	f003 fb00 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f54:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481c      	ldr	r0, [pc, #112]	; (8001fe0 <MX_GPIO_Init+0x188>)
 8001f6e:	f003 faf1 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f72:	2310      	movs	r3, #16
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4816      	ldr	r0, [pc, #88]	; (8001fe0 <MX_GPIO_Init+0x188>)
 8001f86:	f003 fae5 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001f8a:	f241 0326 	movw	r3, #4134	; 0x1026
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <MX_GPIO_Init+0x18c>)
 8001fa4:	f003 fad6 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <MX_GPIO_Init+0x190>)
 8001fbc:	f003 faca 	bl	8005554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2028      	movs	r0, #40	; 0x28
 8001fc6:	f002 fd8b 	bl	8004ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fca:	2028      	movs	r0, #40	; 0x28
 8001fcc:	f002 fdb4 	bl	8004b38 <HAL_NVIC_EnableIRQ>

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020c00 	.word	0x40020c00

08001fec <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <Vonalszenzor_Init+0x1c>)
 8001ff6:	f003 fdd1 	bl	8005b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <Vonalszenzor_Init+0x20>)
 8002000:	f003 fdcc 	bl	8005b9c <HAL_GPIO_WritePin>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800

08002010 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800201a:	48be      	ldr	r0, [pc, #760]	; (8002314 <Vonalszenzor_operal+0x304>)
 800201c:	f000 fc46 	bl	80028ac <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002020:	2370      	movs	r3, #112	; 0x70
 8002022:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 8002024:	48bc      	ldr	r0, [pc, #752]	; (8002318 <Vonalszenzor_operal+0x308>)
 8002026:	f000 fc41 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800202a:	4bbc      	ldr	r3, [pc, #752]	; (800231c <Vonalszenzor_operal+0x30c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f107 020c 	add.w	r2, r7, #12
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fc99 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0] - 5;
 800203a:	7b3a      	ldrb	r2, [r7, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3320      	adds	r3, #32
 8002040:	3a05      	subs	r2, #5
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002046:	4bb6      	ldr	r3, [pc, #728]	; (8002320 <Vonalszenzor_operal+0x310>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fc8b 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0] - 2;
 8002056:	7b3a      	ldrb	r2, [r7, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	331c      	adds	r3, #28
 800205c:	3a02      	subs	r2, #2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002062:	48ac      	ldr	r0, [pc, #688]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002064:	f000 fc22 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002068:	48ae      	ldr	r0, [pc, #696]	; (8002324 <Vonalszenzor_operal+0x314>)
 800206a:	f000 fc1f 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800206e:	4bab      	ldr	r3, [pc, #684]	; (800231c <Vonalszenzor_operal+0x30c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fc77 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3318      	adds	r3, #24
 8002082:	7b3a      	ldrb	r2, [r7, #12]
 8002084:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002086:	4ba6      	ldr	r3, [pc, #664]	; (8002320 <Vonalszenzor_operal+0x310>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	f107 020c 	add.w	r2, r7, #12
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fc6b 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3314      	adds	r3, #20
 800209a:	7b3a      	ldrb	r2, [r7, #12]
 800209c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800209e:	489d      	ldr	r0, [pc, #628]	; (8002314 <Vonalszenzor_operal+0x304>)
 80020a0:	f000 fc04 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 80020a4:	48a0      	ldr	r0, [pc, #640]	; (8002328 <Vonalszenzor_operal+0x318>)
 80020a6:	f000 fc01 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020aa:	4b9c      	ldr	r3, [pc, #624]	; (800231c <Vonalszenzor_operal+0x30c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fc59 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3310      	adds	r3, #16
 80020be:	7b3a      	ldrb	r2, [r7, #12]
 80020c0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020c2:	4b97      	ldr	r3, [pc, #604]	; (8002320 <Vonalszenzor_operal+0x310>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fc4d 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	330c      	adds	r3, #12
 80020d6:	7b3a      	ldrb	r2, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020da:	488e      	ldr	r0, [pc, #568]	; (8002314 <Vonalszenzor_operal+0x304>)
 80020dc:	f000 fbe6 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 80020e0:	4892      	ldr	r0, [pc, #584]	; (800232c <Vonalszenzor_operal+0x31c>)
 80020e2:	f000 fbe3 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020e6:	4b8d      	ldr	r3, [pc, #564]	; (800231c <Vonalszenzor_operal+0x30c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fc3b 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	7b3a      	ldrb	r2, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <Vonalszenzor_operal+0x310>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	f107 020c 	add.w	r2, r7, #12
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fc2f 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	7b3a      	ldrb	r2, [r7, #12]
 8002114:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002116:	487f      	ldr	r0, [pc, #508]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002118:	f000 fbc8 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 800211c:	4884      	ldr	r0, [pc, #528]	; (8002330 <Vonalszenzor_operal+0x320>)
 800211e:	f000 fbc5 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002122:	4b84      	ldr	r3, [pc, #528]	; (8002334 <Vonalszenzor_operal+0x324>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f107 020c 	add.w	r2, r7, #12
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fc1d 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	331f      	adds	r3, #31
 8002136:	7b3a      	ldrb	r2, [r7, #12]
 8002138:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <Vonalszenzor_operal+0x328>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	f107 020c 	add.w	r2, r7, #12
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fc11 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	331b      	adds	r3, #27
 800214e:	7b3a      	ldrb	r2, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002152:	4870      	ldr	r0, [pc, #448]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002154:	f000 fbaa 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002158:	4878      	ldr	r0, [pc, #480]	; (800233c <Vonalszenzor_operal+0x32c>)
 800215a:	f000 fba7 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800215e:	4b75      	ldr	r3, [pc, #468]	; (8002334 <Vonalszenzor_operal+0x324>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f107 020c 	add.w	r2, r7, #12
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fbff 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3317      	adds	r3, #23
 8002172:	7b3a      	ldrb	r2, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002176:	4b70      	ldr	r3, [pc, #448]	; (8002338 <Vonalszenzor_operal+0x328>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fbf3 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3313      	adds	r3, #19
 800218a:	7b3a      	ldrb	r2, [r7, #12]
 800218c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800218e:	4861      	ldr	r0, [pc, #388]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002190:	f000 fb8c 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 8002194:	486a      	ldr	r0, [pc, #424]	; (8002340 <Vonalszenzor_operal+0x330>)
 8002196:	f000 fb89 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800219a:	4b66      	ldr	r3, [pc, #408]	; (8002334 <Vonalszenzor_operal+0x324>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f107 020c 	add.w	r2, r7, #12
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fbe1 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	330f      	adds	r3, #15
 80021ae:	7b3a      	ldrb	r2, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <Vonalszenzor_operal+0x328>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f107 020c 	add.w	r2, r7, #12
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fbd5 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	330b      	adds	r3, #11
 80021c6:	7b3a      	ldrb	r2, [r7, #12]
 80021c8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021ca:	4852      	ldr	r0, [pc, #328]	; (8002314 <Vonalszenzor_operal+0x304>)
 80021cc:	f000 fb6e 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80021d0:	485c      	ldr	r0, [pc, #368]	; (8002344 <Vonalszenzor_operal+0x334>)
 80021d2:	f000 fb6b 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80021d6:	4b57      	ldr	r3, [pc, #348]	; (8002334 <Vonalszenzor_operal+0x324>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f107 020c 	add.w	r2, r7, #12
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fbc3 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3307      	adds	r3, #7
 80021ea:	7b3a      	ldrb	r2, [r7, #12]
 80021ec:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021ee:	4b52      	ldr	r3, [pc, #328]	; (8002338 <Vonalszenzor_operal+0x328>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fbb7 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3303      	adds	r3, #3
 8002202:	7b3a      	ldrb	r2, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002206:	4843      	ldr	r0, [pc, #268]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002208:	f000 fb50 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 800220c:	484e      	ldr	r0, [pc, #312]	; (8002348 <Vonalszenzor_operal+0x338>)
 800220e:	f000 fb4d 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <Vonalszenzor_operal+0x33c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fba5 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	331e      	adds	r3, #30
 8002226:	7b3a      	ldrb	r2, [r7, #12]
 8002228:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <Vonalszenzor_operal+0x340>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f107 020c 	add.w	r2, r7, #12
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fb99 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0] + 1;
 800223a:	7b3a      	ldrb	r2, [r7, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	331a      	adds	r3, #26
 8002240:	3201      	adds	r2, #1
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002246:	4833      	ldr	r0, [pc, #204]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002248:	f000 fb30 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 800224c:	4841      	ldr	r0, [pc, #260]	; (8002354 <Vonalszenzor_operal+0x344>)
 800224e:	f000 fb2d 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <Vonalszenzor_operal+0x33c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f107 020c 	add.w	r2, r7, #12
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fb85 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3316      	adds	r3, #22
 8002266:	7b3a      	ldrb	r2, [r7, #12]
 8002268:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <Vonalszenzor_operal+0x340>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fb79 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3312      	adds	r3, #18
 800227e:	7b3a      	ldrb	r2, [r7, #12]
 8002280:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002282:	4824      	ldr	r0, [pc, #144]	; (8002314 <Vonalszenzor_operal+0x304>)
 8002284:	f000 fb12 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 8002288:	4833      	ldr	r0, [pc, #204]	; (8002358 <Vonalszenzor_operal+0x348>)
 800228a:	f000 fb0f 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <Vonalszenzor_operal+0x33c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	f107 020c 	add.w	r2, r7, #12
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fb67 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	330e      	adds	r3, #14
 80022a2:	7b3a      	ldrb	r2, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <Vonalszenzor_operal+0x340>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f107 020c 	add.w	r2, r7, #12
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb5b 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	330a      	adds	r3, #10
 80022ba:	7b3a      	ldrb	r2, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022be:	4815      	ldr	r0, [pc, #84]	; (8002314 <Vonalszenzor_operal+0x304>)
 80022c0:	f000 faf4 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80022c4:	4825      	ldr	r0, [pc, #148]	; (800235c <Vonalszenzor_operal+0x34c>)
 80022c6:	f000 faf1 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <Vonalszenzor_operal+0x33c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fb49 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3306      	adds	r3, #6
 80022de:	7b3a      	ldrb	r2, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <Vonalszenzor_operal+0x340>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f107 020c 	add.w	r2, r7, #12
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fb3d 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3302      	adds	r3, #2
 80022f6:	7b3a      	ldrb	r2, [r7, #12]
 80022f8:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <Vonalszenzor_operal+0x304>)
 80022fc:	f000 fad6 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002300:	4817      	ldr	r0, [pc, #92]	; (8002360 <Vonalszenzor_operal+0x350>)
 8002302:	f000 fad3 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <Vonalszenzor_operal+0x354>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	e029      	b.n	8002368 <Vonalszenzor_operal+0x358>
 8002314:	20000004 	.word	0x20000004
 8002318:	2000008c 	.word	0x2000008c
 800231c:	200001d9 	.word	0x200001d9
 8002320:	20000115 	.word	0x20000115
 8002324:	20000084 	.word	0x20000084
 8002328:	2000007c 	.word	0x2000007c
 800232c:	20000074 	.word	0x20000074
 8002330:	2000006c 	.word	0x2000006c
 8002334:	20000112 	.word	0x20000112
 8002338:	20000116 	.word	0x20000116
 800233c:	20000064 	.word	0x20000064
 8002340:	2000005c 	.word	0x2000005c
 8002344:	20000054 	.word	0x20000054
 8002348:	2000004c 	.word	0x2000004c
 800234c:	20000113 	.word	0x20000113
 8002350:	20000117 	.word	0x20000117
 8002354:	20000044 	.word	0x20000044
 8002358:	2000003c 	.word	0x2000003c
 800235c:	20000034 	.word	0x20000034
 8002360:	2000002c 	.word	0x2000002c
 8002364:	20000114 	.word	0x20000114
 8002368:	f000 fb00 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	331d      	adds	r3, #29
 8002370:	7b3a      	ldrb	r2, [r7, #12]
 8002372:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002374:	4bbd      	ldr	r3, [pc, #756]	; (800266c <Vonalszenzor_operal+0x65c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 faf4 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3319      	adds	r3, #25
 8002388:	7b3a      	ldrb	r2, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800238c:	48b8      	ldr	r0, [pc, #736]	; (8002670 <Vonalszenzor_operal+0x660>)
 800238e:	f000 fa8d 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 8002392:	48b8      	ldr	r0, [pc, #736]	; (8002674 <Vonalszenzor_operal+0x664>)
 8002394:	f000 fa8a 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002398:	4bb7      	ldr	r3, [pc, #732]	; (8002678 <Vonalszenzor_operal+0x668>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fae2 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3315      	adds	r3, #21
 80023ac:	7b3a      	ldrb	r2, [r7, #12]
 80023ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023b0:	4bae      	ldr	r3, [pc, #696]	; (800266c <Vonalszenzor_operal+0x65c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f107 020c 	add.w	r2, r7, #12
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fad6 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3311      	adds	r3, #17
 80023c4:	7b3a      	ldrb	r2, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023c8:	48a9      	ldr	r0, [pc, #676]	; (8002670 <Vonalszenzor_operal+0x660>)
 80023ca:	f000 fa6f 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80023ce:	48ab      	ldr	r0, [pc, #684]	; (800267c <Vonalszenzor_operal+0x66c>)
 80023d0:	f000 fa6c 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023d4:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <Vonalszenzor_operal+0x668>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f107 020c 	add.w	r2, r7, #12
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fac4 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	330d      	adds	r3, #13
 80023e8:	7b3a      	ldrb	r2, [r7, #12]
 80023ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023ec:	4b9f      	ldr	r3, [pc, #636]	; (800266c <Vonalszenzor_operal+0x65c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f107 020c 	add.w	r2, r7, #12
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fab8 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3309      	adds	r3, #9
 8002400:	7b3a      	ldrb	r2, [r7, #12]
 8002402:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002404:	489a      	ldr	r0, [pc, #616]	; (8002670 <Vonalszenzor_operal+0x660>)
 8002406:	f000 fa51 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 800240a:	489d      	ldr	r0, [pc, #628]	; (8002680 <Vonalszenzor_operal+0x670>)
 800240c:	f000 fa4e 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002410:	4b99      	ldr	r3, [pc, #612]	; (8002678 <Vonalszenzor_operal+0x668>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f107 020c 	add.w	r2, r7, #12
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 faa6 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3305      	adds	r3, #5
 8002424:	7b3a      	ldrb	r2, [r7, #12]
 8002426:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002428:	4b90      	ldr	r3, [pc, #576]	; (800266c <Vonalszenzor_operal+0x65c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f107 020c 	add.w	r2, r7, #12
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fa9a 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3301      	adds	r3, #1
 800243c:	7b3a      	ldrb	r2, [r7, #12]
 800243e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002440:	488b      	ldr	r0, [pc, #556]	; (8002670 <Vonalszenzor_operal+0x660>)
 8002442:	f000 fa33 	bl	80028ac <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8002446:	488f      	ldr	r0, [pc, #572]	; (8002684 <Vonalszenzor_operal+0x674>)
 8002448:	f000 fa30 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800244c:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <Vonalszenzor_operal+0x678>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f107 020c 	add.w	r2, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa88 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0] - 4;
 800245c:	7b3a      	ldrb	r2, [r7, #12]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	3a04      	subs	r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <Vonalszenzor_operal+0x67c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f107 020c 	add.w	r2, r7, #12
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fa7a 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3305      	adds	r3, #5
 800247c:	7b3a      	ldrb	r2, [r7, #12]
 800247e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002480:	487b      	ldr	r0, [pc, #492]	; (8002670 <Vonalszenzor_operal+0x660>)
 8002482:	f000 fa13 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002486:	4882      	ldr	r0, [pc, #520]	; (8002690 <Vonalszenzor_operal+0x680>)
 8002488:	f000 fa10 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <Vonalszenzor_operal+0x678>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f107 020c 	add.w	r2, r7, #12
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fa68 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3309      	adds	r3, #9
 80024a0:	7b3a      	ldrb	r2, [r7, #12]
 80024a2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024a4:	4b79      	ldr	r3, [pc, #484]	; (800268c <Vonalszenzor_operal+0x67c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	f107 020c 	add.w	r2, r7, #12
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fa5c 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	330d      	adds	r3, #13
 80024b8:	7b3a      	ldrb	r2, [r7, #12]
 80024ba:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024bc:	486c      	ldr	r0, [pc, #432]	; (8002670 <Vonalszenzor_operal+0x660>)
 80024be:	f000 f9f5 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 80024c2:	4874      	ldr	r0, [pc, #464]	; (8002694 <Vonalszenzor_operal+0x684>)
 80024c4:	f000 f9f2 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <Vonalszenzor_operal+0x678>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f107 020c 	add.w	r2, r7, #12
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fa4a 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3311      	adds	r3, #17
 80024dc:	7b3a      	ldrb	r2, [r7, #12]
 80024de:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <Vonalszenzor_operal+0x67c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f107 020c 	add.w	r2, r7, #12
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa3e 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3315      	adds	r3, #21
 80024f4:	7b3a      	ldrb	r2, [r7, #12]
 80024f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024f8:	485d      	ldr	r0, [pc, #372]	; (8002670 <Vonalszenzor_operal+0x660>)
 80024fa:	f000 f9d7 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80024fe:	4866      	ldr	r0, [pc, #408]	; (8002698 <Vonalszenzor_operal+0x688>)
 8002500:	f000 f9d4 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002504:	4b60      	ldr	r3, [pc, #384]	; (8002688 <Vonalszenzor_operal+0x678>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f107 020c 	add.w	r2, r7, #12
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa2c 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	3319      	adds	r3, #25
 8002518:	7b3a      	ldrb	r2, [r7, #12]
 800251a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800251c:	4b5b      	ldr	r3, [pc, #364]	; (800268c <Vonalszenzor_operal+0x67c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	f107 020c 	add.w	r2, r7, #12
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fa20 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	331d      	adds	r3, #29
 8002530:	7b3a      	ldrb	r2, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002534:	484e      	ldr	r0, [pc, #312]	; (8002670 <Vonalszenzor_operal+0x660>)
 8002536:	f000 f9b9 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 800253a:	4858      	ldr	r0, [pc, #352]	; (800269c <Vonalszenzor_operal+0x68c>)
 800253c:	f000 f9b6 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002540:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <Vonalszenzor_operal+0x690>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fa0e 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3302      	adds	r3, #2
 8002554:	7b3a      	ldrb	r2, [r7, #12]
 8002556:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002558:	4b52      	ldr	r3, [pc, #328]	; (80026a4 <Vonalszenzor_operal+0x694>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fa02 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002568:	7b3a      	ldrb	r2, [r7, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3306      	adds	r3, #6
 800256e:	3202      	adds	r2, #2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002574:	483e      	ldr	r0, [pc, #248]	; (8002670 <Vonalszenzor_operal+0x660>)
 8002576:	f000 f999 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 800257a:	484b      	ldr	r0, [pc, #300]	; (80026a8 <Vonalszenzor_operal+0x698>)
 800257c:	f000 f996 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <Vonalszenzor_operal+0x690>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	f107 020c 	add.w	r2, r7, #12
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f9ee 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	330a      	adds	r3, #10
 8002594:	7b3a      	ldrb	r2, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <Vonalszenzor_operal+0x694>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f9e2 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0] +1;
 80025a8:	7b3a      	ldrb	r2, [r7, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	330e      	adds	r3, #14
 80025ae:	3201      	adds	r2, #1
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025b4:	482e      	ldr	r0, [pc, #184]	; (8002670 <Vonalszenzor_operal+0x660>)
 80025b6:	f000 f979 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80025ba:	483c      	ldr	r0, [pc, #240]	; (80026ac <Vonalszenzor_operal+0x69c>)
 80025bc:	f000 f976 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <Vonalszenzor_operal+0x690>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f107 020c 	add.w	r2, r7, #12
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f9ce 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	3312      	adds	r3, #18
 80025d4:	7b3a      	ldrb	r2, [r7, #12]
 80025d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <Vonalszenzor_operal+0x694>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f9c2 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3316      	adds	r3, #22
 80025ec:	7b3a      	ldrb	r2, [r7, #12]
 80025ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025f0:	481f      	ldr	r0, [pc, #124]	; (8002670 <Vonalszenzor_operal+0x660>)
 80025f2:	f000 f95b 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80025f6:	482e      	ldr	r0, [pc, #184]	; (80026b0 <Vonalszenzor_operal+0x6a0>)
 80025f8:	f000 f958 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <Vonalszenzor_operal+0x690>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f107 020c 	add.w	r2, r7, #12
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f9b0 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	331a      	adds	r3, #26
 8002610:	7b3a      	ldrb	r2, [r7, #12]
 8002612:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <Vonalszenzor_operal+0x694>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f9a4 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	331e      	adds	r3, #30
 8002628:	7b3a      	ldrb	r2, [r7, #12]
 800262a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800262c:	4810      	ldr	r0, [pc, #64]	; (8002670 <Vonalszenzor_operal+0x660>)
 800262e:	f000 f93d 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 8002632:	4820      	ldr	r0, [pc, #128]	; (80026b4 <Vonalszenzor_operal+0x6a4>)
 8002634:	f000 f93a 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <Vonalszenzor_operal+0x6a8>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f992 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3303      	adds	r3, #3
 800264c:	7b3a      	ldrb	r2, [r7, #12]
 800264e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <Vonalszenzor_operal+0x6ac>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f986 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3307      	adds	r3, #7
 8002664:	7b3a      	ldrb	r2, [r7, #12]
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e02a      	b.n	80026c0 <Vonalszenzor_operal+0x6b0>
 800266a:	bf00      	nop
 800266c:	20000118 	.word	0x20000118
 8002670:	20000004 	.word	0x20000004
 8002674:	20000024 	.word	0x20000024
 8002678:	20000114 	.word	0x20000114
 800267c:	2000001c 	.word	0x2000001c
 8002680:	20000014 	.word	0x20000014
 8002684:	2000010c 	.word	0x2000010c
 8002688:	200001d9 	.word	0x200001d9
 800268c:	20000115 	.word	0x20000115
 8002690:	20000104 	.word	0x20000104
 8002694:	200000fc 	.word	0x200000fc
 8002698:	200000f4 	.word	0x200000f4
 800269c:	200000ec 	.word	0x200000ec
 80026a0:	20000112 	.word	0x20000112
 80026a4:	20000116 	.word	0x20000116
 80026a8:	200000e4 	.word	0x200000e4
 80026ac:	200000dc 	.word	0x200000dc
 80026b0:	200000d4 	.word	0x200000d4
 80026b4:	200000cc 	.word	0x200000cc
 80026b8:	20000113 	.word	0x20000113
 80026bc:	20000117 	.word	0x20000117
	Vonalszenzor_minta_kuldes(leszed);
 80026c0:	486e      	ldr	r0, [pc, #440]	; (800287c <Vonalszenzor_operal+0x86c>)
 80026c2:	f000 f8f3 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 80026c6:	486e      	ldr	r0, [pc, #440]	; (8002880 <Vonalszenzor_operal+0x870>)
 80026c8:	f000 f8f0 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <Vonalszenzor_operal+0x874>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f107 020c 	add.w	r2, r7, #12
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f948 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	330b      	adds	r3, #11
 80026e0:	7b3a      	ldrb	r2, [r7, #12]
 80026e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <Vonalszenzor_operal+0x878>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f107 020c 	add.w	r2, r7, #12
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f93c 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0] +2;
 80026f4:	7b3a      	ldrb	r2, [r7, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	330f      	adds	r3, #15
 80026fa:	3202      	adds	r2, #2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002700:	485e      	ldr	r0, [pc, #376]	; (800287c <Vonalszenzor_operal+0x86c>)
 8002702:	f000 f8d3 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 8002706:	4861      	ldr	r0, [pc, #388]	; (800288c <Vonalszenzor_operal+0x87c>)
 8002708:	f000 f8d0 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <Vonalszenzor_operal+0x874>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f107 020c 	add.w	r2, r7, #12
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f928 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	3313      	adds	r3, #19
 8002720:	7b3a      	ldrb	r2, [r7, #12]
 8002722:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <Vonalszenzor_operal+0x878>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f107 020c 	add.w	r2, r7, #12
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f91c 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3317      	adds	r3, #23
 8002738:	7b3a      	ldrb	r2, [r7, #12]
 800273a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800273c:	484f      	ldr	r0, [pc, #316]	; (800287c <Vonalszenzor_operal+0x86c>)
 800273e:	f000 f8b5 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 8002742:	4853      	ldr	r0, [pc, #332]	; (8002890 <Vonalszenzor_operal+0x880>)
 8002744:	f000 f8b2 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002748:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <Vonalszenzor_operal+0x874>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f107 020c 	add.w	r2, r7, #12
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f90a 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	331b      	adds	r3, #27
 800275c:	7b3a      	ldrb	r2, [r7, #12]
 800275e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002760:	4b49      	ldr	r3, [pc, #292]	; (8002888 <Vonalszenzor_operal+0x878>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f8fe 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	331f      	adds	r3, #31
 8002774:	7b3a      	ldrb	r2, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002778:	4840      	ldr	r0, [pc, #256]	; (800287c <Vonalszenzor_operal+0x86c>)
 800277a:	f000 f897 	bl	80028ac <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 800277e:	4845      	ldr	r0, [pc, #276]	; (8002894 <Vonalszenzor_operal+0x884>)
 8002780:	f000 f894 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <Vonalszenzor_operal+0x888>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f107 020c 	add.w	r2, r7, #12
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8ec 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3304      	adds	r3, #4
 8002798:	7b3a      	ldrb	r2, [r7, #12]
 800279a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800279c:	4b3f      	ldr	r3, [pc, #252]	; (800289c <Vonalszenzor_operal+0x88c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8e0 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0] +2;
 80027ac:	7b3a      	ldrb	r2, [r7, #12]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3308      	adds	r3, #8
 80027b2:	3202      	adds	r2, #2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027b8:	4830      	ldr	r0, [pc, #192]	; (800287c <Vonalszenzor_operal+0x86c>)
 80027ba:	f000 f877 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 80027be:	4838      	ldr	r0, [pc, #224]	; (80028a0 <Vonalszenzor_operal+0x890>)
 80027c0:	f000 f874 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <Vonalszenzor_operal+0x888>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8cc 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	7b3a      	ldrb	r2, [r7, #12]
 80027da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <Vonalszenzor_operal+0x88c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f8c0 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3310      	adds	r3, #16
 80027f0:	7b3a      	ldrb	r2, [r7, #12]
 80027f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027f4:	4821      	ldr	r0, [pc, #132]	; (800287c <Vonalszenzor_operal+0x86c>)
 80027f6:	f000 f859 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80027fa:	482a      	ldr	r0, [pc, #168]	; (80028a4 <Vonalszenzor_operal+0x894>)
 80027fc:	f000 f856 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <Vonalszenzor_operal+0x888>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f107 020c 	add.w	r2, r7, #12
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f8ae 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	7b3a      	ldrb	r2, [r7, #12]
 8002816:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <Vonalszenzor_operal+0x88c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f8a2 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	3318      	adds	r3, #24
 800282c:	7b3a      	ldrb	r2, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002830:	4812      	ldr	r0, [pc, #72]	; (800287c <Vonalszenzor_operal+0x86c>)
 8002832:	f000 f83b 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 8002836:	481c      	ldr	r0, [pc, #112]	; (80028a8 <Vonalszenzor_operal+0x898>)
 8002838:	f000 f838 	bl	80028ac <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <Vonalszenzor_operal+0x888>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f107 020c 	add.w	r2, r7, #12
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f890 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	331c      	adds	r3, #28
 8002850:	7b3a      	ldrb	r2, [r7, #12]
 8002852:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <Vonalszenzor_operal+0x88c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f884 	bl	800296c <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3320      	adds	r3, #32
 8002868:	7b3a      	ldrb	r2, [r7, #12]
 800286a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <Vonalszenzor_operal+0x86c>)
 800286e:	f000 f81d 	bl	80028ac <Vonalszenzor_minta_kuldes>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000004 	.word	0x20000004
 8002880:	200000c4 	.word	0x200000c4
 8002884:	20000113 	.word	0x20000113
 8002888:	20000117 	.word	0x20000117
 800288c:	200000bc 	.word	0x200000bc
 8002890:	200000b4 	.word	0x200000b4
 8002894:	200000ac 	.word	0x200000ac
 8002898:	20000114 	.word	0x20000114
 800289c:	20000118 	.word	0x20000118
 80028a0:	200000a4 	.word	0x200000a4
 80028a4:	2000009c 	.word	0x2000009c
 80028a8:	20000094 	.word	0x20000094

080028ac <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 80028b4:	2200      	movs	r2, #0
 80028b6:	2110      	movs	r1, #16
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <Vonalszenzor_minta_kuldes+0x44>)
 80028ba:	f003 f96f 	bl	8005b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 80028be:	2200      	movs	r2, #0
 80028c0:	2102      	movs	r1, #2
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <Vonalszenzor_minta_kuldes+0x48>)
 80028c4:	f003 f96a 	bl	8005b9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	2206      	movs	r2, #6
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	480a      	ldr	r0, [pc, #40]	; (80028f8 <Vonalszenzor_minta_kuldes+0x4c>)
 80028d0:	f005 fa9a 	bl	8007e08 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 80028d4:	2201      	movs	r2, #1
 80028d6:	2110      	movs	r1, #16
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <Vonalszenzor_minta_kuldes+0x44>)
 80028da:	f003 f95f 	bl	8005b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 80028de:	2201      	movs	r2, #1
 80028e0:	2102      	movs	r1, #2
 80028e2:	4804      	ldr	r0, [pc, #16]	; (80028f4 <Vonalszenzor_minta_kuldes+0x48>)
 80028e4:	f003 f95a 	bl	8005b9c <HAL_GPIO_WritePin>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020400 	.word	0x40020400
 80028f8:	200002c4 	.word	0x200002c4

080028fc <Vonalas_tombok_torlese>:

void Vonalas_tombok_torlese(void) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	e00c      	b.n	8002922 <Vonalas_tombok_torlese+0x26>
		vonalak_h[i] = '-';
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <Vonalas_tombok_torlese+0x60>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	222d      	movs	r2, #45	; 0x2d
 8002910:	701a      	strb	r2, [r3, #0]
		vonalak_e[i] = '-';
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <Vonalas_tombok_torlese+0x64>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	222d      	movs	r2, #45	; 0x2d
 800291a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b04      	cmp	r3, #4
 8002926:	ddef      	ble.n	8002908 <Vonalas_tombok_torlese+0xc>
	}
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8002928:	2301      	movs	r3, #1
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	e00c      	b.n	8002948 <Vonalas_tombok_torlese+0x4c>
		vonal_eredmeny_h[i] = 0;
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <Vonalas_tombok_torlese+0x68>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
		vonal_eredmeny_e[i] = 0;
 8002938:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <Vonalas_tombok_torlese+0x6c>)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b20      	cmp	r3, #32
 800294c:	ddef      	ble.n	800292e <Vonalas_tombok_torlese+0x32>
	}
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000130 	.word	0x20000130
 8002960:	20000138 	.word	0x20000138
 8002964:	200001dc 	.word	0x200001dc
 8002968:	20000200 	.word	0x20000200

0800296c <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	733b      	strb	r3, [r7, #12]
 800297c:	2300      	movs	r3, #0
 800297e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002980:	f107 010c 	add.w	r1, r7, #12
 8002984:	2364      	movs	r3, #100	; 0x64
 8002986:	2202      	movs	r2, #2
 8002988:	4806      	ldr	r0, [pc, #24]	; (80029a4 <Vonalszenzor_meres_kiolvasas+0x38>)
 800298a:	f005 fa3d 	bl	8007e08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 800298e:	2364      	movs	r3, #100	; 0x64
 8002990:	2202      	movs	r2, #2
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <Vonalszenzor_meres_kiolvasas+0x38>)
 8002996:	f005 fb83 	bl	80080a0 <HAL_SPI_Receive>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200016e0 	.word	0x200016e0

080029a8 <Vonalas_tombok_feltoltese>:

void Vonalas_tombok_feltoltese(void) {
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
	for(int poz=1; poz < 33-1; poz++) {
 80029ae:	2301      	movs	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e10c      	b.n	8002bce <Vonalas_tombok_feltoltese+0x226>
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
		if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz]) {
 80029b4:	4a8a      	ldr	r2, [pc, #552]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd75 	bl	80004ac <__aeabi_i2d>
 80029c2:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <Vonalas_tombok_feltoltese+0x23c>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fe f86a 	bl	8000aa0 <__aeabi_dcmpgt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d075      	beq.n	8002abe <Vonalas_tombok_feltoltese+0x116>
			if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz+1]) {
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a82      	ldr	r2, [pc, #520]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd66 	bl	80004ac <__aeabi_i2d>
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <Vonalas_tombok_feltoltese+0x23c>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fe f85b 	bl	8000aa0 <__aeabi_dcmpgt>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d022      	beq.n	8002a36 <Vonalas_tombok_feltoltese+0x8e>
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	4a7a      	ldr	r2, [pc, #488]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fd57 	bl	80004ac <__aeabi_i2d>
 80029fe:	4b79      	ldr	r3, [pc, #484]	; (8002be4 <Vonalas_tombok_feltoltese+0x23c>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fe f838 	bl	8000a78 <__aeabi_dcmple>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d057      	beq.n	8002abe <Vonalas_tombok_feltoltese+0x116>
					int i = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a12:	e002      	b.n	8002a1a <Vonalas_tombok_feltoltese+0x72>
						i++;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3301      	adds	r3, #1
 8002a18:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a1a:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <Vonalas_tombok_feltoltese+0x240>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b2d      	cmp	r3, #45	; 0x2d
 8002a24:	d1f6      	bne.n	8002a14 <Vonalas_tombok_feltoltese+0x6c>
					}
					vonalak_e[i] = poz;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	b2d9      	uxtb	r1, r3
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <Vonalas_tombok_feltoltese+0x240>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	460a      	mov	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e043      	b.n	8002abe <Vonalas_tombok_feltoltese+0x116>
				}
			} else {
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd34 	bl	80004ac <__aeabi_i2d>
 8002a44:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <Vonalas_tombok_feltoltese+0x23c>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fe f815 	bl	8000a78 <__aeabi_dcmple>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d034      	beq.n	8002abe <Vonalas_tombok_feltoltese+0x116>
					if(VONAL_THRESHOLD_E + 1 < vonal_eredmeny_e[poz-1] + vonal_eredmeny_e[poz+1]) {
 8002a54:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <Vonalas_tombok_feltoltese+0x23c>)
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <Vonalas_tombok_feltoltese+0x244>)
 8002a60:	f7fd fbd8 	bl	8000214 <__adddf3>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	4619      	mov	r1, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a59      	ldr	r2, [pc, #356]	; (8002be0 <Vonalas_tombok_feltoltese+0x238>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	440b      	add	r3, r1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd13 	bl	80004ac <__aeabi_i2d>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7fd ffe9 	bl	8000a64 <__aeabi_dcmplt>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <Vonalas_tombok_feltoltese+0x116>
						int j = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002a9c:	e002      	b.n	8002aa4 <Vonalas_tombok_feltoltese+0xfc>
							j++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002aa4:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <Vonalas_tombok_feltoltese+0x240>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b2d      	cmp	r3, #45	; 0x2d
 8002aae:	d1f6      	bne.n	8002a9e <Vonalas_tombok_feltoltese+0xf6>
						}
						vonalak_e[j] = poz;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	4a4c      	ldr	r2, [pc, #304]	; (8002be8 <Vonalas_tombok_feltoltese+0x240>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	460a      	mov	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz]) {
 8002abe:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fcf0 	bl	80004ac <__aeabi_i2d>
 8002acc:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <Vonalas_tombok_feltoltese+0x24c>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd ffe5 	bl	8000aa0 <__aeabi_dcmpgt>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d075      	beq.n	8002bc8 <Vonalas_tombok_feltoltese+0x220>
			if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz+1]) {
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fce1 	bl	80004ac <__aeabi_i2d>
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <Vonalas_tombok_feltoltese+0x24c>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd ffd6 	bl	8000aa0 <__aeabi_dcmpgt>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d022      	beq.n	8002b40 <Vonalas_tombok_feltoltese+0x198>
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4a3c      	ldr	r2, [pc, #240]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fcd2 	bl	80004ac <__aeabi_i2d>
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <Vonalas_tombok_feltoltese+0x24c>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd ffb3 	bl	8000a78 <__aeabi_dcmple>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d057      	beq.n	8002bc8 <Vonalas_tombok_feltoltese+0x220>
					int k = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b1c:	e002      	b.n	8002b24 <Vonalas_tombok_feltoltese+0x17c>
						k++;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b24:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <Vonalas_tombok_feltoltese+0x250>)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8002b2e:	d1f6      	bne.n	8002b1e <Vonalas_tombok_feltoltese+0x176>
					}
					vonalak_h[k] = poz;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	b2d9      	uxtb	r1, r3
 8002b34:	4a30      	ldr	r2, [pc, #192]	; (8002bf8 <Vonalas_tombok_feltoltese+0x250>)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e043      	b.n	8002bc8 <Vonalas_tombok_feltoltese+0x220>
				}
			} else {
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fcaf 	bl	80004ac <__aeabi_i2d>
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <Vonalas_tombok_feltoltese+0x24c>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd ff90 	bl	8000a78 <__aeabi_dcmple>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d034      	beq.n	8002bc8 <Vonalas_tombok_feltoltese+0x220>
					if(VONAL_THRESHOLD_H + 1 < vonal_eredmeny_h[poz-1] + vonal_eredmeny_h[poz+1]) {
 8002b5e:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <Vonalas_tombok_feltoltese+0x24c>)
 8002b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <Vonalas_tombok_feltoltese+0x244>)
 8002b6a:	f7fd fb53 	bl	8000214 <__adddf3>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <Vonalas_tombok_feltoltese+0x248>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	440b      	add	r3, r1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fc8e 	bl	80004ac <__aeabi_i2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd ff64 	bl	8000a64 <__aeabi_dcmplt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <Vonalas_tombok_feltoltese+0x220>
						int l = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002ba6:	e002      	b.n	8002bae <Vonalas_tombok_feltoltese+0x206>
							l++;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <Vonalas_tombok_feltoltese+0x250>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8002bb8:	d1f6      	bne.n	8002ba8 <Vonalas_tombok_feltoltese+0x200>
						}
						vonalak_h[l] = poz;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	b2d9      	uxtb	r1, r3
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <Vonalas_tombok_feltoltese+0x250>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]
	for(int poz=1; poz < 33-1; poz++) {
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b1f      	cmp	r3, #31
 8002bd2:	f77f aeef 	ble.w	80029b4 <Vonalas_tombok_feltoltese+0xc>
	}
	/*for(int poz=1; poz < 33-1; poz++) {
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele

	}*/
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdb0      	pop	{r4, r5, r7, pc}
 8002be0:	20000200 	.word	0x20000200
 8002be4:	20000128 	.word	0x20000128
 8002be8:	20000138 	.word	0x20000138
 8002bec:	3ff00000 	.word	0x3ff00000
 8002bf0:	200001dc 	.word	0x200001dc
 8002bf4:	20000120 	.word	0x20000120
 8002bf8:	20000130 	.word	0x20000130

08002bfc <Irany_valaszto>:

void Irany_valaszto(void) {
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
	if(keresztezodesben == false) {
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <Irany_valaszto+0x13c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	f083 0301 	eor.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8081 	beq.w	8002d14 <Irany_valaszto+0x118>
		if(vonalak_e[1] < 33) {
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <Irany_valaszto+0x140>)
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f200 8089 	bhi.w	8002d2e <Irany_valaszto+0x132>
			bool ok = true;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	71fb      	strb	r3, [r7, #7]
			int i = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002c24:	e03e      	b.n	8002ca4 <Irany_valaszto+0xa8>
				if((-9 > vonal_kovetni_e - (vonalak_e[i] - 16))  ||  (vonal_kovetni_e - (vonalak_e[i] - 16) > 9)) {
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <Irany_valaszto+0x144>)
 8002c28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c2c:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <Irany_valaszto+0x140>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3b10      	subs	r3, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc38 	bl	80004ac <__aeabi_i2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fae4 	bl	8000210 <__aeabi_dsub>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <Irany_valaszto+0x148>)
 8002c56:	f7fd ff05 	bl	8000a64 <__aeabi_dcmplt>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11c      	bne.n	8002c9a <Irany_valaszto+0x9e>
 8002c60:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <Irany_valaszto+0x144>)
 8002c62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c66:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <Irany_valaszto+0x140>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	3b10      	subs	r3, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc1b 	bl	80004ac <__aeabi_i2d>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd fac7 	bl	8000210 <__aeabi_dsub>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <Irany_valaszto+0x14c>)
 8002c90:	f7fd ff06 	bl	8000aa0 <__aeabi_dcmpgt>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <Irany_valaszto+0xa2>
					//if((-9.5 > vonal_kovetni_h - (vonalak_h[i] - 16))  ||  (vonal_kovetni_h - (vonalak_h[i] - 16) > 9.5)) {
				// ha barhol van olyan vonal, ami tul messze van az aktualisan kovetettol
						ok = false;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]
					//}
				}
				i++;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <Irany_valaszto+0x140>)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d9ba      	bls.n	8002c26 <Irany_valaszto+0x2a>
			}
			if(ok == true) {
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d03b      	beq.n	8002d2e <Irany_valaszto+0x132>
				kereszt_cnt++;
 8002cb6:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <Irany_valaszto+0x150>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <Irany_valaszto+0x150>)
 8002cc0:	701a      	strb	r2, [r3, #0]
				if(16 < kereszt_cnt) {
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <Irany_valaszto+0x150>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d931      	bls.n	8002d2e <Irany_valaszto+0x132>
					keresztezodesben = true;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <Irany_valaszto+0x13c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
					tolatas = false;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <Irany_valaszto+0x154>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
					aktualis_irany = iranyok[keresztezodes_szam];
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <Irany_valaszto+0x158>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <Irany_valaszto+0x15c>)
 8002cde:	5c9a      	ldrb	r2, [r3, r2]
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <Irany_valaszto+0x160>)
 8002ce2:	701a      	strb	r2, [r3, #0]
					if(aktualis_irany == 9) {
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <Irany_valaszto+0x160>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d108      	bne.n	8002cfe <Irany_valaszto+0x102>
						motvez_k = motvez_d / 2;	// ez a megallas
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <Irany_valaszto+0x164>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0fda      	lsrs	r2, r3, #31
 8002cf2:	4413      	add	r3, r2
 8002cf4:	105b      	asrs	r3, r3, #1
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <Irany_valaszto+0x168>)
 8002cfa:	601a      	str	r2, [r3, #0]
	} else if(33 < vonalak_e[1]) {
		keresztezodesben = false;
		aktualis_irany = 1;
		kereszt_cnt = 0;
	}
}
 8002cfc:	e017      	b.n	8002d2e <Irany_valaszto+0x132>
						keresztezodes_szam++;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <Irany_valaszto+0x158>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <Irany_valaszto+0x158>)
 8002d08:	701a      	strb	r2, [r3, #0]
						motvez_k = 450;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <Irany_valaszto+0x168>)
 8002d0c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	e00c      	b.n	8002d2e <Irany_valaszto+0x132>
	} else if(33 < vonalak_e[1]) {
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <Irany_valaszto+0x140>)
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b21      	cmp	r3, #33	; 0x21
 8002d1a:	d908      	bls.n	8002d2e <Irany_valaszto+0x132>
		keresztezodesben = false;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <Irany_valaszto+0x13c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
		aktualis_irany = 1;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <Irany_valaszto+0x160>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
		kereszt_cnt = 0;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <Irany_valaszto+0x150>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bdb0      	pop	{r4, r5, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000239 	.word	0x20000239
 8002d3c:	20000138 	.word	0x20000138
 8002d40:	20000230 	.word	0x20000230
 8002d44:	c0220000 	.word	0xc0220000
 8002d48:	40220000 	.word	0x40220000
 8002d4c:	2000023a 	.word	0x2000023a
 8002d50:	2000023b 	.word	0x2000023b
 8002d54:	20000238 	.word	0x20000238
 8002d58:	20000258 	.word	0x20000258
 8002d5c:	2000013d 	.word	0x2000013d
 8002d60:	20000150 	.word	0x20000150
 8002d64:	20000248 	.word	0x20000248

08002d68 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(double* elso, double* hatso, uint8_t irany) {
 8002d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d6c:	b092      	sub	sp, #72	; 0x48
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6178      	str	r0, [r7, #20]
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	4613      	mov	r3, r2
 8002d76:	73fb      	strb	r3, [r7, #15]
	double elso_sum = 0.0;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double hatso_sum = 0.0;
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double e_db = 0.0001;
 8002d90:	a399      	add	r3, pc, #612	; (adr r3, 8002ff8 <Kovetendo_vonal_valaszto+0x290>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double h_db = 0.0001;
 8002d9a:	a397      	add	r3, pc, #604	; (adr r3, 8002ff8 <Kovetendo_vonal_valaszto+0x290>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if(irany == 0) {							// jobbra at
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8083 	bne.w	8002eb2 <Kovetendo_vonal_valaszto+0x14a>
		*elso = vonalak_e[0] - 16;
 8002dac:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	3b10      	subs	r3, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fb7a 	bl	80004ac <__aeabi_i2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e05f      	b.n	8002e88 <Kovetendo_vonal_valaszto+0x120>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002dc8:	4a86      	ldr	r2, [pc, #536]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d856      	bhi.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002dd4:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002dd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002dda:	4a82      	ldr	r2, [pc, #520]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3b10      	subs	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fb61 	bl	80004ac <__aeabi_i2d>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4620      	mov	r0, r4
 8002df0:	4629      	mov	r1, r5
 8002df2:	f7fd fa0d 	bl	8000210 <__aeabi_dsub>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <Kovetendo_vonal_valaszto+0x284>)
 8002e04:	f7fd fe4c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d039      	beq.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002e10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e14:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	4413      	add	r3, r2
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b10      	subs	r3, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb44 	bl	80004ac <__aeabi_i2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd f9f0 	bl	8000210 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <Kovetendo_vonal_valaszto+0x288>)
 8002e3e:	f7fd fe11 	bl	8000a64 <__aeabi_dcmplt>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01c      	beq.n	8002e82 <Kovetendo_vonal_valaszto+0x11a>
				hatso_sum += vonalak_h[i] - 16;
 8002e48:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	3b10      	subs	r3, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb2a 	bl	80004ac <__aeabi_i2d>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e60:	f7fd f9d8 	bl	8000214 <__adddf3>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <Kovetendo_vonal_valaszto+0x28c>)
 8002e72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e76:	f7fd f9cd 	bl	8000214 <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	dd9c      	ble.n	8002dc8 <Kovetendo_vonal_valaszto+0x60>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea2:	f7fd fc97 	bl	80007d4 <__aeabi_ddiv>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	6939      	ldr	r1, [r7, #16]
 8002eac:	e9c1 2300 	strd	r2, r3, [r1]
 8002eb0:	e165      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
	} else if (irany == 2) {					// balra at
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	f040 808f 	bne.w	8002fd8 <Kovetendo_vonal_valaszto+0x270>
		int j = 4;								// 4: vonalak_e merete
 8002eba:	2304      	movs	r3, #4
 8002ebc:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002ebe:	e002      	b.n	8002ec6 <Kovetendo_vonal_valaszto+0x15e>
			j--;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b21      	cmp	r3, #33	; 0x21
 8002ed0:	d8f6      	bhi.n	8002ec0 <Kovetendo_vonal_valaszto+0x158>
		}
		*elso = vonalak_e[j] - 16;
 8002ed2:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <Kovetendo_vonal_valaszto+0x278>)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fae5 	bl	80004ac <__aeabi_i2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e05f      	b.n	8002fb2 <Kovetendo_vonal_valaszto+0x24a>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d856      	bhi.n	8002fac <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f04:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3b10      	subs	r3, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd facc 	bl	80004ac <__aeabi_i2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4640      	mov	r0, r8
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	f7fd f978 	bl	8000210 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <Kovetendo_vonal_valaszto+0x284>)
 8002f2e:	f7fd fdb7 	bl	8000aa0 <__aeabi_dcmpgt>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d039      	beq.n	8002fac <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <Kovetendo_vonal_valaszto+0x280>)
 8002f3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b10      	subs	r3, #16
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd faaf 	bl	80004ac <__aeabi_i2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4640      	mov	r0, r8
 8002f54:	4649      	mov	r1, r9
 8002f56:	f7fd f95b 	bl	8000210 <__aeabi_dsub>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <Kovetendo_vonal_valaszto+0x288>)
 8002f68:	f7fd fd7c 	bl	8000a64 <__aeabi_dcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01c      	beq.n	8002fac <Kovetendo_vonal_valaszto+0x244>
				hatso_sum += vonalak_h[i] - 16;
 8002f72:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <Kovetendo_vonal_valaszto+0x27c>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3b10      	subs	r3, #16
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa95 	bl	80004ac <__aeabi_i2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f8a:	f7fd f943 	bl	8000214 <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <Kovetendo_vonal_valaszto+0x28c>)
 8002f9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fa0:	f7fd f938 	bl	8000214 <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	dd9c      	ble.n	8002ef2 <Kovetendo_vonal_valaszto+0x18a>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002fb8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd fc04 	bl	80007d4 <__aeabi_ddiv>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
 8002fd6:	e0d2      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
	} else {									// irany == 1: kozep es egyeb, rossz iranyokra is ezt csinaljuk
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e093      	b.n	8003106 <Kovetendo_vonal_valaszto+0x39e>
 8002fde:	bf00      	nop
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	20000130 	.word	0x20000130
 8002fe8:	20000228 	.word	0x20000228
 8002fec:	c0180000 	.word	0xc0180000
 8002ff0:	40180000 	.word	0x40180000
 8002ff4:	3ff00000 	.word	0x3ff00000
 8002ff8:	eb1c432d 	.word	0xeb1c432d
 8002ffc:	3f1a36e2 	.word	0x3f1a36e2
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003000:	4a8b      	ldr	r2, [pc, #556]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b20      	cmp	r3, #32
 800300a:	d856      	bhi.n	80030ba <Kovetendo_vonal_valaszto+0x352>
			   ((-7 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 7))) {
 800300c:	4b89      	ldr	r3, [pc, #548]	; (8003234 <Kovetendo_vonal_valaszto+0x4cc>)
 800300e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003012:	4a87      	ldr	r2, [pc, #540]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3b10      	subs	r3, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa45 	bl	80004ac <__aeabi_i2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4620      	mov	r0, r4
 8003028:	4629      	mov	r1, r5
 800302a:	f7fd f8f1 	bl	8000210 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <Kovetendo_vonal_valaszto+0x4d0>)
 800303c:	f7fd fd30 	bl	8000aa0 <__aeabi_dcmpgt>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d039      	beq.n	80030ba <Kovetendo_vonal_valaszto+0x352>
			   ((-7 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 7))) {
 8003046:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <Kovetendo_vonal_valaszto+0x4cc>)
 8003048:	e9d3 4500 	ldrd	r4, r5, [r3]
 800304c:	4a78      	ldr	r2, [pc, #480]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3b10      	subs	r3, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa28 	bl	80004ac <__aeabi_i2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4620      	mov	r0, r4
 8003062:	4629      	mov	r1, r5
 8003064:	f7fd f8d4 	bl	8000210 <__aeabi_dsub>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	4b71      	ldr	r3, [pc, #452]	; (800323c <Kovetendo_vonal_valaszto+0x4d4>)
 8003076:	f7fd fcf5 	bl	8000a64 <__aeabi_dcmplt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <Kovetendo_vonal_valaszto+0x352>
				elso_sum += vonalak_e[i] - 16;
 8003080:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <Kovetendo_vonal_valaszto+0x4c8>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3b10      	subs	r3, #16
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa0e 	bl	80004ac <__aeabi_i2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003098:	f7fd f8bc 	bl	8000214 <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				e_db += 1.0;
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	4b65      	ldr	r3, [pc, #404]	; (8003240 <Kovetendo_vonal_valaszto+0x4d8>)
 80030aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030ae:	f7fd f8b1 	bl	8000214 <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			}
			if(vonalak_h[i] < 33) {				// kulonben '-' van benne, ami 45
 80030ba:	4a62      	ldr	r2, [pc, #392]	; (8003244 <Kovetendo_vonal_valaszto+0x4dc>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d81c      	bhi.n	8003100 <Kovetendo_vonal_valaszto+0x398>
				hatso_sum += vonalak_h[i] - 16;
 80030c6:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <Kovetendo_vonal_valaszto+0x4dc>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	3b10      	subs	r3, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9eb 	bl	80004ac <__aeabi_i2d>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030de:	f7fd f899 	bl	8000214 <__adddf3>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <Kovetendo_vonal_valaszto+0x4d8>)
 80030f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030f4:	f7fd f88e 	bl	8000214 <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	3301      	adds	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b04      	cmp	r3, #4
 800310a:	f77f af79 	ble.w	8003000 <Kovetendo_vonal_valaszto+0x298>
			}
		}
		if(0.9 < e_db) {
 800310e:	a344      	add	r3, pc, #272	; (adr r3, 8003220 <Kovetendo_vonal_valaszto+0x4b8>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003118:	f7fd fcc2 	bl	8000aa0 <__aeabi_dcmpgt>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <Kovetendo_vonal_valaszto+0x3d2>
			*elso = elso_sum / e_db;
 8003122:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003126:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800312a:	f7fd fb53 	bl	80007d4 <__aeabi_ddiv>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	e9c1 2300 	strd	r2, r3, [r1]
 8003138:	e005      	b.n	8003146 <Kovetendo_vonal_valaszto+0x3de>
		} else {
			*elso = *elso;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(0.9 < h_db) {
 8003146:	a336      	add	r3, pc, #216	; (adr r3, 8003220 <Kovetendo_vonal_valaszto+0x4b8>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003150:	f7fd fca6 	bl	8000aa0 <__aeabi_dcmpgt>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <Kovetendo_vonal_valaszto+0x40a>
			*hatso = hatso_sum / h_db;
 800315a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003162:	f7fd fb37 	bl	80007d4 <__aeabi_ddiv>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	6939      	ldr	r1, [r7, #16]
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
 8003170:	e005      	b.n	800317e <Kovetendo_vonal_valaszto+0x416>
		} else {
			*hatso = *hatso;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	6939      	ldr	r1, [r7, #16]
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	if(1.9 < e_db) {
 800317e:	a32a      	add	r3, pc, #168	; (adr r3, 8003228 <Kovetendo_vonal_valaszto+0x4c0>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003188:	f7fd fc8a 	bl	8000aa0 <__aeabi_dcmpgt>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <Kovetendo_vonal_valaszto+0x436>
		fekezes_cnt += 1;
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e002      	b.n	80031a4 <Kovetendo_vonal_valaszto+0x43c>
	} else {
		fekezes_cnt = 0;
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <Kovetendo_vonal_valaszto+0x4e0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
	}
	if((-5 < *elso && *elso < 5)  &&  (-5 < *hatso && *hatso < 5)) {
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <Kovetendo_vonal_valaszto+0x4e4>)
 80031b0:	f7fd fc76 	bl	8000aa0 <__aeabi_dcmpgt>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d026      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <Kovetendo_vonal_valaszto+0x4e8>)
 80031c6:	f7fd fc4d 	bl	8000a64 <__aeabi_dcmplt>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <Kovetendo_vonal_valaszto+0x4e4>)
 80031dc:	f7fd fc60 	bl	8000aa0 <__aeabi_dcmpgt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <Kovetendo_vonal_valaszto+0x4e8>)
 80031f2:	f7fd fc37 	bl	8000a64 <__aeabi_dcmplt>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <Kovetendo_vonal_valaszto+0x4a0>
		veretesi_cnt += 1;
 80031fc:	4b15      	ldr	r3, [pc, #84]	; (8003254 <Kovetendo_vonal_valaszto+0x4ec>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <Kovetendo_vonal_valaszto+0x4ec>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e003      	b.n	8003210 <Kovetendo_vonal_valaszto+0x4a8>
	} else {
		veretesi_cnt = 0;
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <Kovetendo_vonal_valaszto+0x4ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
	}
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	3748      	adds	r7, #72	; 0x48
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800321a:	bf00      	nop
 800321c:	f3af 8000 	nop.w
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	3feccccc 	.word	0x3feccccc
 8003228:	66666666 	.word	0x66666666
 800322c:	3ffe6666 	.word	0x3ffe6666
 8003230:	20000138 	.word	0x20000138
 8003234:	20000230 	.word	0x20000230
 8003238:	c01c0000 	.word	0xc01c0000
 800323c:	401c0000 	.word	0x401c0000
 8003240:	3ff00000 	.word	0x3ff00000
 8003244:	20000130 	.word	0x20000130
 8003248:	20000250 	.word	0x20000250
 800324c:	c0140000 	.word	0xc0140000
 8003250:	40140000 	.word	0x40140000
 8003254:	2000024c 	.word	0x2000024c

08003258 <Szervo_szog_beallit>:

void Szervo_szog_beallit(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	if (btnEnable == 1 && szervoEnable == 1) {
 800325c:	4b49      	ldr	r3, [pc, #292]	; (8003384 <Szervo_szog_beallit+0x12c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 808d 	bne.w	8003380 <Szervo_szog_beallit+0x128>
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <Szervo_szog_beallit+0x130>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	f040 8088 	bne.w	8003380 <Szervo_szog_beallit+0x128>
		if (tolatas == true) {		// tolatas	// 10 - (10- -7)*0.5 =
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <Szervo_szog_beallit+0x134>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d023      	beq.n	80032c0 <Szervo_szog_beallit+0x68>
			cel = vonal_kovetni_h + (((vonal_kovetni_h) - (vonal_kovetni_e)) *kormanyzas_agresszivitas);
 8003278:	4b45      	ldr	r3, [pc, #276]	; (8003390 <Szervo_szog_beallit+0x138>)
 800327a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800327e:	4b45      	ldr	r3, [pc, #276]	; (8003394 <Szervo_szog_beallit+0x13c>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fc ffc4 	bl	8000210 <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <Szervo_szog_beallit+0x140>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fd f973 	bl	8000580 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <Szervo_szog_beallit+0x138>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fc ffb4 	bl	8000214 <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	493a      	ldr	r1, [pc, #232]	; (800339c <Szervo_szog_beallit+0x144>)
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
			motvez_k = 572;
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <Szervo_szog_beallit+0x148>)
 80032b8:	f44f 720f 	mov.w	r2, #572	; 0x23c
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e01e      	b.n	80032fe <Szervo_szog_beallit+0xa6>
		} else {				// elore menet es rossz input
			cel = vonal_kovetni_e + (((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 80032c0:	4b34      	ldr	r3, [pc, #208]	; (8003394 <Szervo_szog_beallit+0x13c>)
 80032c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <Szervo_szog_beallit+0x138>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fc ffa0 	bl	8000210 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <Szervo_szog_beallit+0x140>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fd f94f 	bl	8000580 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <Szervo_szog_beallit+0x13c>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fc ff90 	bl	8000214 <__adddf3>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4928      	ldr	r1, [pc, #160]	; (800339c <Szervo_szog_beallit+0x144>)
 80032fa:	e9c1 2300 	strd	r2, r3, [r1]
			//motvez_k = 455;
		}
		if(cel < -15) {
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <Szervo_szog_beallit+0x144>)
 8003300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <Szervo_szog_beallit+0x14c>)
 800330a:	f7fd fbab 	bl	8000a64 <__aeabi_dcmplt>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <Szervo_szog_beallit+0xc6>
			szervoSzog = 0;
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <Szervo_szog_beallit+0x150>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e028      	b.n	8003370 <Szervo_szog_beallit+0x118>
		} else if(15 < cel) {
 800331e:	4b1f      	ldr	r3, [pc, #124]	; (800339c <Szervo_szog_beallit+0x144>)
 8003320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <Szervo_szog_beallit+0x154>)
 800332a:	f7fd fbb9 	bl	8000aa0 <__aeabi_dcmpgt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <Szervo_szog_beallit+0xe4>
			szervoSzog = 180;
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <Szervo_szog_beallit+0x150>)
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <Szervo_szog_beallit+0x158>)
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e019      	b.n	8003370 <Szervo_szog_beallit+0x118>
		} else {
			szervoSzog = 90 + cel *6;
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <Szervo_szog_beallit+0x144>)
 800333e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <Szervo_szog_beallit+0x15c>)
 8003348:	f7fd f91a 	bl	8000580 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <Szervo_szog_beallit+0x160>)
 800335a:	f7fc ff5b 	bl	8000214 <__adddf3>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fbc5 	bl	8000af4 <__aeabi_d2f>
 800336a:	4603      	mov	r3, r0
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <Szervo_szog_beallit+0x150>)
 800336e:	6013      	str	r3, [r2, #0]
		}

		SERVO_MoveTo(SZERVO, szervoSzog);
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <Szervo_szog_beallit+0x150>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeb0 0a67 	vmov.f32	s0, s15
 800337a:	2000      	movs	r0, #0
 800337c:	f7fd ff16 	bl	80011ac <SERVO_MoveTo>
	}
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200001d8 	.word	0x200001d8
 8003388:	20000000 	.word	0x20000000
 800338c:	2000023b 	.word	0x2000023b
 8003390:	20000228 	.word	0x20000228
 8003394:	20000230 	.word	0x20000230
 8003398:	20000148 	.word	0x20000148
 800339c:	20000240 	.word	0x20000240
 80033a0:	20000248 	.word	0x20000248
 80033a4:	c02e0000 	.word	0xc02e0000
 80033a8:	20000140 	.word	0x20000140
 80033ac:	402e0000 	.word	0x402e0000
 80033b0:	43340000 	.word	0x43340000
 80033b4:	40180000 	.word	0x40180000
 80033b8:	40568000 	.word	0x40568000

080033bc <Graf_irany_feltolt>:
    graf_csucs[31][24] = 13441;
    graf_csucs[31][26] = 12978;
    graf_csucs[32][28] = 3047;
}

void Graf_irany_feltolt(void) {
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
	for(int u = 0; u < CSUCS_SZAM; u++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e022      	b.n	800340e <Graf_irany_feltolt+0x52>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	e019      	b.n	8003402 <Graf_irany_feltolt+0x46>
			for(int d = 0; d < 8; d++) {
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	e010      	b.n	80033f6 <Graf_irany_feltolt+0x3a>
				graf_irany[u][v][d] = -1;
 80033d4:	49bb      	ldr	r1, [pc, #748]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	015b      	lsls	r3, r3, #5
 80033dc:	4413      	add	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	00da      	lsls	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int d = 0; d < 8; d++) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3301      	adds	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b07      	cmp	r3, #7
 80033fa:	ddeb      	ble.n	80033d4 <Graf_irany_feltolt+0x18>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3301      	adds	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b20      	cmp	r3, #32
 8003406:	dde2      	ble.n	80033ce <Graf_irany_feltolt+0x12>
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b20      	cmp	r3, #32
 8003412:	ddd9      	ble.n	80033c8 <Graf_irany_feltolt+0xc>
			}
		}
	}
	graf_irany[1][3][0] = 2;
 8003414:	4bab      	ldr	r3, [pc, #684]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003416:	2202      	movs	r2, #2
 8003418:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	graf_irany[1][5][0] = 0;
 800341c:	4ba9      	ldr	r3, [pc, #676]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
	graf_irany[1][5][1] = 2;
 8003424:	4ba7      	ldr	r3, [pc, #668]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003426:	2202      	movs	r2, #2
 8003428:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	graf_irany[1][7][0] = 0;
 800342c:	4ba5      	ldr	r3, [pc, #660]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	graf_irany[1][7][1] = 0;
 8003434:	4ba3      	ldr	r3, [pc, #652]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003436:	2200      	movs	r2, #0
 8003438:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	graf_irany[2][3][0] = 2;
 800343c:	4ba1      	ldr	r3, [pc, #644]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800343e:	2202      	movs	r2, #2
 8003440:	f8c3 28a0 	str.w	r2, [r3, #2208]	; 0x8a0
	graf_irany[2][5][0] = 0;
 8003444:	4b9f      	ldr	r3, [pc, #636]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003446:	2200      	movs	r2, #0
 8003448:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
	graf_irany[2][5][1] = 2;
 800344c:	4b9d      	ldr	r3, [pc, #628]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800344e:	2202      	movs	r2, #2
 8003450:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
	graf_irany[2][7][0] = 0;
 8003454:	4b9b      	ldr	r3, [pc, #620]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
	graf_irany[2][7][1] = 0;
 800345c:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
	graf_irany[3][9][0] = 2;
 8003464:	4b97      	ldr	r3, [pc, #604]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003466:	2202      	movs	r2, #2
 8003468:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	graf_irany[3][11][0] = 0;
 800346c:	4b95      	ldr	r3, [pc, #596]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
	graf_irany[3][11][1] = 1;
 8003474:	4b93      	ldr	r3, [pc, #588]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003476:	2201      	movs	r2, #1
 8003478:	f8c3 2dc4 	str.w	r2, [r3, #3524]	; 0xdc4
	graf_irany[3][11][2] = 1;
 800347c:	4b91      	ldr	r3, [pc, #580]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800347e:	2201      	movs	r2, #1
 8003480:	f8c3 2dc8 	str.w	r2, [r3, #3528]	; 0xdc8
	graf_irany[4][1][0] = 0;
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003486:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
	graf_irany[4][2][0] = 1;
 800348e:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003490:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][0] = 0;
 8003498:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800349a:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][1] = 2;
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034a4:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80034a8:	3304      	adds	r3, #4
 80034aa:	2202      	movs	r2, #2
 80034ac:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][0] = 0;
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034b0:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][1] = 0;
 80034b8:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034ba:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80034be:	3304      	adds	r3, #4
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][0] = 1; 	// C csucs kesz
 80034c4:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034c6:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][1] = 2; 	// C csucs kesz
 80034ce:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034d0:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80034d4:	3304      	adds	r3, #4
 80034d6:	2202      	movs	r2, #2
 80034d8:	601a      	str	r2, [r3, #0]
	graf_irany[7][11][0] = 1;
 80034da:	4b7a      	ldr	r3, [pc, #488]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034dc:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][0] = 1;
 80034e4:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034e6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80034ea:	3320      	adds	r3, #32
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][1] = 0;
 80034f0:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034f2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][0] = 1;
 80034fc:	4b71      	ldr	r3, [pc, #452]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80034fe:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][1] = 2;
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003508:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800350c:	3304      	adds	r3, #4
 800350e:	2202      	movs	r2, #2
 8003510:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][0] = 2;
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003514:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003518:	2202      	movs	r2, #2
 800351a:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][1] = 0;
 800351c:	4b69      	ldr	r3, [pc, #420]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800351e:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003522:	3304      	adds	r3, #4
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][0] = 2;
 8003528:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800352a:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 800352e:	2202      	movs	r2, #2
 8003530:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][1] = 2;
 8003532:	4b64      	ldr	r3, [pc, #400]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003534:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003538:	3304      	adds	r3, #4
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
	graf_irany[10][4][0] = 0;
 800353e:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003540:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
	graf_irany[11][14][0] = 2;
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800354a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800354e:	3320      	adds	r3, #32
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
	graf_irany[11][15][0] = 0;
 8003554:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003556:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][0] = 1;
 800355e:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003560:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][1] = 2;
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800356a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800356e:	3304      	adds	r3, #4
 8003570:	2202      	movs	r2, #2
 8003572:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][2] = 1;
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003576:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800357a:	3308      	adds	r3, #8
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][0] = 1;
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003582:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][1] = 2;
 800358a:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800358c:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003590:	3304      	adds	r3, #4
 8003592:	2202      	movs	r2, #2
 8003594:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][2] = 0;
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003598:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 800359c:	3308      	adds	r3, #8
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][3] = 0;
 80035a2:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035a4:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80035a8:	330c      	adds	r3, #12
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][0] = 1;
 80035ae:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035b0:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][1] = 2;
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035ba:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80035be:	3304      	adds	r3, #4
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][2] = 0;
 80035c4:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035c6:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80035ca:	3308      	adds	r3, #8
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][3] = 1;
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035d2:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80035d6:	330c      	adds	r3, #12
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][0] = 1;
 80035dc:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035de:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][1] = 2;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035e8:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 80035ec:	3304      	adds	r3, #4
 80035ee:	2202      	movs	r2, #2
 80035f0:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][2] = 0;
 80035f2:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80035f4:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 80035f8:	3308      	adds	r3, #8
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][3] = 2;
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003600:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003604:	330c      	adds	r3, #12
 8003606:	2202      	movs	r2, #2
 8003608:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][0] = 0;
 800360a:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800360c:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][1] = 0;
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003616:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800361a:	3304      	adds	r3, #4
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][2] = 1;
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003622:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003626:	3308      	adds	r3, #8
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][0] = 0;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800362e:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][1] = 2;
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003638:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 800363c:	3304      	adds	r3, #4
 800363e:	2202      	movs	r2, #2
 8003640:	601a      	str	r2, [r3, #0]
	graf_irany[12][8][0] = 2; 	// F csucs kesz
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003644:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8003648:	2202      	movs	r2, #2
 800364a:	601a      	str	r2, [r3, #0]
	graf_irany[13][12][0] = 1;
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800364e:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8003652:	3320      	adds	r3, #32
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][0] = 1;
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800365a:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 800365e:	3320      	adds	r3, #32
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][1] = 0;
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003666:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 800366a:	3324      	adds	r3, #36	; 0x24
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][0] = 1;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003672:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003676:	3320      	adds	r3, #32
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][1] = 2;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800367e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003682:	3324      	adds	r3, #36	; 0x24
 8003684:	2202      	movs	r2, #2
 8003686:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][0] = 1;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <Graf_irany_feltolt+0x308>)
 800368a:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][1] = 1;
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <Graf_irany_feltolt+0x308>)
 8003694:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003698:	3304      	adds	r3, #4
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][0] = 1;
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80036a0:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 80036a4:	3340      	adds	r3, #64	; 0x40
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][1] = 0;
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80036ac:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 80036b0:	3344      	adds	r3, #68	; 0x44
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][2] = 0;
 80036b6:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <Graf_irany_feltolt+0x308>)
 80036b8:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 80036bc:	3348      	adds	r3, #72	; 0x48
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e001      	b.n	80036c8 <Graf_irany_feltolt+0x30c>
 80036c4:	2000180c 	.word	0x2000180c
	graf_irany[15][25][0] = 1;
 80036c8:	4bbc      	ldr	r3, [pc, #752]	; (80039bc <Graf_irany_feltolt+0x600>)
 80036ca:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][1] = 0;
 80036d2:	4bba      	ldr	r3, [pc, #744]	; (80039bc <Graf_irany_feltolt+0x600>)
 80036d4:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80036d8:	3304      	adds	r3, #4
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][2] = 1;
 80036de:	4bb7      	ldr	r3, [pc, #732]	; (80039bc <Graf_irany_feltolt+0x600>)
 80036e0:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80036e4:	3308      	adds	r3, #8
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][0] = 1;
 80036ea:	4bb4      	ldr	r3, [pc, #720]	; (80039bc <Graf_irany_feltolt+0x600>)
 80036ec:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80036f0:	3340      	adds	r3, #64	; 0x40
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][1] = 0;
 80036f6:	4bb1      	ldr	r3, [pc, #708]	; (80039bc <Graf_irany_feltolt+0x600>)
 80036f8:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80036fc:	3344      	adds	r3, #68	; 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][2] = 2;
 8003702:	4bae      	ldr	r3, [pc, #696]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003704:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
	graf_irany[16][12][0] = 1;
 800370e:	4bab      	ldr	r3, [pc, #684]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003710:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
	graf_irany[17][21][0] = 2;		// vagy kozep, fura keresztezodes
 8003718:	4ba8      	ldr	r3, [pc, #672]	; (80039bc <Graf_irany_feltolt+0x600>)
 800371a:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 800371e:	3340      	adds	r3, #64	; 0x40
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][0] = 0;
 8003724:	4ba5      	ldr	r3, [pc, #660]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003726:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][1] = 0;
 800372e:	4ba3      	ldr	r3, [pc, #652]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003730:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003734:	3304      	adds	r3, #4
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][0] = 0;
 800373a:	4ba0      	ldr	r3, [pc, #640]	; (80039bc <Graf_irany_feltolt+0x600>)
 800373c:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003740:	3340      	adds	r3, #64	; 0x40
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][1] = 1;
 8003746:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003748:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 800374c:	3344      	adds	r3, #68	; 0x44
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][0] = 0;
 8003752:	4b9a      	ldr	r3, [pc, #616]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003754:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][1] = 2;
 800375c:	4b97      	ldr	r3, [pc, #604]	; (80039bc <Graf_irany_feltolt+0x600>)
 800375e:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8003762:	3304      	adds	r3, #4
 8003764:	2202      	movs	r2, #2
 8003766:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][0] = 1;
 8003768:	4b94      	ldr	r3, [pc, #592]	; (80039bc <Graf_irany_feltolt+0x600>)
 800376a:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 800376e:	3360      	adds	r3, #96	; 0x60
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][1] = 2;
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003776:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 800377a:	3364      	adds	r3, #100	; 0x64
 800377c:	2202      	movs	r2, #2
 800377e:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][0] = 1; 	// I csucs kesz
 8003780:	4b8e      	ldr	r3, [pc, #568]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003782:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][1] = 0; 	// I csucs kesz
 800378a:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <Graf_irany_feltolt+0x600>)
 800378c:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8003790:	3304      	adds	r3, #4
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
	graf_irany[19][23][0] = 0;
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003798:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 800379c:	3340      	adds	r3, #64	; 0x40
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
	graf_irany[19][25][0] = 1;
 80037a2:	4b86      	ldr	r3, [pc, #536]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037a4:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
	graf_irany[19][27][0] = 2;
 80037ac:	4b83      	ldr	r3, [pc, #524]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037ae:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 80037b2:	3340      	adds	r3, #64	; 0x40
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][0] = 0;
 80037b8:	4b80      	ldr	r3, [pc, #512]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037ba:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 80037be:	3340      	adds	r3, #64	; 0x40
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][1] = 0;
 80037c4:	4b7d      	ldr	r3, [pc, #500]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037c6:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 80037ca:	3344      	adds	r3, #68	; 0x44
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][0] = 0;
 80037d0:	4b7a      	ldr	r3, [pc, #488]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037d2:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80037d6:	3320      	adds	r3, #32
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][1] = 2;
 80037dc:	4b77      	ldr	r3, [pc, #476]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037de:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
	graf_irany[21][23][0] = 0;
 80037e8:	4b74      	ldr	r3, [pc, #464]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037ea:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
	graf_irany[21][25][0] = 1;
 80037f2:	4b72      	ldr	r3, [pc, #456]	; (80039bc <Graf_irany_feltolt+0x600>)
 80037f4:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80037f8:	3340      	adds	r3, #64	; 0x40
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
	graf_irany[21][27][0] = 2;
 80037fe:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003800:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][0] = 1;
 8003808:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <Graf_irany_feltolt+0x600>)
 800380a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800380e:	3340      	adds	r3, #64	; 0x40
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][1] = 0;
 8003814:	4b69      	ldr	r3, [pc, #420]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003816:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800381a:	3344      	adds	r3, #68	; 0x44
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][2] = 1;
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003822:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003826:	3348      	adds	r3, #72	; 0x48
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][0] = 1;
 800382c:	4b63      	ldr	r3, [pc, #396]	; (80039bc <Graf_irany_feltolt+0x600>)
 800382e:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 8003832:	3340      	adds	r3, #64	; 0x40
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][1] = 2;
 8003838:	4b60      	ldr	r3, [pc, #384]	; (80039bc <Graf_irany_feltolt+0x600>)
 800383a:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 800383e:	3344      	adds	r3, #68	; 0x44
 8003840:	2202      	movs	r2, #2
 8003842:	601a      	str	r2, [r3, #0]
	graf_irany[22][18][0] = 0;
 8003844:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003846:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][0] = 0;
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003850:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][1] = 0;
 8003858:	4b58      	ldr	r3, [pc, #352]	; (80039bc <Graf_irany_feltolt+0x600>)
 800385a:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800385e:	3304      	adds	r3, #4
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][0] = 0;
 8003864:	4b55      	ldr	r3, [pc, #340]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003866:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800386a:	3360      	adds	r3, #96	; 0x60
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][1] = 2;
 8003870:	4b52      	ldr	r3, [pc, #328]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003872:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8003876:	3364      	adds	r3, #100	; 0x64
 8003878:	2202      	movs	r2, #2
 800387a:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][2] = 0;
 800387c:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <Graf_irany_feltolt+0x600>)
 800387e:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8003882:	3368      	adds	r3, #104	; 0x68
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][3] = 0;
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <Graf_irany_feltolt+0x600>)
 800388a:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800388e:	336c      	adds	r3, #108	; 0x6c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][4] = 0;
 8003894:	4b49      	ldr	r3, [pc, #292]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003896:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800389a:	3370      	adds	r3, #112	; 0x70
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][5] = 0;
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038a2:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80038a6:	3374      	adds	r3, #116	; 0x74
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][6] = 0;
 80038ac:	4b43      	ldr	r3, [pc, #268]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038ae:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 80038b2:	3378      	adds	r3, #120	; 0x78
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][0] = 2;
 80038b8:	4b40      	ldr	r3, [pc, #256]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038ba:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][1] = 1;
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038c4:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80038c8:	3304      	adds	r3, #4
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][2] = 0;
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038d0:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80038d4:	3308      	adds	r3, #8
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][3] = 1;
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038dc:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80038e0:	330c      	adds	r3, #12
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][0] = 2;
 80038e6:	4b35      	ldr	r3, [pc, #212]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038e8:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][1] = 1;
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038f2:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 80038f6:	3304      	adds	r3, #4
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][2] = 2;
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <Graf_irany_feltolt+0x600>)
 80038fe:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8003902:	3308      	adds	r3, #8
 8003904:	2202      	movs	r2, #2
 8003906:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][0] = 2;
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <Graf_irany_feltolt+0x600>)
 800390a:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800390e:	3340      	adds	r3, #64	; 0x40
 8003910:	2202      	movs	r2, #2
 8003912:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][0] = 0;
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003916:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800391a:	3340      	adds	r3, #64	; 0x40
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
	graf_irany[24][20][0] = 0;
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003922:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
	graf_irany[24][22][0] = 1; 	// L csucs kesz
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <Graf_irany_feltolt+0x600>)
 800392c:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][0] = 0;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003938:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800393c:	3340      	adds	r3, #64	; 0x40
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][1] = 0;
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003944:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8003948:	3344      	adds	r3, #68	; 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][0] = 0;
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003950:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003954:	3320      	adds	r3, #32
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][1] = 2;
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <Graf_irany_feltolt+0x600>)
 800395c:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][2] = 0;
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003968:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 800396c:	3328      	adds	r3, #40	; 0x28
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][3] = 0;
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003974:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003978:	332c      	adds	r3, #44	; 0x2c
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][4] = 0;
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003980:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003984:	3330      	adds	r3, #48	; 0x30
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][5] = 0;
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <Graf_irany_feltolt+0x600>)
 800398c:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003990:	3334      	adds	r3, #52	; 0x34
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][6] = 0;
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <Graf_irany_feltolt+0x600>)
 8003998:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 800399c:	3338      	adds	r3, #56	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][0] = 2;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <Graf_irany_feltolt+0x600>)
 80039a4:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80039a8:	3340      	adds	r3, #64	; 0x40
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][1] = 1;
 80039ae:	4b03      	ldr	r3, [pc, #12]	; (80039bc <Graf_irany_feltolt+0x600>)
 80039b0:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80039b4:	3344      	adds	r3, #68	; 0x44
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e001      	b.n	80039c0 <Graf_irany_feltolt+0x604>
 80039bc:	2000180c 	.word	0x2000180c
	graf_irany[26][12][2] = 0;
 80039c0:	4b7d      	ldr	r3, [pc, #500]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039c2:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80039c6:	3348      	adds	r3, #72	; 0x48
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][3] = 1;
 80039cc:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039ce:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 80039d2:	334c      	adds	r3, #76	; 0x4c
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][0] = 2;
 80039d8:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039da:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80039de:	3340      	adds	r3, #64	; 0x40
 80039e0:	2202      	movs	r2, #2
 80039e2:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][1] = 1;
 80039e4:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039e6:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80039ea:	3344      	adds	r3, #68	; 0x44
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][2] = 2;
 80039f0:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039f2:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 80039f6:	3348      	adds	r3, #72	; 0x48
 80039f8:	2202      	movs	r2, #2
 80039fa:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][0] = 2;
 80039fc:	4b6e      	ldr	r3, [pc, #440]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 80039fe:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8003a02:	2202      	movs	r2, #2
 8003a04:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][1] = 0;
 8003a06:	4b6c      	ldr	r3, [pc, #432]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a08:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
	graf_irany[26][20][0] = 0;
 8003a12:	4b69      	ldr	r3, [pc, #420]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a14:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8003a18:	3340      	adds	r3, #64	; 0x40
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
	graf_irany[26][22][0] = 1;
 8003a1e:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a20:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][0] = 2;
 8003a28:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a2a:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8003a2e:	3340      	adds	r3, #64	; 0x40
 8003a30:	2202      	movs	r2, #2
 8003a32:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][1] = 2;
 8003a34:	4b60      	ldr	r3, [pc, #384]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a36:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8003a3a:	3344      	adds	r3, #68	; 0x44
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][2] = 2;
 8003a40:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a42:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8003a46:	3348      	adds	r3, #72	; 0x48
 8003a48:	2202      	movs	r2, #2
 8003a4a:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][3] = 2;
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a4e:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8003a52:	334c      	adds	r3, #76	; 0x4c
 8003a54:	2202      	movs	r2, #2
 8003a56:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][4] = 2;
 8003a58:	4b57      	ldr	r3, [pc, #348]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a5a:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8003a5e:	3350      	adds	r3, #80	; 0x50
 8003a60:	2202      	movs	r2, #2
 8003a62:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][0] = 2;
 8003a64:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a66:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][1] = 1;
 8003a6e:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a70:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8003a74:	3304      	adds	r3, #4
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][2] = 0;
 8003a7a:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a7c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8003a80:	3308      	adds	r3, #8
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][3] = 1;
 8003a86:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a88:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 2;
 8003a92:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a94:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8003a98:	2202      	movs	r2, #2
 8003a9a:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 1;
 8003a9c:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003a9e:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 2;
 8003aa6:	4b44      	ldr	r3, [pc, #272]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003aa8:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8003aac:	2202      	movs	r2, #2
 8003aae:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][0] = 2;
 8003ab0:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003ab2:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8003ab6:	3340      	adds	r3, #64	; 0x40
 8003ab8:	2202      	movs	r2, #2
 8003aba:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][1] = 0;
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003abe:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8003ac2:	3344      	adds	r3, #68	; 0x44
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
	graf_irany[28][20][0] = 0;
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003aca:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
	graf_irany[28][22][0] = 1;
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003ad4:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 8003ad8:	3340      	adds	r3, #64	; 0x40
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][0] = 2;
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003ae0:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][1] = 0;
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003aec:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003af0:	3324      	adds	r3, #36	; 0x24
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][2] = 0;
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003af8:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003afc:	3328      	adds	r3, #40	; 0x28
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][3] = 0;
 8003b02:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b04:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003b08:	332c      	adds	r3, #44	; 0x2c
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][4] = 0;
 8003b0e:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b10:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003b14:	3330      	adds	r3, #48	; 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][5] = 0;
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b1c:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8003b20:	3334      	adds	r3, #52	; 0x34
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
	graf_irany[30][29][0] = 0;
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b28:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 8003b2c:	3360      	adds	r3, #96	; 0x60
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][0] = 2;
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b34:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b38:	3340      	adds	r3, #64	; 0x40
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][1] = 0;
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b40:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b44:	3344      	adds	r3, #68	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][2] = 0;
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b4c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b50:	3348      	adds	r3, #72	; 0x48
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][3] = 0;
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b58:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b5c:	334c      	adds	r3, #76	; 0x4c
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][4] = 0;
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b64:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][5] = 0;
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b70:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003b74:	3354      	adds	r3, #84	; 0x54
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
	graf_irany[31][24][0] = 0;
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b7c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8003b80:	33e0      	adds	r3, #224	; 0xe0
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
	graf_irany[31][24][1] = 2;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b88:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8003b8c:	33e4      	adds	r3, #228	; 0xe4
 8003b8e:	2202      	movs	r2, #2
 8003b90:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][0] = 0;
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003b94:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 8003b98:	3320      	adds	r3, #32
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][1] = 0;
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <Graf_irany_feltolt+0x7fc>)
 8003ba0:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 8003ba4:	3324      	adds	r3, #36	; 0x24
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
	// graf_irany[32][28][0] = -1;		egyenes ut vezet
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000180c 	.word	0x2000180c

08003bbc <Iranyok_torlo>:
			}
		}
	}
}

void Iranyok_torlo(void) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	e007      	b.n	8003bd8 <Iranyok_torlo+0x1c>
		iranyok[i] = 9;				// 9: nem igazi iranyt jelol
 8003bc8:	4a08      	ldr	r2, [pc, #32]	; (8003bec <Iranyok_torlo+0x30>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	2209      	movs	r2, #9
 8003bd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b63      	cmp	r3, #99	; 0x63
 8003bdc:	ddf4      	ble.n	8003bc8 <Iranyok_torlo+0xc>
	}
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	20000258 	.word	0x20000258

08003bf0 <Iranyok_osszeallito>:

void Iranyok_osszeallito(void) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
	for(int i = 9; 0 < i; i--) {
 8003bf6:	2309      	movs	r3, #9
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	e050      	b.n	8003c9e <Iranyok_osszeallito+0xae>
		if(road[i] != -1) {
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d046      	beq.n	8003c98 <Iranyok_osszeallito+0xa8>
			if(road[i] == 29) {
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	2b1d      	cmp	r3, #29
 8003c14:	d102      	bne.n	8003c1c <Iranyok_osszeallito+0x2c>
				tolatas = true;
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <Iranyok_osszeallito+0xc8>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
			}
			for(int j = 0; j < 8; j++) {
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	e037      	b.n	8003c92 <Iranyok_osszeallito+0xa2>
				// road[i]-bol road[i-1]-be "0 2 0" beirni az iranyokba
				if(graf_irany[ road[i] ] [ road[i-1] ] [ j ]  != -1) {
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003c30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003c34:	4821      	ldr	r0, [pc, #132]	; (8003cbc <Iranyok_osszeallito+0xcc>)
 8003c36:	4613      	mov	r3, r2
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	4413      	add	r3, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d01e      	beq.n	8003c8c <Iranyok_osszeallito+0x9c>
					iranyok[iranyok_elem] = graf_irany[ road[i] ] [ road[i-1] ] [ j ];
 8003c4e:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4916      	ldr	r1, [pc, #88]	; (8003cb4 <Iranyok_osszeallito+0xc4>)
 8003c5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003c60:	4816      	ldr	r0, [pc, #88]	; (8003cbc <Iranyok_osszeallito+0xcc>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	015b      	lsls	r3, r3, #5
 8003c66:	4413      	add	r3, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	00da      	lsls	r2, r3, #3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <Iranyok_osszeallito+0xd0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	b2c9      	uxtb	r1, r1
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <Iranyok_osszeallito+0xd4>)
 8003c7e:	5499      	strb	r1, [r3, r2]
					iranyok_elem++;
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <Iranyok_osszeallito+0xd0>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <Iranyok_osszeallito+0xd0>)
 8003c8a:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 8; j++) {
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b07      	cmp	r3, #7
 8003c96:	ddc4      	ble.n	8003c22 <Iranyok_osszeallito+0x32>
	for(int i = 9; 0 < i; i--) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dcab      	bgt.n	8003bfc <Iranyok_osszeallito+0xc>
				}
			}
		}
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000154 	.word	0x20000154
 8003cb8:	2000023b 	.word	0x2000023b
 8003cbc:	2000180c 	.word	0x2000180c
 8003cc0:	20000254 	.word	0x20000254
 8003cc4:	20000258 	.word	0x20000258

08003cc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd8:	d109      	bne.n	8003cee <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_GPIO_EXTI_Callback+0x34>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_GPIO_EXTI_Callback+0x34>)
 8003cec:	701a      	strb	r2, [r3, #0]
		/*szervoSzog += 90;
		if(szervoSzog > 200)
			szervoSzog = 0;
		SERVO_MoveTo(SZERVO, szervoSzog);*/
	}
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200001d8 	.word	0x200001d8

08003d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d04:	b672      	cpsid	i
}
 8003d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003d08:	e7fe      	b.n	8003d08 <Error_Handler+0x8>

08003d0a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d34:	6453      	str	r3, [r2, #68]	; 0x44
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_MspInit+0x4c>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d5e:	2007      	movs	r0, #7
 8003d60:	f000 fe9e 	bl	8004aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800

08003d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b090      	sub	sp, #64	; 0x40
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6b      	ldr	r2, [pc, #428]	; (8003f3c <HAL_I2C_MspInit+0x1cc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d12d      	bne.n	8003dee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a69      	ldr	r2, [pc, #420]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b67      	ldr	r3, [pc, #412]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db4:	2312      	movs	r3, #18
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc8:	4619      	mov	r1, r3
 8003dca:	485e      	ldr	r0, [pc, #376]	; (8003f44 <HAL_I2C_MspInit+0x1d4>)
 8003dcc:	f001 fbc2 	bl	8005554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4a59      	ldr	r2, [pc, #356]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dde:	6413      	str	r3, [r2, #64]	; 0x40
 8003de0:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003dec:	e0a2      	b.n	8003f34 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a55      	ldr	r2, [pc, #340]	; (8003f48 <HAL_I2C_MspInit+0x1d8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d14c      	bne.n	8003e92 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4a4f      	ldr	r2, [pc, #316]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e02:	f043 0302 	orr.w	r3, r3, #2
 8003e06:	6313      	str	r3, [r2, #48]	; 0x30
 8003e08:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4a48      	ldr	r2, [pc, #288]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	6313      	str	r3, [r2, #48]	; 0x30
 8003e24:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e36:	2312      	movs	r3, #18
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e42:	2304      	movs	r3, #4
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	483d      	ldr	r0, [pc, #244]	; (8003f44 <HAL_I2C_MspInit+0x1d4>)
 8003e4e:	f001 fb81 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e58:	2312      	movs	r3, #18
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e64:	2304      	movs	r3, #4
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4837      	ldr	r0, [pc, #220]	; (8003f4c <HAL_I2C_MspInit+0x1dc>)
 8003e70:	f001 fb70 	bl	8005554 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e82:	6413      	str	r3, [r2, #64]	; 0x40
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
}
 8003e90:	e050      	b.n	8003f34 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <HAL_I2C_MspInit+0x1e0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d14b      	bne.n	8003f34 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eda:	2312      	movs	r3, #18
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4816      	ldr	r0, [pc, #88]	; (8003f4c <HAL_I2C_MspInit+0x1dc>)
 8003ef2:	f001 fb2f 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003efc:	2312      	movs	r3, #18
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f04:	2303      	movs	r3, #3
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f08:	2304      	movs	r3, #4
 8003f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f10:	4619      	mov	r1, r3
 8003f12:	4810      	ldr	r0, [pc, #64]	; (8003f54 <HAL_I2C_MspInit+0x1e4>)
 8003f14:	f001 fb1e 	bl	8005554 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003f22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_I2C_MspInit+0x1d0>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3740      	adds	r7, #64	; 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40005400 	.word	0x40005400
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40005800 	.word	0x40005800
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	40005c00 	.word	0x40005c00
 8003f54:	40020000 	.word	0x40020000

08003f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b090      	sub	sp, #64	; 0x40
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <HAL_SPI_MspInit+0x280>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d12c      	bne.n	8003fd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7e:	4b97      	ldr	r3, [pc, #604]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a96      	ldr	r2, [pc, #600]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b94      	ldr	r3, [pc, #592]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	4b90      	ldr	r3, [pc, #576]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a8f      	ldr	r2, [pc, #572]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fb2:	23e0      	movs	r3, #224	; 0xe0
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4884      	ldr	r0, [pc, #528]	; (80041e0 <HAL_SPI_MspInit+0x288>)
 8003fce:	f001 fac1 	bl	8005554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fd2:	e0fd      	b.n	80041d0 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a82      	ldr	r2, [pc, #520]	; (80041e4 <HAL_SPI_MspInit+0x28c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d14b      	bne.n	8004076 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a7d      	ldr	r2, [pc, #500]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	4b77      	ldr	r3, [pc, #476]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a76      	ldr	r2, [pc, #472]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b74      	ldr	r3, [pc, #464]	; (80041dc <HAL_SPI_MspInit+0x284>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	4b70      	ldr	r3, [pc, #448]	; (80041dc <HAL_SPI_MspInit+0x284>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a6f      	ldr	r2, [pc, #444]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004032:	2302      	movs	r3, #2
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	2303      	movs	r3, #3
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004042:	2307      	movs	r3, #7
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800404a:	4619      	mov	r1, r3
 800404c:	4866      	ldr	r0, [pc, #408]	; (80041e8 <HAL_SPI_MspInit+0x290>)
 800404e:	f001 fa81 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004064:	2305      	movs	r3, #5
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800406c:	4619      	mov	r1, r3
 800406e:	485f      	ldr	r0, [pc, #380]	; (80041ec <HAL_SPI_MspInit+0x294>)
 8004070:	f001 fa70 	bl	8005554 <HAL_GPIO_Init>
}
 8004074:	e0ac      	b.n	80041d0 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <HAL_SPI_MspInit+0x298>)
 800407c:	4293      	cmp	r3, r2
 800407e:	f040 80a7 	bne.w	80041d0 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	4b55      	ldr	r3, [pc, #340]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a54      	ldr	r2, [pc, #336]	; (80041dc <HAL_SPI_MspInit+0x284>)
 800408c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b52      	ldr	r3, [pc, #328]	; (80041dc <HAL_SPI_MspInit+0x284>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a4d      	ldr	r2, [pc, #308]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	4a46      	ldr	r2, [pc, #280]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ca:	4b44      	ldr	r3, [pc, #272]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_SPI_MspInit+0x284>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040f2:	2301      	movs	r3, #1
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fe:	2303      	movs	r3, #3
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004102:	2307      	movs	r3, #7
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800410a:	4619      	mov	r1, r3
 800410c:	4837      	ldr	r0, [pc, #220]	; (80041ec <HAL_SPI_MspInit+0x294>)
 800410e:	f001 fa21 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004118:	2302      	movs	r3, #2
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004120:	2303      	movs	r3, #3
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004124:	2306      	movs	r3, #6
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412c:	4619      	mov	r1, r3
 800412e:	482c      	ldr	r0, [pc, #176]	; (80041e0 <HAL_SPI_MspInit+0x288>)
 8004130:	f001 fa10 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413a:	2302      	movs	r3, #2
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004142:	2303      	movs	r3, #3
 8004144:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004146:	2306      	movs	r3, #6
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414e:	4619      	mov	r1, r3
 8004150:	4825      	ldr	r0, [pc, #148]	; (80041e8 <HAL_SPI_MspInit+0x290>)
 8004152:	f001 f9ff 	bl	8005554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004156:	2310      	movs	r3, #16
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004166:	2306      	movs	r3, #6
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800416e:	4619      	mov	r1, r3
 8004170:	481e      	ldr	r0, [pc, #120]	; (80041ec <HAL_SPI_MspInit+0x294>)
 8004172:	f001 f9ef 	bl	8005554 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8004176:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_SPI_MspInit+0x2a0>)
 800417a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 800417e:	2200      	movs	r2, #0
 8004180:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 8004190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004194:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004196:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80041b4:	480f      	ldr	r0, [pc, #60]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041b6:	f000 fce3 	bl	8004b80 <HAL_DMA_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 80041c0:	f7ff fd9e 	bl	8003d00 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041c8:	649a      	str	r2, [r3, #72]	; 0x48
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_SPI_MspInit+0x29c>)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80041d0:	bf00      	nop
 80041d2:	3740      	adds	r7, #64	; 0x40
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40013000 	.word	0x40013000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40003800 	.word	0x40003800
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020400 	.word	0x40020400
 80041f0:	40003c00 	.word	0x40003c00
 80041f4:	200004f4 	.word	0x200004f4
 80041f8:	40026088 	.word	0x40026088

080041fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d116      	bne.n	800423c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	2100      	movs	r1, #0
 800422e:	201c      	movs	r0, #28
 8004230:	f000 fc56 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004234:	201c      	movs	r0, #28
 8004236:	f000 fc7f 	bl	8004b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800423a:	e036      	b.n	80042aa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_TIM_Base_MspInit+0xbc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d116      	bne.n	8004274 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8004262:	2201      	movs	r2, #1
 8004264:	2100      	movs	r1, #0
 8004266:	202b      	movs	r0, #43	; 0x2b
 8004268:	f000 fc3a 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800426c:	202b      	movs	r0, #43	; 0x2b
 800426e:	f000 fc63 	bl	8004b38 <HAL_NVIC_EnableIRQ>
}
 8004272:	e01a      	b.n	80042aa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a10      	ldr	r2, [pc, #64]	; (80042bc <HAL_TIM_Base_MspInit+0xc0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d115      	bne.n	80042aa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_TIM_Base_MspInit+0xb8>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 800429a:	2201      	movs	r2, #1
 800429c:	2100      	movs	r1, #0
 800429e:	202b      	movs	r0, #43	; 0x2b
 80042a0:	f000 fc1e 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80042a4:	202b      	movs	r0, #43	; 0x2b
 80042a6:	f000 fc47 	bl	8004b38 <HAL_NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40010400 	.word	0x40010400
 80042bc:	40001800 	.word	0x40001800

080042c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <HAL_TIM_PWM_MspInit+0x48>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d115      	bne.n	80042fe <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_TIM_PWM_MspInit+0x4c>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <HAL_TIM_PWM_MspInit+0x4c>)
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_TIM_PWM_MspInit+0x4c>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	201d      	movs	r0, #29
 80042f4:	f000 fbf4 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042f8:	201d      	movs	r0, #29
 80042fa:	f000 fc1d 	bl	8004b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40000400 	.word	0x40000400
 800430c:	40023800 	.word	0x40023800

08004310 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d133      	bne.n	800439a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800436a:	23c0      	movs	r3, #192	; 0xc0
 800436c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800437a:	2302      	movs	r3, #2
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4809      	ldr	r0, [pc, #36]	; (80043ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8004386:	f001 f8e5 	bl	8005554 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	201e      	movs	r0, #30
 8004390:	f000 fba6 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004394:	201e      	movs	r0, #30
 8004396:	f000 fbcf 	bl	8004b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800439a:	bf00      	nop
 800439c:	3728      	adds	r7, #40	; 0x28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40020400 	.word	0x40020400

080043b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a37      	ldr	r2, [pc, #220]	; (80044ac <HAL_TIM_MspPostInit+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d11e      	bne.n	8004410 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043fe:	2302      	movs	r3, #2
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	4619      	mov	r1, r3
 8004408:	482a      	ldr	r0, [pc, #168]	; (80044b4 <HAL_TIM_MspPostInit+0x104>)
 800440a:	f001 f8a3 	bl	8005554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800440e:	e048      	b.n	80044a2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a28      	ldr	r2, [pc, #160]	; (80044b8 <HAL_TIM_MspPostInit+0x108>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d11f      	bne.n	800445a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004436:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800443a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004448:	2303      	movs	r3, #3
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4619      	mov	r1, r3
 8004452:	4818      	ldr	r0, [pc, #96]	; (80044b4 <HAL_TIM_MspPostInit+0x104>)
 8004454:	f001 f87e 	bl	8005554 <HAL_GPIO_Init>
}
 8004458:	e023      	b.n	80044a2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_TIM_MspPostInit+0x10c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d11e      	bne.n	80044a2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 800446e:	f043 0302 	orr.w	r3, r3, #2
 8004472:	6313      	str	r3, [r2, #48]	; 0x30
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004480:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004492:	2309      	movs	r3, #9
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	4619      	mov	r1, r3
 800449c:	4808      	ldr	r0, [pc, #32]	; (80044c0 <HAL_TIM_MspPostInit+0x110>)
 800449e:	f001 f859 	bl	8005554 <HAL_GPIO_Init>
}
 80044a2:	bf00      	nop
 80044a4:	3728      	adds	r7, #40	; 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40020800 	.word	0x40020800
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40001800 	.word	0x40001800
 80044c0:	40020400 	.word	0x40020400

080044c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	; 0x38
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5f      	ldr	r2, [pc, #380]	; (8004660 <HAL_UART_MspInit+0x19c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d153      	bne.n	800458e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80044f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
 80044f6:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	4b57      	ldr	r3, [pc, #348]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6313      	str	r3, [r2, #48]	; 0x30
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a4f      	ldr	r2, [pc, #316]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b4d      	ldr	r3, [pc, #308]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800453a:	2301      	movs	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004546:	2303      	movs	r3, #3
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800454a:	2308      	movs	r3, #8
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004552:	4619      	mov	r1, r3
 8004554:	4844      	ldr	r0, [pc, #272]	; (8004668 <HAL_UART_MspInit+0x1a4>)
 8004556:	f000 fffd 	bl	8005554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800455a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004564:	2301      	movs	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004568:	2303      	movs	r3, #3
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800456c:	2308      	movs	r3, #8
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004574:	4619      	mov	r1, r3
 8004576:	483d      	ldr	r0, [pc, #244]	; (800466c <HAL_UART_MspInit+0x1a8>)
 8004578:	f000 ffec 	bl	8005554 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800457c:	2200      	movs	r2, #0
 800457e:	2100      	movs	r1, #0
 8004580:	2034      	movs	r0, #52	; 0x34
 8004582:	f000 faad 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004586:	2034      	movs	r0, #52	; 0x34
 8004588:	f000 fad6 	bl	8004b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800458c:	e063      	b.n	8004656 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a37      	ldr	r2, [pc, #220]	; (8004670 <HAL_UART_MspInit+0x1ac>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d12d      	bne.n	80045f4 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	4a30      	ldr	r2, [pc, #192]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80045a2:	f043 0310 	orr.w	r3, r3, #16
 80045a6:	6453      	str	r3, [r2, #68]	; 0x44
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6313      	str	r3, [r2, #48]	; 0x30
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045de:	2303      	movs	r3, #3
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045e2:	2307      	movs	r3, #7
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ea:	4619      	mov	r1, r3
 80045ec:	481e      	ldr	r0, [pc, #120]	; (8004668 <HAL_UART_MspInit+0x1a4>)
 80045ee:	f000 ffb1 	bl	8005554 <HAL_GPIO_Init>
}
 80045f2:	e030      	b.n	8004656 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_UART_MspInit+0x1b0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d12b      	bne.n	8004656 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a17      	ldr	r2, [pc, #92]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4a10      	ldr	r2, [pc, #64]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6313      	str	r3, [r2, #48]	; 0x30
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_UART_MspInit+0x1a0>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004636:	230c      	movs	r3, #12
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463a:	2302      	movs	r3, #2
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004642:	2303      	movs	r3, #3
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004646:	2307      	movs	r3, #7
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464e:	4619      	mov	r1, r3
 8004650:	4805      	ldr	r0, [pc, #20]	; (8004668 <HAL_UART_MspInit+0x1a4>)
 8004652:	f000 ff7f 	bl	8005554 <HAL_GPIO_Init>
}
 8004656:	bf00      	nop
 8004658:	3738      	adds	r7, #56	; 0x38
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40004c00 	.word	0x40004c00
 8004664:	40023800 	.word	0x40023800
 8004668:	40020000 	.word	0x40020000
 800466c:	40020800 	.word	0x40020800
 8004670:	40011000 	.word	0x40011000
 8004674:	40004400 	.word	0x40004400

08004678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800467c:	e7fe      	b.n	800467c <NMI_Handler+0x4>

0800467e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004682:	e7fe      	b.n	8004682 <HardFault_Handler+0x4>

08004684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004688:	e7fe      	b.n	8004688 <MemManage_Handler+0x4>

0800468a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800468e:	e7fe      	b.n	800468e <BusFault_Handler+0x4>

08004690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <UsageFault_Handler+0x4>

08004696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c4:	f000 f8d8 	bl	8004878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}

080046cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <DMA1_Stream5_IRQHandler+0x10>)
 80046d2:	f000 fd03 	bl	80050dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200004f4 	.word	0x200004f4

080046e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <TIM2_IRQHandler+0x10>)
 80046e6:	f004 fea1 	bl	800942c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20001738 	.word	0x20001738

080046f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <TIM3_IRQHandler+0x10>)
 80046fa:	f004 fe97 	bl	800942c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000454 	.word	0x20000454

08004708 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <TIM4_IRQHandler+0x10>)
 800470e:	f004 fe8d 	bl	800942c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000364 	.word	0x20000364

0800471c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004720:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004724:	f001 fa6c 	bl	8005c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}

0800472c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004730:	4803      	ldr	r0, [pc, #12]	; (8004740 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004732:	f004 fe7b 	bl	800942c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004736:	4803      	ldr	r0, [pc, #12]	; (8004744 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004738:	f004 fe78 	bl	800942c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	2000031c 	.word	0x2000031c
 8004744:	200017c4 	.word	0x200017c4

08004748 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800474c:	4802      	ldr	r0, [pc, #8]	; (8004758 <UART4_IRQHandler+0x10>)
 800474e:	f006 fb85 	bl	800ae5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	2000169c 	.word	0x2000169c

0800475c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <SystemInit+0x20>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <SystemInit+0x20>)
 8004768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800476c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004784:	480d      	ldr	r0, [pc, #52]	; (80047bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004786:	490e      	ldr	r1, [pc, #56]	; (80047c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800478a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800478c:	e002      	b.n	8004794 <LoopCopyDataInit>

0800478e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800478e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004792:	3304      	adds	r3, #4

08004794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004798:	d3f9      	bcc.n	800478e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800479c:	4c0b      	ldr	r4, [pc, #44]	; (80047cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800479e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047a0:	e001      	b.n	80047a6 <LoopFillZerobss>

080047a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047a4:	3204      	adds	r2, #4

080047a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a8:	d3fb      	bcc.n	80047a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047aa:	f7ff ffd7 	bl	800475c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ae:	f00c fe17 	bl	80113e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047b2:	f7fc fd8f 	bl	80012d4 <main>
  bx  lr    
 80047b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047c0:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80047c4:	0801178c 	.word	0x0801178c
  ldr r2, =_sbss
 80047c8:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80047cc:	2000a130 	.word	0x2000a130

080047d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047d0:	e7fe      	b.n	80047d0 <ADC_IRQHandler>
	...

080047d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_Init+0x40>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <HAL_Init+0x40>)
 80047de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_Init+0x40>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_Init+0x40>)
 80047ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_Init+0x40>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <HAL_Init+0x40>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047fc:	2003      	movs	r0, #3
 80047fe:	f000 f94f 	bl	8004aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004802:	2000      	movs	r0, #0
 8004804:	f000 f808 	bl	8004818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004808:	f7ff fa8a 	bl	8003d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00

08004818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_InitTick+0x54>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_InitTick+0x58>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800482e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f996 	bl	8004b68 <HAL_SYSTICK_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e00e      	b.n	8004864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d80a      	bhi.n	8004862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800484c:	2200      	movs	r2, #0
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	f000 f944 	bl	8004ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004858:	4a06      	ldr	r2, [pc, #24]	; (8004874 <HAL_InitTick+0x5c>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	2000017c 	.word	0x2000017c
 8004870:	20000184 	.word	0x20000184
 8004874:	20000180 	.word	0x20000180

08004878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_IncTick+0x20>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_IncTick+0x24>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4413      	add	r3, r2
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_IncTick+0x24>)
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000184 	.word	0x20000184
 800489c:	2000a02c 	.word	0x2000a02c

080048a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return uwTick;
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <HAL_GetTick+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000a02c 	.word	0x2000a02c

080048b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048c0:	f7ff ffee 	bl	80048a0 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d005      	beq.n	80048de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_Delay+0x44>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048de:	bf00      	nop
 80048e0:	f7ff ffde 	bl	80048a0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d8f7      	bhi.n	80048e0 <HAL_Delay+0x28>
  {
  }
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000184 	.word	0x20000184

08004900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <__NVIC_SetPriorityGrouping+0x44>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800491c:	4013      	ands	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004932:	4a04      	ldr	r2, [pc, #16]	; (8004944 <__NVIC_SetPriorityGrouping+0x44>)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	60d3      	str	r3, [r2, #12]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <__NVIC_GetPriorityGrouping+0x18>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 0307 	and.w	r3, r3, #7
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	db0b      	blt.n	800498e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	f003 021f 	and.w	r2, r3, #31
 800497c:	4907      	ldr	r1, [pc, #28]	; (800499c <__NVIC_EnableIRQ+0x38>)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2001      	movs	r0, #1
 8004986:	fa00 f202 	lsl.w	r2, r0, r2
 800498a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000e100 	.word	0xe000e100

080049a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db0a      	blt.n	80049ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	490c      	ldr	r1, [pc, #48]	; (80049ec <__NVIC_SetPriority+0x4c>)
 80049ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049be:	0112      	lsls	r2, r2, #4
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	440b      	add	r3, r1
 80049c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049c8:	e00a      	b.n	80049e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4908      	ldr	r1, [pc, #32]	; (80049f0 <__NVIC_SetPriority+0x50>)
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	3b04      	subs	r3, #4
 80049d8:	0112      	lsls	r2, r2, #4
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	440b      	add	r3, r1
 80049de:	761a      	strb	r2, [r3, #24]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000e100 	.word	0xe000e100
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f1c3 0307 	rsb	r3, r3, #7
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	bf28      	it	cs
 8004a12:	2304      	movcs	r3, #4
 8004a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d902      	bls.n	8004a24 <NVIC_EncodePriority+0x30>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3b03      	subs	r3, #3
 8004a22:	e000      	b.n	8004a26 <NVIC_EncodePriority+0x32>
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43da      	mvns	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	401a      	ands	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	43d9      	mvns	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a4c:	4313      	orrs	r3, r2
         );
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a6c:	d301      	bcc.n	8004a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e00f      	b.n	8004a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <SysTick_Config+0x40>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a7a:	210f      	movs	r1, #15
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	f7ff ff8e 	bl	80049a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <SysTick_Config+0x40>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <SysTick_Config+0x40>)
 8004a8c:	2207      	movs	r2, #7
 8004a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	e000e010 	.word	0xe000e010

08004aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b07      	cmp	r3, #7
 8004aac:	d00f      	beq.n	8004ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d00c      	beq.n	8004ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d009      	beq.n	8004ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d006      	beq.n	8004ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d003      	beq.n	8004ace <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ac6:	2192      	movs	r1, #146	; 0x92
 8004ac8:	4804      	ldr	r0, [pc, #16]	; (8004adc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004aca:	f7ff f91e 	bl	8003d0a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ff16 	bl	8004900 <__NVIC_SetPriorityGrouping>
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	08011494 	.word	0x08011494

08004ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d903      	bls.n	8004b00 <HAL_NVIC_SetPriority+0x20>
 8004af8:	21aa      	movs	r1, #170	; 0xaa
 8004afa:	480e      	ldr	r0, [pc, #56]	; (8004b34 <HAL_NVIC_SetPriority+0x54>)
 8004afc:	f7ff f905 	bl	8003d0a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d903      	bls.n	8004b0e <HAL_NVIC_SetPriority+0x2e>
 8004b06:	21ab      	movs	r1, #171	; 0xab
 8004b08:	480a      	ldr	r0, [pc, #40]	; (8004b34 <HAL_NVIC_SetPriority+0x54>)
 8004b0a:	f7ff f8fe 	bl	8003d0a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b0e:	f7ff ff1b 	bl	8004948 <__NVIC_GetPriorityGrouping>
 8004b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff ff6b 	bl	80049f4 <NVIC_EncodePriority>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff3a 	bl	80049a0 <__NVIC_SetPriority>
}
 8004b2c:	bf00      	nop
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08011494 	.word	0x08011494

08004b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da03      	bge.n	8004b52 <HAL_NVIC_EnableIRQ+0x1a>
 8004b4a:	21be      	movs	r1, #190	; 0xbe
 8004b4c:	4805      	ldr	r0, [pc, #20]	; (8004b64 <HAL_NVIC_EnableIRQ+0x2c>)
 8004b4e:	f7ff f8dc 	bl	8003d0a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff04 	bl	8004964 <__NVIC_EnableIRQ>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	08011494 	.word	0x08011494

08004b68 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff73 	bl	8004a5c <SysTick_Config>
 8004b76:	4603      	mov	r3, r0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7ff fe88 	bl	80048a0 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e204      	b.n	8004fa6 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a97      	ldr	r2, [pc, #604]	; (8004e00 <HAL_DMA_Init+0x280>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d04e      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a96      	ldr	r2, [pc, #600]	; (8004e04 <HAL_DMA_Init+0x284>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d049      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a94      	ldr	r2, [pc, #592]	; (8004e08 <HAL_DMA_Init+0x288>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d044      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a93      	ldr	r2, [pc, #588]	; (8004e0c <HAL_DMA_Init+0x28c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d03f      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a91      	ldr	r2, [pc, #580]	; (8004e10 <HAL_DMA_Init+0x290>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03a      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a90      	ldr	r2, [pc, #576]	; (8004e14 <HAL_DMA_Init+0x294>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d035      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a8e      	ldr	r2, [pc, #568]	; (8004e18 <HAL_DMA_Init+0x298>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d030      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a8d      	ldr	r2, [pc, #564]	; (8004e1c <HAL_DMA_Init+0x29c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02b      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a8b      	ldr	r2, [pc, #556]	; (8004e20 <HAL_DMA_Init+0x2a0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d026      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a8a      	ldr	r2, [pc, #552]	; (8004e24 <HAL_DMA_Init+0x2a4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d021      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a88      	ldr	r2, [pc, #544]	; (8004e28 <HAL_DMA_Init+0x2a8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01c      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a87      	ldr	r2, [pc, #540]	; (8004e2c <HAL_DMA_Init+0x2ac>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d017      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a85      	ldr	r2, [pc, #532]	; (8004e30 <HAL_DMA_Init+0x2b0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d012      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a84      	ldr	r2, [pc, #528]	; (8004e34 <HAL_DMA_Init+0x2b4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00d      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a82      	ldr	r2, [pc, #520]	; (8004e38 <HAL_DMA_Init+0x2b8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d008      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a81      	ldr	r2, [pc, #516]	; (8004e3c <HAL_DMA_Init+0x2bc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <HAL_DMA_Init+0xc4>
 8004c3c:	21b8      	movs	r1, #184	; 0xb8
 8004c3e:	4880      	ldr	r0, [pc, #512]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004c40:	f7ff f863 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d026      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c54:	d021      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5e:	d01c      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004c68:	d017      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c72:	d012      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004c7c:	d00d      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c86:	d008      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004c90:	d003      	beq.n	8004c9a <HAL_DMA_Init+0x11a>
 8004c92:	21b9      	movs	r1, #185	; 0xb9
 8004c94:	486a      	ldr	r0, [pc, #424]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004c96:	f7ff f838 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <HAL_DMA_Init+0x13a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d007      	beq.n	8004cba <HAL_DMA_Init+0x13a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d003      	beq.n	8004cba <HAL_DMA_Init+0x13a>
 8004cb2:	21ba      	movs	r1, #186	; 0xba
 8004cb4:	4862      	ldr	r0, [pc, #392]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004cb6:	f7ff f828 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	d007      	beq.n	8004cd4 <HAL_DMA_Init+0x154>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_DMA_Init+0x154>
 8004ccc:	21bb      	movs	r1, #187	; 0xbb
 8004cce:	485c      	ldr	r0, [pc, #368]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004cd0:	f7ff f81b 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_Init+0x16e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_DMA_Init+0x16e>
 8004ce6:	21bc      	movs	r1, #188	; 0xbc
 8004ce8:	4855      	ldr	r0, [pc, #340]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004cea:	f7ff f80e 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <HAL_DMA_Init+0x192>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d008      	beq.n	8004d12 <HAL_DMA_Init+0x192>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d003      	beq.n	8004d12 <HAL_DMA_Init+0x192>
 8004d0a:	21bd      	movs	r1, #189	; 0xbd
 8004d0c:	484c      	ldr	r0, [pc, #304]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004d0e:	f7fe fffc 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <HAL_DMA_Init+0x1b6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	d008      	beq.n	8004d36 <HAL_DMA_Init+0x1b6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d2c:	d003      	beq.n	8004d36 <HAL_DMA_Init+0x1b6>
 8004d2e:	21be      	movs	r1, #190	; 0xbe
 8004d30:	4843      	ldr	r0, [pc, #268]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004d32:	f7fe ffea 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_DMA_Init+0x1d8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d007      	beq.n	8004d58 <HAL_DMA_Init+0x1d8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d003      	beq.n	8004d58 <HAL_DMA_Init+0x1d8>
 8004d50:	21bf      	movs	r1, #191	; 0xbf
 8004d52:	483b      	ldr	r0, [pc, #236]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004d54:	f7fe ffd9 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <HAL_DMA_Init+0x206>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d68:	d00d      	beq.n	8004d86 <HAL_DMA_Init+0x206>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d72:	d008      	beq.n	8004d86 <HAL_DMA_Init+0x206>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d7c:	d003      	beq.n	8004d86 <HAL_DMA_Init+0x206>
 8004d7e:	21c0      	movs	r1, #192	; 0xc0
 8004d80:	482f      	ldr	r0, [pc, #188]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004d82:	f7fe ffc2 	bl	8003d0a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_DMA_Init+0x21e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d003      	beq.n	8004d9e <HAL_DMA_Init+0x21e>
 8004d96:	21c1      	movs	r1, #193	; 0xc1
 8004d98:	4829      	ldr	r0, [pc, #164]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004d9a:	f7fe ffb6 	bl	8003d0a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d065      	beq.n	8004e72 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_DMA_Init+0x24e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d00b      	beq.n	8004dce <HAL_DMA_Init+0x24e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d007      	beq.n	8004dce <HAL_DMA_Init+0x24e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d003      	beq.n	8004dce <HAL_DMA_Init+0x24e>
 8004dc6:	21c6      	movs	r1, #198	; 0xc6
 8004dc8:	481d      	ldr	r0, [pc, #116]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004dca:	f7fe ff9e 	bl	8003d0a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d036      	beq.n	8004e44 <HAL_DMA_Init+0x2c4>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dde:	d031      	beq.n	8004e44 <HAL_DMA_Init+0x2c4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004de8:	d02c      	beq.n	8004e44 <HAL_DMA_Init+0x2c4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df2:	d027      	beq.n	8004e44 <HAL_DMA_Init+0x2c4>
 8004df4:	21c7      	movs	r1, #199	; 0xc7
 8004df6:	4812      	ldr	r0, [pc, #72]	; (8004e40 <HAL_DMA_Init+0x2c0>)
 8004df8:	f7fe ff87 	bl	8003d0a <assert_failed>
 8004dfc:	e022      	b.n	8004e44 <HAL_DMA_Init+0x2c4>
 8004dfe:	bf00      	nop
 8004e00:	40026010 	.word	0x40026010
 8004e04:	40026028 	.word	0x40026028
 8004e08:	40026040 	.word	0x40026040
 8004e0c:	40026058 	.word	0x40026058
 8004e10:	40026070 	.word	0x40026070
 8004e14:	40026088 	.word	0x40026088
 8004e18:	400260a0 	.word	0x400260a0
 8004e1c:	400260b8 	.word	0x400260b8
 8004e20:	40026410 	.word	0x40026410
 8004e24:	40026428 	.word	0x40026428
 8004e28:	40026440 	.word	0x40026440
 8004e2c:	40026458 	.word	0x40026458
 8004e30:	40026470 	.word	0x40026470
 8004e34:	40026488 	.word	0x40026488
 8004e38:	400264a0 	.word	0x400264a0
 8004e3c:	400264b8 	.word	0x400264b8
 8004e40:	080114d0 	.word	0x080114d0
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d012      	beq.n	8004e72 <HAL_DMA_Init+0x2f2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e54:	d00d      	beq.n	8004e72 <HAL_DMA_Init+0x2f2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5e:	d008      	beq.n	8004e72 <HAL_DMA_Init+0x2f2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e68:	d003      	beq.n	8004e72 <HAL_DMA_Init+0x2f2>
 8004e6a:	21c8      	movs	r1, #200	; 0xc8
 8004e6c:	4850      	ldr	r0, [pc, #320]	; (8004fb0 <HAL_DMA_Init+0x430>)
 8004e6e:	f7fe ff4c 	bl	8003d0a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e92:	e00f      	b.n	8004eb4 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e94:	f7ff fd04 	bl	80048a0 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d908      	bls.n	8004eb4 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e078      	b.n	8004fa6 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e8      	bne.n	8004e94 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4b39      	ldr	r3, [pc, #228]	; (8004fb4 <HAL_DMA_Init+0x434>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d107      	bne.n	8004f1e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d117      	bne.n	8004f78 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa7e 	bl	800545c <DMA_CheckFifoParam>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f74:	2301      	movs	r3, #1
 8004f76:	e016      	b.n	8004fa6 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa35 	bl	80053f0 <DMA_CalcBaseAndBitshift>
 8004f86:	4603      	mov	r3, r0
 8004f88:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8e:	223f      	movs	r2, #63	; 0x3f
 8004f90:	409a      	lsls	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	080114d0 	.word	0x080114d0
 8004fb4:	f010803f 	.word	0xf010803f

08004fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fc6:	f7ff fc6b 	bl	80048a0 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d008      	beq.n	8004fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e052      	b.n	8005090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0216 	bic.w	r2, r2, #22
 8004ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <HAL_DMA_Abort+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0208 	bic.w	r2, r2, #8
 8005028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800503a:	e013      	b.n	8005064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800503c:	f7ff fc30 	bl	80048a0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b05      	cmp	r3, #5
 8005048:	d90c      	bls.n	8005064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2203      	movs	r2, #3
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e015      	b.n	8005090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e4      	bne.n	800503c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005076:	223f      	movs	r2, #63	; 0x3f
 8005078:	409a      	lsls	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00c      	b.n	80050d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2205      	movs	r2, #5
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050e8:	4b92      	ldr	r3, [pc, #584]	; (8005334 <HAL_DMA_IRQHandler+0x258>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a92      	ldr	r2, [pc, #584]	; (8005338 <HAL_DMA_IRQHandler+0x25c>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	0a9b      	lsrs	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	2208      	movs	r2, #8
 8005108:	409a      	lsls	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01a      	beq.n	8005148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2208      	movs	r2, #8
 8005136:	409a      	lsls	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0201 	orr.w	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	2201      	movs	r2, #1
 800516c:	409a      	lsls	r2, r3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0202 	orr.w	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	2204      	movs	r2, #4
 8005184:	409a      	lsls	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00b      	beq.n	80051b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	2204      	movs	r2, #4
 80051a2:	409a      	lsls	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	2210      	movs	r2, #16
 80051ba:	409a      	lsls	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d043      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03c      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	2210      	movs	r2, #16
 80051d8:	409a      	lsls	r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d018      	beq.n	800521e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d108      	bne.n	800520c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d024      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
 800520a:	e01f      	b.n	800524c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
 800521c:	e016      	b.n	800524c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0208 	bic.w	r2, r2, #8
 800523a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005250:	2220      	movs	r2, #32
 8005252:	409a      	lsls	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 808e 	beq.w	800537a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8086 	beq.w	800537a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	2220      	movs	r2, #32
 8005274:	409a      	lsls	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b05      	cmp	r3, #5
 8005284:	d136      	bne.n	80052f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0216 	bic.w	r2, r2, #22
 8005294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x1da>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0208 	bic.w	r2, r2, #8
 80052c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	223f      	movs	r2, #63	; 0x3f
 80052cc:	409a      	lsls	r2, r3
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d07d      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
        }
        return;
 80052f2:	e078      	b.n	80053e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01c      	beq.n	800533c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	2b00      	cmp	r3, #0
 8005316:	d030      	beq.n	800537a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
 8005320:	e02b      	b.n	800537a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d027      	beq.n	800537a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
 8005332:	e022      	b.n	800537a <HAL_DMA_IRQHandler+0x29e>
 8005334:	2000017c 	.word	0x2000017c
 8005338:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0210 	bic.w	r2, r2, #16
 8005358:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	2b00      	cmp	r3, #0
 8005380:	d032      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d022      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2205      	movs	r2, #5
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d307      	bcc.n	80053c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f2      	bne.n	80053a6 <HAL_DMA_IRQHandler+0x2ca>
 80053c0:	e000      	b.n	80053c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80053c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
 80053e4:	e000      	b.n	80053e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80053e6:	bf00      	nop
    }
  }
}
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	3b10      	subs	r3, #16
 8005400:	4a14      	ldr	r2, [pc, #80]	; (8005454 <DMA_CalcBaseAndBitshift+0x64>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <DMA_CalcBaseAndBitshift+0x68>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d909      	bls.n	8005432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	1d1a      	adds	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	659a      	str	r2, [r3, #88]	; 0x58
 8005430:	e007      	b.n	8005442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	aaaaaaab 	.word	0xaaaaaaab
 8005458:	0801174c 	.word	0x0801174c

0800545c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d11f      	bne.n	80054b6 <DMA_CheckFifoParam+0x5a>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d856      	bhi.n	800552a <DMA_CheckFifoParam+0xce>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <DMA_CheckFifoParam+0x28>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a7 	.word	0x080054a7
 800548c:	08005495 	.word	0x08005495
 8005490:	0800552b 	.word	0x0800552b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d046      	beq.n	800552e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a4:	e043      	b.n	800552e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054ae:	d140      	bne.n	8005532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b4:	e03d      	b.n	8005532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	d121      	bne.n	8005504 <DMA_CheckFifoParam+0xa8>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d837      	bhi.n	8005536 <DMA_CheckFifoParam+0xda>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <DMA_CheckFifoParam+0x70>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054e3 	.word	0x080054e3
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	080054f5 	.word	0x080054f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e030      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d025      	beq.n	800553a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f2:	e022      	b.n	800553a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054fc:	d11f      	bne.n	800553e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005502:	e01c      	b.n	800553e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d903      	bls.n	8005512 <DMA_CheckFifoParam+0xb6>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d003      	beq.n	8005518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005510:	e018      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
      break;
 8005516:	e015      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e00b      	b.n	8005542 <DMA_CheckFifoParam+0xe6>
      break;
 800552a:	bf00      	nop
 800552c:	e00a      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;
 800552e:	bf00      	nop
 8005530:	e008      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;
 8005532:	bf00      	nop
 8005534:	e006      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;
 8005536:	bf00      	nop
 8005538:	e004      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;   
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <DMA_CheckFifoParam+0xe8>
      break;
 8005542:	bf00      	nop
    }
  } 
  
  return status; 
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a37      	ldr	r2, [pc, #220]	; (800564c <HAL_GPIO_Init+0xf8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a36      	ldr	r2, [pc, #216]	; (8005650 <HAL_GPIO_Init+0xfc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01b      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a35      	ldr	r2, [pc, #212]	; (8005654 <HAL_GPIO_Init+0x100>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a34      	ldr	r2, [pc, #208]	; (8005658 <HAL_GPIO_Init+0x104>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a33      	ldr	r2, [pc, #204]	; (800565c <HAL_GPIO_Init+0x108>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00f      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a32      	ldr	r2, [pc, #200]	; (8005660 <HAL_GPIO_Init+0x10c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a31      	ldr	r2, [pc, #196]	; (8005664 <HAL_GPIO_Init+0x110>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a30      	ldr	r2, [pc, #192]	; (8005668 <HAL_GPIO_Init+0x114>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <HAL_GPIO_Init+0x5e>
 80055aa:	21ac      	movs	r1, #172	; 0xac
 80055ac:	482f      	ldr	r0, [pc, #188]	; (800566c <HAL_GPIO_Init+0x118>)
 80055ae:	f7fe fbac 	bl	8003d0a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_GPIO_Init+0x74>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x7c>
 80055c8:	21ad      	movs	r1, #173	; 0xad
 80055ca:	4828      	ldr	r0, [pc, #160]	; (800566c <HAL_GPIO_Init+0x118>)
 80055cc:	f7fe fb9d 	bl	8003d0a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d035      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d031      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b11      	cmp	r3, #17
 80055e6:	d02d      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d029      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b12      	cmp	r3, #18
 80055f6:	d025      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005600:	d020      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800560a:	d01b      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005614:	d016      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800561e:	d011      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005628:	d00c      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005632:	d007      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b03      	cmp	r3, #3
 800563a:	d003      	beq.n	8005644 <HAL_GPIO_Init+0xf0>
 800563c:	21ae      	movs	r1, #174	; 0xae
 800563e:	480b      	ldr	r0, [pc, #44]	; (800566c <HAL_GPIO_Init+0x118>)
 8005640:	f7fe fb63 	bl	8003d0a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e289      	b.n	8005b5e <HAL_GPIO_Init+0x60a>
 800564a:	bf00      	nop
 800564c:	40020000 	.word	0x40020000
 8005650:	40020400 	.word	0x40020400
 8005654:	40020800 	.word	0x40020800
 8005658:	40020c00 	.word	0x40020c00
 800565c:	40021000 	.word	0x40021000
 8005660:	40021400 	.word	0x40021400
 8005664:	40021800 	.word	0x40021800
 8005668:	40021c00 	.word	0x40021c00
 800566c:	08011508 	.word	0x08011508
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005670:	2201      	movs	r2, #1
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	f040 8265 	bne.w	8005b58 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d005      	beq.n	80056a6 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d144      	bne.n	8005730 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00f      	beq.n	80056ce <HAL_GPIO_Init+0x17a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d00b      	beq.n	80056ce <HAL_GPIO_Init+0x17a>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d007      	beq.n	80056ce <HAL_GPIO_Init+0x17a>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_Init+0x17a>
 80056c6:	21c0      	movs	r1, #192	; 0xc0
 80056c8:	4831      	ldr	r0, [pc, #196]	; (8005790 <HAL_GPIO_Init+0x23c>)
 80056ca:	f7fe fb1e 	bl	8003d0a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	2203      	movs	r2, #3
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005704:	2201      	movs	r2, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 0201 	and.w	r2, r3, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4313      	orrs	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	2b03      	cmp	r3, #3
 800573a:	d02b      	beq.n	8005794 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_GPIO_Init+0x208>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d007      	beq.n	800575c <HAL_GPIO_Init+0x208>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x208>
 8005754:	21d1      	movs	r1, #209	; 0xd1
 8005756:	480e      	ldr	r0, [pc, #56]	; (8005790 <HAL_GPIO_Init+0x23c>)
 8005758:	f7fe fad7 	bl	8003d0a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e002      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800578e:	bf00      	nop
 8005790:	08011508 	.word	0x08011508
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	2b02      	cmp	r3, #2
 800579e:	f040 810c 	bne.w	80059ba <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80e3 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	f000 80de 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80d9 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80d4 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80cf 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80ca 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	f000 80c5 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f000 80c0 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	f000 80bb 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f000 80b6 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b02      	cmp	r3, #2
 800580c:	f000 80b1 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b03      	cmp	r3, #3
 8005816:	f000 80ac 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b04      	cmp	r3, #4
 8005820:	f000 80a7 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b04      	cmp	r3, #4
 800582a:	f000 80a2 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b04      	cmp	r3, #4
 8005834:	f000 809d 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b05      	cmp	r3, #5
 800583e:	f000 8098 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b05      	cmp	r3, #5
 8005848:	f000 8093 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b09      	cmp	r3, #9
 8005852:	f000 808e 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b06      	cmp	r3, #6
 800585c:	f000 8089 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b09      	cmp	r3, #9
 8005866:	f000 8084 	beq.w	8005972 <HAL_GPIO_Init+0x41e>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b07      	cmp	r3, #7
 8005870:	d07f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b07      	cmp	r3, #7
 8005878:	d07b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b07      	cmp	r3, #7
 8005880:	d077      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d073      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b08      	cmp	r3, #8
 8005890:	d06f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b08      	cmp	r3, #8
 8005898:	d06b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d067      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d063      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b0a      	cmp	r3, #10
 80058b0:	d05f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b0a      	cmp	r3, #10
 80058b8:	d05b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b0b      	cmp	r3, #11
 80058c0:	d057      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b0c      	cmp	r3, #12
 80058c8:	d053      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	d04f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b0d      	cmp	r3, #13
 80058d8:	d04b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d047      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d043      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d03f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d03b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d037      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d033      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d02f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b06      	cmp	r3, #6
 8005918:	d02b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b06      	cmp	r3, #6
 8005920:	d027      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b07      	cmp	r3, #7
 8005928:	d023      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b07      	cmp	r3, #7
 8005930:	d01f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b07      	cmp	r3, #7
 8005938:	d01b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b07      	cmp	r3, #7
 8005940:	d017      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d013      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b08      	cmp	r3, #8
 8005950:	d00f      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b09      	cmp	r3, #9
 8005958:	d00b      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b0a      	cmp	r3, #10
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b0a      	cmp	r3, #10
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x41e>
 800596a:	21de      	movs	r1, #222	; 0xde
 800596c:	4880      	ldr	r0, [pc, #512]	; (8005b70 <HAL_GPIO_Init+0x61c>)
 800596e:	f7fe f9cc 	bl	8003d0a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	08da      	lsrs	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3208      	adds	r2, #8
 800597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	08da      	lsrs	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3208      	adds	r2, #8
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80ae 	beq.w	8005b58 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	4b5c      	ldr	r3, [pc, #368]	; (8005b74 <HAL_GPIO_Init+0x620>)
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <HAL_GPIO_Init+0x620>)
 8005a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_GPIO_Init+0x620>)
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a18:	4a57      	ldr	r2, [pc, #348]	; (8005b78 <HAL_GPIO_Init+0x624>)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	089b      	lsrs	r3, r3, #2
 8005a1e:	3302      	adds	r3, #2
 8005a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	220f      	movs	r2, #15
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a4f      	ldr	r2, [pc, #316]	; (8005b7c <HAL_GPIO_Init+0x628>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d025      	beq.n	8005a90 <HAL_GPIO_Init+0x53c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <HAL_GPIO_Init+0x62c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d01f      	beq.n	8005a8c <HAL_GPIO_Init+0x538>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a4d      	ldr	r2, [pc, #308]	; (8005b84 <HAL_GPIO_Init+0x630>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d019      	beq.n	8005a88 <HAL_GPIO_Init+0x534>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a4c      	ldr	r2, [pc, #304]	; (8005b88 <HAL_GPIO_Init+0x634>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <HAL_GPIO_Init+0x530>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a4b      	ldr	r2, [pc, #300]	; (8005b8c <HAL_GPIO_Init+0x638>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00d      	beq.n	8005a80 <HAL_GPIO_Init+0x52c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a4a      	ldr	r2, [pc, #296]	; (8005b90 <HAL_GPIO_Init+0x63c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <HAL_GPIO_Init+0x528>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a49      	ldr	r2, [pc, #292]	; (8005b94 <HAL_GPIO_Init+0x640>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_GPIO_Init+0x524>
 8005a74:	2306      	movs	r3, #6
 8005a76:	e00c      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a78:	2307      	movs	r3, #7
 8005a7a:	e00a      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a7c:	2305      	movs	r3, #5
 8005a7e:	e008      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a80:	2304      	movs	r3, #4
 8005a82:	e006      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a84:	2303      	movs	r3, #3
 8005a86:	e004      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e002      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_GPIO_Init+0x53e>
 8005a90:	2300      	movs	r3, #0
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f002 0203 	and.w	r2, r2, #3
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	4093      	lsls	r3, r2
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa2:	4935      	ldr	r1, [pc, #212]	; (8005b78 <HAL_GPIO_Init+0x624>)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab0:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ad4:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ada:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005afe:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <HAL_GPIO_Init+0x644>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b0f      	cmp	r3, #15
 8005b62:	f67f ad85 	bls.w	8005670 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8005b66:	bf00      	nop
 8005b68:	bf00      	nop
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	08011508 	.word	0x08011508
 8005b74:	40023800 	.word	0x40023800
 8005b78:	40013800 	.word	0x40013800
 8005b7c:	40020000 	.word	0x40020000
 8005b80:	40020400 	.word	0x40020400
 8005b84:	40020800 	.word	0x40020800
 8005b88:	40020c00 	.word	0x40020c00
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40021400 	.word	0x40021400
 8005b94:	40021800 	.word	0x40021800
 8005b98:	40013c00 	.word	0x40013c00

08005b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <HAL_GPIO_WritePin+0x20>
 8005bb2:	887b      	ldrh	r3, [r7, #2]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <HAL_GPIO_WritePin+0x2a>
 8005bbc:	f240 119d 	movw	r1, #413	; 0x19d
 8005bc0:	480e      	ldr	r0, [pc, #56]	; (8005bfc <HAL_GPIO_WritePin+0x60>)
 8005bc2:	f7fe f8a2 	bl	8003d0a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005bc6:	787b      	ldrb	r3, [r7, #1]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HAL_GPIO_WritePin+0x40>
 8005bcc:	787b      	ldrb	r3, [r7, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d004      	beq.n	8005bdc <HAL_GPIO_WritePin+0x40>
 8005bd2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005bd6:	4809      	ldr	r0, [pc, #36]	; (8005bfc <HAL_GPIO_WritePin+0x60>)
 8005bd8:	f7fe f897 	bl	8003d0a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be8:	e003      	b.n	8005bf2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	619a      	str	r2, [r3, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08011508 	.word	0x08011508

08005c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d006      	beq.n	8005c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c16:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f852 	bl	8003cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40013c00 	.word	0x40013c00

08005c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e1be      	b.n	8005fc0 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a9f      	ldr	r2, [pc, #636]	; (8005ec4 <HAL_I2C_Init+0x294>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_I2C_Init+0x3a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a9d      	ldr	r2, [pc, #628]	; (8005ec8 <HAL_I2C_Init+0x298>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_I2C_Init+0x3a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a9c      	ldr	r2, [pc, #624]	; (8005ecc <HAL_I2C_Init+0x29c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_I2C_Init+0x3a>
 8005c60:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005c64:	489a      	ldr	r0, [pc, #616]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005c66:	f7fe f850 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_I2C_Init+0x4c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4a97      	ldr	r2, [pc, #604]	; (8005ed4 <HAL_I2C_Init+0x2a4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d904      	bls.n	8005c86 <HAL_I2C_Init+0x56>
 8005c7c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005c80:	4893      	ldr	r0, [pc, #588]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005c82:	f7fe f842 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_I2C_Init+0x72>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c96:	d004      	beq.n	8005ca2 <HAL_I2C_Init+0x72>
 8005c98:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005c9c:	488c      	ldr	r0, [pc, #560]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005c9e:	f7fe f834 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <HAL_I2C_Init+0x8c>
 8005cb2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005cb6:	4886      	ldr	r0, [pc, #536]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005cb8:	f7fe f827 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc4:	d009      	beq.n	8005cda <HAL_I2C_Init+0xaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cce:	d004      	beq.n	8005cda <HAL_I2C_Init+0xaa>
 8005cd0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005cd4:	487e      	ldr	r0, [pc, #504]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005cd6:	f7fe f818 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_I2C_Init+0xc4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d004      	beq.n	8005cf4 <HAL_I2C_Init+0xc4>
 8005cea:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005cee:	4878      	ldr	r0, [pc, #480]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005cf0:	f7fe f80b 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <HAL_I2C_Init+0xda>
 8005d00:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005d04:	4872      	ldr	r0, [pc, #456]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005d06:	f7fe f800 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_I2C_Init+0xf4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d004      	beq.n	8005d24 <HAL_I2C_Init+0xf4>
 8005d1a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005d1e:	486c      	ldr	r0, [pc, #432]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005d20:	f7fd fff3 	bl	8003d0a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_I2C_Init+0x10e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d004      	beq.n	8005d3e <HAL_I2C_Init+0x10e>
 8005d34:	f240 11c7 	movw	r1, #455	; 0x1c7
 8005d38:	4865      	ldr	r0, [pc, #404]	; (8005ed0 <HAL_I2C_Init+0x2a0>)
 8005d3a:	f7fd ffe6 	bl	8003d0a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fe f80c 	bl	8003d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d90:	f001 f96e 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 8005d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4a4f      	ldr	r2, [pc, #316]	; (8005ed8 <HAL_I2C_Init+0x2a8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d807      	bhi.n	8005db0 <HAL_I2C_Init+0x180>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a4e      	ldr	r2, [pc, #312]	; (8005edc <HAL_I2C_Init+0x2ac>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bf94      	ite	ls
 8005da8:	2301      	movls	r3, #1
 8005daa:	2300      	movhi	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e006      	b.n	8005dbe <HAL_I2C_Init+0x18e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a4b      	ldr	r2, [pc, #300]	; (8005ee0 <HAL_I2C_Init+0x2b0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bf94      	ite	ls
 8005db8:	2301      	movls	r3, #1
 8005dba:	2300      	movhi	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0fc      	b.n	8005fc0 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a46      	ldr	r2, [pc, #280]	; (8005ee4 <HAL_I2C_Init+0x2b4>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	0c9b      	lsrs	r3, r3, #18
 8005dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a38      	ldr	r2, [pc, #224]	; (8005ed8 <HAL_I2C_Init+0x2a8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d802      	bhi.n	8005e00 <HAL_I2C_Init+0x1d0>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	e009      	b.n	8005e14 <HAL_I2C_Init+0x1e4>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a37      	ldr	r2, [pc, #220]	; (8005ee8 <HAL_I2C_Init+0x2b8>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	3301      	adds	r3, #1
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	492a      	ldr	r1, [pc, #168]	; (8005ed8 <HAL_I2C_Init+0x2a8>)
 8005e30:	428b      	cmp	r3, r1
 8005e32:	d819      	bhi.n	8005e68 <HAL_I2C_Init+0x238>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1e59      	subs	r1, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e48:	400b      	ands	r3, r1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_I2C_Init+0x234>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1e59      	subs	r1, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	e066      	b.n	8005f32 <HAL_I2C_Init+0x302>
 8005e64:	2304      	movs	r3, #4
 8005e66:	e064      	b.n	8005f32 <HAL_I2C_Init+0x302>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d111      	bne.n	8005e94 <HAL_I2C_Init+0x264>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1e58      	subs	r0, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6859      	ldr	r1, [r3, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	440b      	add	r3, r1
 8005e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e82:	3301      	adds	r3, #1
 8005e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e012      	b.n	8005eba <HAL_I2C_Init+0x28a>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1e58      	subs	r0, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	0099      	lsls	r1, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eaa:	3301      	adds	r3, #1
 8005eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <HAL_I2C_Init+0x2bc>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e037      	b.n	8005f32 <HAL_I2C_Init+0x302>
 8005ec2:	bf00      	nop
 8005ec4:	40005400 	.word	0x40005400
 8005ec8:	40005800 	.word	0x40005800
 8005ecc:	40005c00 	.word	0x40005c00
 8005ed0:	08011544 	.word	0x08011544
 8005ed4:	00061a80 	.word	0x00061a80
 8005ed8:	000186a0 	.word	0x000186a0
 8005edc:	001e847f 	.word	0x001e847f
 8005ee0:	003d08ff 	.word	0x003d08ff
 8005ee4:	431bde83 	.word	0x431bde83
 8005ee8:	10624dd3 	.word	0x10624dd3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10e      	bne.n	8005f12 <HAL_I2C_Init+0x2e2>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	1e58      	subs	r0, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6859      	ldr	r1, [r3, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	440b      	add	r3, r1
 8005f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f10:	e00f      	b.n	8005f32 <HAL_I2C_Init+0x302>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1e58      	subs	r0, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	0099      	lsls	r1, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	6809      	ldr	r1, [r1, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6911      	ldr	r1, [r2, #16]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68d2      	ldr	r2, [r2, #12]
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	430b      	orrs	r3, r1
 8005f74:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	817b      	strh	r3, [r7, #10]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fdc:	f7fe fc60 	bl	80048a0 <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	f040 80e0 	bne.w	80061b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	2319      	movs	r3, #25
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4970      	ldr	r1, [pc, #448]	; (80061bc <HAL_I2C_Master_Transmit+0x1f4>)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fc58 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
 8006008:	e0d3      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_I2C_Master_Transmit+0x50>
 8006014:	2302      	movs	r3, #2
 8006016:	e0cc      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	d007      	beq.n	800603e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800604c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2210      	movs	r2, #16
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	893a      	ldrh	r2, [r7, #8]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a50      	ldr	r2, [pc, #320]	; (80061c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fac2 	bl	8006610 <I2C_MasterRequestWrite>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e08d      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80060ac:	e066      	b.n	800617c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	6a39      	ldr	r1, [r7, #32]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fcd2 	bl	8006a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d107      	bne.n	80060d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e06b      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b04      	cmp	r3, #4
 8006116:	d11b      	bne.n	8006150 <HAL_I2C_Master_Transmit+0x188>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d017      	beq.n	8006150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	6a39      	ldr	r1, [r7, #32]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fcc2 	bl	8006ade <I2C_WaitOnBTFFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	2b04      	cmp	r3, #4
 8006166:	d107      	bne.n	8006178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e01a      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d194      	bne.n	80060ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e000      	b.n	80061b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80061b0:	2302      	movs	r3, #2
  }
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	00100002 	.word	0x00100002
 80061c0:	ffff0000 	.word	0xffff0000

080061c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	; 0x30
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	461a      	mov	r2, r3
 80061d0:	460b      	mov	r3, r1
 80061d2:	817b      	strh	r3, [r7, #10]
 80061d4:	4613      	mov	r3, r2
 80061d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061d8:	f7fe fb62 	bl	80048a0 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	f040 820b 	bne.w	8006602 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2319      	movs	r3, #25
 80061f2:	2201      	movs	r2, #1
 80061f4:	497c      	ldr	r1, [pc, #496]	; (80063e8 <HAL_I2C_Master_Receive+0x224>)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fb5a 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
 8006204:	e1fe      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2C_Master_Receive+0x50>
 8006210:	2302      	movs	r3, #2
 8006212:	e1f7      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d007      	beq.n	800623a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2222      	movs	r2, #34	; 0x22
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2210      	movs	r2, #16
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	893a      	ldrh	r2, [r7, #8]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a5c      	ldr	r2, [pc, #368]	; (80063ec <HAL_I2C_Master_Receive+0x228>)
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800627c:	8979      	ldrh	r1, [r7, #10]
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fa46 	bl	8006714 <I2C_MasterRequestRead>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e1b8      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d113      	bne.n	80062c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e18c      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d11b      	bne.n	8006302 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e16c      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006306:	2b02      	cmp	r3, #2
 8006308:	d11b      	bne.n	8006342 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	e14c      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006368:	e138      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	2b03      	cmp	r3, #3
 8006370:	f200 80f1 	bhi.w	8006556 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006378:	2b01      	cmp	r3, #1
 800637a:	d123      	bne.n	80063c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fbed 	bl	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e139      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c2:	e10b      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d14e      	bne.n	800646a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	2200      	movs	r2, #0
 80063d4:	4906      	ldr	r1, [pc, #24]	; (80063f0 <HAL_I2C_Master_Receive+0x22c>)
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fa6a 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e10e      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
 80063e6:	bf00      	nop
 80063e8:	00100002 	.word	0x00100002
 80063ec:	ffff0000 	.word	0xffff0000
 80063f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006468:	e0b8      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	4966      	ldr	r1, [pc, #408]	; (800660c <HAL_I2C_Master_Receive+0x448>)
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa1b 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0bf      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2200      	movs	r2, #0
 80064ce:	494f      	ldr	r1, [pc, #316]	; (800660c <HAL_I2C_Master_Receive+0x448>)
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f9ed 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e091      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006554:	e042      	b.n	80065dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fb00 	bl	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e04c      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d118      	bne.n	80065dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f47f aec2 	bne.w	800636a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	00010004 	.word	0x00010004

08006610 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	460b      	mov	r3, r1
 800661e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d006      	beq.n	800663a <I2C_MasterRequestWrite+0x2a>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d003      	beq.n	800663a <I2C_MasterRequestWrite+0x2a>
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006638:	d108      	bne.n	800664c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e00b      	b.n	8006664 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	2b12      	cmp	r3, #18
 8006652:	d107      	bne.n	8006664 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006662:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f91d 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668a:	d103      	bne.n	8006694 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e035      	b.n	8006704 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a0:	d108      	bne.n	80066b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066a2:	897b      	ldrh	r3, [r7, #10]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066b0:	611a      	str	r2, [r3, #16]
 80066b2:	e01b      	b.n	80066ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066b4:	897b      	ldrh	r3, [r7, #10]
 80066b6:	11db      	asrs	r3, r3, #7
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 0306 	and.w	r3, r3, #6
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f063 030f 	orn	r3, r3, #15
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	490e      	ldr	r1, [pc, #56]	; (800670c <I2C_MasterRequestWrite+0xfc>)
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f943 	bl	800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e010      	b.n	8006704 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4907      	ldr	r1, [pc, #28]	; (8006710 <I2C_MasterRequestWrite+0x100>)
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f933 	bl	800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	00010008 	.word	0x00010008
 8006710:	00010002 	.word	0x00010002

08006714 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	460b      	mov	r3, r1
 8006722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006738:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d006      	beq.n	800674e <I2C_MasterRequestRead+0x3a>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d003      	beq.n	800674e <I2C_MasterRequestRead+0x3a>
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800674c:	d108      	bne.n	8006760 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e00b      	b.n	8006778 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	2b11      	cmp	r3, #17
 8006766:	d107      	bne.n	8006778 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006776:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f893 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800679e:	d103      	bne.n	80067a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e079      	b.n	80068a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b4:	d108      	bne.n	80067c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	611a      	str	r2, [r3, #16]
 80067c6:	e05f      	b.n	8006888 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067c8:	897b      	ldrh	r3, [r7, #10]
 80067ca:	11db      	asrs	r3, r3, #7
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0306 	and.w	r3, r3, #6
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f063 030f 	orn	r3, r3, #15
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4930      	ldr	r1, [pc, #192]	; (80068a8 <I2C_MasterRequestRead+0x194>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8b9 	bl	800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e054      	b.n	80068a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4929      	ldr	r1, [pc, #164]	; (80068ac <I2C_MasterRequestRead+0x198>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f8a9 	bl	800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e044      	b.n	80068a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800683a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f831 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006862:	d103      	bne.n	800686c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e017      	b.n	80068a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	11db      	asrs	r3, r3, #7
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 0306 	and.w	r3, r3, #6
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f063 030e 	orn	r3, r3, #14
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <I2C_MasterRequestRead+0x198>)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f865 	bl	800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	00010008 	.word	0x00010008
 80068ac:	00010002 	.word	0x00010002

080068b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c0:	e025      	b.n	800690e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d021      	beq.n	800690e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fd ffe9 	bl	80048a0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e023      	b.n	8006956 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10d      	bne.n	8006934 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	e00c      	b.n	800694e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	43da      	mvns	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	429a      	cmp	r2, r3
 8006952:	d0b6      	beq.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800696c:	e051      	b.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697c:	d123      	bne.n	80069c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006996:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f043 0204 	orr.w	r2, r3, #4
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e046      	b.n	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d021      	beq.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ce:	f7fd ff67 	bl	80048a0 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d116      	bne.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e020      	b.n	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d10c      	bne.n	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	43da      	mvns	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4013      	ands	r3, r2
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	e00b      	b.n	8006a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	43da      	mvns	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4013      	ands	r3, r2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d18d      	bne.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a68:	e02d      	b.n	8006ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f8ce 	bl	8006c0c <I2C_IsAcknowledgeFailed>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e02d      	b.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d021      	beq.n	8006ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a82:	f7fd ff0d 	bl	80048a0 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d116      	bne.n	8006ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f043 0220 	orr.w	r2, r3, #32
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e007      	b.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d1ca      	bne.n	8006a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aea:	e02d      	b.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f88d 	bl	8006c0c <I2C_IsAcknowledgeFailed>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e02d      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d021      	beq.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b04:	f7fd fecc 	bl	80048a0 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d302      	bcc.n	8006b1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d116      	bne.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e007      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d1ca      	bne.n	8006aec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b6c:	e042      	b.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d119      	bne.n	8006bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0210 	mvn.w	r2, #16
 8006b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e029      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb0:	f7fd fe76 	bl	80048a0 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e007      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d1b5      	bne.n	8006b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c22:	d11b      	bne.n	8006c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	f043 0204 	orr.w	r2, r3, #4
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8006c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c84:	6413      	str	r3, [r2, #64]	; 0x40
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c92:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <HAL_PWREx_EnableOverDrive+0x94>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c98:	f7fd fe02 	bl	80048a0 <HAL_GetTick>
 8006c9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c9e:	e009      	b.n	8006cb4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ca0:	f7fd fdfe 	bl	80048a0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cae:	d901      	bls.n	8006cb4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e01f      	b.n	8006cf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d1ee      	bne.n	8006ca0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cc8:	f7fd fdea 	bl	80048a0 <HAL_GetTick>
 8006ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006cce:	e009      	b.n	8006ce4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006cd0:	f7fd fde6 	bl	80048a0 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cde:	d901      	bls.n	8006ce4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e007      	b.n	8006cf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf0:	d1ee      	bne.n	8006cd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	420e0040 	.word	0x420e0040
 8006d04:	40007000 	.word	0x40007000
 8006d08:	420e0044 	.word	0x420e0044

08006d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e18c      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x24>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b0f      	cmp	r3, #15
 8006d2e:	d904      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x2e>
 8006d30:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8006d34:	4887      	ldr	r0, [pc, #540]	; (8006f54 <HAL_RCC_ClockConfig+0x248>)
 8006d36:	f7fc ffe8 	bl	8003d0a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d031      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d02e      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d02b      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d028      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d025      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	d022      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	d01f      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b07      	cmp	r3, #7
 8006d68:	d01c      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d019      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d016      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b0a      	cmp	r3, #10
 8006d7a:	d013      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b0b      	cmp	r3, #11
 8006d80:	d010      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b0c      	cmp	r3, #12
 8006d86:	d00d      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b0d      	cmp	r3, #13
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b0e      	cmp	r3, #14
 8006d92:	d007      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d004      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x98>
 8006d9a:	f240 215d 	movw	r1, #605	; 0x25d
 8006d9e:	486d      	ldr	r0, [pc, #436]	; (8006f54 <HAL_RCC_ClockConfig+0x248>)
 8006da0:	f7fc ffb3 	bl	8003d0a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4b6c      	ldr	r3, [pc, #432]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90c      	bls.n	8006dcc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db2:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b67      	ldr	r3, [pc, #412]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e136      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d049      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006de4:	4b5d      	ldr	r3, [pc, #372]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4a5c      	ldr	r2, [pc, #368]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dfc:	4b57      	ldr	r3, [pc, #348]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4a56      	ldr	r2, [pc, #344]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d024      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d020      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b90      	cmp	r3, #144	; 0x90
 8006e1e:	d01c      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2ba0      	cmp	r3, #160	; 0xa0
 8006e26:	d018      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2bb0      	cmp	r3, #176	; 0xb0
 8006e2e:	d014      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2bc0      	cmp	r3, #192	; 0xc0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2bd0      	cmp	r3, #208	; 0xd0
 8006e3e:	d00c      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2be0      	cmp	r3, #224	; 0xe0
 8006e46:	d008      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2bf0      	cmp	r3, #240	; 0xf0
 8006e4e:	d004      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x14e>
 8006e50:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006e54:	483f      	ldr	r0, [pc, #252]	; (8006f54 <HAL_RCC_ClockConfig+0x248>)
 8006e56:	f7fc ff58 	bl	8003d0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e5a:	4b40      	ldr	r3, [pc, #256]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	493d      	ldr	r1, [pc, #244]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d059      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x196>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d00c      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x196>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d008      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x196>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d004      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x196>
 8006e98:	f240 2187 	movw	r1, #647	; 0x287
 8006e9c:	482d      	ldr	r0, [pc, #180]	; (8006f54 <HAL_RCC_ClockConfig+0x248>)
 8006e9e:	f7fc ff34 	bl	8003d0a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d107      	bne.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eaa:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d119      	bne.n	8006eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e0bf      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d003      	beq.n	8006eca <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e0af      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e0a7      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f023 0203 	bic.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4919      	ldr	r1, [pc, #100]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006efc:	f7fd fcd0 	bl	80048a0 <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f04:	f7fd fccc 	bl	80048a0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e08f      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_RCC_ClockConfig+0x250>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 020c 	and.w	r2, r3, #12
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d1eb      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d212      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <HAL_RCC_ClockConfig+0x24c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d007      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e072      	b.n	800703a <HAL_RCC_ClockConfig+0x32e>
 8006f54:	0801157c 	.word	0x0801157c
 8006f58:	40023c00 	.word	0x40023c00
 8006f5c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d025      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d018      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x29a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7c:	d013      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x29a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f86:	d00e      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x29a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006f90:	d009      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x29a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006f9a:	d004      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x29a>
 8006f9c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006fa0:	4828      	ldr	r0, [pc, #160]	; (8007044 <HAL_RCC_ClockConfig+0x338>)
 8006fa2:	f7fc feb2 	bl	8003d0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa6:	4b28      	ldr	r3, [pc, #160]	; (8007048 <HAL_RCC_ClockConfig+0x33c>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4925      	ldr	r1, [pc, #148]	; (8007048 <HAL_RCC_ClockConfig+0x33c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d026      	beq.n	8007012 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d018      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x2f2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd4:	d013      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x2f2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fde:	d00e      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x2f2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x2f2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006ff2:	d004      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x2f2>
 8006ff4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006ff8:	4812      	ldr	r0, [pc, #72]	; (8007044 <HAL_RCC_ClockConfig+0x338>)
 8006ffa:	f7fc fe86 	bl	8003d0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <HAL_RCC_ClockConfig+0x33c>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	490e      	ldr	r1, [pc, #56]	; (8007048 <HAL_RCC_ClockConfig+0x33c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007012:	f000 f855 	bl	80070c0 <HAL_RCC_GetSysClockFreq>
 8007016:	4602      	mov	r2, r0
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <HAL_RCC_ClockConfig+0x33c>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	490a      	ldr	r1, [pc, #40]	; (800704c <HAL_RCC_ClockConfig+0x340>)
 8007024:	5ccb      	ldrb	r3, [r1, r3]
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <HAL_RCC_ClockConfig+0x344>)
 800702c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <HAL_RCC_ClockConfig+0x348>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd fbf0 	bl	8004818 <HAL_InitTick>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	0801157c 	.word	0x0801157c
 8007048:	40023800 	.word	0x40023800
 800704c:	08011734 	.word	0x08011734
 8007050:	2000017c 	.word	0x2000017c
 8007054:	20000180 	.word	0x20000180

08007058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800705c:	4b03      	ldr	r3, [pc, #12]	; (800706c <HAL_RCC_GetHCLKFreq+0x14>)
 800705e:	681b      	ldr	r3, [r3, #0]
}
 8007060:	4618      	mov	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2000017c 	.word	0x2000017c

08007070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007074:	f7ff fff0 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	0a9b      	lsrs	r3, r3, #10
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	4903      	ldr	r1, [pc, #12]	; (8007094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007086:	5ccb      	ldrb	r3, [r1, r3]
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800708c:	4618      	mov	r0, r3
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40023800 	.word	0x40023800
 8007094:	08011744 	.word	0x08011744

08007098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800709c:	f7ff ffdc 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	0b5b      	lsrs	r3, r3, #13
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	4903      	ldr	r1, [pc, #12]	; (80070bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ae:	5ccb      	ldrb	r3, [r1, r3]
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40023800 	.word	0x40023800
 80070bc:	08011744 	.word	0x08011744

080070c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070dc:	4bce      	ldr	r3, [pc, #824]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 030c 	and.w	r3, r3, #12
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	f200 818d 	bhi.w	8007404 <HAL_RCC_GetSysClockFreq+0x344>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_RCC_GetSysClockFreq+0x30>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007405 	.word	0x08007405
 80070f8:	08007405 	.word	0x08007405
 80070fc:	08007405 	.word	0x08007405
 8007100:	0800712b 	.word	0x0800712b
 8007104:	08007405 	.word	0x08007405
 8007108:	08007405 	.word	0x08007405
 800710c:	08007405 	.word	0x08007405
 8007110:	08007131 	.word	0x08007131
 8007114:	08007405 	.word	0x08007405
 8007118:	08007405 	.word	0x08007405
 800711c:	08007405 	.word	0x08007405
 8007120:	080072a5 	.word	0x080072a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007124:	4bbd      	ldr	r3, [pc, #756]	; (800741c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007126:	61bb      	str	r3, [r7, #24]
       break;
 8007128:	e16f      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800712a:	4bbd      	ldr	r3, [pc, #756]	; (8007420 <HAL_RCC_GetSysClockFreq+0x360>)
 800712c:	61bb      	str	r3, [r7, #24]
      break;
 800712e:	e16c      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007130:	4bb9      	ldr	r3, [pc, #740]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007138:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800713a:	4bb7      	ldr	r3, [pc, #732]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d053      	beq.n	80071ee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007146:	4bb4      	ldr	r3, [pc, #720]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	461a      	mov	r2, r3
 800714e:	f04f 0300 	mov.w	r3, #0
 8007152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	ea02 0400 	and.w	r4, r2, r0
 800715e:	603c      	str	r4, [r7, #0]
 8007160:	400b      	ands	r3, r1
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	014b      	lsls	r3, r1, #5
 8007176:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800717a:	0142      	lsls	r2, r0, #5
 800717c:	4610      	mov	r0, r2
 800717e:	4619      	mov	r1, r3
 8007180:	4623      	mov	r3, r4
 8007182:	1ac0      	subs	r0, r0, r3
 8007184:	462b      	mov	r3, r5
 8007186:	eb61 0103 	sbc.w	r1, r1, r3
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	018b      	lsls	r3, r1, #6
 8007194:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007198:	0182      	lsls	r2, r0, #6
 800719a:	1a12      	subs	r2, r2, r0
 800719c:	eb63 0301 	sbc.w	r3, r3, r1
 80071a0:	f04f 0000 	mov.w	r0, #0
 80071a4:	f04f 0100 	mov.w	r1, #0
 80071a8:	00d9      	lsls	r1, r3, #3
 80071aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071ae:	00d0      	lsls	r0, r2, #3
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4621      	mov	r1, r4
 80071b6:	1852      	adds	r2, r2, r1
 80071b8:	4629      	mov	r1, r5
 80071ba:	eb43 0101 	adc.w	r1, r3, r1
 80071be:	460b      	mov	r3, r1
 80071c0:	f04f 0000 	mov.w	r0, #0
 80071c4:	f04f 0100 	mov.w	r1, #0
 80071c8:	0259      	lsls	r1, r3, #9
 80071ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80071ce:	0250      	lsls	r0, r2, #9
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4610      	mov	r0, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	461a      	mov	r2, r3
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	f7f9 fcd8 	bl	8000b94 <__aeabi_uldivmod>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4613      	mov	r3, r2
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	e04c      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ee:	4b8a      	ldr	r3, [pc, #552]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	099b      	lsrs	r3, r3, #6
 80071f4:	461a      	mov	r2, r3
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071fe:	f04f 0100 	mov.w	r1, #0
 8007202:	ea02 0a00 	and.w	sl, r2, r0
 8007206:	ea03 0b01 	and.w	fp, r3, r1
 800720a:	4650      	mov	r0, sl
 800720c:	4659      	mov	r1, fp
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	014b      	lsls	r3, r1, #5
 8007218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800721c:	0142      	lsls	r2, r0, #5
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	ebb0 000a 	subs.w	r0, r0, sl
 8007226:	eb61 010b 	sbc.w	r1, r1, fp
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	018b      	lsls	r3, r1, #6
 8007234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007238:	0182      	lsls	r2, r0, #6
 800723a:	1a12      	subs	r2, r2, r0
 800723c:	eb63 0301 	sbc.w	r3, r3, r1
 8007240:	f04f 0000 	mov.w	r0, #0
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	00d9      	lsls	r1, r3, #3
 800724a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800724e:	00d0      	lsls	r0, r2, #3
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	eb12 020a 	adds.w	r2, r2, sl
 8007258:	eb43 030b 	adc.w	r3, r3, fp
 800725c:	f04f 0000 	mov.w	r0, #0
 8007260:	f04f 0100 	mov.w	r1, #0
 8007264:	0299      	lsls	r1, r3, #10
 8007266:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800726a:	0290      	lsls	r0, r2, #10
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	461a      	mov	r2, r3
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	f7f9 fc8a 	bl	8000b94 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4613      	mov	r3, r2
 8007286:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007288:	4b63      	ldr	r3, [pc, #396]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	3301      	adds	r3, #1
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	61bb      	str	r3, [r7, #24]
      break;
 80072a2:	e0b2      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a4:	4b5c      	ldr	r3, [pc, #368]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072ae:	4b5a      	ldr	r3, [pc, #360]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04d      	beq.n	8007356 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ba:	4b57      	ldr	r3, [pc, #348]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	099b      	lsrs	r3, r3, #6
 80072c0:	461a      	mov	r2, r3
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	ea02 0800 	and.w	r8, r2, r0
 80072d2:	ea03 0901 	and.w	r9, r3, r1
 80072d6:	4640      	mov	r0, r8
 80072d8:	4649      	mov	r1, r9
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	014b      	lsls	r3, r1, #5
 80072e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072e8:	0142      	lsls	r2, r0, #5
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	ebb0 0008 	subs.w	r0, r0, r8
 80072f2:	eb61 0109 	sbc.w	r1, r1, r9
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	018b      	lsls	r3, r1, #6
 8007300:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007304:	0182      	lsls	r2, r0, #6
 8007306:	1a12      	subs	r2, r2, r0
 8007308:	eb63 0301 	sbc.w	r3, r3, r1
 800730c:	f04f 0000 	mov.w	r0, #0
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	00d9      	lsls	r1, r3, #3
 8007316:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800731a:	00d0      	lsls	r0, r2, #3
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	eb12 0208 	adds.w	r2, r2, r8
 8007324:	eb43 0309 	adc.w	r3, r3, r9
 8007328:	f04f 0000 	mov.w	r0, #0
 800732c:	f04f 0100 	mov.w	r1, #0
 8007330:	0259      	lsls	r1, r3, #9
 8007332:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007336:	0250      	lsls	r0, r2, #9
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	461a      	mov	r2, r3
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	f7f9 fc24 	bl	8000b94 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	e04a      	b.n	80073ec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007356:	4b30      	ldr	r3, [pc, #192]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	099b      	lsrs	r3, r3, #6
 800735c:	461a      	mov	r2, r3
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007366:	f04f 0100 	mov.w	r1, #0
 800736a:	ea02 0400 	and.w	r4, r2, r0
 800736e:	ea03 0501 	and.w	r5, r3, r1
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	014b      	lsls	r3, r1, #5
 8007380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007384:	0142      	lsls	r2, r0, #5
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	1b00      	subs	r0, r0, r4
 800738c:	eb61 0105 	sbc.w	r1, r1, r5
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	018b      	lsls	r3, r1, #6
 800739a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800739e:	0182      	lsls	r2, r0, #6
 80073a0:	1a12      	subs	r2, r2, r0
 80073a2:	eb63 0301 	sbc.w	r3, r3, r1
 80073a6:	f04f 0000 	mov.w	r0, #0
 80073aa:	f04f 0100 	mov.w	r1, #0
 80073ae:	00d9      	lsls	r1, r3, #3
 80073b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073b4:	00d0      	lsls	r0, r2, #3
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	1912      	adds	r2, r2, r4
 80073bc:	eb45 0303 	adc.w	r3, r5, r3
 80073c0:	f04f 0000 	mov.w	r0, #0
 80073c4:	f04f 0100 	mov.w	r1, #0
 80073c8:	0299      	lsls	r1, r3, #10
 80073ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073ce:	0290      	lsls	r0, r2, #10
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f7f9 fbd8 	bl	8000b94 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4613      	mov	r3, r2
 80073ea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_RCC_GetSysClockFreq+0x358>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	0f1b      	lsrs	r3, r3, #28
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	61bb      	str	r3, [r7, #24]
      break;
 8007402:	e002      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007406:	61bb      	str	r3, [r7, #24]
      break;
 8007408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800740a:	69bb      	ldr	r3, [r7, #24]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007416:	bf00      	nop
 8007418:	40023800 	.word	0x40023800
 800741c:	00f42400 	.word	0x00f42400
 8007420:	007a1200 	.word	0x007a1200

08007424 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e34b      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d904      	bls.n	8007448 <HAL_RCC_OscConfig+0x24>
 800743e:	f640 5112 	movw	r1, #3346	; 0xd12
 8007442:	48a5      	ldr	r0, [pc, #660]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 8007444:	f7fc fc61 	bl	8003d0a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8096 	beq.w	8007582 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <HAL_RCC_OscConfig+0x58>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007466:	d009      	beq.n	800747c <HAL_RCC_OscConfig+0x58>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007470:	d004      	beq.n	800747c <HAL_RCC_OscConfig+0x58>
 8007472:	f640 5117 	movw	r1, #3351	; 0xd17
 8007476:	4898      	ldr	r0, [pc, #608]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 8007478:	f7fc fc47 	bl	8003d0a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800747c:	4b97      	ldr	r3, [pc, #604]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 030c 	and.w	r3, r3, #12
 8007484:	2b04      	cmp	r3, #4
 8007486:	d019      	beq.n	80074bc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007488:	4b94      	ldr	r3, [pc, #592]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007490:	2b08      	cmp	r3, #8
 8007492:	d106      	bne.n	80074a2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007494:	4b91      	ldr	r3, [pc, #580]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074a0:	d00c      	beq.n	80074bc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074a2:	4b8e      	ldr	r3, [pc, #568]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d112      	bne.n	80074d4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ae:	4b8b      	ldr	r3, [pc, #556]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ba:	d10b      	bne.n	80074d4 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074bc:	4b87      	ldr	r3, [pc, #540]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d05b      	beq.n	8007580 <HAL_RCC_OscConfig+0x15c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d157      	bne.n	8007580 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e2fc      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d106      	bne.n	80074ec <HAL_RCC_OscConfig+0xc8>
 80074de:	4b7f      	ldr	r3, [pc, #508]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a7e      	ldr	r2, [pc, #504]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e01d      	b.n	8007528 <HAL_RCC_OscConfig+0x104>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074f4:	d10c      	bne.n	8007510 <HAL_RCC_OscConfig+0xec>
 80074f6:	4b79      	ldr	r3, [pc, #484]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a78      	ldr	r2, [pc, #480]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80074fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	4b76      	ldr	r3, [pc, #472]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a75      	ldr	r2, [pc, #468]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	e00b      	b.n	8007528 <HAL_RCC_OscConfig+0x104>
 8007510:	4b72      	ldr	r3, [pc, #456]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a71      	ldr	r2, [pc, #452]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	4b6f      	ldr	r3, [pc, #444]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a6e      	ldr	r2, [pc, #440]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d013      	beq.n	8007558 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fd f9b6 	bl	80048a0 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007538:	f7fd f9b2 	bl	80048a0 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e2c1      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754a:	4b64      	ldr	r3, [pc, #400]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCC_OscConfig+0x114>
 8007556:	e014      	b.n	8007582 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fd f9a2 	bl	80048a0 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007560:	f7fd f99e 	bl	80048a0 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b64      	cmp	r3, #100	; 0x64
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e2ad      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007572:	4b5a      	ldr	r3, [pc, #360]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x13c>
 800757e:	e000      	b.n	8007582 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8086 	beq.w	800769c <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d008      	beq.n	80075aa <HAL_RCC_OscConfig+0x186>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d004      	beq.n	80075aa <HAL_RCC_OscConfig+0x186>
 80075a0:	f640 514f 	movw	r1, #3407	; 0xd4f
 80075a4:	484c      	ldr	r0, [pc, #304]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 80075a6:	f7fc fbb0 	bl	8003d0a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b1f      	cmp	r3, #31
 80075b0:	d904      	bls.n	80075bc <HAL_RCC_OscConfig+0x198>
 80075b2:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 80075b6:	4848      	ldr	r0, [pc, #288]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 80075b8:	f7fc fba7 	bl	8003d0a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075bc:	4b47      	ldr	r3, [pc, #284]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 030c 	and.w	r3, r3, #12
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075c8:	4b44      	ldr	r3, [pc, #272]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d105      	bne.n	80075e0 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075d4:	4b41      	ldr	r3, [pc, #260]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075e0:	4b3e      	ldr	r3, [pc, #248]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075e8:	2b0c      	cmp	r3, #12
 80075ea:	d11c      	bne.n	8007626 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ec:	4b3b      	ldr	r3, [pc, #236]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d116      	bne.n	8007626 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075f8:	4b38      	ldr	r3, [pc, #224]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_OscConfig+0x1ec>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e25e      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007610:	4b32      	ldr	r3, [pc, #200]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	492f      	ldr	r1, [pc, #188]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007620:	4313      	orrs	r3, r2
 8007622:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007624:	e03a      	b.n	800769c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d020      	beq.n	8007670 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800762e:	4b2c      	ldr	r3, [pc, #176]	; (80076e0 <HAL_RCC_OscConfig+0x2bc>)
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fd f934 	bl	80048a0 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800763c:	f7fd f930 	bl	80048a0 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e23f      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764e:	4b23      	ldr	r3, [pc, #140]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800765a:	4b20      	ldr	r3, [pc, #128]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	491c      	ldr	r1, [pc, #112]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 800766a:	4313      	orrs	r3, r2
 800766c:	600b      	str	r3, [r1, #0]
 800766e:	e015      	b.n	800769c <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <HAL_RCC_OscConfig+0x2bc>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fd f913 	bl	80048a0 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800767e:	f7fd f90f 	bl	80048a0 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e21e      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <HAL_RCC_OscConfig+0x2b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d045      	beq.n	8007734 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_RCC_OscConfig+0x29e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d004      	beq.n	80076c2 <HAL_RCC_OscConfig+0x29e>
 80076b8:	f640 5196 	movw	r1, #3478	; 0xd96
 80076bc:	4806      	ldr	r0, [pc, #24]	; (80076d8 <HAL_RCC_OscConfig+0x2b4>)
 80076be:	f7fc fb24 	bl	8003d0a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01e      	beq.n	8007708 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ca:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_RCC_OscConfig+0x2c0>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d0:	f7fd f8e6 	bl	80048a0 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d6:	e010      	b.n	80076fa <HAL_RCC_OscConfig+0x2d6>
 80076d8:	080115b4 	.word	0x080115b4
 80076dc:	40023800 	.word	0x40023800
 80076e0:	42470000 	.word	0x42470000
 80076e4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076e8:	f7fd f8da 	bl	80048a0 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e1e9      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fa:	4ba4      	ldr	r3, [pc, #656]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80076fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0x2c4>
 8007706:	e015      	b.n	8007734 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007708:	4ba1      	ldr	r3, [pc, #644]	; (8007990 <HAL_RCC_OscConfig+0x56c>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fd f8c7 	bl	80048a0 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007716:	f7fd f8c3 	bl	80048a0 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e1d2      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007728:	4b98      	ldr	r3, [pc, #608]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800772a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80a8 	beq.w	8007892 <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_RCC_OscConfig+0x344>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d008      	beq.n	8007768 <HAL_RCC_OscConfig+0x344>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b05      	cmp	r3, #5
 800775c:	d004      	beq.n	8007768 <HAL_RCC_OscConfig+0x344>
 800775e:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8007762:	488c      	ldr	r0, [pc, #560]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 8007764:	f7fc fad1 	bl	8003d0a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007768:	4b88      	ldr	r3, [pc, #544]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10f      	bne.n	8007794 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007774:	2300      	movs	r3, #0
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	4b84      	ldr	r3, [pc, #528]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	4a83      	ldr	r2, [pc, #524]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007782:	6413      	str	r3, [r2, #64]	; 0x40
 8007784:	4b81      	ldr	r3, [pc, #516]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007794:	4b80      	ldr	r3, [pc, #512]	; (8007998 <HAL_RCC_OscConfig+0x574>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779c:	2b00      	cmp	r3, #0
 800779e:	d118      	bne.n	80077d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077a0:	4b7d      	ldr	r3, [pc, #500]	; (8007998 <HAL_RCC_OscConfig+0x574>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a7c      	ldr	r2, [pc, #496]	; (8007998 <HAL_RCC_OscConfig+0x574>)
 80077a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ac:	f7fd f878 	bl	80048a0 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b4:	f7fd f874 	bl	80048a0 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e183      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077c6:	4b74      	ldr	r3, [pc, #464]	; (8007998 <HAL_RCC_OscConfig+0x574>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f0      	beq.n	80077b4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d106      	bne.n	80077e8 <HAL_RCC_OscConfig+0x3c4>
 80077da:	4b6c      	ldr	r3, [pc, #432]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	4a6b      	ldr	r2, [pc, #428]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6713      	str	r3, [r2, #112]	; 0x70
 80077e6:	e01c      	b.n	8007822 <HAL_RCC_OscConfig+0x3fe>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d10c      	bne.n	800780a <HAL_RCC_OscConfig+0x3e6>
 80077f0:	4b66      	ldr	r3, [pc, #408]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f4:	4a65      	ldr	r2, [pc, #404]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80077f6:	f043 0304 	orr.w	r3, r3, #4
 80077fa:	6713      	str	r3, [r2, #112]	; 0x70
 80077fc:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	4a62      	ldr	r2, [pc, #392]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	6713      	str	r3, [r2, #112]	; 0x70
 8007808:	e00b      	b.n	8007822 <HAL_RCC_OscConfig+0x3fe>
 800780a:	4b60      	ldr	r3, [pc, #384]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	4a5f      	ldr	r2, [pc, #380]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	6713      	str	r3, [r2, #112]	; 0x70
 8007816:	4b5d      	ldr	r3, [pc, #372]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	4a5c      	ldr	r2, [pc, #368]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d015      	beq.n	8007856 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782a:	f7fd f839 	bl	80048a0 <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007830:	e00a      	b.n	8007848 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007832:	f7fd f835 	bl	80048a0 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e142      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007848:	4b50      	ldr	r3, [pc, #320]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0ee      	beq.n	8007832 <HAL_RCC_OscConfig+0x40e>
 8007854:	e014      	b.n	8007880 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007856:	f7fd f823 	bl	80048a0 <HAL_GetTick>
 800785a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785c:	e00a      	b.n	8007874 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800785e:	f7fd f81f 	bl	80048a0 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	f241 3288 	movw	r2, #5000	; 0x1388
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e12c      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007874:	4b45      	ldr	r3, [pc, #276]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1ee      	bne.n	800785e <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007886:	4b41      	ldr	r3, [pc, #260]	; (800798c <HAL_RCC_OscConfig+0x568>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	4a40      	ldr	r2, [pc, #256]	; (800798c <HAL_RCC_OscConfig+0x568>)
 800788c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00c      	beq.n	80078b4 <HAL_RCC_OscConfig+0x490>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d008      	beq.n	80078b4 <HAL_RCC_OscConfig+0x490>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d004      	beq.n	80078b4 <HAL_RCC_OscConfig+0x490>
 80078aa:	f640 6105 	movw	r1, #3589	; 0xe05
 80078ae:	4839      	ldr	r0, [pc, #228]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 80078b0:	f7fc fa2b 	bl	8003d0a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8107 	beq.w	8007acc <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078be:	4b33      	ldr	r3, [pc, #204]	; (800798c <HAL_RCC_OscConfig+0x568>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 030c 	and.w	r3, r3, #12
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	f000 80c0 	beq.w	8007a4c <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	f040 80a4 	bne.w	8007a1e <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <HAL_RCC_OscConfig+0x4ce>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e6:	d004      	beq.n	80078f2 <HAL_RCC_OscConfig+0x4ce>
 80078e8:	f640 610e 	movw	r1, #3598	; 0xe0e
 80078ec:	4829      	ldr	r0, [pc, #164]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 80078ee:	f7fc fa0c 	bl	8003d0a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	2b3f      	cmp	r3, #63	; 0x3f
 80078f8:	d904      	bls.n	8007904 <HAL_RCC_OscConfig+0x4e0>
 80078fa:	f640 610f 	movw	r1, #3599	; 0xe0f
 80078fe:	4825      	ldr	r0, [pc, #148]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 8007900:	f7fc fa03 	bl	8003d0a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b31      	cmp	r3, #49	; 0x31
 800790a:	d904      	bls.n	8007916 <HAL_RCC_OscConfig+0x4f2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007914:	d904      	bls.n	8007920 <HAL_RCC_OscConfig+0x4fc>
 8007916:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800791a:	481e      	ldr	r0, [pc, #120]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 800791c:	f7fc f9f5 	bl	8003d0a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2b02      	cmp	r3, #2
 8007926:	d010      	beq.n	800794a <HAL_RCC_OscConfig+0x526>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	2b04      	cmp	r3, #4
 800792e:	d00c      	beq.n	800794a <HAL_RCC_OscConfig+0x526>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	2b06      	cmp	r3, #6
 8007936:	d008      	beq.n	800794a <HAL_RCC_OscConfig+0x526>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	2b08      	cmp	r3, #8
 800793e:	d004      	beq.n	800794a <HAL_RCC_OscConfig+0x526>
 8007940:	f640 6111 	movw	r1, #3601	; 0xe11
 8007944:	4813      	ldr	r0, [pc, #76]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 8007946:	f7fc f9e0 	bl	8003d0a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	2b01      	cmp	r3, #1
 8007950:	d903      	bls.n	800795a <HAL_RCC_OscConfig+0x536>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d904      	bls.n	8007964 <HAL_RCC_OscConfig+0x540>
 800795a:	f640 6112 	movw	r1, #3602	; 0xe12
 800795e:	480d      	ldr	r0, [pc, #52]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 8007960:	f7fc f9d3 	bl	8003d0a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d903      	bls.n	8007974 <HAL_RCC_OscConfig+0x550>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	2b07      	cmp	r3, #7
 8007972:	d904      	bls.n	800797e <HAL_RCC_OscConfig+0x55a>
 8007974:	f640 6113 	movw	r1, #3603	; 0xe13
 8007978:	4806      	ldr	r0, [pc, #24]	; (8007994 <HAL_RCC_OscConfig+0x570>)
 800797a:	f7fc f9c6 	bl	8003d0a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797e:	4b07      	ldr	r3, [pc, #28]	; (800799c <HAL_RCC_OscConfig+0x578>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fc ff8c 	bl	80048a0 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800798a:	e012      	b.n	80079b2 <HAL_RCC_OscConfig+0x58e>
 800798c:	40023800 	.word	0x40023800
 8007990:	42470e80 	.word	0x42470e80
 8007994:	080115b4 	.word	0x080115b4
 8007998:	40007000 	.word	0x40007000
 800799c:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a0:	f7fc ff7e 	bl	80048a0 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e08d      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b2:	4b49      	ldr	r3, [pc, #292]	; (8007ad8 <HAL_RCC_OscConfig+0x6b4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f0      	bne.n	80079a0 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69da      	ldr	r2, [r3, #28]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	019b      	lsls	r3, r3, #6
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	3b01      	subs	r3, #1
 80079d8:	041b      	lsls	r3, r3, #16
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	071b      	lsls	r3, r3, #28
 80079ea:	493b      	ldr	r1, [pc, #236]	; (8007ad8 <HAL_RCC_OscConfig+0x6b4>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079f0:	4b3a      	ldr	r3, [pc, #232]	; (8007adc <HAL_RCC_OscConfig+0x6b8>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fc ff53 	bl	80048a0 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079fe:	f7fc ff4f 	bl	80048a0 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e05e      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a10:	4b31      	ldr	r3, [pc, #196]	; (8007ad8 <HAL_RCC_OscConfig+0x6b4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCC_OscConfig+0x5da>
 8007a1c:	e056      	b.n	8007acc <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1e:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <HAL_RCC_OscConfig+0x6b8>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7fc ff3c 	bl	80048a0 <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2c:	f7fc ff38 	bl	80048a0 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e047      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3e:	4b26      	ldr	r3, [pc, #152]	; (8007ad8 <HAL_RCC_OscConfig+0x6b4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x608>
 8007a4a:	e03f      	b.n	8007acc <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e03a      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a58:	4b1f      	ldr	r3, [pc, #124]	; (8007ad8 <HAL_RCC_OscConfig+0x6b4>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d030      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d129      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d122      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a88:	4013      	ands	r3, r2
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d119      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d10f      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d107      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d001      	beq.n	8007acc <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	42470060 	.word	0x42470060

08007ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e184      	b.n	8007dfc <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a72      	ldr	r2, [pc, #456]	; (8007cc0 <HAL_SPI_Init+0x1e0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_SPI_Init+0x44>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a70      	ldr	r2, [pc, #448]	; (8007cc4 <HAL_SPI_Init+0x1e4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <HAL_SPI_Init+0x44>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a6f      	ldr	r2, [pc, #444]	; (8007cc8 <HAL_SPI_Init+0x1e8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_SPI_Init+0x44>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a6d      	ldr	r2, [pc, #436]	; (8007ccc <HAL_SPI_Init+0x1ec>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_SPI_Init+0x44>
 8007b1a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007b1e:	486c      	ldr	r0, [pc, #432]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007b20:	f7fc f8f3 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d009      	beq.n	8007b40 <HAL_SPI_Init+0x60>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b34:	d004      	beq.n	8007b40 <HAL_SPI_Init+0x60>
 8007b36:	f240 1143 	movw	r1, #323	; 0x143
 8007b3a:	4865      	ldr	r0, [pc, #404]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007b3c:	f7fc f8e5 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <HAL_SPI_Init+0x86>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b50:	d009      	beq.n	8007b66 <HAL_SPI_Init+0x86>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5a:	d004      	beq.n	8007b66 <HAL_SPI_Init+0x86>
 8007b5c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007b60:	485b      	ldr	r0, [pc, #364]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007b62:	f7fc f8d2 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b6e:	d008      	beq.n	8007b82 <HAL_SPI_Init+0xa2>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <HAL_SPI_Init+0xa2>
 8007b78:	f240 1145 	movw	r1, #325	; 0x145
 8007b7c:	4854      	ldr	r0, [pc, #336]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007b7e:	f7fc f8c4 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8a:	d00d      	beq.n	8007ba8 <HAL_SPI_Init+0xc8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <HAL_SPI_Init+0xc8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b9c:	d004      	beq.n	8007ba8 <HAL_SPI_Init+0xc8>
 8007b9e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007ba2:	484b      	ldr	r0, [pc, #300]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007ba4:	f7fc f8b1 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d020      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d01c      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d018      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	2b18      	cmp	r3, #24
 8007bc6:	d014      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d010      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	2b28      	cmp	r3, #40	; 0x28
 8007bd6:	d00c      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b30      	cmp	r3, #48	; 0x30
 8007bde:	d008      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2b38      	cmp	r3, #56	; 0x38
 8007be6:	d004      	beq.n	8007bf2 <HAL_SPI_Init+0x112>
 8007be8:	f240 1147 	movw	r1, #327	; 0x147
 8007bec:	4838      	ldr	r0, [pc, #224]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007bee:	f7fc f88c 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_SPI_Init+0x12c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	2b80      	cmp	r3, #128	; 0x80
 8007c00:	d004      	beq.n	8007c0c <HAL_SPI_Init+0x12c>
 8007c02:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c06:	4832      	ldr	r0, [pc, #200]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007c08:	f7fc f87f 	bl	8003d0a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_SPI_Init+0x146>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d004      	beq.n	8007c26 <HAL_SPI_Init+0x146>
 8007c1c:	f240 1149 	movw	r1, #329	; 0x149
 8007c20:	482b      	ldr	r0, [pc, #172]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007c22:	f7fc f872 	bl	8003d0a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d152      	bne.n	8007cd4 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <HAL_SPI_Init+0x168>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d004      	beq.n	8007c48 <HAL_SPI_Init+0x168>
 8007c3e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007c42:	4823      	ldr	r0, [pc, #140]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007c44:	f7fc f861 	bl	8003d0a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <HAL_SPI_Init+0x182>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d004      	beq.n	8007c62 <HAL_SPI_Init+0x182>
 8007c58:	f240 114d 	movw	r1, #333	; 0x14d
 8007c5c:	481c      	ldr	r0, [pc, #112]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007c5e:	f7fc f854 	bl	8003d0a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6a:	d125      	bne.n	8007cb8 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d05a      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d056      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d052      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b18      	cmp	r3, #24
 8007c8a:	d04e      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d04a      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	2b28      	cmp	r3, #40	; 0x28
 8007c9a:	d046      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	2b30      	cmp	r3, #48	; 0x30
 8007ca2:	d042      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	2b38      	cmp	r3, #56	; 0x38
 8007caa:	d03e      	beq.n	8007d2a <HAL_SPI_Init+0x24a>
 8007cac:	f240 1151 	movw	r1, #337	; 0x151
 8007cb0:	4807      	ldr	r0, [pc, #28]	; (8007cd0 <HAL_SPI_Init+0x1f0>)
 8007cb2:	f7fc f82a 	bl	8003d0a <assert_failed>
 8007cb6:	e038      	b.n	8007d2a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	61da      	str	r2, [r3, #28]
 8007cbe:	e034      	b.n	8007d2a <HAL_SPI_Init+0x24a>
 8007cc0:	40013000 	.word	0x40013000
 8007cc4:	40003800 	.word	0x40003800
 8007cc8:	40003c00 	.word	0x40003c00
 8007ccc:	40013400 	.word	0x40013400
 8007cd0:	080115f0 	.word	0x080115f0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d01c      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	d018      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	2b18      	cmp	r3, #24
 8007cf2:	d014      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d010      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b28      	cmp	r3, #40	; 0x28
 8007d02:	d00c      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b30      	cmp	r3, #48	; 0x30
 8007d0a:	d008      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	2b38      	cmp	r3, #56	; 0x38
 8007d12:	d004      	beq.n	8007d1e <HAL_SPI_Init+0x23e>
 8007d14:	f240 115b 	movw	r1, #347	; 0x15b
 8007d18:	483a      	ldr	r0, [pc, #232]	; (8007e04 <HAL_SPI_Init+0x324>)
 8007d1a:	f7fb fff6 	bl	8003d0a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fc f907 	bl	8003f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dae:	ea42 0103 	orr.w	r1, r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	f003 0104 	and.w	r1, r3, #4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f003 0210 	and.w	r2, r3, #16
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	080115f0 	.word	0x080115f0

08007e08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <HAL_SPI_Transmit+0x30>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2c:	d004      	beq.n	8007e38 <HAL_SPI_Transmit+0x30>
 8007e2e:	f240 310a 	movw	r1, #778	; 0x30a
 8007e32:	4893      	ldr	r0, [pc, #588]	; (8008080 <HAL_SPI_Transmit+0x278>)
 8007e34:	f7fb ff69 	bl	8003d0a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_SPI_Transmit+0x3e>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e128      	b.n	8008098 <HAL_SPI_Transmit+0x290>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e4e:	f7fc fd27 	bl	80048a0 <HAL_GetTick>
 8007e52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d002      	beq.n	8007e6a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
 8007e66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e68:	e10d      	b.n	8008086 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_SPI_Transmit+0x6e>
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e7a:	e104      	b.n	8008086 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2203      	movs	r2, #3
 8007e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec2:	d10f      	bne.n	8007ee4 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ee2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d007      	beq.n	8007f02 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0a:	d14b      	bne.n	8007fa4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_SPI_Transmit+0x112>
 8007f14:	8afb      	ldrh	r3, [r7, #22]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d13e      	bne.n	8007f98 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	1c9a      	adds	r2, r3, #2
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f3e:	e02b      	b.n	8007f98 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d112      	bne.n	8007f74 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	1c9a      	adds	r2, r3, #2
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f72:	e011      	b.n	8007f98 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f74:	f7fc fc94 	bl	80048a0 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d803      	bhi.n	8007f8c <HAL_SPI_Transmit+0x184>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d102      	bne.n	8007f92 <HAL_SPI_Transmit+0x18a>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f96:	e076      	b.n	8008086 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ce      	bne.n	8007f40 <HAL_SPI_Transmit+0x138>
 8007fa2:	e04c      	b.n	800803e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Transmit+0x1aa>
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d140      	bne.n	8008034 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	7812      	ldrb	r2, [r2, #0]
 8007fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007fd8:	e02c      	b.n	8008034 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d113      	bne.n	8008010 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	7812      	ldrb	r2, [r2, #0]
 8007ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	86da      	strh	r2, [r3, #54]	; 0x36
 800800e:	e011      	b.n	8008034 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008010:	f7fc fc46 	bl	80048a0 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d803      	bhi.n	8008028 <HAL_SPI_Transmit+0x220>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d102      	bne.n	800802e <HAL_SPI_Transmit+0x226>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008032:	e028      	b.n	8008086 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1cd      	bne.n	8007fda <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fbda 	bl	80087fc <SPI_EndRxTxTransaction>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	e002      	b.n	8008086 <HAL_SPI_Transmit+0x27e>
 8008080:	080115f0 	.word	0x080115f0
  }

error:
 8008084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008096:	7ffb      	ldrb	r3, [r7, #31]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080bc:	d112      	bne.n	80080e4 <HAL_SPI_Receive+0x44>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10e      	bne.n	80080e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2204      	movs	r2, #4
 80080ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4613      	mov	r3, r2
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f8f2 	bl	80082c4 <HAL_SPI_TransmitReceive>
 80080e0:	4603      	mov	r3, r0
 80080e2:	e0ea      	b.n	80082ba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_SPI_Receive+0x52>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e0e3      	b.n	80082ba <HAL_SPI_Receive+0x21a>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080fa:	f7fc fbd1 	bl	80048a0 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d002      	beq.n	8008112 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800810c:	2302      	movs	r3, #2
 800810e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008110:	e0ca      	b.n	80082a8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <HAL_SPI_Receive+0x7e>
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008122:	e0c1      	b.n	80082a8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2204      	movs	r2, #4
 8008128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	88fa      	ldrh	r2, [r7, #6]
 8008142:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816a:	d10f      	bne.n	800818c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800818a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008196:	2b40      	cmp	r3, #64	; 0x40
 8008198:	d007      	beq.n	80081aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d162      	bne.n	8008278 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081b2:	e02e      	b.n	8008212 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d115      	bne.n	80081ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f103 020c 	add.w	r2, r3, #12
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ec:	e011      	b.n	8008212 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ee:	f7fc fb57 	bl	80048a0 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d803      	bhi.n	8008206 <HAL_SPI_Receive+0x166>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d102      	bne.n	800820c <HAL_SPI_Receive+0x16c>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008210:	e04a      	b.n	80082a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1cb      	bne.n	80081b4 <HAL_SPI_Receive+0x114>
 800821c:	e031      	b.n	8008282 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d113      	bne.n	8008254 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	b292      	uxth	r2, r2
 8008238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008252:	e011      	b.n	8008278 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008254:	f7fc fb24 	bl	80048a0 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d803      	bhi.n	800826c <HAL_SPI_Receive+0x1cc>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d102      	bne.n	8008272 <HAL_SPI_Receive+0x1d2>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008276:	e017      	b.n	80082a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1cd      	bne.n	800821e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fa52 	bl	8008730 <SPI_EndRxTransaction>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2220      	movs	r2, #32
 8008296:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
 80082a4:	e000      	b.n	80082a8 <HAL_SPI_Receive+0x208>
  }

error :
 80082a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08c      	sub	sp, #48	; 0x30
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082d2:	2301      	movs	r3, #1
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <HAL_SPI_TransmitReceive+0x2a>
 80082e4:	f240 417e 	movw	r1, #1150	; 0x47e
 80082e8:	4884      	ldr	r0, [pc, #528]	; (80084fc <HAL_SPI_TransmitReceive+0x238>)
 80082ea:	f7fb fd0e 	bl	8003d0a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_SPI_TransmitReceive+0x38>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e18d      	b.n	8008618 <HAL_SPI_TransmitReceive+0x354>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008304:	f7fc facc 	bl	80048a0 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800831e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008322:	2b01      	cmp	r3, #1
 8008324:	d00f      	beq.n	8008346 <HAL_SPI_TransmitReceive+0x82>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832c:	d107      	bne.n	800833e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d103      	bne.n	800833e <HAL_SPI_TransmitReceive+0x7a>
 8008336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800833a:	2b04      	cmp	r3, #4
 800833c:	d003      	beq.n	8008346 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800833e:	2302      	movs	r3, #2
 8008340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008344:	e15e      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_SPI_TransmitReceive+0x94>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_SPI_TransmitReceive+0x94>
 8008352:	887b      	ldrh	r3, [r7, #2]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800835e:	e151      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b04      	cmp	r3, #4
 800836a:	d003      	beq.n	8008374 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2205      	movs	r2, #5
 8008370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	887a      	ldrh	r2, [r7, #2]
 800838a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	887a      	ldrh	r2, [r7, #2]
 8008396:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	887a      	ldrh	r2, [r7, #2]
 800839c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d007      	beq.n	80083c8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d0:	d178      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x11c>
 80083da:	8b7b      	ldrh	r3, [r7, #26]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d166      	bne.n	80084ae <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	1c9a      	adds	r2, r3, #2
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008404:	e053      	b.n	80084ae <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b02      	cmp	r3, #2
 8008412:	d11b      	bne.n	800844c <HAL_SPI_TransmitReceive+0x188>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008418:	b29b      	uxth	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d016      	beq.n	800844c <HAL_SPI_TransmitReceive+0x188>
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d113      	bne.n	800844c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	881a      	ldrh	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008434:	1c9a      	adds	r2, r3, #2
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b01      	cmp	r3, #1
 8008458:	d119      	bne.n	800848e <HAL_SPI_TransmitReceive+0x1ca>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d014      	beq.n	800848e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	b292      	uxth	r2, r2
 8008470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	1c9a      	adds	r2, r3, #2
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800848a:	2301      	movs	r3, #1
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800848e:	f7fc fa07 	bl	80048a0 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800849a:	429a      	cmp	r2, r3
 800849c:	d807      	bhi.n	80084ae <HAL_SPI_TransmitReceive+0x1ea>
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d003      	beq.n	80084ae <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084ac:	e0aa      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1a6      	bne.n	8008406 <HAL_SPI_TransmitReceive+0x142>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1a1      	bne.n	8008406 <HAL_SPI_TransmitReceive+0x142>
 80084c2:	e07f      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <HAL_SPI_TransmitReceive+0x20e>
 80084cc:	8b7b      	ldrh	r3, [r7, #26]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d16e      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330c      	adds	r3, #12
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f8:	e05a      	b.n	80085b0 <HAL_SPI_TransmitReceive+0x2ec>
 80084fa:	bf00      	nop
 80084fc:	080115f0 	.word	0x080115f0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b02      	cmp	r3, #2
 800850c:	d11c      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x284>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d017      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x284>
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d114      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	7812      	ldrb	r2, [r2, #0]
 800852a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d119      	bne.n	800858a <HAL_SPI_TransmitReceive+0x2c6>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d014      	beq.n	800858a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008586:	2301      	movs	r3, #1
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800858a:	f7fc f989 	bl	80048a0 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008596:	429a      	cmp	r2, r3
 8008598:	d803      	bhi.n	80085a2 <HAL_SPI_TransmitReceive+0x2de>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d102      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x2e4>
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085ae:	e029      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1a2      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x23c>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d19d      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 f917 	bl	80087fc <SPI_EndRxTxTransaction>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d006      	beq.n	80085e2 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085e0:	e010      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	e000      	b.n	8008604 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008602:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008618:	4618      	mov	r0, r3
 800861a:	3730      	adds	r7, #48	; 0x30
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008630:	f7fc f936 	bl	80048a0 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4413      	add	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008640:	f7fc f92e 	bl	80048a0 <HAL_GetTick>
 8008644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008646:	4b39      	ldr	r3, [pc, #228]	; (800872c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	015b      	lsls	r3, r3, #5
 800864c:	0d1b      	lsrs	r3, r3, #20
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	fb02 f303 	mul.w	r3, r2, r3
 8008654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008656:	e054      	b.n	8008702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d050      	beq.n	8008702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008660:	f7fc f91e 	bl	80048a0 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	69fa      	ldr	r2, [r7, #28]
 800866c:	429a      	cmp	r2, r3
 800866e:	d902      	bls.n	8008676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d13d      	bne.n	80086f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868e:	d111      	bne.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008698:	d004      	beq.n	80086a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a2:	d107      	bne.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086bc:	d10f      	bne.n	80086de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e017      	b.n	8008722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	3b01      	subs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4013      	ands	r3, r2
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	429a      	cmp	r2, r3
 8008710:	bf0c      	ite	eq
 8008712:	2301      	moveq	r3, #1
 8008714:	2300      	movne	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	429a      	cmp	r2, r3
 800871e:	d19b      	bne.n	8008658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	2000017c 	.word	0x2000017c

08008730 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008744:	d111      	bne.n	800876a <SPI_EndRxTransaction+0x3a>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874e:	d004      	beq.n	800875a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008758:	d107      	bne.n	800876a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008772:	d12a      	bne.n	80087ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877c:	d012      	beq.n	80087a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2200      	movs	r2, #0
 8008786:	2180      	movs	r1, #128	; 0x80
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff ff49 	bl	8008620 <SPI_WaitFlagStateUntilTimeout>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d02d      	beq.n	80087f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e026      	b.n	80087f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2200      	movs	r2, #0
 80087ac:	2101      	movs	r1, #1
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff36 	bl	8008620 <SPI_WaitFlagStateUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01a      	beq.n	80087f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f043 0220 	orr.w	r2, r3, #32
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e013      	b.n	80087f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	2101      	movs	r1, #1
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ff23 	bl	8008620 <SPI_WaitFlagStateUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e000      	b.n	80087f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008808:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <SPI_EndRxTxTransaction+0x7c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1b      	ldr	r2, [pc, #108]	; (800887c <SPI_EndRxTxTransaction+0x80>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	0d5b      	lsrs	r3, r3, #21
 8008814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008826:	d112      	bne.n	800884e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	2180      	movs	r1, #128	; 0x80
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7ff fef4 	bl	8008620 <SPI_WaitFlagStateUntilTimeout>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d016      	beq.n	800886c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f043 0220 	orr.w	r2, r3, #32
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e00f      	b.n	800886e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3b01      	subs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d0f2      	beq.n	800884e <SPI_EndRxTxTransaction+0x52>
 8008868:	e000      	b.n	800886c <SPI_EndRxTxTransaction+0x70>
        break;
 800886a:	bf00      	nop
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	2000017c 	.word	0x2000017c
 800887c:	165e9f81 	.word	0x165e9f81

08008880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e0c5      	b.n	8008a1e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a64      	ldr	r2, [pc, #400]	; (8008a28 <HAL_TIM_Base_Init+0x1a8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d045      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a4:	d040      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a60      	ldr	r2, [pc, #384]	; (8008a2c <HAL_TIM_Base_Init+0x1ac>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d03b      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a5e      	ldr	r2, [pc, #376]	; (8008a30 <HAL_TIM_Base_Init+0x1b0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d036      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a5d      	ldr	r2, [pc, #372]	; (8008a34 <HAL_TIM_Base_Init+0x1b4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d031      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a5b      	ldr	r2, [pc, #364]	; (8008a38 <HAL_TIM_Base_Init+0x1b8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d02c      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a5a      	ldr	r2, [pc, #360]	; (8008a3c <HAL_TIM_Base_Init+0x1bc>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d027      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a58      	ldr	r2, [pc, #352]	; (8008a40 <HAL_TIM_Base_Init+0x1c0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d022      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a57      	ldr	r2, [pc, #348]	; (8008a44 <HAL_TIM_Base_Init+0x1c4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d01d      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a55      	ldr	r2, [pc, #340]	; (8008a48 <HAL_TIM_Base_Init+0x1c8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d018      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a54      	ldr	r2, [pc, #336]	; (8008a4c <HAL_TIM_Base_Init+0x1cc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d013      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a52      	ldr	r2, [pc, #328]	; (8008a50 <HAL_TIM_Base_Init+0x1d0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00e      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a51      	ldr	r2, [pc, #324]	; (8008a54 <HAL_TIM_Base_Init+0x1d4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d009      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a4f      	ldr	r2, [pc, #316]	; (8008a58 <HAL_TIM_Base_Init+0x1d8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d004      	beq.n	8008928 <HAL_TIM_Base_Init+0xa8>
 800891e:	f240 1113 	movw	r1, #275	; 0x113
 8008922:	484e      	ldr	r0, [pc, #312]	; (8008a5c <HAL_TIM_Base_Init+0x1dc>)
 8008924:	f7fb f9f1 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d014      	beq.n	800895a <HAL_TIM_Base_Init+0xda>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2b10      	cmp	r3, #16
 8008936:	d010      	beq.n	800895a <HAL_TIM_Base_Init+0xda>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b20      	cmp	r3, #32
 800893e:	d00c      	beq.n	800895a <HAL_TIM_Base_Init+0xda>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d008      	beq.n	800895a <HAL_TIM_Base_Init+0xda>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b60      	cmp	r3, #96	; 0x60
 800894e:	d004      	beq.n	800895a <HAL_TIM_Base_Init+0xda>
 8008950:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008954:	4841      	ldr	r0, [pc, #260]	; (8008a5c <HAL_TIM_Base_Init+0x1dc>)
 8008956:	f7fb f9d8 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <HAL_TIM_Base_Init+0x100>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896a:	d009      	beq.n	8008980 <HAL_TIM_Base_Init+0x100>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d004      	beq.n	8008980 <HAL_TIM_Base_Init+0x100>
 8008976:	f240 1115 	movw	r1, #277	; 0x115
 800897a:	4838      	ldr	r0, [pc, #224]	; (8008a5c <HAL_TIM_Base_Init+0x1dc>)
 800897c:	f7fb f9c5 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d008      	beq.n	800899a <HAL_TIM_Base_Init+0x11a>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	2b80      	cmp	r3, #128	; 0x80
 800898e:	d004      	beq.n	800899a <HAL_TIM_Base_Init+0x11a>
 8008990:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008994:	4831      	ldr	r0, [pc, #196]	; (8008a5c <HAL_TIM_Base_Init+0x1dc>)
 8008996:	f7fb f9b8 	bl	8003d0a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fb fc24 	bl	80041fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f001 fbb8 	bl	800a13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00
 8008a38:	40001000 	.word	0x40001000
 8008a3c:	40001400 	.word	0x40001400
 8008a40:	40010400 	.word	0x40010400
 8008a44:	40014000 	.word	0x40014000
 8008a48:	40014400 	.word	0x40014400
 8008a4c:	40014800 	.word	0x40014800
 8008a50:	40001800 	.word	0x40001800
 8008a54:	40001c00 	.word	0x40001c00
 8008a58:	40002000 	.word	0x40002000
 8008a5c:	08011628 	.word	0x08011628

08008a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a51      	ldr	r2, [pc, #324]	; (8008bb4 <HAL_TIM_Base_Start_IT+0x154>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d045      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7a:	d040      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a4d      	ldr	r2, [pc, #308]	; (8008bb8 <HAL_TIM_Base_Start_IT+0x158>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d03b      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a4c      	ldr	r2, [pc, #304]	; (8008bbc <HAL_TIM_Base_Start_IT+0x15c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d036      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a4a      	ldr	r2, [pc, #296]	; (8008bc0 <HAL_TIM_Base_Start_IT+0x160>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d031      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a49      	ldr	r2, [pc, #292]	; (8008bc4 <HAL_TIM_Base_Start_IT+0x164>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d02c      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a47      	ldr	r2, [pc, #284]	; (8008bc8 <HAL_TIM_Base_Start_IT+0x168>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d027      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a46      	ldr	r2, [pc, #280]	; (8008bcc <HAL_TIM_Base_Start_IT+0x16c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d022      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a44      	ldr	r2, [pc, #272]	; (8008bd0 <HAL_TIM_Base_Start_IT+0x170>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01d      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a43      	ldr	r2, [pc, #268]	; (8008bd4 <HAL_TIM_Base_Start_IT+0x174>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d018      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a41      	ldr	r2, [pc, #260]	; (8008bd8 <HAL_TIM_Base_Start_IT+0x178>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d013      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a40      	ldr	r2, [pc, #256]	; (8008bdc <HAL_TIM_Base_Start_IT+0x17c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00e      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	; (8008be0 <HAL_TIM_Base_Start_IT+0x180>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d009      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a3d      	ldr	r2, [pc, #244]	; (8008be4 <HAL_TIM_Base_Start_IT+0x184>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_TIM_Base_Start_IT+0x9e>
 8008af4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008af8:	483b      	ldr	r0, [pc, #236]	; (8008be8 <HAL_TIM_Base_Start_IT+0x188>)
 8008afa:	f7fb f906 	bl	8003d0a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d001      	beq.n	8008b0e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e04e      	b.n	8008bac <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f042 0201 	orr.w	r2, r2, #1
 8008b24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a22      	ldr	r2, [pc, #136]	; (8008bb4 <HAL_TIM_Base_Start_IT+0x154>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d022      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b38:	d01d      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <HAL_TIM_Base_Start_IT+0x158>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d018      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a1c      	ldr	r2, [pc, #112]	; (8008bbc <HAL_TIM_Base_Start_IT+0x15c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d013      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <HAL_TIM_Base_Start_IT+0x160>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00e      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1b      	ldr	r2, [pc, #108]	; (8008bcc <HAL_TIM_Base_Start_IT+0x16c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d009      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1a      	ldr	r2, [pc, #104]	; (8008bd0 <HAL_TIM_Base_Start_IT+0x170>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d004      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x116>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1a      	ldr	r2, [pc, #104]	; (8008bdc <HAL_TIM_Base_Start_IT+0x17c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d111      	bne.n	8008b9a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	d010      	beq.n	8008baa <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0201 	orr.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b98:	e007      	b.n	8008baa <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f042 0201 	orr.w	r2, r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40001000 	.word	0x40001000
 8008bc8:	40001400 	.word	0x40001400
 8008bcc:	40010400 	.word	0x40010400
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40014400 	.word	0x40014400
 8008bd8:	40014800 	.word	0x40014800
 8008bdc:	40001800 	.word	0x40001800
 8008be0:	40001c00 	.word	0x40001c00
 8008be4:	40002000 	.word	0x40002000
 8008be8:	08011628 	.word	0x08011628

08008bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e0c5      	b.n	8008d8a <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a64      	ldr	r2, [pc, #400]	; (8008d94 <HAL_TIM_PWM_Init+0x1a8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d045      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c10:	d040      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a60      	ldr	r2, [pc, #384]	; (8008d98 <HAL_TIM_PWM_Init+0x1ac>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d03b      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a5e      	ldr	r2, [pc, #376]	; (8008d9c <HAL_TIM_PWM_Init+0x1b0>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d036      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a5d      	ldr	r2, [pc, #372]	; (8008da0 <HAL_TIM_PWM_Init+0x1b4>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d031      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a5b      	ldr	r2, [pc, #364]	; (8008da4 <HAL_TIM_PWM_Init+0x1b8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d02c      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a5a      	ldr	r2, [pc, #360]	; (8008da8 <HAL_TIM_PWM_Init+0x1bc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d027      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a58      	ldr	r2, [pc, #352]	; (8008dac <HAL_TIM_PWM_Init+0x1c0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d022      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a57      	ldr	r2, [pc, #348]	; (8008db0 <HAL_TIM_PWM_Init+0x1c4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d01d      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a55      	ldr	r2, [pc, #340]	; (8008db4 <HAL_TIM_PWM_Init+0x1c8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d018      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a54      	ldr	r2, [pc, #336]	; (8008db8 <HAL_TIM_PWM_Init+0x1cc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d013      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a52      	ldr	r2, [pc, #328]	; (8008dbc <HAL_TIM_PWM_Init+0x1d0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00e      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a51      	ldr	r2, [pc, #324]	; (8008dc0 <HAL_TIM_PWM_Init+0x1d4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d009      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a4f      	ldr	r2, [pc, #316]	; (8008dc4 <HAL_TIM_PWM_Init+0x1d8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <HAL_TIM_PWM_Init+0xa8>
 8008c8a:	f240 5129 	movw	r1, #1321	; 0x529
 8008c8e:	484e      	ldr	r0, [pc, #312]	; (8008dc8 <HAL_TIM_PWM_Init+0x1dc>)
 8008c90:	f7fb f83b 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d014      	beq.n	8008cc6 <HAL_TIM_PWM_Init+0xda>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d010      	beq.n	8008cc6 <HAL_TIM_PWM_Init+0xda>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d00c      	beq.n	8008cc6 <HAL_TIM_PWM_Init+0xda>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d008      	beq.n	8008cc6 <HAL_TIM_PWM_Init+0xda>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	2b60      	cmp	r3, #96	; 0x60
 8008cba:	d004      	beq.n	8008cc6 <HAL_TIM_PWM_Init+0xda>
 8008cbc:	f240 512a 	movw	r1, #1322	; 0x52a
 8008cc0:	4841      	ldr	r0, [pc, #260]	; (8008dc8 <HAL_TIM_PWM_Init+0x1dc>)
 8008cc2:	f7fb f822 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIM_PWM_Init+0x100>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_PWM_Init+0x100>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_PWM_Init+0x100>
 8008ce2:	f240 512b 	movw	r1, #1323	; 0x52b
 8008ce6:	4838      	ldr	r0, [pc, #224]	; (8008dc8 <HAL_TIM_PWM_Init+0x1dc>)
 8008ce8:	f7fb f80f 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <HAL_TIM_PWM_Init+0x11a>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b80      	cmp	r3, #128	; 0x80
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIM_PWM_Init+0x11a>
 8008cfc:	f240 512c 	movw	r1, #1324	; 0x52c
 8008d00:	4831      	ldr	r0, [pc, #196]	; (8008dc8 <HAL_TIM_PWM_Init+0x1dc>)
 8008d02:	f7fb f802 	bl	8003d0a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fb fad0 	bl	80042c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	4610      	mov	r0, r2
 8008d34:	f001 fa02 	bl	800a13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40001000 	.word	0x40001000
 8008da8:	40001400 	.word	0x40001400
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800
 8008dbc:	40001800 	.word	0x40001800
 8008dc0:	40001c00 	.word	0x40001c00
 8008dc4:	40002000 	.word	0x40002000
 8008dc8:	08011628 	.word	0x08011628

08008dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a84      	ldr	r2, [pc, #528]	; (8008fec <HAL_TIM_PWM_Start+0x220>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d10f      	bne.n	8008e00 <HAL_TIM_PWM_Start+0x34>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 809f 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	f000 809b 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b08      	cmp	r3, #8
 8008df4:	f000 8097 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	f000 8093 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e08:	d10e      	bne.n	8008e28 <HAL_TIM_PWM_Start+0x5c>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 808a 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	f000 8086 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	f000 8082 	beq.w	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d07e      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a70      	ldr	r2, [pc, #448]	; (8008ff0 <HAL_TIM_PWM_Start+0x224>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d10b      	bne.n	8008e4a <HAL_TIM_PWM_Start+0x7e>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d076      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d073      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d070      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b0c      	cmp	r3, #12
 8008e48:	d06d      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a69      	ldr	r2, [pc, #420]	; (8008ff4 <HAL_TIM_PWM_Start+0x228>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d10b      	bne.n	8008e6c <HAL_TIM_PWM_Start+0xa0>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d065      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d062      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d05f      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b0c      	cmp	r3, #12
 8008e6a:	d05c      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a61      	ldr	r2, [pc, #388]	; (8008ff8 <HAL_TIM_PWM_Start+0x22c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d10b      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xc2>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d054      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d051      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d04e      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2b0c      	cmp	r3, #12
 8008e8c:	d04b      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a5a      	ldr	r2, [pc, #360]	; (8008ffc <HAL_TIM_PWM_Start+0x230>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d10b      	bne.n	8008eb0 <HAL_TIM_PWM_Start+0xe4>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d043      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d040      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d03d      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b0c      	cmp	r3, #12
 8008eae:	d03a      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a52      	ldr	r2, [pc, #328]	; (8009000 <HAL_TIM_PWM_Start+0x234>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d105      	bne.n	8008ec6 <HAL_TIM_PWM_Start+0xfa>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d032      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d02f      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a4e      	ldr	r2, [pc, #312]	; (8009004 <HAL_TIM_PWM_Start+0x238>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d102      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0x10a>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d027      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a4b      	ldr	r2, [pc, #300]	; (8009008 <HAL_TIM_PWM_Start+0x23c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d102      	bne.n	8008ee6 <HAL_TIM_PWM_Start+0x11a>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01f      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a48      	ldr	r2, [pc, #288]	; (800900c <HAL_TIM_PWM_Start+0x240>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d105      	bne.n	8008efc <HAL_TIM_PWM_Start+0x130>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d017      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d014      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a43      	ldr	r2, [pc, #268]	; (8009010 <HAL_TIM_PWM_Start+0x244>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d102      	bne.n	8008f0c <HAL_TIM_PWM_Start+0x140>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a40      	ldr	r2, [pc, #256]	; (8009014 <HAL_TIM_PWM_Start+0x248>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d102      	bne.n	8008f1c <HAL_TIM_PWM_Start+0x150>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <HAL_TIM_PWM_Start+0x15a>
 8008f1c:	f240 51af 	movw	r1, #1455	; 0x5af
 8008f20:	483d      	ldr	r0, [pc, #244]	; (8009018 <HAL_TIM_PWM_Start+0x24c>)
 8008f22:	f7fa fef2 	bl	8003d0a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <HAL_TIM_PWM_Start+0x174>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	bf14      	ite	ne
 8008f38:	2301      	movne	r3, #1
 8008f3a:	2300      	moveq	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	e022      	b.n	8008f86 <HAL_TIM_PWM_Start+0x1ba>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d109      	bne.n	8008f5a <HAL_TIM_PWM_Start+0x18e>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	e015      	b.n	8008f86 <HAL_TIM_PWM_Start+0x1ba>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d109      	bne.n	8008f74 <HAL_TIM_PWM_Start+0x1a8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	bf14      	ite	ne
 8008f6c:	2301      	movne	r3, #1
 8008f6e:	2300      	moveq	r3, #0
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	e008      	b.n	8008f86 <HAL_TIM_PWM_Start+0x1ba>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	bf14      	ite	ne
 8008f80:	2301      	movne	r3, #1
 8008f82:	2300      	moveq	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e094      	b.n	80090b8 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <HAL_TIM_PWM_Start+0x1d2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9c:	e013      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x1fa>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d104      	bne.n	8008fae <HAL_TIM_PWM_Start+0x1e2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fac:	e00b      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x1fa>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d104      	bne.n	8008fbe <HAL_TIM_PWM_Start+0x1f2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fbc:	e003      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x1fa>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fc28 	bl	800a824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <HAL_TIM_PWM_Start+0x220>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d004      	beq.n	8008fe8 <HAL_TIM_PWM_Start+0x21c>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a06      	ldr	r2, [pc, #24]	; (8008ffc <HAL_TIM_PWM_Start+0x230>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d119      	bne.n	800901c <HAL_TIM_PWM_Start+0x250>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e018      	b.n	800901e <HAL_TIM_PWM_Start+0x252>
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40000400 	.word	0x40000400
 8008ff4:	40000800 	.word	0x40000800
 8008ff8:	40000c00 	.word	0x40000c00
 8008ffc:	40010400 	.word	0x40010400
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800
 800900c:	40001800 	.word	0x40001800
 8009010:	40001c00 	.word	0x40001c00
 8009014:	40002000 	.word	0x40002000
 8009018:	08011628 	.word	0x08011628
 800901c:	2300      	movs	r3, #0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a22      	ldr	r2, [pc, #136]	; (80090c0 <HAL_TIM_PWM_Start+0x2f4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d022      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009044:	d01d      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <HAL_TIM_PWM_Start+0x2f8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d018      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1c      	ldr	r2, [pc, #112]	; (80090c8 <HAL_TIM_PWM_Start+0x2fc>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d013      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1b      	ldr	r2, [pc, #108]	; (80090cc <HAL_TIM_PWM_Start+0x300>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00e      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <HAL_TIM_PWM_Start+0x304>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d009      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <HAL_TIM_PWM_Start+0x308>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d004      	beq.n	8009082 <HAL_TIM_PWM_Start+0x2b6>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <HAL_TIM_PWM_Start+0x30c>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d111      	bne.n	80090a6 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b06      	cmp	r3, #6
 8009092:	d010      	beq.n	80090b6 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0201 	orr.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a4:	e007      	b.n	80090b6 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0201 	orr.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	40010400 	.word	0x40010400
 80090d4:	40014000 	.word	0x40014000
 80090d8:	40001800 	.word	0x40001800

080090dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e198      	b.n	8009422 <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a7d      	ldr	r2, [pc, #500]	; (80092ec <HAL_TIM_Encoder_Init+0x210>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d027      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d022      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a79      	ldr	r2, [pc, #484]	; (80092f0 <HAL_TIM_Encoder_Init+0x214>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d01d      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a78      	ldr	r2, [pc, #480]	; (80092f4 <HAL_TIM_Encoder_Init+0x218>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d018      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a76      	ldr	r2, [pc, #472]	; (80092f8 <HAL_TIM_Encoder_Init+0x21c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a75      	ldr	r2, [pc, #468]	; (80092fc <HAL_TIM_Encoder_Init+0x220>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a73      	ldr	r2, [pc, #460]	; (8009300 <HAL_TIM_Encoder_Init+0x224>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a72      	ldr	r2, [pc, #456]	; (8009304 <HAL_TIM_Encoder_Init+0x228>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIM_Encoder_Init+0x6e>
 8009140:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8009144:	4870      	ldr	r0, [pc, #448]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 8009146:	f7fa fde0 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d014      	beq.n	800917c <HAL_TIM_Encoder_Init+0xa0>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b10      	cmp	r3, #16
 8009158:	d010      	beq.n	800917c <HAL_TIM_Encoder_Init+0xa0>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b20      	cmp	r3, #32
 8009160:	d00c      	beq.n	800917c <HAL_TIM_Encoder_Init+0xa0>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d008      	beq.n	800917c <HAL_TIM_Encoder_Init+0xa0>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2b60      	cmp	r3, #96	; 0x60
 8009170:	d004      	beq.n	800917c <HAL_TIM_Encoder_Init+0xa0>
 8009172:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8009176:	4864      	ldr	r0, [pc, #400]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 8009178:	f7fa fdc7 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00e      	beq.n	80091a2 <HAL_TIM_Encoder_Init+0xc6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918c:	d009      	beq.n	80091a2 <HAL_TIM_Encoder_Init+0xc6>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009196:	d004      	beq.n	80091a2 <HAL_TIM_Encoder_Init+0xc6>
 8009198:	f640 31d3 	movw	r1, #3027	; 0xbd3
 800919c:	485a      	ldr	r0, [pc, #360]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 800919e:	f7fa fdb4 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <HAL_TIM_Encoder_Init+0xe0>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	2b80      	cmp	r3, #128	; 0x80
 80091b0:	d004      	beq.n	80091bc <HAL_TIM_Encoder_Init+0xe0>
 80091b2:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80091b6:	4854      	ldr	r0, [pc, #336]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80091b8:	f7fa fda7 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d00c      	beq.n	80091de <HAL_TIM_Encoder_Init+0x102>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d008      	beq.n	80091de <HAL_TIM_Encoder_Init+0x102>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d004      	beq.n	80091de <HAL_TIM_Encoder_Init+0x102>
 80091d4:	f640 31d5 	movw	r1, #3029	; 0xbd5
 80091d8:	484b      	ldr	r0, [pc, #300]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80091da:	f7fa fd96 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d00c      	beq.n	8009200 <HAL_TIM_Encoder_Init+0x124>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d008      	beq.n	8009200 <HAL_TIM_Encoder_Init+0x124>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d004      	beq.n	8009200 <HAL_TIM_Encoder_Init+0x124>
 80091f6:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80091fa:	4843      	ldr	r0, [pc, #268]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80091fc:	f7fa fd85 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_Encoder_Init+0x146>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	2b02      	cmp	r3, #2
 800920e:	d008      	beq.n	8009222 <HAL_TIM_Encoder_Init+0x146>
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d004      	beq.n	8009222 <HAL_TIM_Encoder_Init+0x146>
 8009218:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800921c:	483a      	ldr	r0, [pc, #232]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 800921e:	f7fa fd74 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <HAL_TIM_Encoder_Init+0x160>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d004      	beq.n	800923c <HAL_TIM_Encoder_Init+0x160>
 8009232:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8009236:	4834      	ldr	r0, [pc, #208]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 8009238:	f7fa fd67 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_TIM_Encoder_Init+0x17a>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d004      	beq.n	8009256 <HAL_TIM_Encoder_Init+0x17a>
 800924c:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8009250:	482d      	ldr	r0, [pc, #180]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 8009252:	f7fa fd5a 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <HAL_TIM_Encoder_Init+0x1a4>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	2b04      	cmp	r3, #4
 8009264:	d00c      	beq.n	8009280 <HAL_TIM_Encoder_Init+0x1a4>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b08      	cmp	r3, #8
 800926c:	d008      	beq.n	8009280 <HAL_TIM_Encoder_Init+0x1a4>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	2b0c      	cmp	r3, #12
 8009274:	d004      	beq.n	8009280 <HAL_TIM_Encoder_Init+0x1a4>
 8009276:	f640 31da 	movw	r1, #3034	; 0xbda
 800927a:	4823      	ldr	r0, [pc, #140]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 800927c:	f7fa fd45 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d010      	beq.n	80092aa <HAL_TIM_Encoder_Init+0x1ce>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	2b04      	cmp	r3, #4
 800928e:	d00c      	beq.n	80092aa <HAL_TIM_Encoder_Init+0x1ce>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	2b08      	cmp	r3, #8
 8009296:	d008      	beq.n	80092aa <HAL_TIM_Encoder_Init+0x1ce>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d004      	beq.n	80092aa <HAL_TIM_Encoder_Init+0x1ce>
 80092a0:	f640 31db 	movw	r1, #3035	; 0xbdb
 80092a4:	4818      	ldr	r0, [pc, #96]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80092a6:	f7fa fd30 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b0f      	cmp	r3, #15
 80092b0:	d904      	bls.n	80092bc <HAL_TIM_Encoder_Init+0x1e0>
 80092b2:	f640 31dc 	movw	r1, #3036	; 0xbdc
 80092b6:	4814      	ldr	r0, [pc, #80]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80092b8:	f7fa fd27 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	2b0f      	cmp	r3, #15
 80092c2:	d904      	bls.n	80092ce <HAL_TIM_Encoder_Init+0x1f2>
 80092c4:	f640 31dd 	movw	r1, #3037	; 0xbdd
 80092c8:	480f      	ldr	r0, [pc, #60]	; (8009308 <HAL_TIM_Encoder_Init+0x22c>)
 80092ca:	f7fa fd1e 	bl	8003d0a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d118      	bne.n	800930c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fb f814 	bl	8004310 <HAL_TIM_Encoder_MspInit>
 80092e8:	e010      	b.n	800930c <HAL_TIM_Encoder_Init+0x230>
 80092ea:	bf00      	nop
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40000400 	.word	0x40000400
 80092f4:	40000800 	.word	0x40000800
 80092f8:	40000c00 	.word	0x40000c00
 80092fc:	40010400 	.word	0x40010400
 8009300:	40014000 	.word	0x40014000
 8009304:	40001800 	.word	0x40001800
 8009308:	08011628 	.word	0x08011628
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6812      	ldr	r2, [r2, #0]
 800931e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009322:	f023 0307 	bic.w	r3, r3, #7
 8009326:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f000 ff02 	bl	800a13c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	4313      	orrs	r3, r2
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800937e:	f023 030c 	bic.w	r3, r3, #12
 8009382:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800938a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800938e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	4313      	orrs	r3, r2
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	011a      	lsls	r2, r3, #4
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	031b      	lsls	r3, r3, #12
 80093ae:	4313      	orrs	r3, r2
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80093bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80093c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	4313      	orrs	r3, r2
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop

0800942c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b02      	cmp	r3, #2
 8009440:	d122      	bne.n	8009488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b02      	cmp	r3, #2
 800944e:	d11b      	bne.n	8009488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0202 	mvn.w	r2, #2
 8009458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fe46 	bl	800a100 <HAL_TIM_IC_CaptureCallback>
 8009474:	e005      	b.n	8009482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fe38 	bl	800a0ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fe49 	bl	800a114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b04      	cmp	r3, #4
 8009494:	d122      	bne.n	80094dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d11b      	bne.n	80094dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0204 	mvn.w	r2, #4
 80094ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fe1c 	bl	800a100 <HAL_TIM_IC_CaptureCallback>
 80094c8:	e005      	b.n	80094d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fe0e 	bl	800a0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fe1f 	bl	800a114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0308 	and.w	r3, r3, #8
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0208 	mvn.w	r2, #8
 8009500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2204      	movs	r2, #4
 8009506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fdf2 	bl	800a100 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fde4 	bl	800a0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fdf5 	bl	800a114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0310 	and.w	r3, r3, #16
 800953a:	2b10      	cmp	r3, #16
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b10      	cmp	r3, #16
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0210 	mvn.w	r2, #16
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2208      	movs	r2, #8
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fdc8 	bl	800a100 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fdba 	bl	800a0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fdcb 	bl	800a114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b01      	cmp	r3, #1
 8009590:	d10e      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d107      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0201 	mvn.w	r2, #1
 80095a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f7 fe58 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ba:	2b80      	cmp	r3, #128	; 0x80
 80095bc:	d10e      	bne.n	80095dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c8:	2b80      	cmp	r3, #128	; 0x80
 80095ca:	d107      	bne.n	80095dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fb5c 	bl	800ac94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e6:	2b40      	cmp	r3, #64	; 0x40
 80095e8:	d10e      	bne.n	8009608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d107      	bne.n	8009608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd90 	bl	800a128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b20      	cmp	r3, #32
 8009614:	d10e      	bne.n	8009634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b20      	cmp	r3, #32
 8009622:	d107      	bne.n	8009634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f06f 0220 	mvn.w	r2, #32
 800962c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fb26 	bl	800ac80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b04      	cmp	r3, #4
 8009656:	d00d      	beq.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b08      	cmp	r3, #8
 800965c:	d00a      	beq.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x38>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b0c      	cmp	r3, #12
 8009662:	d007      	beq.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b3c      	cmp	r3, #60	; 0x3c
 8009668:	d004      	beq.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x38>
 800966a:	f241 0177 	movw	r1, #4215	; 0x1077
 800966e:	4883      	ldr	r0, [pc, #524]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009670:	f7fa fb4b 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b60      	cmp	r3, #96	; 0x60
 800967a:	d008      	beq.n	800968e <HAL_TIM_PWM_ConfigChannel+0x52>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b70      	cmp	r3, #112	; 0x70
 8009682:	d004      	beq.n	800968e <HAL_TIM_PWM_ConfigChannel+0x52>
 8009684:	f241 0178 	movw	r1, #4216	; 0x1078
 8009688:	487c      	ldr	r0, [pc, #496]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 800968a:	f7fa fb3e 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d008      	beq.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d004      	beq.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800969e:	f241 0179 	movw	r1, #4217	; 0x1079
 80096a2:	4876      	ldr	r0, [pc, #472]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80096a4:	f7fa fb31 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d008      	beq.n	80096c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d004      	beq.n	80096c2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80096b8:	f241 017a 	movw	r1, #4218	; 0x107a
 80096bc:	486f      	ldr	r0, [pc, #444]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80096be:	f7fa fb24 	bl	8003d0a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e17c      	b.n	80099ca <HAL_TIM_PWM_ConfigChannel+0x38e>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b0c      	cmp	r3, #12
 80096dc:	f200 816d 	bhi.w	80099ba <HAL_TIM_PWM_ConfigChannel+0x37e>
 80096e0:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <HAL_TIM_PWM_ConfigChannel+0xac>)
 80096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e6:	bf00      	nop
 80096e8:	0800971d 	.word	0x0800971d
 80096ec:	080099bb 	.word	0x080099bb
 80096f0:	080099bb 	.word	0x080099bb
 80096f4:	080099bb 	.word	0x080099bb
 80096f8:	080097df 	.word	0x080097df
 80096fc:	080099bb 	.word	0x080099bb
 8009700:	080099bb 	.word	0x080099bb
 8009704:	080099bb 	.word	0x080099bb
 8009708:	080098ad 	.word	0x080098ad
 800970c:	080099bb 	.word	0x080099bb
 8009710:	080099bb 	.word	0x080099bb
 8009714:	080099bb 	.word	0x080099bb
 8009718:	08009933 	.word	0x08009933
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a57      	ldr	r2, [pc, #348]	; (8009880 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d03b      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800972e:	d036      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a53      	ldr	r2, [pc, #332]	; (8009884 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d031      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a52      	ldr	r2, [pc, #328]	; (8009888 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d02c      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a50      	ldr	r2, [pc, #320]	; (800988c <HAL_TIM_PWM_ConfigChannel+0x250>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d027      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a4f      	ldr	r2, [pc, #316]	; (8009890 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d022      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a4d      	ldr	r2, [pc, #308]	; (8009894 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01d      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a4c      	ldr	r2, [pc, #304]	; (8009898 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d018      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a4a      	ldr	r2, [pc, #296]	; (800989c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d013      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a49      	ldr	r2, [pc, #292]	; (80098a0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00e      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a47      	ldr	r2, [pc, #284]	; (80098a4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d009      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a46      	ldr	r2, [pc, #280]	; (80098a8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d004      	beq.n	800979e <HAL_TIM_PWM_ConfigChannel+0x162>
 8009794:	f241 0184 	movw	r1, #4228	; 0x1084
 8009798:	4838      	ldr	r0, [pc, #224]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 800979a:	f7fa fab6 	bl	8003d0a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fd69 	bl	800a27c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699a      	ldr	r2, [r3, #24]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0208 	orr.w	r2, r2, #8
 80097b8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699a      	ldr	r2, [r3, #24]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0204 	bic.w	r2, r2, #4
 80097c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6999      	ldr	r1, [r3, #24]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	619a      	str	r2, [r3, #24]
      break;
 80097dc:	e0f0      	b.n	80099c0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a27      	ldr	r2, [pc, #156]	; (8009880 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d027      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f0:	d022      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a23      	ldr	r2, [pc, #140]	; (8009884 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d01d      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a21      	ldr	r2, [pc, #132]	; (8009888 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d018      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a20      	ldr	r2, [pc, #128]	; (800988c <HAL_TIM_PWM_ConfigChannel+0x250>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00e      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800982e:	f241 0195 	movw	r1, #4245	; 0x1095
 8009832:	4812      	ldr	r0, [pc, #72]	; (800987c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009834:	f7fa fa69 	bl	8003d0a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fdb6 	bl	800a3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6999      	ldr	r1, [r3, #24]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	021a      	lsls	r2, r3, #8
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	619a      	str	r2, [r3, #24]
      break;
 8009878:	e0a2      	b.n	80099c0 <HAL_TIM_PWM_ConfigChannel+0x384>
 800987a:	bf00      	nop
 800987c:	08011628 	.word	0x08011628
 8009880:	40010000 	.word	0x40010000
 8009884:	40000400 	.word	0x40000400
 8009888:	40000800 	.word	0x40000800
 800988c:	40000c00 	.word	0x40000c00
 8009890:	40010400 	.word	0x40010400
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800
 80098a0:	40001800 	.word	0x40001800
 80098a4:	40001c00 	.word	0x40001c00
 80098a8:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a48      	ldr	r2, [pc, #288]	; (80099d4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d01d      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098be:	d018      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a44      	ldr	r2, [pc, #272]	; (80099d8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a43      	ldr	r2, [pc, #268]	; (80099dc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00e      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a41      	ldr	r2, [pc, #260]	; (80099e0 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a40      	ldr	r2, [pc, #256]	; (80099e4 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d004      	beq.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80098e8:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80098ec:	483e      	ldr	r0, [pc, #248]	; (80099e8 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80098ee:	f7fa fa0c 	bl	8003d0a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fdf7 	bl	800a4ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69da      	ldr	r2, [r3, #28]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0208 	orr.w	r2, r2, #8
 800990c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69da      	ldr	r2, [r3, #28]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0204 	bic.w	r2, r2, #4
 800991c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69d9      	ldr	r1, [r3, #28]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	691a      	ldr	r2, [r3, #16]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	61da      	str	r2, [r3, #28]
      break;
 8009930:	e046      	b.n	80099c0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a27      	ldr	r2, [pc, #156]	; (80099d4 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d01d      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009944:	d018      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a23      	ldr	r2, [pc, #140]	; (80099d8 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d013      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a21      	ldr	r2, [pc, #132]	; (80099dc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d00e      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a20      	ldr	r2, [pc, #128]	; (80099e0 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d009      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a1e      	ldr	r2, [pc, #120]	; (80099e4 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d004      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800996e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8009972:	481d      	ldr	r0, [pc, #116]	; (80099e8 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009974:	f7fa f9c9 	bl	8003d0a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fe52 	bl	800a628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	69da      	ldr	r2, [r3, #28]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009992:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69da      	ldr	r2, [r3, #28]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	69d9      	ldr	r1, [r3, #28]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	021a      	lsls	r2, r3, #8
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	61da      	str	r2, [r3, #28]
      break;
 80099b8:	e002      	b.n	80099c0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]
      break;
 80099be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40000400 	.word	0x40000400
 80099dc:	40000800 	.word	0x40000800
 80099e0:	40000c00 	.word	0x40000c00
 80099e4:	40010400 	.word	0x40010400
 80099e8:	08011628 	.word	0x08011628

080099ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_TIM_ConfigClockSource+0x1c>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e35c      	b.n	800a0c2 <HAL_TIM_ConfigClockSource+0x6d6>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a20:	d029      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2a:	d024      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d020      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d01c      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d018      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b30      	cmp	r3, #48	; 0x30
 8009a4a:	d014      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b40      	cmp	r3, #64	; 0x40
 8009a52:	d010      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d00c      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b60      	cmp	r3, #96	; 0x60
 8009a62:	d008      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b70      	cmp	r3, #112	; 0x70
 8009a6a:	d004      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x8a>
 8009a6c:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8009a70:	4893      	ldr	r0, [pc, #588]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009a72:	f7fa f94a 	bl	8003d0a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9e:	f000 812b 	beq.w	8009cf8 <HAL_TIM_ConfigClockSource+0x30c>
 8009aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa6:	f200 82ff 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aae:	d02e      	beq.n	8009b0e <HAL_TIM_ConfigClockSource+0x122>
 8009ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab4:	f200 82f8 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009ab8:	2b70      	cmp	r3, #112	; 0x70
 8009aba:	f000 8082 	beq.w	8009bc2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009abe:	2b70      	cmp	r3, #112	; 0x70
 8009ac0:	f200 82f2 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009ac4:	2b60      	cmp	r3, #96	; 0x60
 8009ac6:	f000 81e8 	beq.w	8009e9a <HAL_TIM_ConfigClockSource+0x4ae>
 8009aca:	2b60      	cmp	r3, #96	; 0x60
 8009acc:	f200 82ec 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009ad0:	2b50      	cmp	r3, #80	; 0x50
 8009ad2:	f000 8182 	beq.w	8009dda <HAL_TIM_ConfigClockSource+0x3ee>
 8009ad6:	2b50      	cmp	r3, #80	; 0x50
 8009ad8:	f200 82e6 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	f000 824d 	beq.w	8009f7c <HAL_TIM_ConfigClockSource+0x590>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	f200 82e0 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009ae8:	2b30      	cmp	r3, #48	; 0x30
 8009aea:	f000 82a7 	beq.w	800a03c <HAL_TIM_ConfigClockSource+0x650>
 8009aee:	2b30      	cmp	r3, #48	; 0x30
 8009af0:	f200 82da 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	f000 82a1 	beq.w	800a03c <HAL_TIM_ConfigClockSource+0x650>
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	f200 82d4 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 829b 	beq.w	800a03c <HAL_TIM_ConfigClockSource+0x650>
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	f000 8298 	beq.w	800a03c <HAL_TIM_ConfigClockSource+0x650>
 8009b0c:	e2cc      	b.n	800a0a8 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a6c      	ldr	r2, [pc, #432]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	f000 82ca 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b22:	f000 82c4 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a67      	ldr	r2, [pc, #412]	; (8009cc8 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	f000 82be 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a65      	ldr	r2, [pc, #404]	; (8009ccc <HAL_TIM_ConfigClockSource+0x2e0>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	f000 82b8 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a63      	ldr	r2, [pc, #396]	; (8009cd0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	f000 82b2 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a61      	ldr	r2, [pc, #388]	; (8009cd4 <HAL_TIM_ConfigClockSource+0x2e8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	f000 82ac 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a5f      	ldr	r2, [pc, #380]	; (8009cd8 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	f000 82a6 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a5d      	ldr	r2, [pc, #372]	; (8009cdc <HAL_TIM_ConfigClockSource+0x2f0>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	f000 82a0 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a5b      	ldr	r2, [pc, #364]	; (8009ce0 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	f000 829a 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a59      	ldr	r2, [pc, #356]	; (8009ce4 <HAL_TIM_ConfigClockSource+0x2f8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	f000 8294 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a57      	ldr	r2, [pc, #348]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	f000 828e 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a55      	ldr	r2, [pc, #340]	; (8009cec <HAL_TIM_ConfigClockSource+0x300>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f000 8288 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a53      	ldr	r2, [pc, #332]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x304>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	f000 8282 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a51      	ldr	r2, [pc, #324]	; (8009cf4 <HAL_TIM_ConfigClockSource+0x308>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	f000 827c 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
 8009bb6:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8009bba:	4841      	ldr	r0, [pc, #260]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009bbc:	f7fa f8a5 	bl	8003d0a <assert_failed>
      break;
 8009bc0:	e275      	b.n	800a0ae <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a3f      	ldr	r2, [pc, #252]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d027      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd4:	d022      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a3b      	ldr	r2, [pc, #236]	; (8009cc8 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d01d      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a39      	ldr	r2, [pc, #228]	; (8009ccc <HAL_TIM_ConfigClockSource+0x2e0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d018      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a38      	ldr	r2, [pc, #224]	; (8009cd0 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d013      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a38      	ldr	r2, [pc, #224]	; (8009cdc <HAL_TIM_ConfigClockSource+0x2f0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00e      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a37      	ldr	r2, [pc, #220]	; (8009ce0 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a37      	ldr	r2, [pc, #220]	; (8009cec <HAL_TIM_ConfigClockSource+0x300>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d004      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x230>
 8009c12:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009c16:	482a      	ldr	r0, [pc, #168]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009c18:	f7fa f877 	bl	8003d0a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d013      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x260>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c2c:	d00e      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x260>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c36:	d009      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x260>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c40:	d004      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x260>
 8009c42:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8009c46:	481e      	ldr	r0, [pc, #120]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009c48:	f7fa f85f 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c54:	d014      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x294>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d010      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x294>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00c      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x294>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d008      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x294>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	2b0a      	cmp	r3, #10
 8009c74:	d004      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x294>
 8009c76:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8009c7a:	4811      	ldr	r0, [pc, #68]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009c7c:	f7fa f845 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	2b0f      	cmp	r3, #15
 8009c86:	d904      	bls.n	8009c92 <HAL_TIM_ConfigClockSource+0x2a6>
 8009c88:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8009c8c:	480c      	ldr	r0, [pc, #48]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009c8e:	f7fa f83c 	bl	8003d0a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6899      	ldr	r1, [r3, #8]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	f000 fd9f 	bl	800a7e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	609a      	str	r2, [r3, #8]
      break;
 8009cbe:	e1f7      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
 8009cc0:	08011628 	.word	0x08011628
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40000400 	.word	0x40000400
 8009ccc:	40000800 	.word	0x40000800
 8009cd0:	40000c00 	.word	0x40000c00
 8009cd4:	40001000 	.word	0x40001000
 8009cd8:	40001400 	.word	0x40001400
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40014400 	.word	0x40014400
 8009ce8:	40014800 	.word	0x40014800
 8009cec:	40001800 	.word	0x40001800
 8009cf0:	40001c00 	.word	0x40001c00
 8009cf4:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a97      	ldr	r2, [pc, #604]	; (8009f5c <HAL_TIM_ConfigClockSource+0x570>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01d      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d0a:	d018      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a93      	ldr	r2, [pc, #588]	; (8009f60 <HAL_TIM_ConfigClockSource+0x574>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d013      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a92      	ldr	r2, [pc, #584]	; (8009f64 <HAL_TIM_ConfigClockSource+0x578>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00e      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a90      	ldr	r2, [pc, #576]	; (8009f68 <HAL_TIM_ConfigClockSource+0x57c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d009      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a8f      	ldr	r2, [pc, #572]	; (8009f6c <HAL_TIM_ConfigClockSource+0x580>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d004      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x352>
 8009d34:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009d38:	488d      	ldr	r0, [pc, #564]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009d3a:	f7f9 ffe6 	bl	8003d0a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d013      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x382>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4e:	d00e      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x382>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d58:	d009      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x382>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d62:	d004      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x382>
 8009d64:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8009d68:	4881      	ldr	r0, [pc, #516]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009d6a:	f7f9 ffce 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d76:	d014      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x3b6>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d010      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x3b6>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00c      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x3b6>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d008      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x3b6>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b0a      	cmp	r3, #10
 8009d96:	d004      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x3b6>
 8009d98:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8009d9c:	4874      	ldr	r0, [pc, #464]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009d9e:	f7f9 ffb4 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	d904      	bls.n	8009db4 <HAL_TIM_ConfigClockSource+0x3c8>
 8009daa:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8009dae:	4870      	ldr	r0, [pc, #448]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009db0:	f7f9 ffab 	bl	8003d0a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6899      	ldr	r1, [r3, #8]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f000 fd0e 	bl	800a7e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dd6:	609a      	str	r2, [r3, #8]
      break;
 8009dd8:	e16a      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a5f      	ldr	r2, [pc, #380]	; (8009f5c <HAL_TIM_ConfigClockSource+0x570>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d027      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dec:	d022      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a5b      	ldr	r2, [pc, #364]	; (8009f60 <HAL_TIM_ConfigClockSource+0x574>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d01d      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a59      	ldr	r2, [pc, #356]	; (8009f64 <HAL_TIM_ConfigClockSource+0x578>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d018      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a58      	ldr	r2, [pc, #352]	; (8009f68 <HAL_TIM_ConfigClockSource+0x57c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d013      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a56      	ldr	r2, [pc, #344]	; (8009f6c <HAL_TIM_ConfigClockSource+0x580>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00e      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a56      	ldr	r2, [pc, #344]	; (8009f74 <HAL_TIM_ConfigClockSource+0x588>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d009      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a54      	ldr	r2, [pc, #336]	; (8009f78 <HAL_TIM_ConfigClockSource+0x58c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x448>
 8009e2a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009e2e:	4850      	ldr	r0, [pc, #320]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009e30:	f7f9 ff6b 	bl	8003d0a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e3c:	d014      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0x47c>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d010      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0x47c>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00c      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0x47c>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d008      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0x47c>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b0a      	cmp	r3, #10
 8009e5c:	d004      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0x47c>
 8009e5e:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8009e62:	4843      	ldr	r0, [pc, #268]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009e64:	f7f9 ff51 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	2b0f      	cmp	r3, #15
 8009e6e:	d904      	bls.n	8009e7a <HAL_TIM_ConfigClockSource+0x48e>
 8009e70:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8009e74:	483e      	ldr	r0, [pc, #248]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009e76:	f7f9 ff48 	bl	8003d0a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6859      	ldr	r1, [r3, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f000 fc32 	bl	800a6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2150      	movs	r1, #80	; 0x50
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fc8b 	bl	800a7ae <TIM_ITRx_SetConfig>
      break;
 8009e98:	e10a      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a2f      	ldr	r2, [pc, #188]	; (8009f5c <HAL_TIM_ConfigClockSource+0x570>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d027      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eac:	d022      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a2b      	ldr	r2, [pc, #172]	; (8009f60 <HAL_TIM_ConfigClockSource+0x574>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d01d      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a29      	ldr	r2, [pc, #164]	; (8009f64 <HAL_TIM_ConfigClockSource+0x578>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d018      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a28      	ldr	r2, [pc, #160]	; (8009f68 <HAL_TIM_ConfigClockSource+0x57c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d013      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a26      	ldr	r2, [pc, #152]	; (8009f6c <HAL_TIM_ConfigClockSource+0x580>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00e      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a26      	ldr	r2, [pc, #152]	; (8009f74 <HAL_TIM_ConfigClockSource+0x588>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d009      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a24      	ldr	r2, [pc, #144]	; (8009f78 <HAL_TIM_ConfigClockSource+0x58c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d004      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x508>
 8009eea:	f241 510a 	movw	r1, #5386	; 0x150a
 8009eee:	4820      	ldr	r0, [pc, #128]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009ef0:	f7f9 ff0b 	bl	8003d0a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009efc:	d014      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x53c>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d010      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x53c>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00c      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x53c>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d008      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x53c>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2b0a      	cmp	r3, #10
 8009f1c:	d004      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x53c>
 8009f1e:	f241 510d 	movw	r1, #5389	; 0x150d
 8009f22:	4813      	ldr	r0, [pc, #76]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009f24:	f7f9 fef1 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	2b0f      	cmp	r3, #15
 8009f2e:	d904      	bls.n	8009f3a <HAL_TIM_ConfigClockSource+0x54e>
 8009f30:	f241 510e 	movw	r1, #5390	; 0x150e
 8009f34:	480e      	ldr	r0, [pc, #56]	; (8009f70 <HAL_TIM_ConfigClockSource+0x584>)
 8009f36:	f7f9 fee8 	bl	8003d0a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	6859      	ldr	r1, [r3, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f000 fc01 	bl	800a74e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2160      	movs	r1, #96	; 0x60
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fc2b 	bl	800a7ae <TIM_ITRx_SetConfig>
      break;
 8009f58:	e0aa      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
 8009f5a:	bf00      	nop
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40000400 	.word	0x40000400
 8009f64:	40000800 	.word	0x40000800
 8009f68:	40000c00 	.word	0x40000c00
 8009f6c:	40010400 	.word	0x40010400
 8009f70:	08011628 	.word	0x08011628
 8009f74:	40014000 	.word	0x40014000
 8009f78:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a52      	ldr	r2, [pc, #328]	; (800a0cc <HAL_TIM_ConfigClockSource+0x6e0>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d027      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8e:	d022      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a4e      	ldr	r2, [pc, #312]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d01d      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a4d      	ldr	r2, [pc, #308]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x6e8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d018      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a4b      	ldr	r2, [pc, #300]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d013      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a4a      	ldr	r2, [pc, #296]	; (800a0dc <HAL_TIM_ConfigClockSource+0x6f0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a48      	ldr	r2, [pc, #288]	; (800a0e0 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d009      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a47      	ldr	r2, [pc, #284]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x6f8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d004      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x5ea>
 8009fcc:	f241 511a 	movw	r1, #5402	; 0x151a
 8009fd0:	4845      	ldr	r0, [pc, #276]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x6fc>)
 8009fd2:	f7f9 fe9a 	bl	8003d0a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fde:	d014      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x61e>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d010      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x61e>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00c      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x61e>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d008      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x61e>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b0a      	cmp	r3, #10
 8009ffe:	d004      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x61e>
 800a000:	f241 511d 	movw	r1, #5405	; 0x151d
 800a004:	4838      	ldr	r0, [pc, #224]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a006:	f7f9 fe80 	bl	8003d0a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	2b0f      	cmp	r3, #15
 800a010:	d904      	bls.n	800a01c <HAL_TIM_ConfigClockSource+0x630>
 800a012:	f241 511e 	movw	r1, #5406	; 0x151e
 800a016:	4834      	ldr	r0, [pc, #208]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a018:	f7f9 fe77 	bl	8003d0a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	6859      	ldr	r1, [r3, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	461a      	mov	r2, r3
 800a02a:	f000 fb61 	bl	800a6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2140      	movs	r1, #64	; 0x40
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fbba 	bl	800a7ae <TIM_ITRx_SetConfig>
      break;
 800a03a:	e039      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a22      	ldr	r2, [pc, #136]	; (800a0cc <HAL_TIM_ConfigClockSource+0x6e0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d027      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04e:	d022      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d01d      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a1d      	ldr	r2, [pc, #116]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d018      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a1b      	ldr	r2, [pc, #108]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a1a      	ldr	r2, [pc, #104]	; (800a0dc <HAL_TIM_ConfigClockSource+0x6f0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00e      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a18      	ldr	r2, [pc, #96]	; (800a0e0 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d009      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a17      	ldr	r2, [pc, #92]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d004      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x6aa>
 800a08c:	f241 512d 	movw	r1, #5421	; 0x152d
 800a090:	4815      	ldr	r0, [pc, #84]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a092:	f7f9 fe3a 	bl	8003d0a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f000 fb84 	bl	800a7ae <TIM_ITRx_SetConfig>
      break;
 800a0a6:	e003      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ac:	e000      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800a0ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40014000 	.word	0x40014000
 800a0e4:	40001800 	.word	0x40001800
 800a0e8:	08011628 	.word	0x08011628

0800a0ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a40      	ldr	r2, [pc, #256]	; (800a250 <TIM_Base_SetConfig+0x114>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d013      	beq.n	800a17c <TIM_Base_SetConfig+0x40>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15a:	d00f      	beq.n	800a17c <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a3d      	ldr	r2, [pc, #244]	; (800a254 <TIM_Base_SetConfig+0x118>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00b      	beq.n	800a17c <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3c      	ldr	r2, [pc, #240]	; (800a258 <TIM_Base_SetConfig+0x11c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d007      	beq.n	800a17c <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3b      	ldr	r2, [pc, #236]	; (800a25c <TIM_Base_SetConfig+0x120>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d003      	beq.n	800a17c <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3a      	ldr	r2, [pc, #232]	; (800a260 <TIM_Base_SetConfig+0x124>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d108      	bne.n	800a18e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a2f      	ldr	r2, [pc, #188]	; (800a250 <TIM_Base_SetConfig+0x114>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d02b      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19c:	d027      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a2c      	ldr	r2, [pc, #176]	; (800a254 <TIM_Base_SetConfig+0x118>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d023      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2b      	ldr	r2, [pc, #172]	; (800a258 <TIM_Base_SetConfig+0x11c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d01f      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2a      	ldr	r2, [pc, #168]	; (800a25c <TIM_Base_SetConfig+0x120>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d01b      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a29      	ldr	r2, [pc, #164]	; (800a260 <TIM_Base_SetConfig+0x124>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d017      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a28      	ldr	r2, [pc, #160]	; (800a264 <TIM_Base_SetConfig+0x128>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d013      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a27      	ldr	r2, [pc, #156]	; (800a268 <TIM_Base_SetConfig+0x12c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00f      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a26      	ldr	r2, [pc, #152]	; (800a26c <TIM_Base_SetConfig+0x130>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00b      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a25      	ldr	r2, [pc, #148]	; (800a270 <TIM_Base_SetConfig+0x134>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a24      	ldr	r2, [pc, #144]	; (800a274 <TIM_Base_SetConfig+0x138>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_Base_SetConfig+0xb2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a23      	ldr	r2, [pc, #140]	; (800a278 <TIM_Base_SetConfig+0x13c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d108      	bne.n	800a200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a0a      	ldr	r2, [pc, #40]	; (800a250 <TIM_Base_SetConfig+0x114>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d003      	beq.n	800a234 <TIM_Base_SetConfig+0xf8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <TIM_Base_SetConfig+0x124>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d103      	bne.n	800a23c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	615a      	str	r2, [r3, #20]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40010400 	.word	0x40010400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800
 800a270:	40001800 	.word	0x40001800
 800a274:	40001c00 	.word	0x40001c00
 800a278:	40002000 	.word	0x40002000

0800a27c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f023 0201 	bic.w	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f023 0302 	bic.w	r3, r3, #2
 800a2c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a34      	ldr	r2, [pc, #208]	; (800a3a4 <TIM_OC1_SetConfig+0x128>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_OC1_SetConfig+0x64>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a33      	ldr	r2, [pc, #204]	; (800a3a8 <TIM_OC1_SetConfig+0x12c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d119      	bne.n	800a314 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d008      	beq.n	800a2fa <TIM_OC1_SetConfig+0x7e>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d004      	beq.n	800a2fa <TIM_OC1_SetConfig+0x7e>
 800a2f0:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800a2f4:	482d      	ldr	r0, [pc, #180]	; (800a3ac <TIM_OC1_SetConfig+0x130>)
 800a2f6:	f7f9 fd08 	bl	8003d0a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f023 0308 	bic.w	r3, r3, #8
 800a300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	4313      	orrs	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f023 0304 	bic.w	r3, r3, #4
 800a312:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a23      	ldr	r2, [pc, #140]	; (800a3a4 <TIM_OC1_SetConfig+0x128>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d003      	beq.n	800a324 <TIM_OC1_SetConfig+0xa8>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a22      	ldr	r2, [pc, #136]	; (800a3a8 <TIM_OC1_SetConfig+0x12c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d12d      	bne.n	800a380 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a32c:	d008      	beq.n	800a340 <TIM_OC1_SetConfig+0xc4>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <TIM_OC1_SetConfig+0xc4>
 800a336:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800a33a:	481c      	ldr	r0, [pc, #112]	; (800a3ac <TIM_OC1_SetConfig+0x130>)
 800a33c:	f7f9 fce5 	bl	8003d0a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a348:	d008      	beq.n	800a35c <TIM_OC1_SetConfig+0xe0>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d004      	beq.n	800a35c <TIM_OC1_SetConfig+0xe0>
 800a352:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800a356:	4815      	ldr	r0, [pc, #84]	; (800a3ac <TIM_OC1_SetConfig+0x130>)
 800a358:	f7f9 fcd7 	bl	8003d0a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a36a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400
 800a3ac:	08011628 	.word	0x08011628

0800a3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f023 0210 	bic.w	r2, r3, #16
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f023 0320 	bic.w	r3, r3, #32
 800a3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	4313      	orrs	r3, r2
 800a406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a35      	ldr	r2, [pc, #212]	; (800a4e0 <TIM_OC2_SetConfig+0x130>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d003      	beq.n	800a418 <TIM_OC2_SetConfig+0x68>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a34      	ldr	r2, [pc, #208]	; (800a4e4 <TIM_OC2_SetConfig+0x134>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d11a      	bne.n	800a44e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d008      	beq.n	800a432 <TIM_OC2_SetConfig+0x82>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b08      	cmp	r3, #8
 800a426:	d004      	beq.n	800a432 <TIM_OC2_SetConfig+0x82>
 800a428:	f641 3116 	movw	r1, #6934	; 0x1b16
 800a42c:	482e      	ldr	r0, [pc, #184]	; (800a4e8 <TIM_OC2_SetConfig+0x138>)
 800a42e:	f7f9 fc6c 	bl	8003d0a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	4313      	orrs	r3, r2
 800a444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a44c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a23      	ldr	r2, [pc, #140]	; (800a4e0 <TIM_OC2_SetConfig+0x130>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d003      	beq.n	800a45e <TIM_OC2_SetConfig+0xae>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <TIM_OC2_SetConfig+0x134>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d12f      	bne.n	800a4be <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a466:	d008      	beq.n	800a47a <TIM_OC2_SetConfig+0xca>
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <TIM_OC2_SetConfig+0xca>
 800a470:	f641 3124 	movw	r1, #6948	; 0x1b24
 800a474:	481c      	ldr	r0, [pc, #112]	; (800a4e8 <TIM_OC2_SetConfig+0x138>)
 800a476:	f7f9 fc48 	bl	8003d0a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a482:	d008      	beq.n	800a496 <TIM_OC2_SetConfig+0xe6>
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <TIM_OC2_SetConfig+0xe6>
 800a48c:	f641 3125 	movw	r1, #6949	; 0x1b25
 800a490:	4815      	ldr	r0, [pc, #84]	; (800a4e8 <TIM_OC2_SetConfig+0x138>)
 800a492:	f7f9 fc3a 	bl	8003d0a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	621a      	str	r2, [r3, #32]
}
 800a4d8:	bf00      	nop
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40010000 	.word	0x40010000
 800a4e4:	40010400 	.word	0x40010400
 800a4e8:	08011628 	.word	0x08011628

0800a4ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	4313      	orrs	r3, r2
 800a540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a35      	ldr	r2, [pc, #212]	; (800a61c <TIM_OC3_SetConfig+0x130>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d003      	beq.n	800a552 <TIM_OC3_SetConfig+0x66>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a34      	ldr	r2, [pc, #208]	; (800a620 <TIM_OC3_SetConfig+0x134>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d11a      	bne.n	800a588 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d008      	beq.n	800a56c <TIM_OC3_SetConfig+0x80>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	2b08      	cmp	r3, #8
 800a560:	d004      	beq.n	800a56c <TIM_OC3_SetConfig+0x80>
 800a562:	f641 3161 	movw	r1, #7009	; 0x1b61
 800a566:	482f      	ldr	r0, [pc, #188]	; (800a624 <TIM_OC3_SetConfig+0x138>)
 800a568:	f7f9 fbcf 	bl	8003d0a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a24      	ldr	r2, [pc, #144]	; (800a61c <TIM_OC3_SetConfig+0x130>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d003      	beq.n	800a598 <TIM_OC3_SetConfig+0xac>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a23      	ldr	r2, [pc, #140]	; (800a620 <TIM_OC3_SetConfig+0x134>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d12f      	bne.n	800a5f8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5a0:	d008      	beq.n	800a5b4 <TIM_OC3_SetConfig+0xc8>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <TIM_OC3_SetConfig+0xc8>
 800a5aa:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800a5ae:	481d      	ldr	r0, [pc, #116]	; (800a624 <TIM_OC3_SetConfig+0x138>)
 800a5b0:	f7f9 fbab 	bl	8003d0a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5bc:	d008      	beq.n	800a5d0 <TIM_OC3_SetConfig+0xe4>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d004      	beq.n	800a5d0 <TIM_OC3_SetConfig+0xe4>
 800a5c6:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800a5ca:	4816      	ldr	r0, [pc, #88]	; (800a624 <TIM_OC3_SetConfig+0x138>)
 800a5cc:	f7f9 fb9d 	bl	8003d0a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	621a      	str	r2, [r3, #32]
}
 800a612:	bf00      	nop
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	40010000 	.word	0x40010000
 800a620:	40010400 	.word	0x40010400
 800a624:	08011628 	.word	0x08011628

0800a628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	031b      	lsls	r3, r3, #12
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a18      	ldr	r2, [pc, #96]	; (800a6e4 <TIM_OC4_SetConfig+0xbc>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d003      	beq.n	800a690 <TIM_OC4_SetConfig+0x68>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a17      	ldr	r2, [pc, #92]	; (800a6e8 <TIM_OC4_SetConfig+0xc0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d117      	bne.n	800a6c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a698:	d008      	beq.n	800a6ac <TIM_OC4_SetConfig+0x84>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <TIM_OC4_SetConfig+0x84>
 800a6a2:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800a6a6:	4811      	ldr	r0, [pc, #68]	; (800a6ec <TIM_OC4_SetConfig+0xc4>)
 800a6a8:	f7f9 fb2f 	bl	8003d0a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	019b      	lsls	r3, r3, #6
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	08011628 	.word	0x08011628

0800a6f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f023 0201 	bic.w	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a71a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f023 030a 	bic.w	r3, r3, #10
 800a72c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	621a      	str	r2, [r3, #32]
}
 800a742:	bf00      	nop
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a74e:	b480      	push	{r7}
 800a750:	b087      	sub	sp, #28
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	f023 0210 	bic.w	r2, r3, #16
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	031b      	lsls	r3, r3, #12
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a78a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	621a      	str	r2, [r3, #32]
}
 800a7a2:	bf00      	nop
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	f043 0307 	orr.w	r3, r3, #7
 800a7d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	609a      	str	r2, [r3, #8]
}
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	021a      	lsls	r2, r3, #8
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	431a      	orrs	r2, r3
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	609a      	str	r2, [r3, #8]
}
 800a818:	bf00      	nop
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a32      	ldr	r2, [pc, #200]	; (800a8fc <TIM_CCxChannelCmd+0xd8>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d030      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d02c      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4a2f      	ldr	r2, [pc, #188]	; (800a900 <TIM_CCxChannelCmd+0xdc>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d028      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4a2e      	ldr	r2, [pc, #184]	; (800a904 <TIM_CCxChannelCmd+0xe0>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d024      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4a2d      	ldr	r2, [pc, #180]	; (800a908 <TIM_CCxChannelCmd+0xe4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d020      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4a2c      	ldr	r2, [pc, #176]	; (800a90c <TIM_CCxChannelCmd+0xe8>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d01c      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a2b      	ldr	r2, [pc, #172]	; (800a910 <TIM_CCxChannelCmd+0xec>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d018      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4a2a      	ldr	r2, [pc, #168]	; (800a914 <TIM_CCxChannelCmd+0xf0>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d014      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a29      	ldr	r2, [pc, #164]	; (800a918 <TIM_CCxChannelCmd+0xf4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d010      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4a28      	ldr	r2, [pc, #160]	; (800a91c <TIM_CCxChannelCmd+0xf8>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00c      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4a27      	ldr	r2, [pc, #156]	; (800a920 <TIM_CCxChannelCmd+0xfc>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d008      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4a26      	ldr	r2, [pc, #152]	; (800a924 <TIM_CCxChannelCmd+0x100>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d004      	beq.n	800a89a <TIM_CCxChannelCmd+0x76>
 800a890:	f641 5198 	movw	r1, #7576	; 0x1d98
 800a894:	4824      	ldr	r0, [pc, #144]	; (800a928 <TIM_CCxChannelCmd+0x104>)
 800a896:	f7f9 fa38 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d010      	beq.n	800a8c2 <TIM_CCxChannelCmd+0x9e>
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d00d      	beq.n	800a8c2 <TIM_CCxChannelCmd+0x9e>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d00a      	beq.n	800a8c2 <TIM_CCxChannelCmd+0x9e>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b0c      	cmp	r3, #12
 800a8b0:	d007      	beq.n	800a8c2 <TIM_CCxChannelCmd+0x9e>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b3c      	cmp	r3, #60	; 0x3c
 800a8b6:	d004      	beq.n	800a8c2 <TIM_CCxChannelCmd+0x9e>
 800a8b8:	f641 5199 	movw	r1, #7577	; 0x1d99
 800a8bc:	481a      	ldr	r0, [pc, #104]	; (800a928 <TIM_CCxChannelCmd+0x104>)
 800a8be:	f7f9 fa24 	bl	8003d0a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6a1a      	ldr	r2, [r3, #32]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	43db      	mvns	r3, r3
 800a8d8:	401a      	ands	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a1a      	ldr	r2, [r3, #32]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f003 031f 	and.w	r3, r3, #31
 800a8e8:	6879      	ldr	r1, [r7, #4]
 800a8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	621a      	str	r2, [r3, #32]
}
 800a8f4:	bf00      	nop
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	40010000 	.word	0x40010000
 800a900:	40000400 	.word	0x40000400
 800a904:	40000800 	.word	0x40000800
 800a908:	40000c00 	.word	0x40000c00
 800a90c:	40010400 	.word	0x40010400
 800a910:	40014000 	.word	0x40014000
 800a914:	40014400 	.word	0x40014400
 800a918:	40014800 	.word	0x40014800
 800a91c:	40001800 	.word	0x40001800
 800a920:	40001c00 	.word	0x40001c00
 800a924:	40002000 	.word	0x40002000
 800a928:	08011628 	.word	0x08011628

0800a92c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a61      	ldr	r2, [pc, #388]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d027      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a948:	d022      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a5d      	ldr	r2, [pc, #372]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d01d      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a5b      	ldr	r2, [pc, #364]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d018      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a5a      	ldr	r2, [pc, #360]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d013      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a58      	ldr	r2, [pc, #352]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00e      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a57      	ldr	r2, [pc, #348]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d009      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a55      	ldr	r2, [pc, #340]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d004      	beq.n	800a990 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a986:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a98a:	4854      	ldr	r0, [pc, #336]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a98c:	f7f9 f9bd 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d020      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d01c      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d018      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b30      	cmp	r3, #48	; 0x30
 800a9ae:	d014      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b40      	cmp	r3, #64	; 0x40
 800a9b6:	d010      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b50      	cmp	r3, #80	; 0x50
 800a9be:	d00c      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b60      	cmp	r3, #96	; 0x60
 800a9c6:	d008      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b70      	cmp	r3, #112	; 0x70
 800a9ce:	d004      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a9d0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a9d4:	4841      	ldr	r0, [pc, #260]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a9d6:	f7f9 f998 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d008      	beq.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9ea:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a9ee:	483b      	ldr	r0, [pc, #236]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a9f0:	f7f9 f98b 	bl	8003d0a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d101      	bne.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	e05a      	b.n	800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1f      	ldr	r2, [pc, #124]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d022      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4e:	d01d      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a1b      	ldr	r2, [pc, #108]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d018      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a1a      	ldr	r2, [pc, #104]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d013      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a18      	ldr	r2, [pc, #96]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00e      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d009      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a18      	ldr	r2, [pc, #96]	; (800aae0 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d004      	beq.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a17      	ldr	r2, [pc, #92]	; (800aae4 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d10c      	bne.n	800aaa6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40000400 	.word	0x40000400
 800aac8:	40000800 	.word	0x40000800
 800aacc:	40000c00 	.word	0x40000c00
 800aad0:	40001000 	.word	0x40001000
 800aad4:	40001400 	.word	0x40001400
 800aad8:	40010400 	.word	0x40010400
 800aadc:	08011660 	.word	0x08011660
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40001800 	.word	0x40001800

0800aae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a5e      	ldr	r2, [pc, #376]	; (800ac74 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d009      	beq.n	800ab14 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a5c      	ldr	r2, [pc, #368]	; (800ac78 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800ab0a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800ab0e:	485b      	ldr	r0, [pc, #364]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab10:	f7f9 f8fb 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab1c:	d008      	beq.n	800ab30 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d004      	beq.n	800ab30 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800ab26:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800ab2a:	4854      	ldr	r0, [pc, #336]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab2c:	f7f9 f8ed 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab38:	d008      	beq.n	800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800ab42:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800ab46:	484d      	ldr	r0, [pc, #308]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab48:	f7f9 f8df 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d013      	beq.n	800ab7c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5c:	d00e      	beq.n	800ab7c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab66:	d009      	beq.n	800ab7c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab70:	d004      	beq.n	800ab7c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800ab72:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800ab76:	4841      	ldr	r0, [pc, #260]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab78:	f7f9 f8c7 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	2bff      	cmp	r3, #255	; 0xff
 800ab82:	d904      	bls.n	800ab8e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800ab84:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800ab88:	483c      	ldr	r0, [pc, #240]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab8a:	f7f9 f8be 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab96:	d008      	beq.n	800abaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aba0:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800aba4:	4835      	ldr	r0, [pc, #212]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aba6:	f7f9 f8b0 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d009      	beq.n	800abc6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abba:	d004      	beq.n	800abc6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800abbc:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800abc0:	482e      	ldr	r0, [pc, #184]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800abc2:	f7f9 f8a2 	bl	8003d0a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abce:	d008      	beq.n	800abe2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d004      	beq.n	800abe2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800abd8:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800abdc:	4827      	ldr	r0, [pc, #156]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800abde:	f7f9 f894 	bl	8003d0a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800abec:	2302      	movs	r3, #2
 800abee:	e03d      	b.n	800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	40010000 	.word	0x40010000
 800ac78:	40010400 	.word	0x40010400
 800ac7c:	08011660 	.word	0x08011660

0800ac80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e0be      	b.n	800ae38 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d03b      	beq.n	800ad3a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a5e      	ldr	r2, [pc, #376]	; (800ae40 <HAL_UART_Init+0x198>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d01d      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a5c      	ldr	r2, [pc, #368]	; (800ae44 <HAL_UART_Init+0x19c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d018      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a5b      	ldr	r2, [pc, #364]	; (800ae48 <HAL_UART_Init+0x1a0>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d013      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a59      	ldr	r2, [pc, #356]	; (800ae4c <HAL_UART_Init+0x1a4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00e      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a58      	ldr	r2, [pc, #352]	; (800ae50 <HAL_UART_Init+0x1a8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d009      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a56      	ldr	r2, [pc, #344]	; (800ae54 <HAL_UART_Init+0x1ac>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d004      	beq.n	800ad08 <HAL_UART_Init+0x60>
 800acfe:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800ad02:	4855      	ldr	r0, [pc, #340]	; (800ae58 <HAL_UART_Init+0x1b0>)
 800ad04:	f7f9 f801 	bl	8003d0a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d037      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad18:	d032      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad22:	d02d      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad2c:	d028      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad2e:	f240 1173 	movw	r1, #371	; 0x173
 800ad32:	4849      	ldr	r0, [pc, #292]	; (800ae58 <HAL_UART_Init+0x1b0>)
 800ad34:	f7f8 ffe9 	bl	8003d0a <assert_failed>
 800ad38:	e022      	b.n	800ad80 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a40      	ldr	r2, [pc, #256]	; (800ae40 <HAL_UART_Init+0x198>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d01d      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a3e      	ldr	r2, [pc, #248]	; (800ae44 <HAL_UART_Init+0x19c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d018      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a3d      	ldr	r2, [pc, #244]	; (800ae48 <HAL_UART_Init+0x1a0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d013      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a3b      	ldr	r2, [pc, #236]	; (800ae4c <HAL_UART_Init+0x1a4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00e      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a3a      	ldr	r2, [pc, #232]	; (800ae50 <HAL_UART_Init+0x1a8>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d009      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a38      	ldr	r2, [pc, #224]	; (800ae54 <HAL_UART_Init+0x1ac>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d004      	beq.n	800ad80 <HAL_UART_Init+0xd8>
 800ad76:	f240 1177 	movw	r1, #375	; 0x177
 800ad7a:	4837      	ldr	r0, [pc, #220]	; (800ae58 <HAL_UART_Init+0x1b0>)
 800ad7c:	f7f8 ffc5 	bl	8003d0a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <HAL_UART_Init+0xf4>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad90:	d004      	beq.n	800ad9c <HAL_UART_Init+0xf4>
 800ad92:	f240 1179 	movw	r1, #377	; 0x179
 800ad96:	4830      	ldr	r0, [pc, #192]	; (800ae58 <HAL_UART_Init+0x1b0>)
 800ad98:	f7f8 ffb7 	bl	8003d0a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <HAL_UART_Init+0x110>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adac:	d004      	beq.n	800adb8 <HAL_UART_Init+0x110>
 800adae:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800adb2:	4829      	ldr	r0, [pc, #164]	; (800ae58 <HAL_UART_Init+0x1b0>)
 800adb4:	f7f8 ffa9 	bl	8003d0a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7f9 fb79 	bl	80044c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2224      	movs	r2, #36	; 0x24
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ade8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fc7e 	bl	800b6ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	691a      	ldr	r2, [r3, #16]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	695a      	ldr	r2, [r3, #20]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2220      	movs	r2, #32
 800ae32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	40011000 	.word	0x40011000
 800ae44:	40004400 	.word	0x40004400
 800ae48:	40004800 	.word	0x40004800
 800ae4c:	40004c00 	.word	0x40004c00
 800ae50:	40005000 	.word	0x40005000
 800ae54:	40011400 	.word	0x40011400
 800ae58:	0801169c 	.word	0x0801169c

0800ae5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b0ba      	sub	sp, #232	; 0xe8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10f      	bne.n	800aec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d009      	beq.n	800aec2 <HAL_UART_IRQHandler+0x66>
 800aeae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fb5b 	bl	800b576 <UART_Receive_IT>
      return;
 800aec0:	e256      	b.n	800b370 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80de 	beq.w	800b088 <HAL_UART_IRQHandler+0x22c>
 800aecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aedc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 80d1 	beq.w	800b088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00b      	beq.n	800af0a <HAL_UART_IRQHandler+0xae>
 800aef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d005      	beq.n	800af0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	f043 0201 	orr.w	r2, r3, #1
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0e:	f003 0304 	and.w	r3, r3, #4
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00b      	beq.n	800af2e <HAL_UART_IRQHandler+0xd2>
 800af16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	f043 0202 	orr.w	r2, r3, #2
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00b      	beq.n	800af52 <HAL_UART_IRQHandler+0xf6>
 800af3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d005      	beq.n	800af52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	f043 0204 	orr.w	r2, r3, #4
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d011      	beq.n	800af82 <HAL_UART_IRQHandler+0x126>
 800af5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af62:	f003 0320 	and.w	r3, r3, #32
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	f043 0208 	orr.w	r2, r3, #8
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 81ed 	beq.w	800b366 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <HAL_UART_IRQHandler+0x14e>
 800af98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fae6 	bl	800b576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	bf0c      	ite	eq
 800afb8:	2301      	moveq	r3, #1
 800afba:	2300      	movne	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d103      	bne.n	800afd6 <HAL_UART_IRQHandler+0x17a>
 800afce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d04f      	beq.n	800b076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f9ee 	bl	800b3b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe6:	2b40      	cmp	r3, #64	; 0x40
 800afe8:	d141      	bne.n	800b06e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3314      	adds	r3, #20
 800aff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3314      	adds	r3, #20
 800b012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b01a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b02e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1d9      	bne.n	800afea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d013      	beq.n	800b066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b042:	4a7d      	ldr	r2, [pc, #500]	; (800b238 <HAL_UART_IRQHandler+0x3dc>)
 800b044:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fa f824 	bl	8005098 <HAL_DMA_Abort_IT>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d016      	beq.n	800b084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b064:	e00e      	b.n	800b084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f990 	bl	800b38c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b06c:	e00a      	b.n	800b084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f98c 	bl	800b38c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b074:	e006      	b.n	800b084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f988 	bl	800b38c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b082:	e170      	b.n	800b366 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b084:	bf00      	nop
    return;
 800b086:	e16e      	b.n	800b366 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	f040 814a 	bne.w	800b326 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b096:	f003 0310 	and.w	r3, r3, #16
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 8143 	beq.w	800b326 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a4:	f003 0310 	and.w	r3, r3, #16
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 813c 	beq.w	800b326 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60bb      	str	r3, [r7, #8]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	60bb      	str	r3, [r7, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	60bb      	str	r3, [r7, #8]
 800b0c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ce:	2b40      	cmp	r3, #64	; 0x40
 800b0d0:	f040 80b4 	bne.w	800b23c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 8140 	beq.w	800b36a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	f080 8139 	bcs.w	800b36a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10a:	f000 8088 	beq.w	800b21e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	330c      	adds	r3, #12
 800b114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b12c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b13a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b13e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1d9      	bne.n	800b10e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3314      	adds	r3, #20
 800b160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b16a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b16c:	f023 0301 	bic.w	r3, r3, #1
 800b170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3314      	adds	r3, #20
 800b17a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b17e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e1      	bne.n	800b15a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3314      	adds	r3, #20
 800b19c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3314      	adds	r3, #20
 800b1b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e3      	bne.n	800b196 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2220      	movs	r2, #32
 800b1d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	330c      	adds	r3, #12
 800b1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ee:	f023 0310 	bic.w	r3, r3, #16
 800b1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	330c      	adds	r3, #12
 800b1fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b200:	65ba      	str	r2, [r7, #88]	; 0x58
 800b202:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e3      	bne.n	800b1dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f9 fecd 	bl	8004fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b226:	b29b      	uxth	r3, r3
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f8b6 	bl	800b3a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b234:	e099      	b.n	800b36a <HAL_UART_IRQHandler+0x50e>
 800b236:	bf00      	nop
 800b238:	0800b47f 	.word	0x0800b47f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b244:	b29b      	uxth	r3, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b250:	b29b      	uxth	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 808b 	beq.w	800b36e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8086 	beq.w	800b36e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	330c      	adds	r3, #12
 800b268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	330c      	adds	r3, #12
 800b282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b286:	647a      	str	r2, [r7, #68]	; 0x44
 800b288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b28c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e3      	bne.n	800b262 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3314      	adds	r3, #20
 800b2a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	f023 0301 	bic.w	r3, r3, #1
 800b2b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3314      	adds	r3, #20
 800b2ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2be:	633a      	str	r2, [r7, #48]	; 0x30
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c6:	e841 2300 	strex	r3, r2, [r1]
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1e3      	bne.n	800b29a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0310 	bic.w	r3, r3, #16
 800b2f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	330c      	adds	r3, #12
 800b300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b304:	61fa      	str	r2, [r7, #28]
 800b306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	69b9      	ldr	r1, [r7, #24]
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	617b      	str	r3, [r7, #20]
   return(result);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e3      	bne.n	800b2e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f83e 	bl	800b3a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b324:	e023      	b.n	800b36e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <HAL_UART_IRQHandler+0x4ea>
 800b332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f8b1 	bl	800b4a6 <UART_Transmit_IT>
    return;
 800b344:	e014      	b.n	800b370 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00e      	beq.n	800b370 <HAL_UART_IRQHandler+0x514>
 800b352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d008      	beq.n	800b370 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f8f1 	bl	800b546 <UART_EndTransmit_IT>
    return;
 800b364:	e004      	b.n	800b370 <HAL_UART_IRQHandler+0x514>
    return;
 800b366:	bf00      	nop
 800b368:	e002      	b.n	800b370 <HAL_UART_IRQHandler+0x514>
      return;
 800b36a:	bf00      	nop
 800b36c:	e000      	b.n	800b370 <HAL_UART_IRQHandler+0x514>
      return;
 800b36e:	bf00      	nop
  }
}
 800b370:	37e8      	adds	r7, #232	; 0xe8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop

0800b378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b095      	sub	sp, #84	; 0x54
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ca:	e853 3f00 	ldrex	r3, [r3]
 800b3ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3e0:	643a      	str	r2, [r7, #64]	; 0x40
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e8:	e841 2300 	strex	r3, r2, [r1]
 800b3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e5      	bne.n	800b3c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3314      	adds	r3, #20
 800b3fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	61fb      	str	r3, [r7, #28]
   return(result);
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	f023 0301 	bic.w	r3, r3, #1
 800b40a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3314      	adds	r3, #20
 800b412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b414:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e5      	bne.n	800b3f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d119      	bne.n	800b464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	330c      	adds	r3, #12
 800b436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f023 0310 	bic.w	r3, r3, #16
 800b446:	647b      	str	r3, [r7, #68]	; 0x44
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	330c      	adds	r3, #12
 800b44e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b450:	61ba      	str	r2, [r7, #24]
 800b452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6979      	ldr	r1, [r7, #20]
 800b456:	69ba      	ldr	r2, [r7, #24]
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	613b      	str	r3, [r7, #16]
   return(result);
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2220      	movs	r2, #32
 800b468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b472:	bf00      	nop
 800b474:	3754      	adds	r7, #84	; 0x54
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f7ff ff77 	bl	800b38c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b21      	cmp	r3, #33	; 0x21
 800b4b8:	d13e      	bne.n	800b538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c2:	d114      	bne.n	800b4ee <UART_Transmit_IT+0x48>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d110      	bne.n	800b4ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	1c9a      	adds	r2, r3, #2
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	621a      	str	r2, [r3, #32]
 800b4ec:	e008      	b.n	800b500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	1c59      	adds	r1, r3, #1
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6211      	str	r1, [r2, #32]
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29b      	uxth	r3, r3
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	4619      	mov	r1, r3
 800b50e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10f      	bne.n	800b534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	e000      	b.n	800b53a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b538:	2302      	movs	r3, #2
  }
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b55c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff ff06 	bl	800b378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b08c      	sub	sp, #48	; 0x30
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b22      	cmp	r3, #34	; 0x22
 800b588:	f040 80ab 	bne.w	800b6e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b594:	d117      	bne.n	800b5c6 <UART_Receive_IT+0x50>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d113      	bne.n	800b5c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5be:	1c9a      	adds	r2, r3, #2
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	629a      	str	r2, [r3, #40]	; 0x28
 800b5c4:	e026      	b.n	800b614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d8:	d007      	beq.n	800b5ea <UART_Receive_IT+0x74>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <UART_Receive_IT+0x82>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	e008      	b.n	800b60a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b604:	b2da      	uxtb	r2, r3
 800b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b618:	b29b      	uxth	r3, r3
 800b61a:	3b01      	subs	r3, #1
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	4619      	mov	r1, r3
 800b622:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b624:	2b00      	cmp	r3, #0
 800b626:	d15a      	bne.n	800b6de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 0220 	bic.w	r2, r2, #32
 800b636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	695a      	ldr	r2, [r3, #20]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f022 0201 	bic.w	r2, r2, #1
 800b656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b664:	2b01      	cmp	r3, #1
 800b666:	d135      	bne.n	800b6d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	330c      	adds	r3, #12
 800b674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	613b      	str	r3, [r7, #16]
   return(result);
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f023 0310 	bic.w	r3, r3, #16
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	330c      	adds	r3, #12
 800b68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68e:	623a      	str	r2, [r7, #32]
 800b690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	69f9      	ldr	r1, [r7, #28]
 800b694:	6a3a      	ldr	r2, [r7, #32]
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e5      	bne.n	800b66e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b10      	cmp	r3, #16
 800b6ae:	d10a      	bne.n	800b6c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff fe67 	bl	800b3a0 <HAL_UARTEx_RxEventCallback>
 800b6d2:	e002      	b.n	800b6da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7f5 fdb9 	bl	800124c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e002      	b.n	800b6e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e000      	b.n	800b6e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b6e2:	2302      	movs	r3, #2
  }
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3730      	adds	r7, #48	; 0x30
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	b09f      	sub	sp, #124	; 0x7c
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	4b9b      	ldr	r3, [pc, #620]	; (800b968 <UART_SetConfig+0x27c>)
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d904      	bls.n	800b70a <UART_SetConfig+0x1e>
 800b700:	f640 6156 	movw	r1, #3670	; 0xe56
 800b704:	4899      	ldr	r0, [pc, #612]	; (800b96c <UART_SetConfig+0x280>)
 800b706:	f7f8 fb00 	bl	8003d0a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d009      	beq.n	800b726 <UART_SetConfig+0x3a>
 800b712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b71a:	d004      	beq.n	800b726 <UART_SetConfig+0x3a>
 800b71c:	f640 6157 	movw	r1, #3671	; 0xe57
 800b720:	4892      	ldr	r0, [pc, #584]	; (800b96c <UART_SetConfig+0x280>)
 800b722:	f7f8 faf2 	bl	8003d0a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00e      	beq.n	800b74c <UART_SetConfig+0x60>
 800b72e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b736:	d009      	beq.n	800b74c <UART_SetConfig+0x60>
 800b738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b740:	d004      	beq.n	800b74c <UART_SetConfig+0x60>
 800b742:	f640 6158 	movw	r1, #3672	; 0xe58
 800b746:	4889      	ldr	r0, [pc, #548]	; (800b96c <UART_SetConfig+0x280>)
 800b748:	f7f8 fadf 	bl	8003d0a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74e:	695a      	ldr	r2, [r3, #20]
 800b750:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b754:	4013      	ands	r3, r2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <UART_SetConfig+0x76>
 800b75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d104      	bne.n	800b76c <UART_SetConfig+0x80>
 800b762:	f640 6159 	movw	r1, #3673	; 0xe59
 800b766:	4881      	ldr	r0, [pc, #516]	; (800b96c <UART_SetConfig+0x280>)
 800b768:	f7f8 facf 	bl	8003d0a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b76c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b778:	68d9      	ldr	r1, [r3, #12]
 800b77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	ea40 0301 	orr.w	r3, r0, r1
 800b782:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	431a      	orrs	r2, r3
 800b794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	4313      	orrs	r3, r2
 800b79a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7a6:	f021 010c 	bic.w	r1, r1, #12
 800b7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c0:	6999      	ldr	r1, [r3, #24]
 800b7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	ea40 0301 	orr.w	r3, r0, r1
 800b7ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	4b67      	ldr	r3, [pc, #412]	; (800b970 <UART_SetConfig+0x284>)
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d004      	beq.n	800b7e0 <UART_SetConfig+0xf4>
 800b7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	4b66      	ldr	r3, [pc, #408]	; (800b974 <UART_SetConfig+0x288>)
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d103      	bne.n	800b7e8 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b7e0:	f7fb fc5a 	bl	8007098 <HAL_RCC_GetPCLK2Freq>
 800b7e4:	6778      	str	r0, [r7, #116]	; 0x74
 800b7e6:	e002      	b.n	800b7ee <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b7e8:	f7fb fc42 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 800b7ec:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7f6:	f040 80c1 	bne.w	800b97c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b7fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7fc:	461c      	mov	r4, r3
 800b7fe:	f04f 0500 	mov.w	r5, #0
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	1891      	adds	r1, r2, r2
 800b808:	6439      	str	r1, [r7, #64]	; 0x40
 800b80a:	415b      	adcs	r3, r3
 800b80c:	647b      	str	r3, [r7, #68]	; 0x44
 800b80e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b812:	1912      	adds	r2, r2, r4
 800b814:	eb45 0303 	adc.w	r3, r5, r3
 800b818:	f04f 0000 	mov.w	r0, #0
 800b81c:	f04f 0100 	mov.w	r1, #0
 800b820:	00d9      	lsls	r1, r3, #3
 800b822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b826:	00d0      	lsls	r0, r2, #3
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	1911      	adds	r1, r2, r4
 800b82e:	6639      	str	r1, [r7, #96]	; 0x60
 800b830:	416b      	adcs	r3, r5
 800b832:	667b      	str	r3, [r7, #100]	; 0x64
 800b834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	461a      	mov	r2, r3
 800b83a:	f04f 0300 	mov.w	r3, #0
 800b83e:	1891      	adds	r1, r2, r2
 800b840:	63b9      	str	r1, [r7, #56]	; 0x38
 800b842:	415b      	adcs	r3, r3
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b846:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b84a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b84e:	f7f5 f9a1 	bl	8000b94 <__aeabi_uldivmod>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	4b48      	ldr	r3, [pc, #288]	; (800b978 <UART_SetConfig+0x28c>)
 800b858:	fba3 2302 	umull	r2, r3, r3, r2
 800b85c:	095b      	lsrs	r3, r3, #5
 800b85e:	011e      	lsls	r6, r3, #4
 800b860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b862:	461c      	mov	r4, r3
 800b864:	f04f 0500 	mov.w	r5, #0
 800b868:	4622      	mov	r2, r4
 800b86a:	462b      	mov	r3, r5
 800b86c:	1891      	adds	r1, r2, r2
 800b86e:	6339      	str	r1, [r7, #48]	; 0x30
 800b870:	415b      	adcs	r3, r3
 800b872:	637b      	str	r3, [r7, #52]	; 0x34
 800b874:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b878:	1912      	adds	r2, r2, r4
 800b87a:	eb45 0303 	adc.w	r3, r5, r3
 800b87e:	f04f 0000 	mov.w	r0, #0
 800b882:	f04f 0100 	mov.w	r1, #0
 800b886:	00d9      	lsls	r1, r3, #3
 800b888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b88c:	00d0      	lsls	r0, r2, #3
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	1911      	adds	r1, r2, r4
 800b894:	65b9      	str	r1, [r7, #88]	; 0x58
 800b896:	416b      	adcs	r3, r5
 800b898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f04f 0300 	mov.w	r3, #0
 800b8a4:	1891      	adds	r1, r2, r2
 800b8a6:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8a8:	415b      	adcs	r3, r3
 800b8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b8b4:	f7f5 f96e 	bl	8000b94 <__aeabi_uldivmod>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4b2e      	ldr	r3, [pc, #184]	; (800b978 <UART_SetConfig+0x28c>)
 800b8be:	fba3 1302 	umull	r1, r3, r3, r2
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	2164      	movs	r1, #100	; 0x64
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	3332      	adds	r3, #50	; 0x32
 800b8d0:	4a29      	ldr	r2, [pc, #164]	; (800b978 <UART_SetConfig+0x28c>)
 800b8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d6:	095b      	lsrs	r3, r3, #5
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8de:	441e      	add	r6, r3
 800b8e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f04f 0100 	mov.w	r1, #0
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	1894      	adds	r4, r2, r2
 800b8ee:	623c      	str	r4, [r7, #32]
 800b8f0:	415b      	adcs	r3, r3
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8f8:	1812      	adds	r2, r2, r0
 800b8fa:	eb41 0303 	adc.w	r3, r1, r3
 800b8fe:	f04f 0400 	mov.w	r4, #0
 800b902:	f04f 0500 	mov.w	r5, #0
 800b906:	00dd      	lsls	r5, r3, #3
 800b908:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b90c:	00d4      	lsls	r4, r2, #3
 800b90e:	4622      	mov	r2, r4
 800b910:	462b      	mov	r3, r5
 800b912:	1814      	adds	r4, r2, r0
 800b914:	653c      	str	r4, [r7, #80]	; 0x50
 800b916:	414b      	adcs	r3, r1
 800b918:	657b      	str	r3, [r7, #84]	; 0x54
 800b91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	461a      	mov	r2, r3
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	1891      	adds	r1, r2, r2
 800b926:	61b9      	str	r1, [r7, #24]
 800b928:	415b      	adcs	r3, r3
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b930:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b934:	f7f5 f92e 	bl	8000b94 <__aeabi_uldivmod>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4b0e      	ldr	r3, [pc, #56]	; (800b978 <UART_SetConfig+0x28c>)
 800b93e:	fba3 1302 	umull	r1, r3, r3, r2
 800b942:	095b      	lsrs	r3, r3, #5
 800b944:	2164      	movs	r1, #100	; 0x64
 800b946:	fb01 f303 	mul.w	r3, r1, r3
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	3332      	adds	r3, #50	; 0x32
 800b950:	4a09      	ldr	r2, [pc, #36]	; (800b978 <UART_SetConfig+0x28c>)
 800b952:	fba2 2303 	umull	r2, r3, r2, r3
 800b956:	095b      	lsrs	r3, r3, #5
 800b958:	f003 0207 	and.w	r2, r3, #7
 800b95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4432      	add	r2, r6
 800b962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b964:	e0c4      	b.n	800baf0 <UART_SetConfig+0x404>
 800b966:	bf00      	nop
 800b968:	00a037a0 	.word	0x00a037a0
 800b96c:	0801169c 	.word	0x0801169c
 800b970:	40011000 	.word	0x40011000
 800b974:	40011400 	.word	0x40011400
 800b978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b97e:	461c      	mov	r4, r3
 800b980:	f04f 0500 	mov.w	r5, #0
 800b984:	4622      	mov	r2, r4
 800b986:	462b      	mov	r3, r5
 800b988:	1891      	adds	r1, r2, r2
 800b98a:	6139      	str	r1, [r7, #16]
 800b98c:	415b      	adcs	r3, r3
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b994:	1912      	adds	r2, r2, r4
 800b996:	eb45 0303 	adc.w	r3, r5, r3
 800b99a:	f04f 0000 	mov.w	r0, #0
 800b99e:	f04f 0100 	mov.w	r1, #0
 800b9a2:	00d9      	lsls	r1, r3, #3
 800b9a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9a8:	00d0      	lsls	r0, r2, #3
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	eb12 0804 	adds.w	r8, r2, r4
 800b9b2:	eb43 0905 	adc.w	r9, r3, r5
 800b9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f04f 0100 	mov.w	r1, #0
 800b9c0:	f04f 0200 	mov.w	r2, #0
 800b9c4:	f04f 0300 	mov.w	r3, #0
 800b9c8:	008b      	lsls	r3, r1, #2
 800b9ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b9ce:	0082      	lsls	r2, r0, #2
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	f7f5 f8de 	bl	8000b94 <__aeabi_uldivmod>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4b47      	ldr	r3, [pc, #284]	; (800bafc <UART_SetConfig+0x410>)
 800b9de:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	011e      	lsls	r6, r3, #4
 800b9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f04f 0100 	mov.w	r1, #0
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	1894      	adds	r4, r2, r2
 800b9f4:	60bc      	str	r4, [r7, #8]
 800b9f6:	415b      	adcs	r3, r3
 800b9f8:	60fb      	str	r3, [r7, #12]
 800b9fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9fe:	1812      	adds	r2, r2, r0
 800ba00:	eb41 0303 	adc.w	r3, r1, r3
 800ba04:	f04f 0400 	mov.w	r4, #0
 800ba08:	f04f 0500 	mov.w	r5, #0
 800ba0c:	00dd      	lsls	r5, r3, #3
 800ba0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba12:	00d4      	lsls	r4, r2, #3
 800ba14:	4622      	mov	r2, r4
 800ba16:	462b      	mov	r3, r5
 800ba18:	1814      	adds	r4, r2, r0
 800ba1a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ba1c:	414b      	adcs	r3, r1
 800ba1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f04f 0100 	mov.w	r1, #0
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	008b      	lsls	r3, r1, #2
 800ba34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ba38:	0082      	lsls	r2, r0, #2
 800ba3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ba3e:	f7f5 f8a9 	bl	8000b94 <__aeabi_uldivmod>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4b2d      	ldr	r3, [pc, #180]	; (800bafc <UART_SetConfig+0x410>)
 800ba48:	fba3 1302 	umull	r1, r3, r3, r2
 800ba4c:	095b      	lsrs	r3, r3, #5
 800ba4e:	2164      	movs	r1, #100	; 0x64
 800ba50:	fb01 f303 	mul.w	r3, r1, r3
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	3332      	adds	r3, #50	; 0x32
 800ba5a:	4a28      	ldr	r2, [pc, #160]	; (800bafc <UART_SetConfig+0x410>)
 800ba5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba60:	095b      	lsrs	r3, r3, #5
 800ba62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba66:	441e      	add	r6, r3
 800ba68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f04f 0100 	mov.w	r1, #0
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	1894      	adds	r4, r2, r2
 800ba76:	603c      	str	r4, [r7, #0]
 800ba78:	415b      	adcs	r3, r3
 800ba7a:	607b      	str	r3, [r7, #4]
 800ba7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba80:	1812      	adds	r2, r2, r0
 800ba82:	eb41 0303 	adc.w	r3, r1, r3
 800ba86:	f04f 0400 	mov.w	r4, #0
 800ba8a:	f04f 0500 	mov.w	r5, #0
 800ba8e:	00dd      	lsls	r5, r3, #3
 800ba90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba94:	00d4      	lsls	r4, r2, #3
 800ba96:	4622      	mov	r2, r4
 800ba98:	462b      	mov	r3, r5
 800ba9a:	eb12 0a00 	adds.w	sl, r2, r0
 800ba9e:	eb43 0b01 	adc.w	fp, r3, r1
 800baa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f04f 0100 	mov.w	r1, #0
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	f04f 0300 	mov.w	r3, #0
 800bab4:	008b      	lsls	r3, r1, #2
 800bab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800baba:	0082      	lsls	r2, r0, #2
 800babc:	4650      	mov	r0, sl
 800babe:	4659      	mov	r1, fp
 800bac0:	f7f5 f868 	bl	8000b94 <__aeabi_uldivmod>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4b0c      	ldr	r3, [pc, #48]	; (800bafc <UART_SetConfig+0x410>)
 800baca:	fba3 1302 	umull	r1, r3, r3, r2
 800bace:	095b      	lsrs	r3, r3, #5
 800bad0:	2164      	movs	r1, #100	; 0x64
 800bad2:	fb01 f303 	mul.w	r3, r1, r3
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	3332      	adds	r3, #50	; 0x32
 800badc:	4a07      	ldr	r2, [pc, #28]	; (800bafc <UART_SetConfig+0x410>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	f003 020f 	and.w	r2, r3, #15
 800bae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4432      	add	r2, r6
 800baee:	609a      	str	r2, [r3, #8]
}
 800baf0:	bf00      	nop
 800baf2:	377c      	adds	r7, #124	; 0x7c
 800baf4:	46bd      	mov	sp, r7
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafa:	bf00      	nop
 800bafc:	51eb851f 	.word	0x51eb851f

0800bb00 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800bb0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d105      	bne.n	800bb20 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800bb14:	2101      	movs	r1, #1
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 f824 	bl	800cb64 <VL53L1_data_init>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800bb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d103      	bne.n	800bb30 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800bb30:	2300      	movs	r3, #0
 800bb32:	73bb      	strb	r3, [r7, #14]
 800bb34:	e012      	b.n	800bb5c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800bb36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d112      	bne.n	800bb64 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	2201      	movs	r2, #1
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fbd3 	bl	800c2f2 <VL53L1_SetLimitCheckEnable>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	73bb      	strb	r3, [r7, #14]
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d9e9      	bls.n	800bb36 <VL53L1_DataInit+0x36>
 800bb62:	e000      	b.n	800bb66 <VL53L1_DataInit+0x66>
		else
			break;
 800bb64:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800bb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2203      	movs	r2, #3
 800bb82:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800bb86:	2320      	movs	r3, #32
 800bb88:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7bba      	ldrb	r2, [r7, #14]
 800bb8e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800bb90:	2108      	movs	r1, #8
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f8f9 	bl	800bd8a <VL53L1_SetPresetMode>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2208      	movs	r2, #8
 800bba0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800bba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800bbbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f004 ffe0 	bl	8010b86 <VL53L1_poll_for_boot_completion>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800bbca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	603a      	str	r2, [r7, #0]
 800bbe2:	71fb      	strb	r3, [r7, #7]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800bbec:	4a2c      	ldr	r2, [pc, #176]	; (800bca0 <ComputeDevicePresetMode+0xc8>)
 800bbee:	f107 0310 	add.w	r3, r7, #16
 800bbf2:	6812      	ldr	r2, [r2, #0]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	8019      	strh	r1, [r3, #0]
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	0c12      	lsrs	r2, r2, #16
 800bbfc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800bbfe:	4a29      	ldr	r2, [pc, #164]	; (800bca4 <ComputeDevicePresetMode+0xcc>)
 800bc00:	f107 030c 	add.w	r3, r7, #12
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	4611      	mov	r1, r2
 800bc08:	8019      	strh	r1, [r3, #0]
 800bc0a:	3302      	adds	r3, #2
 800bc0c:	0c12      	lsrs	r2, r2, #16
 800bc0e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800bc10:	4a25      	ldr	r2, [pc, #148]	; (800bca8 <ComputeDevicePresetMode+0xd0>)
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	8019      	strh	r1, [r3, #0]
 800bc1c:	3302      	adds	r3, #2
 800bc1e:	0c12      	lsrs	r2, r2, #16
 800bc20:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2201      	movs	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800bc28:	79bb      	ldrb	r3, [r7, #6]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d002      	beq.n	800bc34 <ComputeDevicePresetMode+0x5c>
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	d003      	beq.n	800bc3a <ComputeDevicePresetMode+0x62>
 800bc32:	e005      	b.n	800bc40 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75bb      	strb	r3, [r7, #22]
		break;
 800bc38:	e004      	b.n	800bc44 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	75bb      	strb	r3, [r7, #22]
		break;
 800bc3e:	e001      	b.n	800bc44 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800bc40:	2302      	movs	r3, #2
 800bc42:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800bc44:	79fb      	ldrb	r3, [r7, #7]
 800bc46:	2b08      	cmp	r3, #8
 800bc48:	d017      	beq.n	800bc7a <ComputeDevicePresetMode+0xa2>
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	dc1e      	bgt.n	800bc8c <ComputeDevicePresetMode+0xb4>
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d00a      	beq.n	800bc68 <ComputeDevicePresetMode+0x90>
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d11a      	bne.n	800bc8c <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800bc56:	7dbb      	ldrb	r3, [r7, #22]
 800bc58:	f107 0218 	add.w	r2, r7, #24
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	701a      	strb	r2, [r3, #0]
		break;
 800bc66:	e013      	b.n	800bc90 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800bc68:	7dbb      	ldrb	r3, [r7, #22]
 800bc6a:	f107 0218 	add.w	r2, r7, #24
 800bc6e:	4413      	add	r3, r2
 800bc70:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	701a      	strb	r2, [r3, #0]
		break;
 800bc78:	e00a      	b.n	800bc90 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800bc7a:	7dbb      	ldrb	r3, [r7, #22]
 800bc7c:	f107 0218 	add.w	r2, r7, #24
 800bc80:	4413      	add	r3, r2
 800bc82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	701a      	strb	r2, [r3, #0]
		break;
 800bc8a:	e001      	b.n	800bc90 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800bc8c:	23f8      	movs	r3, #248	; 0xf8
 800bc8e:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800bc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	08011704 	.word	0x08011704
 800bca4:	08011708 	.word	0x08011708
 800bca8:	0801170c 	.word	0x0801170c

0800bcac <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800bcac:	b5b0      	push	{r4, r5, r7, lr}
 800bcae:	b08e      	sub	sp, #56	; 0x38
 800bcb0:	af04      	add	r7, sp, #16
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	72fb      	strb	r3, [r7, #11]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d002      	beq.n	800bce0 <SetPresetMode+0x34>
 800bcda:	7afb      	ldrb	r3, [r7, #11]
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d103      	bne.n	800bce8 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800bce0:	2340      	movs	r3, #64	; 0x40
 800bce2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bce6:	e002      	b.n	800bcee <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800bce8:	2320      	movs	r3, #32
 800bcea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800bcee:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800bcf2:	7ab9      	ldrb	r1, [r7, #10]
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ff6e 	bl	800bbd8 <ComputeDevicePresetMode>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800bd02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d112      	bne.n	800bd30 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800bd0a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800bd0e:	f107 001c 	add.w	r0, r7, #28
 800bd12:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800bd16:	f107 0314 	add.w	r3, r7, #20
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	f107 0318 	add.w	r3, r7, #24
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4603      	mov	r3, r0
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f001 f9dd 	bl	800d0e4 <VL53L1_get_preset_mode_timing_cfg>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800bd30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d112      	bne.n	800bd5e <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800bd38:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800bd3c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800bd3e:	69fd      	ldr	r5, [r7, #28]
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	9102      	str	r1, [sp, #8]
 800bd48:	9201      	str	r2, [sp, #4]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	4622      	mov	r2, r4
 800bd50:	4601      	mov	r1, r0
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f001 fa70 	bl	800d238 <VL53L1_set_preset_mode>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800bd5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d103      	bne.n	800bd6e <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd6c:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800bd6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	7afa      	ldrb	r2, [r7, #11]
 800bd7a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800bd7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3728      	adds	r7, #40	; 0x28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bdb0      	pop	{r4, r5, r7, pc}

0800bd8a <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b084      	sub	sp, #16
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	460b      	mov	r3, r1
 800bd94:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f003 fd2c 	bl	800f7fc <VL53L1_low_power_auto_data_init>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800bda8:	7bba      	ldrb	r2, [r7, #14]
 800bdaa:	78f9      	ldrb	r1, [r7, #3]
 800bdac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff ff7b 	bl	800bcac <SetPresetMode>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800bdba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d117      	bne.n	800bdf2 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800bdc2:	78fb      	ldrb	r3, [r7, #3]
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d005      	beq.n	800bdd4 <VL53L1_SetPresetMode+0x4a>
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d002      	beq.n	800bdd4 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	2b08      	cmp	r3, #8
 800bdd2:	d107      	bne.n	800bde4 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800bdd4:	f24a 0128 	movw	r1, #41000	; 0xa028
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f891 	bl	800bf00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]
 800bde2:	e006      	b.n	800bdf2 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800bde4:	f248 2135 	movw	r1, #33333	; 0x8235
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f889 	bl	800bf00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800bdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800bdfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa0a 	bl	800c218 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800be20:	2300      	movs	r3, #0
 800be22:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800be36:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800be38:	78fb      	ldrb	r3, [r7, #3]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d008      	beq.n	800be50 <VL53L1_SetDistanceMode+0x3c>
 800be3e:	78fb      	ldrb	r3, [r7, #3]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d005      	beq.n	800be50 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	2b03      	cmp	r3, #3
 800be48:	d002      	beq.n	800be50 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800be4a:	f06f 0303 	mvn.w	r3, #3
 800be4e:	e052      	b.n	800bef6 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800be50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d107      	bne.n	800be68 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f8e9 	bl	800d036 <VL53L1_get_user_zone>
 800be64:	4603      	mov	r3, r0
 800be66:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800be6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10a      	bne.n	800be8c <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800be76:	f107 0314 	add.w	r3, r7, #20
 800be7a:	f107 0210 	add.w	r2, r7, #16
 800be7e:	f107 010c 	add.w	r1, r7, #12
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 f812 	bl	800ceac <VL53L1_get_timeouts_us>
 800be88:	4603      	mov	r3, r0
 800be8a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800be8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d107      	bne.n	800bea4 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	7fb9      	ldrb	r1, [r7, #30]
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff ff06 	bl	800bcac <SetPresetMode>
 800bea0:	4603      	mov	r3, r0
 800bea2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800bea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d103      	bne.n	800beb4 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	78fa      	ldrb	r2, [r7, #3]
 800beb0:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800beb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10e      	bne.n	800beda <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800bebc:	68f9      	ldr	r1, [r7, #12]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 ffba 	bl	800ce3c <VL53L1_set_timeouts_us>
 800bec8:	4603      	mov	r3, r0
 800beca:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800becc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800beda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800bee2:	f107 0308 	add.w	r3, r7, #8
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f001 f881 	bl	800cff0 <VL53L1_set_user_zone>
 800beee:	4603      	mov	r3, r0
 800bef0:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800bef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08c      	sub	sp, #48	; 0x30
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800bf24:	4b64      	ldr	r3, [pc, #400]	; (800c0b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800bf26:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	4a64      	ldr	r2, [pc, #400]	; (800c0bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d902      	bls.n	800bf36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800bf30:	23fc      	movs	r3, #252	; 0xfc
 800bf32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800bf36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d109      	bne.n	800bf52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bf3e:	f107 031a 	add.w	r3, r7, #26
 800bf42:	461a      	mov	r2, r3
 800bf44:	2105      	movs	r1, #5
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa8d 	bl	800c466 <VL53L1_GetSequenceStepEnable>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800bf52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d109      	bne.n	800bf6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bf5a:	f107 0319 	add.w	r3, r7, #25
 800bf5e:	461a      	mov	r2, r3
 800bf60:	2106      	movs	r1, #6
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa7f 	bl	800c466 <VL53L1_GetSequenceStepEnable>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800bf6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800bf76:	f107 0314 	add.w	r3, r7, #20
 800bf7a:	f107 0210 	add.w	r2, r7, #16
 800bf7e:	f107 010c 	add.w	r1, r7, #12
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 ff92 	bl	800ceac <VL53L1_get_timeouts_us>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800bf8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f040 8081 	bne.w	800c09a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800bf9e:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800bfa8:	7efb      	ldrb	r3, [r7, #27]
 800bfaa:	2b08      	cmp	r3, #8
 800bfac:	d026      	beq.n	800bffc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800bfae:	2b08      	cmp	r3, #8
 800bfb0:	dc43      	bgt.n	800c03a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d00f      	beq.n	800bfd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d13f      	bne.n	800c03a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800bfba:	7ebb      	ldrb	r3, [r7, #26]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d002      	beq.n	800bfc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800bfc0:	7e7b      	ldrb	r3, [r7, #25]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d103      	bne.n	800bfce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800bfc6:	f241 3388 	movw	r3, #5000	; 0x1388
 800bfca:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800bfcc:	e038      	b.n	800c040 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800bfce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfd2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800bfd4:	e034      	b.n	800c040 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800bfdc:	7ebb      	ldrb	r3, [r7, #26]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d002      	beq.n	800bfe8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800bfe2:	7e7b      	ldrb	r3, [r7, #25]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d103      	bne.n	800bff0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800bfe8:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800bfec:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfee:	e002      	b.n	800bff6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800bff0:	f245 4360 	movw	r3, #21600	; 0x5460
 800bff4:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800bff6:	2302      	movs	r3, #2
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800bffa:	e021      	b.n	800c040 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800c002:	23f5      	movs	r3, #245	; 0xf5
 800c004:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800c006:	f107 0308 	add.w	r3, r7, #8
 800c00a:	461a      	mov	r2, r3
 800c00c:	f248 0136 	movw	r1, #32822	; 0x8036
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 ff75 	bl	800df00 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dd07      	ble.n	800c02c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	22f5      	movs	r2, #245	; 0xf5
 800c020:	fb02 f303 	mul.w	r3, r2, r3
 800c024:	461a      	mov	r2, r3
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	4413      	add	r3, r2
 800c02a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800c032:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800c034:	2302      	movs	r3, #2
 800c036:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800c038:	e002      	b.n	800c040 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800c03a:	23f8      	movs	r3, #248	; 0xf8
 800c03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	429a      	cmp	r2, r3
 800c046:	d803      	bhi.n	800c050 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800c048:	23fc      	movs	r3, #252	; 0xfc
 800c04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c04e:	e003      	b.n	800c058 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800c056:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800c058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d11c      	bne.n	800c09a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	429a      	cmp	r2, r3
 800c066:	d203      	bcs.n	800c070 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800c068:	23fc      	movs	r3, #252	; 0xfc
 800c06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c06e:	e00d      	b.n	800c08c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	fbb2 f3f3 	udiv	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fedb 	bl	800ce3c <VL53L1_set_timeouts_us>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800c08c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800c09a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d103      	bne.n	800c0aa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3730      	adds	r7, #48	; 0x30
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	00086470 	.word	0x00086470
 800c0bc:	00989680 	.word	0x00989680

0800c0c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08c      	sub	sp, #48	; 0x30
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800c0ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d109      	bne.n	800c10a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800c0f6:	f107 031b 	add.w	r3, r7, #27
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	2105      	movs	r1, #5
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f9b1 	bl	800c466 <VL53L1_GetSequenceStepEnable>
 800c104:	4603      	mov	r3, r0
 800c106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800c10a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d109      	bne.n	800c126 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800c112:	f107 031a 	add.w	r3, r7, #26
 800c116:	461a      	mov	r2, r3
 800c118:	2106      	movs	r1, #6
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f9a3 	bl	800c466 <VL53L1_GetSequenceStepEnable>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800c126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10b      	bne.n	800c146 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800c12e:	f107 0310 	add.w	r3, r7, #16
 800c132:	f107 0214 	add.w	r2, r7, #20
 800c136:	f107 010c 	add.w	r1, r7, #12
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 feb6 	bl	800ceac <VL53L1_get_timeouts_us>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800c146:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d156      	bne.n	800c1fc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800c154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800c158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	d02a      	beq.n	800c1b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800c160:	2b08      	cmp	r3, #8
 800c162:	dc47      	bgt.n	800c1f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800c164:	2b03      	cmp	r3, #3
 800c166:	d012      	beq.n	800c18e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800c168:	2b04      	cmp	r3, #4
 800c16a:	d143      	bne.n	800c1f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800c16c:	7efb      	ldrb	r3, [r7, #27]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d002      	beq.n	800c178 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800c172:	7ebb      	ldrb	r3, [r7, #26]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d105      	bne.n	800c184 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c17e:	3308      	adds	r3, #8
 800c180:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800c182:	e03c      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c18a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800c18c:	e037      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800c18e:	7efb      	ldrb	r3, [r7, #27]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d002      	beq.n	800c19a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800c194:	7ebb      	ldrb	r3, [r7, #26]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d106      	bne.n	800c1a8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800c1a0:	3334      	adds	r3, #52	; 0x34
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800c1a6:	e02a      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800c1ae:	3330      	adds	r3, #48	; 0x30
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800c1b4:	e023      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800c1b6:	23f5      	movs	r3, #245	; 0xf5
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800c1ba:	f107 0308 	add.w	r3, r7, #8
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f248 0136 	movw	r1, #32822	; 0x8036
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 fe9b 	bl	800df00 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dd07      	ble.n	800c1e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	22f5      	movs	r2, #245	; 0xf5
 800c1d4:	fb02 f303 	mul.w	r3, r2, r3
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	4413      	add	r3, r2
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800c1e6:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800c1f2:	e004      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800c1f4:	23f8      	movs	r3, #248	; 0xf8
 800c1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c1fa:	e000      	b.n	800c1fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800c1fc:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800c1fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c202:	2b00      	cmp	r3, #0
 800c204:	d102      	bne.n	800c20c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c20c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c210:	4618      	mov	r0, r3
 800c212:	3730      	adds	r7, #48	; 0x30
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	019b      	lsls	r3, r3, #6
 800c22e:	4a09      	ldr	r2, [pc, #36]	; (800c254 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800c230:	fba2 2303 	umull	r2, r3, r2, r3
 800c234:	099b      	lsrs	r3, r3, #6
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	4413      	add	r3, r2
 800c23a:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fdad 	bl	800cd9e <VL53L1_set_inter_measurement_period_ms>
 800c244:	4603      	mov	r3, r0
 800c246:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800c248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	10624dd3 	.word	0x10624dd3

0800c258 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800c266:	f107 0308 	add.w	r3, r7, #8
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fdbf 	bl	800cdf0 <VL53L1_get_inter_measurement_period_ms>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	019b      	lsls	r3, r3, #6
 800c27c:	4907      	ldr	r1, [pc, #28]	; (800c29c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800c27e:	fba1 1303 	umull	r1, r3, r1, r3
 800c282:	099b      	lsrs	r3, r3, #6
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800c28e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	10624dd3 	.word	0x10624dd3

0800c2a0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c2b2:	897b      	ldrh	r3, [r7, #10]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <SetLimitValue+0x1e>
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d009      	beq.n	800c2d0 <SetLimitValue+0x30>
 800c2bc:	e011      	b.n	800c2e2 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	0b9b      	lsrs	r3, r3, #14
 800c2c2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800c2c4:	8abb      	ldrh	r3, [r7, #20]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f001 f941 	bl	800d550 <VL53L1_set_lite_sigma_threshold>
		break;
 800c2ce:	e00a      	b.n	800c2e6 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	0a5b      	lsrs	r3, r3, #9
 800c2d4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800c2d6:	8abb      	ldrh	r3, [r7, #20]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f001 f964 	bl	800d5a8 <VL53L1_set_lite_min_count_rate>
		break;
 800c2e0:	e001      	b.n	800c2e6 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c2e2:	23fc      	movs	r3, #252	; 0xfc
 800c2e4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	807b      	strh	r3, [r7, #2]
 800c2fe:	4613      	mov	r3, r2
 800c300:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
 800c304:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c30a:	887b      	ldrh	r3, [r7, #2]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d902      	bls.n	800c316 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c310:	23fc      	movs	r3, #252	; 0xfc
 800c312:	73fb      	strb	r3, [r7, #15]
 800c314:	e014      	b.n	800c340 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800c316:	787b      	ldrb	r3, [r7, #1]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d102      	bne.n	800c322 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]
 800c320:	e006      	b.n	800c330 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c322:	887b      	ldrh	r3, [r7, #2]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	33e0      	adds	r3, #224	; 0xe0
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800c330:	887b      	ldrh	r3, [r7, #2]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	4619      	mov	r1, r3
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff ffb2 	bl	800c2a0 <SetLimitValue>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800c340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10c      	bne.n	800c362 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c348:	787b      	ldrb	r3, [r7, #1]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	bf14      	ite	ne
 800c34e:	2301      	movne	r3, #1
 800c350:	2300      	moveq	r3, #0
 800c352:	b2da      	uxtb	r2, r3
 800c354:	887b      	ldrh	r3, [r7, #2]
 800c356:	4611      	mov	r1, r2
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	4413      	add	r3, r2
 800c35c:	460a      	mov	r2, r1
 800c35e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800c362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800c36e:	b480      	push	{r7}
 800c370:	b087      	sub	sp, #28
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	460b      	mov	r3, r1
 800c378:	607a      	str	r2, [r7, #4]
 800c37a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c37c:	2300      	movs	r3, #0
 800c37e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c380:	897b      	ldrh	r3, [r7, #10]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d905      	bls.n	800c392 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c386:	23fc      	movs	r3, #252	; 0xfc
 800c388:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e008      	b.n	800c3a4 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c392:	897b      	ldrh	r3, [r7, #10]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800c39c:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	7dba      	ldrb	r2, [r7, #22]
 800c3a2:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c3a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c3ca:	897b      	ldrh	r3, [r7, #10]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <VL53L1_GetLimitCheckValue+0x22>
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d00c      	beq.n	800c3ee <VL53L1_GetLimitCheckValue+0x3a>
 800c3d4:	e017      	b.n	800c406 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800c3d6:	f107 0314 	add.w	r3, r7, #20
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f001 f8a1 	bl	800d524 <VL53L1_get_lite_sigma_threshold>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800c3e6:	8abb      	ldrh	r3, [r7, #20]
 800c3e8:	039b      	lsls	r3, r3, #14
 800c3ea:	61bb      	str	r3, [r7, #24]
		break;
 800c3ec:	e00d      	b.n	800c40a <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800c3ee:	f107 0316 	add.w	r3, r7, #22
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 f8c1 	bl	800d57c <VL53L1_get_lite_min_count_rate>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800c3fe:	8afb      	ldrh	r3, [r7, #22]
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	61bb      	str	r3, [r7, #24]
		break;
 800c404:	e001      	b.n	800c40a <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c406:	23fc      	movs	r3, #252	; 0xfc
 800c408:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800c40a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d123      	bne.n	800c45a <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d110      	bne.n	800c43a <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800c418:	897b      	ldrh	r3, [r7, #10]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	33e0      	adds	r3, #224	; 0xe0
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c42c:	897b      	ldrh	r3, [r7, #10]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4413      	add	r3, r2
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800c438:	e00f      	b.n	800c45a <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	69ba      	ldr	r2, [r7, #24]
 800c43e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c440:	897b      	ldrh	r3, [r7, #10]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	33e0      	adds	r3, #224	; 0xe0
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c44e:	897b      	ldrh	r3, [r7, #10]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800c45a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c45e:	4618      	mov	r0, r3
 800c460:	3720      	adds	r7, #32
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b086      	sub	sp, #24
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	460b      	mov	r3, r1
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c474:	2300      	movs	r3, #0
 800c476:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4619      	mov	r1, r3
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fd7f 	bl	800cf82 <VL53L1_get_sequence_config_bit>
 800c484:	4603      	mov	r3, r0
 800c486:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800c488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3718      	adds	r7, #24
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	789b      	ldrb	r3, [r3, #2]
 800c4a4:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800c4a6:	7dbb      	ldrb	r3, [r7, #22]
 800c4a8:	2b40      	cmp	r3, #64	; 0x40
 800c4aa:	d002      	beq.n	800c4b2 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fa6b 	bl	800c988 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800c4b8:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800c4ba:	7d7b      	ldrb	r3, [r7, #21]
 800c4bc:	2b63      	cmp	r3, #99	; 0x63
 800c4be:	dc12      	bgt.n	800c4e6 <VL53L1_StartMeasurement+0x52>
 800c4c0:	2b62      	cmp	r3, #98	; 0x62
 800c4c2:	da0d      	bge.n	800c4e0 <VL53L1_StartMeasurement+0x4c>
 800c4c4:	2b05      	cmp	r3, #5
 800c4c6:	dc0e      	bgt.n	800c4e6 <VL53L1_StartMeasurement+0x52>
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	da09      	bge.n	800c4e0 <VL53L1_StartMeasurement+0x4c>
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	dc02      	bgt.n	800c4d6 <VL53L1_StartMeasurement+0x42>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da05      	bge.n	800c4e0 <VL53L1_StartMeasurement+0x4c>
 800c4d4:	e007      	b.n	800c4e6 <VL53L1_StartMeasurement+0x52>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d105      	bne.n	800c4e6 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	75fb      	strb	r3, [r7, #23]
		break;
 800c4de:	e004      	b.n	800c4ea <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800c4e0:	23f2      	movs	r3, #242	; 0xf2
 800c4e2:	75fb      	strb	r3, [r7, #23]
		break;
 800c4e4:	e001      	b.n	800c4ea <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800c4e6:	23fd      	movs	r3, #253	; 0xfd
 800c4e8:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800c4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d11f      	bne.n	800c532 <VL53L1_StartMeasurement+0x9e>
 800c4f2:	7dbb      	ldrb	r3, [r7, #22]
 800c4f4:	2b40      	cmp	r3, #64	; 0x40
 800c4f6:	d11c      	bne.n	800c532 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800c4f8:	f107 0310 	add.w	r3, r7, #16
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff fdde 	bl	800c0c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800c504:	4603      	mov	r3, r0
 800c506:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	4a17      	ldr	r2, [pc, #92]	; (800c568 <VL53L1_StartMeasurement+0xd4>)
 800c50c:	fba2 2303 	umull	r2, r3, r2, r3
 800c510:	099b      	lsrs	r3, r3, #6
 800c512:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fe9c 	bl	800c258 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800c520:	4603      	mov	r3, r0
 800c522:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	1d1a      	adds	r2, r3, #4
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d901      	bls.n	800c532 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800c52e:	23fc      	movs	r3, #252	; 0xfc
 800c530:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800c532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d107      	bne.n	800c54a <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800c53a:	7dbb      	ldrb	r3, [r7, #22]
 800c53c:	2206      	movs	r2, #6
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 f867 	bl	800d614 <VL53L1_init_and_start_range>
 800c546:	4603      	mov	r3, r0
 800c548:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800c54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2204      	movs	r2, #4
 800c556:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800c55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	10624dd3 	.word	0x10624dd3

0800c56c <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	789b      	ldrb	r3, [r3, #2]
 800c57c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 fb87 	bl	800dc96 <VL53L1_clear_interrupt_and_enable_next_range>
 800c588:	4603      	mov	r3, r0
 800c58a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800c58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800c5a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f004 fb18 	bl	8010bde <VL53L1_poll_for_range_completion>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800c5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
	...

0800c5c0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b08d      	sub	sp, #52	; 0x34
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	603a      	str	r2, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800c5d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800c5d4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800c5d6:	231e      	movs	r3, #30
 800c5d8:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800c5da:	4b33      	ldr	r3, [pc, #204]	; (800c6a8 <ComputeRQL+0xe8>)
 800c5dc:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800c5de:	4b33      	ldr	r3, [pc, #204]	; (800c6ac <ComputeRQL+0xec>)
 800c5e0:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800c5e2:	f641 139a 	movw	r3, #6554	; 0x199a
 800c5e6:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <ComputeRQL+0x36>
		returnvalue = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5f4:	e04f      	b.n	800c696 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800c5f6:	79bb      	ldrb	r3, [r7, #6]
 800c5f8:	2b07      	cmp	r3, #7
 800c5fa:	d103      	bne.n	800c604 <ComputeRQL+0x44>
		returnvalue = 50;
 800c5fc:	2332      	movs	r3, #50	; 0x32
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c602:	e048      	b.n	800c696 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c60a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c60e:	429a      	cmp	r2, r3
 800c610:	dd03      	ble.n	800c61a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800c612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c614:	041b      	lsls	r3, r3, #16
 800c616:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c618:	e007      	b.n	800c62a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c620:	461a      	mov	r2, r3
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	fb02 f303 	mul.w	r3, r2, r3
 800c628:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d020      	beq.n	800c672 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c634:	461a      	mov	r2, r3
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	fb02 f303 	mul.w	r3, r2, r3
 800c63c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	085b      	lsrs	r3, r3, #1
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	4413      	add	r3, r2
 800c646:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c650:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	041b      	lsls	r3, r3, #16
 800c656:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d804      	bhi.n	800c66a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28
 800c668:	e006      	b.n	800c678 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800c66a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c66e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c670:	e002      	b.n	800c678 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800c672:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800c676:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	0c1b      	lsrs	r3, r3, #16
 800c67c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b32      	cmp	r3, #50	; 0x32
 800c682:	d905      	bls.n	800c690 <ComputeRQL+0xd0>
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	2b64      	cmp	r3, #100	; 0x64
 800c688:	bf28      	it	cs
 800c68a:	2364      	movcs	r3, #100	; 0x64
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	e000      	b.n	800c692 <ComputeRQL+0xd2>
 800c690:	2332      	movs	r3, #50	; 0x32
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3734      	adds	r7, #52	; 0x34
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	0075b333 	.word	0x0075b333
 800c6ac:	0030cccd 	.word	0x0030cccd

0800c6b0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	3b04      	subs	r3, #4
 800c6be:	2b0f      	cmp	r3, #15
 800c6c0:	d83d      	bhi.n	800c73e <ConvertStatusLite+0x8e>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <ConvertStatusLite+0x18>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c71b 	.word	0x0800c71b
 800c6cc:	0800c715 	.word	0x0800c715
 800c6d0:	0800c721 	.word	0x0800c721
 800c6d4:	0800c727 	.word	0x0800c727
 800c6d8:	0800c733 	.word	0x0800c733
 800c6dc:	0800c739 	.word	0x0800c739
 800c6e0:	0800c73f 	.word	0x0800c73f
 800c6e4:	0800c73f 	.word	0x0800c73f
 800c6e8:	0800c72d 	.word	0x0800c72d
 800c6ec:	0800c73f 	.word	0x0800c73f
 800c6f0:	0800c73f 	.word	0x0800c73f
 800c6f4:	0800c73f 	.word	0x0800c73f
 800c6f8:	0800c73f 	.word	0x0800c73f
 800c6fc:	0800c73f 	.word	0x0800c73f
 800c700:	0800c709 	.word	0x0800c709
 800c704:	0800c70f 	.word	0x0800c70f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800c708:	230a      	movs	r3, #10
 800c70a:	73fb      	strb	r3, [r7, #15]
		break;
 800c70c:	e019      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800c70e:	2306      	movs	r3, #6
 800c710:	73fb      	strb	r3, [r7, #15]
		break;
 800c712:	e016      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800c714:	2304      	movs	r3, #4
 800c716:	73fb      	strb	r3, [r7, #15]
		break;
 800c718:	e013      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800c71a:	2302      	movs	r3, #2
 800c71c:	73fb      	strb	r3, [r7, #15]
		break;
 800c71e:	e010      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800c720:	2301      	movs	r3, #1
 800c722:	73fb      	strb	r3, [r7, #15]
		break;
 800c724:	e00d      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800c726:	2307      	movs	r3, #7
 800c728:	73fb      	strb	r3, [r7, #15]
		break;
 800c72a:	e00a      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800c72c:	2309      	movs	r3, #9
 800c72e:	73fb      	strb	r3, [r7, #15]
		break;
 800c730:	e007      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800c732:	2303      	movs	r3, #3
 800c734:	73fb      	strb	r3, [r7, #15]
		break;
 800c736:	e004      	b.n	800c742 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800c738:	2300      	movs	r3, #0
 800c73a:	73fb      	strb	r3, [r7, #15]
		break;
 800c73c:	e001      	b.n	800c742 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800c73e:	23ff      	movs	r3, #255	; 0xff
 800c740:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800c742:	7bfb      	ldrb	r3, [r7, #15]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08c      	sub	sp, #48	; 0x30
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	607b      	str	r3, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	72fb      	strb	r3, [r7, #11]
 800c75e:	4613      	mov	r3, r2
 800c760:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c762:	2300      	movs	r3, #0
 800c764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c776:	f003 031f 	and.w	r3, r3, #31
 800c77a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800c77e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800c782:	7afb      	ldrb	r3, [r7, #11]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff ff1a 	bl	800c5c0 <ComputeRQL>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c798:	025b      	lsls	r3, r3, #9
 800c79a:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a0:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c7a6:	025b      	lsls	r3, r3, #9
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ae:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c7bc:	025b      	lsls	r3, r3, #9
 800c7be:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	6a3a      	ldr	r2, [r7, #32]
 800c7c4:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800c7d6:	7abb      	ldrb	r3, [r7, #10]
 800c7d8:	2b11      	cmp	r3, #17
 800c7da:	d009      	beq.n	800c7f0 <SetSimpleData+0xa0>
 800c7dc:	2b11      	cmp	r3, #17
 800c7de:	dc0f      	bgt.n	800c800 <SetSimpleData+0xb0>
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	dc02      	bgt.n	800c7ea <SetSimpleData+0x9a>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dc03      	bgt.n	800c7f0 <SetSimpleData+0xa0>
 800c7e8:	e00a      	b.n	800c800 <SetSimpleData+0xb0>
 800c7ea:	2b0d      	cmp	r3, #13
 800c7ec:	d004      	beq.n	800c7f8 <SetSimpleData+0xa8>
 800c7ee:	e007      	b.n	800c800 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	76da      	strb	r2, [r3, #27]
		break;
 800c7f6:	e006      	b.n	800c806 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	220d      	movs	r2, #13
 800c7fc:	76da      	strb	r2, [r3, #27]
		break;
 800c7fe:	e002      	b.n	800c806 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	2200      	movs	r2, #0
 800c804:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	7edb      	ldrb	r3, [r3, #27]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d108      	bne.n	800c820 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800c80e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff ff4c 	bl	800c6b0 <ConvertStatusLite>
 800c818:	4603      	mov	r3, r0
 800c81a:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c824:	025b      	lsls	r3, r3, #9
 800c826:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a3a      	ldr	r2, [r7, #32]
 800c82c:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c834:	025b      	lsls	r3, r3, #9
 800c836:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6a3a      	ldr	r2, [r7, #32]
 800c83c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800c840:	f107 0314 	add.w	r3, r7, #20
 800c844:	461a      	mov	r2, r3
 800c846:	2100      	movs	r1, #0
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f7ff fdb3 	bl	800c3b4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800c84e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c852:	2b06      	cmp	r3, #6
 800c854:	bf0c      	ite	eq
 800c856:	2301      	moveq	r3, #1
 800c858:	2300      	movne	r3, #0
 800c85a:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800c85c:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800c85e:	f107 0319 	add.w	r3, r7, #25
 800c862:	461a      	mov	r2, r3
 800c864:	2100      	movs	r1, #0
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7ff fd81 	bl	800c36e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800c86c:	7e7b      	ldrb	r3, [r7, #25]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d104      	bne.n	800c87c <SetSimpleData+0x12c>
 800c872:	7ffb      	ldrb	r3, [r7, #31]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d101      	bne.n	800c87c <SetSimpleData+0x12c>
 800c878:	2301      	movs	r3, #1
 800c87a:	e000      	b.n	800c87e <SetSimpleData+0x12e>
 800c87c:	2300      	movs	r3, #0
 800c87e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	7fba      	ldrb	r2, [r7, #30]
 800c884:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800c888:	f107 0314 	add.w	r3, r7, #20
 800c88c:	461a      	mov	r2, r3
 800c88e:	2101      	movs	r1, #1
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f7ff fd8f 	bl	800c3b4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800c896:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c89a:	2b04      	cmp	r3, #4
 800c89c:	bf0c      	ite	eq
 800c89e:	2301      	moveq	r3, #1
 800c8a0:	2300      	movne	r3, #0
 800c8a2:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800c8a4:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800c8a6:	f107 0319 	add.w	r3, r7, #25
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fd5d 	bl	800c36e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800c8b4:	7e7b      	ldrb	r3, [r7, #25]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d104      	bne.n	800c8c4 <SetSimpleData+0x174>
 800c8ba:	7f7b      	ldrb	r3, [r7, #29]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d101      	bne.n	800c8c4 <SetSimpleData+0x174>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e000      	b.n	800c8c6 <SetSimpleData+0x176>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	7fba      	ldrb	r2, [r7, #30]
 800c8cc:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	8b1b      	ldrh	r3, [r3, #24]
 800c8d4:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	7edb      	ldrb	r3, [r3, #27]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d110      	bne.n	800c900 <SetSimpleData+0x1b0>
 800c8de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da0c      	bge.n	800c900 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800c8e6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c8ea:	4b08      	ldr	r3, [pc, #32]	; (800c90c <SetSimpleData+0x1bc>)
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	da03      	bge.n	800c8fa <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	220e      	movs	r2, #14
 800c8f6:	76da      	strb	r2, [r3, #27]
 800c8f8:	e002      	b.n	800c900 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800c900:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c904:	4618      	mov	r0, r3
 800c906:	3730      	adds	r7, #48	; 0x30
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000188 	.word	0x20000188

0800c910 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b0a8      	sub	sp, #160	; 0xa0
 800c914:	af02      	add	r7, sp, #8
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c91a:	2300      	movs	r3, #0
 800c91c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800c920:	f107 0308 	add.w	r3, r7, #8
 800c924:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800c928:	221c      	movs	r2, #28
 800c92a:	21ff      	movs	r1, #255	; 0xff
 800c92c:	6838      	ldr	r0, [r7, #0]
 800c92e:	f004 fd89 	bl	8011444 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800c932:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c936:	2102      	movs	r1, #2
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f93c 	bl	800dbb6 <VL53L1_get_device_results>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800c944:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d117      	bne.n	800c97c <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800c94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c950:	789a      	ldrb	r2, [r3, #2]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800c956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c95a:	3304      	adds	r3, #4
 800c95c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800c960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c964:	78da      	ldrb	r2, [r3, #3]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c96e:	2101      	movs	r1, #1
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff feed 	bl	800c750 <SetSimpleData>
 800c976:	4603      	mov	r3, r0
 800c978:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c97c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800c980:	4618      	mov	r0, r3
 800c982:	3798      	adds	r7, #152	; 0x98
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b0c6      	sub	sp, #280	; 0x118
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	1d3b      	adds	r3, r7, #4
 800c990:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c992:	2300      	movs	r3, #0
 800c994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800c99e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d108      	bne.n	800c9b8 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800c9a6:	1d3b      	adds	r3, r7, #4
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2185      	movs	r1, #133	; 0x85
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f004 f9f1 	bl	8010d94 <VL53L1_WrByte>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800c9b8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d103      	bne.n	800c9c8 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800c9c0:	1d3b      	adds	r3, r7, #4
 800c9c2:	6818      	ldr	r0, [r3, #0]
 800c9c4:	f002 fce1 	bl	800f38a <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800c9c8:	4b65      	ldr	r3, [pc, #404]	; (800cb60 <VL53L1_LoadPatch+0x1d8>)
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	d81b      	bhi.n	800ca10 <VL53L1_LoadPatch+0x88>
 800c9d8:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <VL53L1_LoadPatch+0x58>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800c9f1 	.word	0x0800c9f1
 800c9e4:	0800c9f9 	.word	0x0800c9f9
 800c9e8:	0800ca01 	.word	0x0800ca01
 800c9ec:	0800ca09 	.word	0x0800ca09

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800c9f6:	e00e      	b.n	800ca16 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800c9fe:	e00a      	b.n	800ca16 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800ca00:	2320      	movs	r3, #32
 800ca02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ca06:	e006      	b.n	800ca16 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800ca08:	2340      	movs	r3, #64	; 0x40
 800ca0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800ca0e:	e002      	b.n	800ca16 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800ca10:	2300      	movs	r3, #0
 800ca12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800ca16:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d125      	bne.n	800ca6a <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800ca1e:	f107 030c 	add.w	r3, r7, #12
 800ca22:	2229      	movs	r2, #41	; 0x29
 800ca24:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800ca26:	f107 030c 	add.w	r3, r7, #12
 800ca2a:	22c9      	movs	r2, #201	; 0xc9
 800ca2c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800ca2e:	f107 030c 	add.w	r3, r7, #12
 800ca32:	220e      	movs	r2, #14
 800ca34:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	2240      	movs	r2, #64	; 0x40
 800ca3c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800ca3e:	f107 030c 	add.w	r3, r7, #12
 800ca42:	2228      	movs	r2, #40	; 0x28
 800ca44:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800ca46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	f107 030c 	add.w	r3, r7, #12
 800ca50:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800ca52:	f107 020c 	add.w	r2, r7, #12
 800ca56:	1d38      	adds	r0, r7, #4
 800ca58:	2306      	movs	r3, #6
 800ca5a:	f240 4176 	movw	r1, #1142	; 0x476
 800ca5e:	6800      	ldr	r0, [r0, #0]
 800ca60:	f004 f92c 	bl	8010cbc <VL53L1_WriteMulti>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800ca6a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d123      	bne.n	800caba <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800ca72:	f107 030c 	add.w	r3, r7, #12
 800ca76:	2203      	movs	r2, #3
 800ca78:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800ca7a:	f107 030c 	add.w	r3, r7, #12
 800ca7e:	226d      	movs	r2, #109	; 0x6d
 800ca80:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800ca82:	f107 030c 	add.w	r3, r7, #12
 800ca86:	2203      	movs	r2, #3
 800ca88:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800ca8a:	f107 030c 	add.w	r3, r7, #12
 800ca8e:	226f      	movs	r2, #111	; 0x6f
 800ca90:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800ca92:	f107 030c 	add.w	r3, r7, #12
 800ca96:	2207      	movs	r2, #7
 800ca98:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800ca9a:	f107 030c 	add.w	r3, r7, #12
 800ca9e:	2229      	movs	r2, #41	; 0x29
 800caa0:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800caa2:	f107 020c 	add.w	r2, r7, #12
 800caa6:	1d38      	adds	r0, r7, #4
 800caa8:	2306      	movs	r3, #6
 800caaa:	f240 4196 	movw	r1, #1174	; 0x496
 800caae:	6800      	ldr	r0, [r0, #0]
 800cab0:	f004 f904 	bl	8010cbc <VL53L1_WriteMulti>
 800cab4:	4603      	mov	r3, r0
 800cab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800caba:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d113      	bne.n	800caea <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800cac2:	f107 030c 	add.w	r3, r7, #12
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800caca:	f107 030c 	add.w	r3, r7, #12
 800cace:	2207      	movs	r2, #7
 800cad0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800cad2:	f107 020c 	add.w	r2, r7, #12
 800cad6:	1d38      	adds	r0, r7, #4
 800cad8:	2302      	movs	r3, #2
 800cada:	f240 4172 	movw	r1, #1138	; 0x472
 800cade:	6800      	ldr	r0, [r0, #0]
 800cae0:	f004 f8ec 	bl	8010cbc <VL53L1_WriteMulti>
 800cae4:	4603      	mov	r3, r0
 800cae6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800caea:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d113      	bne.n	800cb1a <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800caf2:	f107 030c 	add.w	r3, r7, #12
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800cafa:	f107 030c 	add.w	r3, r7, #12
 800cafe:	2207      	movs	r2, #7
 800cb00:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800cb02:	f107 020c 	add.w	r2, r7, #12
 800cb06:	1d38      	adds	r0, r7, #4
 800cb08:	2302      	movs	r3, #2
 800cb0a:	f240 4174 	movw	r1, #1140	; 0x474
 800cb0e:	6800      	ldr	r0, [r0, #0]
 800cb10:	f004 f8d4 	bl	8010cbc <VL53L1_WriteMulti>
 800cb14:	4603      	mov	r3, r0
 800cb16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800cb1a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d109      	bne.n	800cb36 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800cb22:	1d3b      	adds	r3, r7, #4
 800cb24:	2201      	movs	r2, #1
 800cb26:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800cb2a:	6818      	ldr	r0, [r3, #0]
 800cb2c:	f004 f932 	bl	8010d94 <VL53L1_WrByte>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800cb36:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d108      	bne.n	800cb50 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800cb3e:	1d3b      	adds	r3, r7, #4
 800cb40:	2201      	movs	r2, #1
 800cb42:	2185      	movs	r1, #133	; 0x85
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	f004 f925 	bl	8010d94 <VL53L1_WrByte>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800cb50:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20000188 	.word	0x20000188

0800cb64 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800cb64:	b5b0      	push	{r4, r5, r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800cb78:	2162      	movs	r1, #98	; 0x62
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f002 f8bf 	bl	800ecfe <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2200      	movs	r2, #0
 800cb84:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2201      	movs	r2, #1
 800cb96:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cba4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cbac:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cbb4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2264      	movs	r2, #100	; 0x64
 800cbba:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cbc2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	f240 72db 	movw	r2, #2011	; 0x7db
 800cbd2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f002 f875 	bl	800ecc6 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cbdc:	78fb      	ldrb	r3, [r7, #3]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d008      	beq.n	800cbf4 <VL53L1_data_init+0x90>
 800cbe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f857 	bl	800cc9e <VL53L1_read_p2p_data>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 fba4 	bl	800e348 <VL53L1_init_refspadchar_config_struct>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f001 fbc0 	bl	800e390 <VL53L1_init_ssc_config_struct>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f001 fbd5 	bl	800e3d2 <VL53L1_init_xtalk_config_struct>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 fc2f 	bl	800e496 <VL53L1_init_offset_cal_config_struct>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	33a4      	adds	r3, #164	; 0xa4
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 fc4f 	bl	800e4e4 <VL53L1_init_tuning_parm_storage_struct>
 800cc46:	4603      	mov	r3, r0
 800cc48:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800cc4a:	2120      	movs	r1, #32
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fcc1 	bl	800d5d4 <VL53L1_set_vhv_loopbound>
 800cc52:	4603      	mov	r3, r0
 800cc54:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800cc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d116      	bne.n	800cc8c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	7858      	ldrb	r0, [r3, #1]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	8b1c      	ldrh	r4, [r3, #24]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	689d      	ldr	r5, [r3, #8]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	6912      	ldr	r2, [r2, #16]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	6949      	ldr	r1, [r1, #20]
 800cc76:	9102      	str	r1, [sp, #8]
 800cc78:	9201      	str	r2, [sp, #4]
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	462b      	mov	r3, r5
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4601      	mov	r1, r0
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fad8 	bl	800d238 <VL53L1_set_preset_mode>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f002 fdb5 	bl	800f7fc <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800cc92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bdb0      	pop	{r4, r5, r7, pc}

0800cc9e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800ccae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d108      	bne.n	800ccc8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f002 ff39 	bl	800fb36 <VL53L1_get_static_nvm_managed>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800ccc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	3342      	adds	r3, #66	; 0x42
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f003 f86b 	bl	800fdb2 <VL53L1_get_customer_nvm_managed>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800cce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d115      	bne.n	800cd14 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f003 ff1d 	bl	8010b30 <VL53L1_get_nvm_copy_data>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800ccfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d108      	bne.n	800cd14 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	33f0      	adds	r3, #240	; 0xf0
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f002 f957 	bl	800efc2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800cd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d109      	bne.n	800cd30 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800cd22:	461a      	mov	r2, r3
 800cd24:	21de      	movs	r1, #222	; 0xde
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f004 f892 	bl	8010e50 <VL53L1_RdWord>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800cd36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd3a:	d204      	bcs.n	800cd46 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800cd42:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800cd46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d107      	bne.n	800cd5e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	339e      	adds	r3, #158	; 0x9e
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f990 	bl	800d07a <VL53L1_get_mode_mitigation_roi>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d114      	bne.n	800cd92 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10f      	bne.n	800cd92 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cdba:	23f1      	movs	r3, #241	; 0xf1
 800cdbc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800cdbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10c      	bne.n	800cde0 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800cdd2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800cde0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ce0c:	23f1      	movs	r3, #241	; 0xf1
 800ce0e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800ce10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d109      	bne.n	800ce2c <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800ce24:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800ce2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ce5c:	23f1      	movs	r3, #241	; 0xf1
 800ce5e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800ce60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d11b      	bne.n	800cea0 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	460b      	mov	r3, r1
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	68b8      	ldr	r0, [r7, #8]
 800ce98:	f002 fbe2 	bl	800f660 <VL53L1_calc_timeout_register_values>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800cea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ceba:	2300      	movs	r3, #0
 800cebc:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ced4:	23f1      	movs	r3, #241	; 0xf1
 800ced6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800ced8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d14a      	bne.n	800cf76 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800ceec:	4619      	mov	r1, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	f002 fa5d 	bl	800f3ae <VL53L1_calc_macro_period_us>
 800cef4:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f002 fb15 	bl	800f52e <VL53L1_calc_timeout_us>
 800cf04:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800cf10:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800cf12:	8a7b      	ldrh	r3, [r7, #18]
 800cf14:	021b      	lsls	r3, r3, #8
 800cf16:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cf1e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800cf20:	4413      	add	r3, r2
 800cf22:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800cf24:	8a7b      	ldrh	r3, [r7, #18]
 800cf26:	6979      	ldr	r1, [r7, #20]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f002 fb3e 	bl	800f5aa <VL53L1_calc_decoded_timeout_us>
 800cf2e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800cf3a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800cf3c:	8a7b      	ldrh	r3, [r7, #18]
 800cf3e:	021b      	lsls	r3, r3, #8
 800cf40:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800cf48:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800cf4a:	4413      	add	r3, r2
 800cf4c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800cf4e:	8a7b      	ldrh	r3, [r7, #18]
 800cf50:	6979      	ldr	r1, [r7, #20]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f002 fb29 	bl	800f5aa <VL53L1_calc_decoded_timeout_us>
 800cf58:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800cf76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3720      	adds	r7, #32
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b087      	sub	sp, #28
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	607a      	str	r2, [r7, #4]
 800cf8e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf90:	2300      	movs	r3, #0
 800cf92:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	2b07      	cmp	r3, #7
 800cfa0:	d81c      	bhi.n	800cfdc <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d004      	beq.n	800cfb2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800cfb8:	7dbb      	ldrb	r3, [r7, #22]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800cfc2:	7afb      	ldrb	r3, [r7, #11]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00b      	beq.n	800cfe0 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	fa42 f303 	asr.w	r3, r2, r3
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	701a      	strb	r2, [r3, #0]
 800cfda:	e001      	b.n	800cfe0 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800cfdc:	23fc      	movs	r3, #252	; 0xfc
 800cfde:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800cfe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	7858      	ldrb	r0, [r3, #1]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	7819      	ldrb	r1, [r3, #0]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800d010:	461a      	mov	r2, r3
 800d012:	f002 fb9e 	bl	800f752 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	7898      	ldrb	r0, [r3, #2]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	78d9      	ldrb	r1, [r3, #3]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800d024:	461a      	mov	r2, r3
 800d026:	f002 fbd3 	bl	800f7d0 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800d02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b084      	sub	sp, #16
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	3301      	adds	r3, #1
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	4619      	mov	r1, r3
 800d056:	f002 fc8a 	bl	800f96e <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	1c99      	adds	r1, r3, #2
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	3303      	adds	r3, #3
 800d068:	461a      	mov	r2, r3
 800d06a:	f002 fb99 	bl	800f7a0 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800d06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b086      	sub	sp, #24
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d084:	2300      	movs	r3, #0
 800d086:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800d09e:	f107 020e 	add.w	r2, r7, #14
 800d0a2:	f107 010d 	add.w	r1, r7, #13
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f002 fc61 	bl	800f96e <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800d0ac:	7bba      	ldrb	r2, [r7, #14]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800d0b2:	7b7a      	ldrb	r2, [r7, #13]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800d0be:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	091b      	lsrs	r3, r3, #4
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	f003 030f 	and.w	r3, r3, #15
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800d0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
	...

0800d0e4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	607a      	str	r2, [r7, #4]
 800d0ee:	603b      	str	r3, [r7, #0]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800d0fc:	7afb      	ldrb	r3, [r7, #11]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	2b25      	cmp	r3, #37	; 0x25
 800d102:	f200 808e 	bhi.w	800d222 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d1a5 	.word	0x0800d1a5
 800d110:	0800d1a5 	.word	0x0800d1a5
 800d114:	0800d1a5 	.word	0x0800d1a5
 800d118:	0800d1a5 	.word	0x0800d1a5
 800d11c:	0800d1a5 	.word	0x0800d1a5
 800d120:	0800d1cf 	.word	0x0800d1cf
 800d124:	0800d1cf 	.word	0x0800d1cf
 800d128:	0800d1cf 	.word	0x0800d1cf
 800d12c:	0800d223 	.word	0x0800d223
 800d130:	0800d223 	.word	0x0800d223
 800d134:	0800d223 	.word	0x0800d223
 800d138:	0800d223 	.word	0x0800d223
 800d13c:	0800d223 	.word	0x0800d223
 800d140:	0800d223 	.word	0x0800d223
 800d144:	0800d223 	.word	0x0800d223
 800d148:	0800d223 	.word	0x0800d223
 800d14c:	0800d1a5 	.word	0x0800d1a5
 800d150:	0800d1cf 	.word	0x0800d1cf
 800d154:	0800d223 	.word	0x0800d223
 800d158:	0800d223 	.word	0x0800d223
 800d15c:	0800d223 	.word	0x0800d223
 800d160:	0800d223 	.word	0x0800d223
 800d164:	0800d223 	.word	0x0800d223
 800d168:	0800d223 	.word	0x0800d223
 800d16c:	0800d223 	.word	0x0800d223
 800d170:	0800d223 	.word	0x0800d223
 800d174:	0800d223 	.word	0x0800d223
 800d178:	0800d223 	.word	0x0800d223
 800d17c:	0800d223 	.word	0x0800d223
 800d180:	0800d223 	.word	0x0800d223
 800d184:	0800d223 	.word	0x0800d223
 800d188:	0800d223 	.word	0x0800d223
 800d18c:	0800d223 	.word	0x0800d223
 800d190:	0800d223 	.word	0x0800d223
 800d194:	0800d223 	.word	0x0800d223
 800d198:	0800d1f9 	.word	0x0800d1f9
 800d19c:	0800d1f9 	.word	0x0800d1f9
 800d1a0:	0800d1f9 	.word	0x0800d1f9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	601a      	str	r2, [r3, #0]
	break;
 800d1cc:	e02c      	b.n	800d228 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	601a      	str	r2, [r3, #0]
	break;
 800d1f6:	e017      	b.n	800d228 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	601a      	str	r2, [r3, #0]
	break;
 800d220:	e002      	b.n	800d228 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d222:	23fc      	movs	r3, #252	; 0xfc
 800d224:	75fb      	strb	r3, [r7, #23]
		break;
 800d226:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d228:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	371c      	adds	r7, #28
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b092      	sub	sp, #72	; 0x48
 800d23c:	af04      	add	r7, sp, #16
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	460b      	mov	r3, r1
 800d244:	72fb      	strb	r3, [r7, #11]
 800d246:	4613      	mov	r3, r2
 800d248:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d25a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d26a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d272:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d27a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	33a4      	adds	r3, #164	; 0xa4
 800d280:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800d288:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	7afa      	ldrb	r2, [r7, #11]
 800d28e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d294:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d29a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2a0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800d2a2:	2103      	movs	r1, #3
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f001 fd2a 	bl	800ecfe <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800d2aa:	7afb      	ldrb	r3, [r7, #11]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	2b25      	cmp	r3, #37	; 0x25
 800d2b0:	f200 810c 	bhi.w	800d4cc <VL53L1_set_preset_mode+0x294>
 800d2b4:	a201      	add	r2, pc, #4	; (adr r2, 800d2bc <VL53L1_set_preset_mode+0x84>)
 800d2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ba:	bf00      	nop
 800d2bc:	0800d355 	.word	0x0800d355
 800d2c0:	0800d371 	.word	0x0800d371
 800d2c4:	0800d38d 	.word	0x0800d38d
 800d2c8:	0800d3a9 	.word	0x0800d3a9
 800d2cc:	0800d3c5 	.word	0x0800d3c5
 800d2d0:	0800d3e1 	.word	0x0800d3e1
 800d2d4:	0800d3fd 	.word	0x0800d3fd
 800d2d8:	0800d419 	.word	0x0800d419
 800d2dc:	0800d4cd 	.word	0x0800d4cd
 800d2e0:	0800d4cd 	.word	0x0800d4cd
 800d2e4:	0800d4cd 	.word	0x0800d4cd
 800d2e8:	0800d4cd 	.word	0x0800d4cd
 800d2ec:	0800d4cd 	.word	0x0800d4cd
 800d2f0:	0800d4cd 	.word	0x0800d4cd
 800d2f4:	0800d4cd 	.word	0x0800d4cd
 800d2f8:	0800d4cd 	.word	0x0800d4cd
 800d2fc:	0800d435 	.word	0x0800d435
 800d300:	0800d451 	.word	0x0800d451
 800d304:	0800d4cd 	.word	0x0800d4cd
 800d308:	0800d4cd 	.word	0x0800d4cd
 800d30c:	0800d4cd 	.word	0x0800d4cd
 800d310:	0800d4cd 	.word	0x0800d4cd
 800d314:	0800d4cd 	.word	0x0800d4cd
 800d318:	0800d4cd 	.word	0x0800d4cd
 800d31c:	0800d4cd 	.word	0x0800d4cd
 800d320:	0800d4cd 	.word	0x0800d4cd
 800d324:	0800d4cd 	.word	0x0800d4cd
 800d328:	0800d4cd 	.word	0x0800d4cd
 800d32c:	0800d4cd 	.word	0x0800d4cd
 800d330:	0800d4cd 	.word	0x0800d4cd
 800d334:	0800d4cd 	.word	0x0800d4cd
 800d338:	0800d4cd 	.word	0x0800d4cd
 800d33c:	0800d4cd 	.word	0x0800d4cd
 800d340:	0800d4cd 	.word	0x0800d4cd
 800d344:	0800d4cd 	.word	0x0800d4cd
 800d348:	0800d46d 	.word	0x0800d46d
 800d34c:	0800d48d 	.word	0x0800d48d
 800d350:	0800d4ad 	.word	0x0800d4ad

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	6a3b      	ldr	r3, [r7, #32]
 800d35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d364:	f001 f94d 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800d368:	4603      	mov	r3, r0
 800d36a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d36e:	e0b1      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	9301      	str	r3, [sp, #4]
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d37e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d380:	f001 fa5d 	bl	800e83e <VL53L1_preset_mode_standard_ranging_short_range>
 800d384:	4603      	mov	r3, r0
 800d386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d38a:	e0a3      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	9301      	str	r3, [sp, #4]
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39c:	f001 fa90 	bl	800e8c0 <VL53L1_preset_mode_standard_ranging_long_range>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d3a6:	e095      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b8:	f001 fac3 	bl	800e942 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d3c2:	e087      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d4:	f001 fada 	bl	800e98c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d3de:	e079      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	6a3b      	ldr	r3, [r7, #32]
 800d3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f0:	f001 faf1 	bl	800e9d6 <VL53L1_preset_mode_timed_ranging>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d3fa:	e06b      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	9301      	str	r3, [sp, #4]
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40c:	f001 fb1d 	bl	800ea4a <VL53L1_preset_mode_timed_ranging_short_range>
 800d410:	4603      	mov	r3, r0
 800d412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d416:	e05d      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d428:	f001 fb49 	bl	800eabe <VL53L1_preset_mode_timed_ranging_long_range>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d432:	e04f      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d444:	f001 fc1d 	bl	800ec82 <VL53L1_preset_mode_olt>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d44e:	e041      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	6a3b      	ldr	r3, [r7, #32]
 800d45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d45e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d460:	f001 fbd9 	bl	800ec16 <VL53L1_preset_mode_singleshot_ranging>
 800d464:	4603      	mov	r3, r0
 800d466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d46a:	e033      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	9302      	str	r3, [sp, #8]
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d480:	f001 fb7d 	bl	800eb7e <VL53L1_preset_mode_low_power_auto_short_ranging>
 800d484:	4603      	mov	r3, r0
 800d486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d48a:	e023      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	9302      	str	r3, [sp, #8]
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4a0:	f001 fb47 	bl	800eb32 <VL53L1_preset_mode_low_power_auto_ranging>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d4aa:	e013      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	9302      	str	r3, [sp, #8]
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4c0:	f001 fb83 	bl	800ebca <VL53L1_preset_mode_low_power_auto_long_ranging>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d4ca:	e003      	b.n	800d4d4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d4cc:	23fc      	movs	r3, #252	; 0xfc
 800d4ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800d4d2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800d4d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d105      	bne.n	800d4e8 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	893a      	ldrh	r2, [r7, #8]
 800d4e0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	893a      	ldrh	r2, [r7, #8]
 800d4e6:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800d4e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d108      	bne.n	800d502 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800d4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7ff fca0 	bl	800ce3c <VL53L1_set_timeouts_us>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800d502:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800d50a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fc46 	bl	800cd9e <VL53L1_set_inter_measurement_period_ms>
 800d512:	4603      	mov	r3, r0
 800d514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800d518:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3738      	adds	r7, #56	; 0x38
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d52e:	2300      	movs	r3, #0
 800d530:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d540:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d544:	4618      	mov	r0, r3
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	887a      	ldrh	r2, [r7, #2]
 800d568:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800d56c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d598:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	887a      	ldrh	r2, [r7, #2]
 800d5c0:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800d5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d5ee:	f003 0303 	and.w	r3, r3, #3
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	4413      	add	r3, r2
 800d5fc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800d604:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b0d0      	sub	sp, #320	; 0x140
 800d618:	af00      	add	r7, sp, #0
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	6018      	str	r0, [r3, #0]
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	1cfb      	adds	r3, r7, #3
 800d624:	4602      	mov	r2, r0
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	1cbb      	adds	r3, r7, #2
 800d62a:	460a      	mov	r2, r1
 800d62c:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d634:	1d3b      	adds	r3, r7, #4
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800d63c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d640:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800d648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d64c:	3342      	adds	r3, #66	; 0x42
 800d64e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800d652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d656:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d65a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800d65e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d662:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d666:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800d66a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d66e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d672:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800d676:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d67a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d67e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800d682:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d686:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d68a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800d68e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d692:	332c      	adds	r3, #44	; 0x2c
 800d694:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800d698:	f107 030c 	add.w	r3, r7, #12
 800d69c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800d6b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6bc:	1cfa      	adds	r2, r7, #3
 800d6be:	7812      	ldrb	r2, [r2, #0]
 800d6c0:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800d6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c6:	791b      	ldrb	r3, [r3, #4]
 800d6c8:	b25b      	sxtb	r3, r3
 800d6ca:	f003 030f 	and.w	r3, r3, #15
 800d6ce:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800d6d0:	1cfb      	adds	r3, r7, #3
 800d6d2:	f993 3000 	ldrsb.w	r3, [r3]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b25b      	sxtb	r3, r3
 800d6da:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800d6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6e0:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800d6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6e6:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800d6ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6ee:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800d6f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6f6:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800d6fa:	2bff      	cmp	r3, #255	; 0xff
 800d6fc:	d104      	bne.n	800d708 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800d6fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d702:	2200      	movs	r2, #0
 800d704:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d708:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d70c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d710:	2b01      	cmp	r3, #1
 800d712:	d133      	bne.n	800d77c <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800d714:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d718:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d12d      	bne.n	800d77c <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800d720:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d724:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800d728:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d72c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800d730:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d734:	2220      	movs	r2, #32
 800d736:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800d73a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d73e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800d742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10c      	bne.n	800d764 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800d74a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d74e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800d752:	b29b      	uxth	r3, r3
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	b29b      	uxth	r3, r3
 800d758:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800d75a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d75e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800d762:	e004      	b.n	800d76e <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800d764:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d768:	2200      	movs	r2, #0
 800d76a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800d76e:	1cbb      	adds	r3, r7, #2
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2b04      	cmp	r3, #4
 800d774:	d802      	bhi.n	800d77c <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800d776:	1cbb      	adds	r3, r7, #2
 800d778:	2205      	movs	r2, #5
 800d77a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d77c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d780:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d784:	2b01      	cmp	r3, #1
 800d786:	d110      	bne.n	800d7aa <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800d788:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d78c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d790:	2b01      	cmp	r3, #1
 800d792:	d10a      	bne.n	800d7aa <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800d794:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d798:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800d79c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d7a0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800d7a4:	1cbb      	adds	r3, r7, #2
 800d7a6:	2206      	movs	r2, #6
 800d7a8:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800d7aa:	1cbb      	adds	r3, r7, #2
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	2b05      	cmp	r3, #5
 800d7b2:	d827      	bhi.n	800d804 <VL53L1_init_and_start_range+0x1f0>
 800d7b4:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <VL53L1_init_and_start_range+0x1a8>)
 800d7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ba:	bf00      	nop
 800d7bc:	0800d7fd 	.word	0x0800d7fd
 800d7c0:	0800d7f5 	.word	0x0800d7f5
 800d7c4:	0800d7ed 	.word	0x0800d7ed
 800d7c8:	0800d7e5 	.word	0x0800d7e5
 800d7cc:	0800d7dd 	.word	0x0800d7dd
 800d7d0:	0800d7d5 	.word	0x0800d7d5
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d7da:	e017      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800d7dc:	230d      	movs	r3, #13
 800d7de:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d7e2:	e013      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800d7e4:	2324      	movs	r3, #36	; 0x24
 800d7e6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d7ea:	e00f      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800d7ec:	2344      	movs	r3, #68	; 0x44
 800d7ee:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d7f2:	e00b      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800d7f4:	235a      	movs	r3, #90	; 0x5a
 800d7f6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d7fa:	e007      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800d7fc:	2371      	movs	r3, #113	; 0x71
 800d7fe:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d802:	e003      	b.n	800d80c <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800d804:	2383      	movs	r3, #131	; 0x83
 800d806:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d80a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800d80c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d810:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800d814:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800d818:	f107 030c 	add.w	r3, r7, #12
 800d81c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800d820:	2300      	movs	r3, #0
 800d822:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800d826:	e00b      	b.n	800d840 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800d828:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d82c:	1c5a      	adds	r2, r3, #1
 800d82e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800d832:	2200      	movs	r2, #0
 800d834:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800d836:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800d83a:	3301      	adds	r3, #1
 800d83c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800d840:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800d844:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800d848:	429a      	cmp	r2, r3
 800d84a:	d3ed      	bcc.n	800d828 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800d84c:	1cbb      	adds	r3, r7, #2
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	2b05      	cmp	r3, #5
 800d852:	d917      	bls.n	800d884 <VL53L1_init_and_start_range+0x270>
 800d854:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d113      	bne.n	800d884 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d85c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d860:	f1c3 0301 	rsb	r3, r3, #1
 800d864:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d868:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800d86c:	f107 020c 	add.w	r2, r7, #12
 800d870:	4413      	add	r3, r2
 800d872:	461a      	mov	r2, r3
 800d874:	210b      	movs	r1, #11
 800d876:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800d87a:	f002 f8a7 	bl	800f9cc <VL53L1_i2c_encode_static_nvm_managed>
 800d87e:	4603      	mov	r3, r0
 800d880:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800d884:	1cbb      	adds	r3, r7, #2
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b04      	cmp	r3, #4
 800d88a:	d917      	bls.n	800d8bc <VL53L1_init_and_start_range+0x2a8>
 800d88c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d890:	2b00      	cmp	r3, #0
 800d892:	d113      	bne.n	800d8bc <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d894:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d898:	f1c3 030d 	rsb	r3, r3, #13
 800d89c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d8a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800d8a4:	f107 020c 	add.w	r2, r7, #12
 800d8a8:	4413      	add	r3, r2
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	2117      	movs	r1, #23
 800d8ae:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d8b2:	f002 f967 	bl	800fb84 <VL53L1_i2c_encode_customer_nvm_managed>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800d8bc:	1cbb      	adds	r3, r7, #2
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d917      	bls.n	800d8f4 <VL53L1_init_and_start_range+0x2e0>
 800d8c4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d113      	bne.n	800d8f4 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d8cc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d8d0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800d8d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d8d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800d8dc:	f107 020c 	add.w	r2, r7, #12
 800d8e0:	4413      	add	r3, r2
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2120      	movs	r1, #32
 800d8e6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d8ea:	f002 fa89 	bl	800fe00 <VL53L1_i2c_encode_static_config>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800d8f4:	1cbb      	adds	r3, r7, #2
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d917      	bls.n	800d92c <VL53L1_init_and_start_range+0x318>
 800d8fc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d900:	2b00      	cmp	r3, #0
 800d902:	d113      	bne.n	800d92c <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800d904:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d908:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800d90c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d910:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800d914:	f107 020c 	add.w	r2, r7, #12
 800d918:	4413      	add	r3, r2
 800d91a:	461a      	mov	r2, r3
 800d91c:	2116      	movs	r1, #22
 800d91e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d922:	f002 fb50 	bl	800ffc6 <VL53L1_i2c_encode_general_config>
 800d926:	4603      	mov	r3, r0
 800d928:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800d92c:	1cbb      	adds	r3, r7, #2
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d917      	bls.n	800d964 <VL53L1_init_and_start_range+0x350>
 800d934:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d113      	bne.n	800d964 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d93c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d940:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800d944:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d948:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800d94c:	f107 020c 	add.w	r2, r7, #12
 800d950:	4413      	add	r3, r2
 800d952:	461a      	mov	r2, r3
 800d954:	2117      	movs	r1, #23
 800d956:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d95a:	f002 fbb8 	bl	80100ce <VL53L1_i2c_encode_timing_config>
 800d95e:	4603      	mov	r3, r0
 800d960:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800d964:	1cbb      	adds	r3, r7, #2
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d036      	beq.n	800d9da <VL53L1_init_and_start_range+0x3c6>
 800d96c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d970:	2b00      	cmp	r3, #0
 800d972:	d132      	bne.n	800d9da <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d974:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d978:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800d97c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800d980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d984:	791b      	ldrb	r3, [r3, #4]
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d017      	beq.n	800d9be <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800d98e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d992:	789b      	ldrb	r3, [r3, #2]
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d99e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800d9a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d9a4:	789b      	ldrb	r3, [r3, #2]
 800d9a6:	f043 0301 	orr.w	r3, r3, #1
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d9b0:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800d9b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d9b6:	789a      	ldrb	r2, [r3, #2]
 800d9b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d9bc:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d9be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800d9c2:	f107 020c 	add.w	r2, r7, #12
 800d9c6:	4413      	add	r3, r2
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	2112      	movs	r1, #18
 800d9cc:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800d9d0:	f002 fbff 	bl	80101d2 <VL53L1_i2c_encode_dynamic_config>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800d9da:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d113      	bne.n	800da0a <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800d9e2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d9e6:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800d9ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d9ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800d9f2:	f107 020c 	add.w	r2, r7, #12
 800d9f6:	4413      	add	r3, r2
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	2105      	movs	r1, #5
 800d9fc:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800da00:	f002 fc6c 	bl	80102dc <VL53L1_i2c_encode_system_control>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800da0a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10c      	bne.n	800da2c <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800da12:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800da16:	f107 020c 	add.w	r2, r7, #12
 800da1a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800da1e:	1d38      	adds	r0, r7, #4
 800da20:	6800      	ldr	r0, [r0, #0]
 800da22:	f003 f94b 	bl	8010cbc <VL53L1_WriteMulti>
 800da26:	4603      	mov	r3, r0
 800da28:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800da2c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800da30:	2b00      	cmp	r3, #0
 800da32:	d106      	bne.n	800da42 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800da34:	1d3b      	adds	r3, r7, #4
 800da36:	6818      	ldr	r0, [r3, #0]
 800da38:	f001 f98a 	bl	800ed50 <VL53L1_update_ll_driver_rd_state>
 800da3c:	4603      	mov	r3, r0
 800da3e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800da42:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800da4a:	1d3b      	adds	r3, r7, #4
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	f001 fa52 	bl	800eef6 <VL53L1_update_ll_driver_cfg_state>
 800da52:	4603      	mov	r3, r0
 800da54:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800da58:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop

0800da68 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b0c8      	sub	sp, #288	; 0x120
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	1d3b      	adds	r3, r7, #4
 800da70:	6018      	str	r0, [r3, #0]
 800da72:	460a      	mov	r2, r1
 800da74:	1cfb      	adds	r3, r7, #3
 800da76:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800da78:	2300      	movs	r3, #0
 800da7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800da7e:	1d3b      	adds	r3, r7, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800da86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800da8a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800da8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800da92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800da96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800da9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800da9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800daa2:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800daa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800daaa:	2388      	movs	r3, #136	; 0x88
 800daac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800dabc:	1cfb      	adds	r3, r7, #3
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d008      	beq.n	800dad6 <VL53L1_get_measurement_results+0x6e>
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d10d      	bne.n	800dae4 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800dac8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800dacc:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800dad0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800dad4:	e00a      	b.n	800daec <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800dad6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800dada:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800dade:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800dae2:	e003      	b.n	800daec <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800dae4:	232c      	movs	r3, #44	; 0x2c
 800dae6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800daea:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800daec:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10c      	bne.n	800db0e <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800daf4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800daf8:	f107 0208 	add.w	r2, r7, #8
 800dafc:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800db00:	1d38      	adds	r0, r7, #4
 800db02:	6800      	ldr	r0, [r0, #0]
 800db04:	f003 f910 	bl	8010d28 <VL53L1_ReadMulti>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800db0e:	1cfb      	adds	r3, r7, #3
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d917      	bls.n	800db46 <VL53L1_get_measurement_results+0xde>
 800db16:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d113      	bne.n	800db46 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800db1e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800db22:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800db26:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800db2a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800db2e:	f107 0208 	add.w	r2, r7, #8
 800db32:	4413      	add	r3, r2
 800db34:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800db38:	4619      	mov	r1, r3
 800db3a:	2038      	movs	r0, #56	; 0x38
 800db3c:	f002 fd60 	bl	8010600 <VL53L1_i2c_decode_debug_results>
 800db40:	4603      	mov	r3, r0
 800db42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800db46:	1cfb      	adds	r3, r7, #3
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d017      	beq.n	800db7e <VL53L1_get_measurement_results+0x116>
 800db4e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800db52:	2b00      	cmp	r3, #0
 800db54:	d113      	bne.n	800db7e <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800db56:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800db5a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800db5e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800db62:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800db66:	f107 0208 	add.w	r2, r7, #8
 800db6a:	4413      	add	r3, r2
 800db6c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800db70:	4619      	mov	r1, r3
 800db72:	2021      	movs	r0, #33	; 0x21
 800db74:	f002 fce3 	bl	801053e <VL53L1_i2c_decode_core_results>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800db7e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800db82:	2b00      	cmp	r3, #0
 800db84:	d110      	bne.n	800dba8 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800db8c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800db90:	f107 0208 	add.w	r2, r7, #8
 800db94:	4413      	add	r3, r2
 800db96:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800db9a:	4619      	mov	r1, r3
 800db9c:	202c      	movs	r0, #44	; 0x2c
 800db9e:	f002 fbd8 	bl	8010352 <VL53L1_i2c_decode_system_results>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dba8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b088      	sub	sp, #32
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	607a      	str	r2, [r7, #4]
 800dbc2:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800dbd2:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800dbd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800dbe0:	7afb      	ldrb	r3, [r7, #11]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff ff3f 	bl	800da68 <VL53L1_get_measurement_results>
 800dbea:	4603      	mov	r3, r0
 800dbec:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800dbee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10c      	bne.n	800dc10 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	f000 f85e 	bl	800dccc <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d11f      	bne.n	800dc5a <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800dc1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10e      	bne.n	800dc40 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d109      	bne.n	800dc40 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f001 fe32 	bl	800f896 <VL53L1_low_power_auto_setup_manual_calibration>
 800dc32:	4603      	mov	r3, r0
 800dc34:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800dc3e:	e00c      	b.n	800dc5a <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800dc40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d108      	bne.n	800dc5a <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d103      	bne.n	800dc5a <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	2202      	movs	r2, #2
 800dc56:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800dc6e:	2284      	movs	r2, #132	; 0x84
 800dc70:	6939      	ldr	r1, [r7, #16]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f003 fbd8 	bl	8011428 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800dc78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d104      	bne.n	800dc8a <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f001 f8ed 	bl	800ee60 <VL53L1_check_ll_driver_rd_state>
 800dc86:	4603      	mov	r3, r0
 800dc88:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dc8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3720      	adds	r7, #32
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800dca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d107      	bne.n	800dcbe <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800dcae:	78fb      	ldrb	r3, [r7, #3]
 800dcb0:	2203      	movs	r2, #3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7ff fcad 	bl	800d614 <VL53L1_init_and_start_range>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800dcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b089      	sub	sp, #36	; 0x24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	78da      	ldrb	r2, [r3, #3]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	77fb      	strb	r3, [r7, #31]
 800dcf8:	e0d0      	b.n	800de9c <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	7ffa      	ldrb	r2, [r7, #31]
 800dcfe:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	2200      	movs	r2, #0
 800dd04:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	78db      	ldrb	r3, [r3, #3]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	785b      	ldrb	r3, [r3, #1]
 800dd12:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800dd16:	2b09      	cmp	r3, #9
 800dd18:	d104      	bne.n	800dd24 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	2213      	movs	r2, #19
 800dd1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd22:	e007      	b.n	800dd34 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	785b      	ldrb	r3, [r3, #1]
 800dd28:	f003 031f 	and.w	r3, r3, #31
 800dd2c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800dd34:	7ffb      	ldrb	r3, [r7, #31]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d05d      	beq.n	800ddfa <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800dd3e:	e0a7      	b.n	800de90 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	789b      	ldrb	r3, [r3, #2]
 800dd44:	2b07      	cmp	r3, #7
 800dd46:	d104      	bne.n	800dd52 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	821a      	strh	r2, [r3, #16]
 800dd50:	e00c      	b.n	800dd6c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	789b      	ldrb	r3, [r3, #2]
 800dd56:	2b08      	cmp	r3, #8
 800dd58:	d104      	bne.n	800dd64 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	821a      	strh	r2, [r3, #16]
 800dd62:	e003      	b.n	800dd6c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	895b      	ldrh	r3, [r3, #10]
 800dd88:	015b      	lsls	r3, r3, #5
 800dd8a:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd92:	d302      	bcc.n	800dd9a <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800dd94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd98:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800ddae:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	fb02 f303 	mul.w	r3, r2, r3
 800ddb8:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddc0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	da01      	bge.n	800ddcc <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800ddc8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ddcc:	12db      	asrs	r3, r3, #11
 800ddce:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	b21a      	sxth	r2, r3
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	621a      	str	r2, [r3, #32]

			break;
 800ddf8:	e04a      	b.n	800de90 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de10:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	8bdb      	ldrh	r3, [r3, #30]
 800de1e:	015b      	lsls	r3, r3, #5
 800de20:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de28:	d302      	bcc.n	800de30 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800de2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de2e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	b29a      	uxth	r2, r3
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800de44:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	fb02 f303 	mul.w	r3, r2, r3
 800de4e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de56:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da01      	bge.n	800de62 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800de5e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800de62:	12db      	asrs	r3, r3, #11
 800de64:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	b21a      	sxth	r2, r3
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	621a      	str	r2, [r3, #32]

			break;
 800de8e:	bf00      	nop
		}

		pdata++;
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	3340      	adds	r3, #64	; 0x40
 800de94:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800de96:	7ffb      	ldrb	r3, [r7, #31]
 800de98:	3301      	adds	r3, #1
 800de9a:	77fb      	strb	r3, [r7, #31]
 800de9c:	7ffb      	ldrb	r3, [r7, #31]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	f67f af2b 	bls.w	800dcfa <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	2200      	movs	r2, #0
 800dea8:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	785b      	ldrb	r3, [r3, #1]
 800deae:	f003 031f 	and.w	r3, r3, #31
 800deb2:	2b11      	cmp	r3, #17
 800deb4:	bf8c      	ite	hi
 800deb6:	2201      	movhi	r2, #1
 800deb8:	2200      	movls	r2, #0
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	2a00      	cmp	r2, #0
 800debe:	d116      	bne.n	800deee <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800dec0:	2201      	movs	r2, #1
 800dec2:	409a      	lsls	r2, r3
 800dec4:	4b0d      	ldr	r3, [pc, #52]	; (800defc <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800dec6:	4013      	ands	r3, r2
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bf14      	ite	ne
 800decc:	2301      	movne	r3, #1
 800dece:	2300      	moveq	r3, #0
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00b      	beq.n	800deee <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	785b      	ldrb	r3, [r3, #1]
 800deda:	f003 031f 	and.w	r3, r3, #31
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800deec:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800deee:	bf00      	nop
 800def0:	3724      	adds	r7, #36	; 0x24
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	0002200e 	.word	0x0002200e

0800df00 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800df00:	b480      	push	{r7}
 800df02:	b087      	sub	sp, #28
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	460b      	mov	r3, r1
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df0e:	2300      	movs	r3, #0
 800df10:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800df1c:	2b38      	cmp	r3, #56	; 0x38
 800df1e:	f200 8204 	bhi.w	800e32a <VL53L1_get_tuning_parm+0x42a>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <VL53L1_get_tuning_parm+0x28>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800e00d 	.word	0x0800e00d
 800df2c:	0800e01b 	.word	0x0800e01b
 800df30:	0800e029 	.word	0x0800e029
 800df34:	0800e037 	.word	0x0800e037
 800df38:	0800e045 	.word	0x0800e045
 800df3c:	0800e053 	.word	0x0800e053
 800df40:	0800e061 	.word	0x0800e061
 800df44:	0800e06f 	.word	0x0800e06f
 800df48:	0800e07d 	.word	0x0800e07d
 800df4c:	0800e08b 	.word	0x0800e08b
 800df50:	0800e099 	.word	0x0800e099
 800df54:	0800e0a7 	.word	0x0800e0a7
 800df58:	0800e0b5 	.word	0x0800e0b5
 800df5c:	0800e0c3 	.word	0x0800e0c3
 800df60:	0800e0d1 	.word	0x0800e0d1
 800df64:	0800e0df 	.word	0x0800e0df
 800df68:	0800e0ed 	.word	0x0800e0ed
 800df6c:	0800e0fb 	.word	0x0800e0fb
 800df70:	0800e109 	.word	0x0800e109
 800df74:	0800e117 	.word	0x0800e117
 800df78:	0800e125 	.word	0x0800e125
 800df7c:	0800e133 	.word	0x0800e133
 800df80:	0800e141 	.word	0x0800e141
 800df84:	0800e14f 	.word	0x0800e14f
 800df88:	0800e15d 	.word	0x0800e15d
 800df8c:	0800e16b 	.word	0x0800e16b
 800df90:	0800e179 	.word	0x0800e179
 800df94:	0800e187 	.word	0x0800e187
 800df98:	0800e195 	.word	0x0800e195
 800df9c:	0800e1a3 	.word	0x0800e1a3
 800dfa0:	0800e1b1 	.word	0x0800e1b1
 800dfa4:	0800e1bf 	.word	0x0800e1bf
 800dfa8:	0800e1cd 	.word	0x0800e1cd
 800dfac:	0800e1db 	.word	0x0800e1db
 800dfb0:	0800e1e9 	.word	0x0800e1e9
 800dfb4:	0800e1f7 	.word	0x0800e1f7
 800dfb8:	0800e205 	.word	0x0800e205
 800dfbc:	0800e213 	.word	0x0800e213
 800dfc0:	0800e221 	.word	0x0800e221
 800dfc4:	0800e22f 	.word	0x0800e22f
 800dfc8:	0800e23d 	.word	0x0800e23d
 800dfcc:	0800e24b 	.word	0x0800e24b
 800dfd0:	0800e259 	.word	0x0800e259
 800dfd4:	0800e267 	.word	0x0800e267
 800dfd8:	0800e275 	.word	0x0800e275
 800dfdc:	0800e283 	.word	0x0800e283
 800dfe0:	0800e291 	.word	0x0800e291
 800dfe4:	0800e29f 	.word	0x0800e29f
 800dfe8:	0800e2ad 	.word	0x0800e2ad
 800dfec:	0800e2bb 	.word	0x0800e2bb
 800dff0:	0800e2c9 	.word	0x0800e2c9
 800dff4:	0800e2d7 	.word	0x0800e2d7
 800dff8:	0800e2e5 	.word	0x0800e2e5
 800dffc:	0800e2f3 	.word	0x0800e2f3
 800e000:	0800e301 	.word	0x0800e301
 800e004:	0800e30f 	.word	0x0800e30f
 800e008:	0800e31d 	.word	0x0800e31d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800e012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	601a      	str	r2, [r3, #0]
	break;
 800e018:	e18e      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800e020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	601a      	str	r2, [r3, #0]
	break;
 800e026:	e187      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e02e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
	break;
 800e034:	e180      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e03c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	601a      	str	r2, [r3, #0]
	break;
 800e042:	e179      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e04a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	601a      	str	r2, [r3, #0]
	break;
 800e050:	e172      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800e058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	601a      	str	r2, [r3, #0]
	break;
 800e05e:	e16b      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	601a      	str	r2, [r3, #0]
	break;
 800e06c:	e164      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800e074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
	break;
 800e07a:	e15d      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	601a      	str	r2, [r3, #0]
	break;
 800e088:	e156      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	601a      	str	r2, [r3, #0]
	break;
 800e096:	e14f      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800e09e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	601a      	str	r2, [r3, #0]
	break;
 800e0a4:	e148      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e0ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	601a      	str	r2, [r3, #0]
	break;
 800e0b2:	e141      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e0ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	601a      	str	r2, [r3, #0]
	break;
 800e0c0:	e13a      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800e0c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
	break;
 800e0ce:	e133      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800e0d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	601a      	str	r2, [r3, #0]
	break;
 800e0dc:	e12c      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800e0e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	601a      	str	r2, [r3, #0]
	break;
 800e0ea:	e125      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800e0f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]
	break;
 800e0f8:	e11e      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	601a      	str	r2, [r3, #0]
	break;
 800e106:	e117      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800e10e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	601a      	str	r2, [r3, #0]
	break;
 800e114:	e110      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800e11c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	601a      	str	r2, [r3, #0]
	break;
 800e122:	e109      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800e12a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	601a      	str	r2, [r3, #0]
	break;
 800e130:	e102      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800e138:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	601a      	str	r2, [r3, #0]
	break;
 800e13e:	e0fb      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800e146:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	601a      	str	r2, [r3, #0]
	break;
 800e14c:	e0f4      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800e154:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	601a      	str	r2, [r3, #0]
	break;
 800e15a:	e0ed      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800e162:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	601a      	str	r2, [r3, #0]
	break;
 800e168:	e0e6      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	601a      	str	r2, [r3, #0]
	break;
 800e176:	e0df      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800e17e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	601a      	str	r2, [r3, #0]
	break;
 800e184:	e0d8      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800e18c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	601a      	str	r2, [r3, #0]
	break;
 800e192:	e0d1      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800e19a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]
	break;
 800e1a0:	e0ca      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e1a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
	break;
 800e1ae:	e0c3      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800e1b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	601a      	str	r2, [r3, #0]
	break;
 800e1bc:	e0bc      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800e1c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	601a      	str	r2, [r3, #0]
	break;
 800e1ca:	e0b5      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e1d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	601a      	str	r2, [r3, #0]
	break;
 800e1d8:	e0ae      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800e1e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	601a      	str	r2, [r3, #0]
	break;
 800e1e6:	e0a7      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800e1ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	601a      	str	r2, [r3, #0]
	break;
 800e1f4:	e0a0      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800e1fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	601a      	str	r2, [r3, #0]
	break;
 800e202:	e099      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800e20a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
	break;
 800e210:	e092      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800e218:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	601a      	str	r2, [r3, #0]
	break;
 800e21e:	e08b      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e226:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	601a      	str	r2, [r3, #0]
	break;
 800e22c:	e084      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800e234:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	601a      	str	r2, [r3, #0]
	break;
 800e23a:	e07d      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e242:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	601a      	str	r2, [r3, #0]
	break;
 800e248:	e076      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800e250:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	601a      	str	r2, [r3, #0]
	break;
 800e256:	e06f      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800e25e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	601a      	str	r2, [r3, #0]
	break;
 800e264:	e068      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800e26c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	601a      	str	r2, [r3, #0]
	break;
 800e272:	e061      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800e27a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
	break;
 800e280:	e05a      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800e288:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	601a      	str	r2, [r3, #0]
	break;
 800e28e:	e053      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800e296:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	601a      	str	r2, [r3, #0]
	break;
 800e29c:	e04c      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800e2a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	601a      	str	r2, [r3, #0]
	break;
 800e2aa:	e045      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e2b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	601a      	str	r2, [r3, #0]
	break;
 800e2b8:	e03e      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e2c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	601a      	str	r2, [r3, #0]
	break;
 800e2c6:	e037      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e2ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	601a      	str	r2, [r3, #0]
	break;
 800e2d4:	e030      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e2dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	601a      	str	r2, [r3, #0]
	break;
 800e2e2:	e029      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e2ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	601a      	str	r2, [r3, #0]
	break;
 800e2f0:	e022      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e2f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	601a      	str	r2, [r3, #0]
	break;
 800e2fe:	e01b      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e306:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	601a      	str	r2, [r3, #0]
	break;
 800e30c:	e014      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e314:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	601a      	str	r2, [r3, #0]
	break;
 800e31a:	e00d      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e322:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]
	break;
 800e328:	e006      	b.n	800e338 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e330:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800e332:	23fc      	movs	r3, #252	; 0xfc
 800e334:	75fb      	strb	r3, [r7, #23]
	break;
 800e336:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800e338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	371c      	adds	r7, #28
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e350:	2300      	movs	r3, #0
 800e352:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2208      	movs	r2, #8
 800e358:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	220b      	movs	r2, #11
 800e35e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e366:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e36e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800e376:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800e37e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e398:	2300      	movs	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2212      	movs	r2, #18
 800e3a6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	220f      	movs	r2, #15
 800e3ac:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2202      	movs	r2, #2
 800e3b2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800e3ba:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	220c      	movs	r2, #12
 800e3c0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3714      	adds	r7, #20
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	895b      	ldrh	r3, [r3, #10]
 800e3e4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	895b      	ldrh	r3, [r3, #10]
 800e402:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2200      	movs	r2, #0
 800e420:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2240      	movs	r2, #64	; 0x40
 800e426:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10d      	bne.n	800e44c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d108      	bne.n	800e44c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d103      	bne.n	800e44c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2200      	movs	r2, #0
 800e448:	741a      	strb	r2, [r3, #16]
 800e44a:	e002      	b.n	800e452 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2201      	movs	r2, #1
 800e450:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800e452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d114      	bne.n	800e484 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d110      	bne.n	800e484 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	6818      	ldr	r0, [r3, #0]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	f000 ffc9 	bl	800f40c <VL53L1_calc_range_ignore_threshold>
 800e47a:	4603      	mov	r3, r0
 800e47c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	82da      	strh	r2, [r3, #22]
 800e482:	e002      	b.n	800e48a <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2200      	movs	r2, #0
 800e488:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800e496:	b480      	push	{r7}
 800e498:	b085      	sub	sp, #20
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e4a8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4b0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e4b8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e4c0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2208      	movs	r2, #8
 800e4c6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2228      	movs	r2, #40	; 0x28
 800e4cc:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2209      	movs	r2, #9
 800e4d2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f248 0203 	movw	r2, #32771	; 0x8003
 800e4f6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f248 0201 	movw	r2, #32769	; 0x8001
 800e4fe:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f248 0241 	movw	r2, #32833	; 0x8041
 800e506:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	220e      	movs	r2, #14
 800e50c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	220a      	movs	r2, #10
 800e512:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2206      	movs	r2, #6
 800e518:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	220e      	movs	r2, #14
 800e51e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	220a      	movs	r2, #10
 800e524:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2206      	movs	r2, #6
 800e52a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2202      	movs	r2, #2
 800e530:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2221      	movs	r2, #33	; 0x21
 800e536:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e54a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e552:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e55a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	22c0      	movs	r2, #192	; 0xc0
 800e560:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	22c0      	movs	r2, #192	; 0xc0
 800e566:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	22c0      	movs	r2, #192	; 0xc0
 800e56c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2208      	movs	r2, #8
 800e572:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2210      	movs	r2, #16
 800e578:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2202      	movs	r2, #2
 800e586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2202      	movs	r2, #2
 800e596:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e5a8:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e5b0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f248 0230 	movw	r2, #32816	; 0x8030
 800e5b8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e5c0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e5c8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e5d0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800e5d8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e5e0:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800e5e8:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e5f0:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800e5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e602:	b480      	push	{r7}
 800e604:	b087      	sub	sp, #28
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
 800e60e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e610:	2300      	movs	r3, #0
 800e612:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e61a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2211      	movs	r2, #17
 800e65c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2202      	movs	r2, #2
 800e662:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2202      	movs	r2, #2
 800e66e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2208      	movs	r2, #8
 800e674:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2201      	movs	r2, #1
 800e69a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	22ff      	movs	r2, #255	; 0xff
 800e6b2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	220b      	movs	r2, #11
 800e6ec:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	220d      	movs	r2, #13
 800e700:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	2200      	movs	r2, #0
 800e70e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2201      	movs	r2, #1
 800e714:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2200      	movs	r2, #0
 800e71a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2200      	movs	r2, #0
 800e720:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800e728:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2200      	movs	r2, #0
 800e72e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2238      	movs	r2, #56	; 0x38
 800e734:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	22ff      	movs	r2, #255	; 0xff
 800e73a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2201      	movs	r2, #1
 800e740:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	221a      	movs	r2, #26
 800e74c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2220      	movs	r2, #32
 800e758:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2201      	movs	r2, #1
 800e75e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	22cc      	movs	r2, #204	; 0xcc
 800e764:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	220b      	movs	r2, #11
 800e76a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	22f5      	movs	r2, #245	; 0xf5
 800e776:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2209      	movs	r2, #9
 800e77c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2208      	movs	r2, #8
 800e792:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2278      	movs	r2, #120	; 0x78
 800e798:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	220b      	movs	r2, #11
 800e7cc:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	2209      	movs	r2, #9
 800e7d2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	22c7      	movs	r2, #199	; 0xc7
 800e802:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	22ff      	movs	r2, #255	; 0xff
 800e808:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	22db      	movs	r2, #219	; 0xdb
 800e80e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	2202      	movs	r2, #2
 800e814:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	2200      	movs	r2, #0
 800e81a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	2201      	movs	r2, #1
 800e820:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	2201      	movs	r2, #1
 800e826:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800e828:	6a3b      	ldr	r3, [r7, #32]
 800e82a:	2221      	movs	r2, #33	; 0x21
 800e82c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800e82e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e832:	4618      	mov	r0, r3
 800e834:	371c      	adds	r7, #28
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b088      	sub	sp, #32
 800e842:	af02      	add	r7, sp, #8
 800e844:	60f8      	str	r0, [r7, #12]
 800e846:	60b9      	str	r1, [r7, #8]
 800e848:	607a      	str	r2, [r7, #4]
 800e84a:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	68b9      	ldr	r1, [r7, #8]
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f7ff fecf 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800e864:	4603      	mov	r3, r0
 800e866:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d121      	bne.n	800e8b4 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2207      	movs	r2, #7
 800e874:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2205      	movs	r2, #5
 800e87a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800e87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2208      	movs	r2, #8
 800e890:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2238      	movs	r2, #56	; 0x38
 800e896:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2207      	movs	r2, #7
 800e89c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2205      	movs	r2, #5
 800e8a2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e8b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	9301      	str	r3, [sp, #4]
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	68b9      	ldr	r1, [r7, #8]
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f7ff fe8e 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d121      	bne.n	800e936 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	220f      	movs	r2, #15
 800e8f6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	220d      	movs	r2, #13
 800e8fc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2208      	movs	r2, #8
 800e912:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	22b8      	movs	r2, #184	; 0xb8
 800e918:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	220f      	movs	r2, #15
 800e91e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	220d      	movs	r2, #13
 800e924:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b088      	sub	sp, #32
 800e946:	af02      	add	r7, sp, #8
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e950:	2300      	movs	r3, #0
 800e952:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f7ff fe4d 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800e968:	4603      	mov	r3, r0
 800e96a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d105      	bne.n	800e980 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	2202      	movs	r2, #2
 800e978:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	223b      	movs	r2, #59	; 0x3b
 800e97e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b088      	sub	sp, #32
 800e990:	af02      	add	r7, sp, #8
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
 800e998:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e99a:	2300      	movs	r3, #0
 800e99c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	9301      	str	r3, [sp, #4]
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	68b9      	ldr	r1, [r7, #8]
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fe28 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d105      	bne.n	800e9ca <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	225b      	movs	r2, #91	; 0x5b
 800e9c8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e9ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3718      	adds	r7, #24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b088      	sub	sp, #32
 800e9da:	af02      	add	r7, sp, #8
 800e9dc:	60f8      	str	r0, [r7, #12]
 800e9de:	60b9      	str	r1, [r7, #8]
 800e9e0:	607a      	str	r2, [r7, #4]
 800e9e2:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	68b9      	ldr	r1, [r7, #8]
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fe03 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ea00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d11a      	bne.n	800ea3e <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	22b1      	movs	r2, #177	; 0xb1
 800ea18:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	22d4      	movs	r2, #212	; 0xd4
 800ea24:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ea2c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	2240      	movs	r2, #64	; 0x40
 800ea3c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ea3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b088      	sub	sp, #32
 800ea4e:	af02      	add	r7, sp, #8
 800ea50:	60f8      	str	r0, [r7, #12]
 800ea52:	60b9      	str	r1, [r7, #8]
 800ea54:	607a      	str	r2, [r7, #4]
 800ea56:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	68b9      	ldr	r1, [r7, #8]
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7ff fee7 	bl	800e83e <VL53L1_preset_mode_standard_ranging_short_range>
 800ea70:	4603      	mov	r3, r0
 800ea72:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ea74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d11a      	bne.n	800eab2 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2284      	movs	r2, #132	; 0x84
 800ea8c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	22b1      	movs	r2, #177	; 0xb1
 800ea98:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800eaa0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800eaac:	6a3b      	ldr	r3, [r7, #32]
 800eaae:	2240      	movs	r2, #64	; 0x40
 800eab0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800eab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b088      	sub	sp, #32
 800eac2:	af02      	add	r7, sp, #8
 800eac4:	60f8      	str	r0, [r7, #12]
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	607a      	str	r2, [r7, #4]
 800eaca:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800eacc:	2300      	movs	r3, #0
 800eace:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	68b9      	ldr	r1, [r7, #8]
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f7ff feee 	bl	800e8c0 <VL53L1_preset_mode_standard_ranging_long_range>
 800eae4:	4603      	mov	r3, r0
 800eae6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800eae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d11a      	bne.n	800eb26 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2297      	movs	r2, #151	; 0x97
 800eb00:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	22b1      	movs	r2, #177	; 0xb1
 800eb0c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800eb14:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb18:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800eb20:	6a3b      	ldr	r3, [r7, #32]
 800eb22:	2240      	movs	r2, #64	; 0x40
 800eb24:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b088      	sub	sp, #32
 800eb36:	af02      	add	r7, sp, #8
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
 800eb3e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800eb40:	2300      	movs	r3, #0
 800eb42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	68b9      	ldr	r1, [r7, #8]
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7ff ff3f 	bl	800e9d6 <VL53L1_preset_mode_timed_ranging>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800eb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800eb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb66:	6839      	ldr	r1, [r7, #0]
 800eb68:	68b8      	ldr	r0, [r7, #8]
 800eb6a:	f000 fe7b 	bl	800f864 <VL53L1_config_low_power_auto_mode>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b088      	sub	sp, #32
 800eb82:	af02      	add	r7, sp, #8
 800eb84:	60f8      	str	r0, [r7, #12]
 800eb86:	60b9      	str	r1, [r7, #8]
 800eb88:	607a      	str	r2, [r7, #4]
 800eb8a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	68b9      	ldr	r1, [r7, #8]
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff ff53 	bl	800ea4a <VL53L1_preset_mode_timed_ranging_short_range>
 800eba4:	4603      	mov	r3, r0
 800eba6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800eba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d106      	bne.n	800ebbe <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ebb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb2:	6839      	ldr	r1, [r7, #0]
 800ebb4:	68b8      	ldr	r0, [r7, #8]
 800ebb6:	f000 fe55 	bl	800f864 <VL53L1_config_low_power_auto_mode>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ebbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3718      	adds	r7, #24
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b088      	sub	sp, #32
 800ebce:	af02      	add	r7, sp, #8
 800ebd0:	60f8      	str	r0, [r7, #12]
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	607a      	str	r2, [r7, #4]
 800ebd6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	9301      	str	r3, [sp, #4]
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	68b9      	ldr	r1, [r7, #8]
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f7ff ff67 	bl	800eabe <VL53L1_preset_mode_timed_ranging_long_range>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ebf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d106      	bne.n	800ec0a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ebfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	68b8      	ldr	r0, [r7, #8]
 800ec02:	f000 fe2f 	bl	800f864 <VL53L1_config_low_power_auto_mode>
 800ec06:	4603      	mov	r3, r0
 800ec08:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ec0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b088      	sub	sp, #32
 800ec1a:	af02      	add	r7, sp, #8
 800ec1c:	60f8      	str	r0, [r7, #12]
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
 800ec22:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	68b9      	ldr	r1, [r7, #8]
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f7ff fce3 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ec40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d116      	bne.n	800ec76 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	22b1      	movs	r2, #177	; 0xb1
 800ec58:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	22d4      	movs	r2, #212	; 0xd4
 800ec64:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	2210      	movs	r2, #16
 800ec74:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ec76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b088      	sub	sp, #32
 800ec86:	af02      	add	r7, sp, #8
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	6a3b      	ldr	r3, [r7, #32]
 800ec9a:	9300      	str	r3, [sp, #0]
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	68b9      	ldr	r1, [r7, #8]
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff fcad 	bl	800e602 <VL53L1_preset_mode_standard_ranging>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ecac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ecba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b085      	sub	sp, #20
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2202      	movs	r2, #2
 800ecde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	220d      	movs	r2, #13
 800ece6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f640 028e 	movw	r2, #2190	; 0x88e
 800ecf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ecf2:	bf00      	nop
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	332c      	adds	r3, #44	; 0x2c
 800ed12:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	78fa      	ldrb	r2, [r7, #3]
 800ed18:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2202      	movs	r2, #2
 800ed24:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	78fa      	ldrb	r2, [r7, #3]
 800ed30:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2200      	movs	r2, #0
 800ed36:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2200      	movs	r2, #0
 800ed42:	71da      	strb	r2, [r3, #7]

}
 800ed44:	bf00      	nop
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b087      	sub	sp, #28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	332c      	adds	r3, #44	; 0x2c
 800ed64:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ed6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10c      	bne.n	800ed8e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2203      	movs	r2, #3
 800ed78:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2202      	movs	r2, #2
 800ed84:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	71da      	strb	r2, [r3, #7]
 800ed8c:	e060      	b.n	800ee50 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	795b      	ldrb	r3, [r3, #5]
 800ed92:	2bff      	cmp	r3, #255	; 0xff
 800ed94:	d103      	bne.n	800ed9e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2280      	movs	r2, #128	; 0x80
 800ed9a:	715a      	strb	r2, [r3, #5]
 800ed9c:	e005      	b.n	800edaa <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	795b      	ldrb	r3, [r3, #5]
 800eda2:	3301      	adds	r3, #1
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	799b      	ldrb	r3, [r3, #6]
 800edae:	f083 0302 	eor.w	r3, r3, #2
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	791b      	ldrb	r3, [r3, #4]
 800edbc:	3b03      	subs	r3, #3
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d839      	bhi.n	800ee36 <VL53L1_update_ll_driver_rd_state+0xe6>
 800edc2:	a201      	add	r2, pc, #4	; (adr r2, 800edc8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800edc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc8:	0800ede1 	.word	0x0800ede1
 800edcc:	0800ee37 	.word	0x0800ee37
 800edd0:	0800ee37 	.word	0x0800ee37
 800edd4:	0800ee0b 	.word	0x0800ee0b
 800edd8:	0800ee19 	.word	0x0800ee19
 800eddc:	0800ee21 	.word	0x0800ee21

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800ede6:	f003 0302 	and.w	r3, r3, #2
 800edea:	2b00      	cmp	r3, #0
 800edec:	dd03      	ble.n	800edf6 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2206      	movs	r2, #6
 800edf2:	711a      	strb	r2, [r3, #4]
 800edf4:	e002      	b.n	800edfc <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2208      	movs	r2, #8
 800edfa:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	71da      	strb	r2, [r3, #7]

		break;
 800ee08:	e022      	b.n	800ee50 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2208      	movs	r2, #8
 800ee14:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800ee16:	e01b      	b.n	800ee50 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2208      	movs	r2, #8
 800ee1c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800ee1e:	e017      	b.n	800ee50 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	79db      	ldrb	r3, [r3, #7]
 800ee24:	f083 0301 	eor.w	r3, r3, #1
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2208      	movs	r2, #8
 800ee32:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800ee34:	e00c      	b.n	800ee50 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2203      	movs	r2, #3
 800ee3a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2202      	movs	r2, #2
 800ee46:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	71da      	strb	r2, [r3, #7]

		break;
 800ee4e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ee50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b089      	sub	sp, #36	; 0x24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	332c      	adds	r3, #44	; 0x2c
 800ee74:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ee7c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800ee86:	2300      	movs	r3, #0
 800ee88:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ee8e:	f003 031f 	and.w	r3, r3, #31
 800ee92:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	78db      	ldrb	r3, [r3, #3]
 800ee98:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ee9e:	111b      	asrs	r3, r3, #4
 800eea0:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800eea2:	f003 0302 	and.w	r3, r3, #2
 800eea6:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d017      	beq.n	800eee6 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	791b      	ldrb	r3, [r3, #4]
 800eeba:	2b06      	cmp	r3, #6
 800eebc:	d105      	bne.n	800eeca <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
 800eec0:	2b12      	cmp	r3, #18
 800eec2:	d010      	beq.n	800eee6 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800eec4:	23ef      	movs	r3, #239	; 0xef
 800eec6:	77fb      	strb	r3, [r7, #31]
 800eec8:	e00d      	b.n	800eee6 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	795b      	ldrb	r3, [r3, #5]
 800eece:	7bba      	ldrb	r2, [r7, #14]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d001      	beq.n	800eed8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800eed4:	23ee      	movs	r3, #238	; 0xee
 800eed6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	799b      	ldrb	r3, [r3, #6]
 800eedc:	7b7a      	ldrb	r2, [r7, #13]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d001      	beq.n	800eee6 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800eee2:	23ed      	movs	r3, #237	; 0xed
 800eee4:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800eee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3724      	adds	r7, #36	; 0x24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800eef6:	b480      	push	{r7}
 800eef8:	b087      	sub	sp, #28
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800eefe:	2300      	movs	r3, #0
 800ef00:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	332c      	adds	r3, #44	; 0x2c
 800ef0a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ef12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d10c      	bne.n	800ef34 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2203      	movs	r2, #3
 800ef1e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2200      	movs	r2, #0
 800ef24:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2202      	movs	r2, #2
 800ef2a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	70da      	strb	r2, [r3, #3]
 800ef32:	e03e      	b.n	800efb2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	785b      	ldrb	r3, [r3, #1]
 800ef38:	2bff      	cmp	r3, #255	; 0xff
 800ef3a:	d103      	bne.n	800ef44 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2280      	movs	r2, #128	; 0x80
 800ef40:	705a      	strb	r2, [r3, #1]
 800ef42:	e005      	b.n	800ef50 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	789b      	ldrb	r3, [r3, #2]
 800ef54:	f083 0302 	eor.w	r3, r3, #2
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d002      	beq.n	800ef6c <VL53L1_update_ll_driver_cfg_state+0x76>
 800ef66:	2b04      	cmp	r3, #4
 800ef68:	d00e      	beq.n	800ef88 <VL53L1_update_ll_driver_cfg_state+0x92>
 800ef6a:	e015      	b.n	800ef98 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	78db      	ldrb	r3, [r3, #3]
 800ef70:	f083 0301 	eor.w	r3, r3, #1
 800ef74:	b2da      	uxtb	r2, r3
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2204      	movs	r2, #4
 800ef84:	701a      	strb	r2, [r3, #0]
		break;
 800ef86:	e014      	b.n	800efb2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	78db      	ldrb	r3, [r3, #3]
 800ef8c:	f083 0301 	eor.w	r3, r3, #1
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	70da      	strb	r2, [r3, #3]

		break;
 800ef96:	e00c      	b.n	800efb2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2203      	movs	r2, #3
 800ef9c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2200      	movs	r2, #0
 800efa2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2202      	movs	r2, #2
 800efa8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2200      	movs	r2, #0
 800efae:	70da      	strb	r2, [r3, #3]

		break;
 800efb0:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800efb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	371c      	adds	r7, #28
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr

0800efc2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800efc2:	b480      	push	{r7}
 800efc4:	b083      	sub	sp, #12
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
 800efca:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	7c1a      	ldrb	r2, [r3, #16]
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	3301      	adds	r3, #1
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	7c52      	ldrb	r2, [r2, #17]
 800efdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	3302      	adds	r3, #2
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	7c92      	ldrb	r2, [r2, #18]
 800efe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	3303      	adds	r3, #3
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	7cd2      	ldrb	r2, [r2, #19]
 800eff0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	3304      	adds	r3, #4
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	7d12      	ldrb	r2, [r2, #20]
 800effa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	3305      	adds	r3, #5
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	7d52      	ldrb	r2, [r2, #21]
 800f004:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	3306      	adds	r3, #6
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	7d92      	ldrb	r2, [r2, #22]
 800f00e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	3307      	adds	r3, #7
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	7dd2      	ldrb	r2, [r2, #23]
 800f018:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	3308      	adds	r3, #8
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	7e12      	ldrb	r2, [r2, #24]
 800f022:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	3309      	adds	r3, #9
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	7e52      	ldrb	r2, [r2, #25]
 800f02c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	330a      	adds	r3, #10
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	7e92      	ldrb	r2, [r2, #26]
 800f036:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	330b      	adds	r3, #11
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	7ed2      	ldrb	r2, [r2, #27]
 800f040:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	330c      	adds	r3, #12
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	7f12      	ldrb	r2, [r2, #28]
 800f04a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	330d      	adds	r3, #13
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	7f52      	ldrb	r2, [r2, #29]
 800f054:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	330e      	adds	r3, #14
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	7f92      	ldrb	r2, [r2, #30]
 800f05e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	330f      	adds	r3, #15
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	7fd2      	ldrb	r2, [r2, #31]
 800f068:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	3310      	adds	r3, #16
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f074:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	3311      	adds	r3, #17
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800f080:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	3312      	adds	r3, #18
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800f08c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	3313      	adds	r3, #19
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800f098:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	3314      	adds	r3, #20
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800f0a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	3315      	adds	r3, #21
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f0b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	3316      	adds	r3, #22
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800f0bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	3317      	adds	r3, #23
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800f0c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	3318      	adds	r3, #24
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800f0d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	3319      	adds	r3, #25
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f0e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	331a      	adds	r3, #26
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800f0ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	331b      	adds	r3, #27
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800f0f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	331c      	adds	r3, #28
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800f104:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	331d      	adds	r3, #29
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800f110:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	331e      	adds	r3, #30
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800f11c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	331f      	adds	r3, #31
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800f128:	701a      	strb	r2, [r3, #0]
}
 800f12a:	bf00      	nop
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f136:	b480      	push	{r7}
 800f138:	b085      	sub	sp, #20
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	4603      	mov	r3, r0
 800f13e:	603a      	str	r2, [r7, #0]
 800f140:	80fb      	strh	r3, [r7, #6]
 800f142:	460b      	mov	r3, r1
 800f144:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800f146:	2300      	movs	r3, #0
 800f148:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800f14e:	88fb      	ldrh	r3, [r7, #6]
 800f150:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800f152:	2300      	movs	r3, #0
 800f154:	81fb      	strh	r3, [r7, #14]
 800f156:	e00e      	b.n	800f176 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800f158:	88ba      	ldrh	r2, [r7, #4]
 800f15a:	89fb      	ldrh	r3, [r7, #14]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	3b01      	subs	r3, #1
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	4413      	add	r3, r2
 800f164:	89ba      	ldrh	r2, [r7, #12]
 800f166:	b2d2      	uxtb	r2, r2
 800f168:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800f16a:	89bb      	ldrh	r3, [r7, #12]
 800f16c:	0a1b      	lsrs	r3, r3, #8
 800f16e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800f170:	89fb      	ldrh	r3, [r7, #14]
 800f172:	3301      	adds	r3, #1
 800f174:	81fb      	strh	r3, [r7, #14]
 800f176:	89fa      	ldrh	r2, [r7, #14]
 800f178:	88bb      	ldrh	r3, [r7, #4]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d3ec      	bcc.n	800f158 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800f17e:	bf00      	nop
 800f180:	bf00      	nop
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	6039      	str	r1, [r7, #0]
 800f196:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800f198:	2300      	movs	r3, #0
 800f19a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800f19c:	e00a      	b.n	800f1b4 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800f19e:	89fb      	ldrh	r3, [r7, #14]
 800f1a0:	021b      	lsls	r3, r3, #8
 800f1a2:	b21a      	sxth	r2, r3
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	1c59      	adds	r1, r3, #1
 800f1a8:	6039      	str	r1, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	b21b      	sxth	r3, r3
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	b21b      	sxth	r3, r3
 800f1b2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800f1b4:	88fb      	ldrh	r3, [r7, #6]
 800f1b6:	1e5a      	subs	r2, r3, #1
 800f1b8:	80fa      	strh	r2, [r7, #6]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1ef      	bne.n	800f19e <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800f1be:	89fb      	ldrh	r3, [r7, #14]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3714      	adds	r7, #20
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	603a      	str	r2, [r7, #0]
 800f1d6:	80fb      	strh	r3, [r7, #6]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800f1e4:	88fb      	ldrh	r3, [r7, #6]
 800f1e6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	81fb      	strh	r3, [r7, #14]
 800f1ec:	e00f      	b.n	800f20e <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800f1ee:	88ba      	ldrh	r2, [r7, #4]
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	89ba      	ldrh	r2, [r7, #12]
 800f1fc:	b2d2      	uxtb	r2, r2
 800f1fe:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800f200:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f204:	121b      	asrs	r3, r3, #8
 800f206:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800f208:	89fb      	ldrh	r3, [r7, #14]
 800f20a:	3301      	adds	r3, #1
 800f20c:	81fb      	strh	r3, [r7, #14]
 800f20e:	89fa      	ldrh	r2, [r7, #14]
 800f210:	88bb      	ldrh	r3, [r7, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d3eb      	bcc.n	800f1ee <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800f216:	bf00      	nop
 800f218:	bf00      	nop
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	4603      	mov	r3, r0
 800f22c:	6039      	str	r1, [r7, #0]
 800f22e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800f230:	2300      	movs	r3, #0
 800f232:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	b25b      	sxtb	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	da0e      	bge.n	800f25c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800f23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f242:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800f244:	e00a      	b.n	800f25c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800f246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f24a:	021b      	lsls	r3, r3, #8
 800f24c:	b21a      	sxth	r2, r3
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	1c59      	adds	r1, r3, #1
 800f252:	6039      	str	r1, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	b21b      	sxth	r3, r3
 800f258:	4313      	orrs	r3, r2
 800f25a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800f25c:	88fb      	ldrh	r3, [r7, #6]
 800f25e:	1e5a      	subs	r2, r3, #1
 800f260:	80fa      	strh	r2, [r7, #6]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1ef      	bne.n	800f246 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800f266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f276:	b480      	push	{r7}
 800f278:	b087      	sub	sp, #28
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	60f8      	str	r0, [r7, #12]
 800f27e:	460b      	mov	r3, r1
 800f280:	607a      	str	r2, [r7, #4]
 800f282:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800f288:	2300      	movs	r3, #0
 800f28a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800f290:	2300      	movs	r3, #0
 800f292:	82fb      	strh	r3, [r7, #22]
 800f294:	e00e      	b.n	800f2b4 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800f296:	897a      	ldrh	r2, [r7, #10]
 800f298:	8afb      	ldrh	r3, [r7, #22]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	3b01      	subs	r3, #1
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	b2d2      	uxtb	r2, r2
 800f2a6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	0a1b      	lsrs	r3, r3, #8
 800f2ac:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800f2ae:	8afb      	ldrh	r3, [r7, #22]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	82fb      	strh	r3, [r7, #22]
 800f2b4:	8afa      	ldrh	r2, [r7, #22]
 800f2b6:	897b      	ldrh	r3, [r7, #10]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d3ec      	bcc.n	800f296 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	371c      	adds	r7, #28
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b085      	sub	sp, #20
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	6039      	str	r1, [r7, #0]
 800f2d4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800f2da:	e007      	b.n	800f2ec <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	021a      	lsls	r2, r3, #8
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	1c59      	adds	r1, r3, #1
 800f2e4:	6039      	str	r1, [r7, #0]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	1e5a      	subs	r2, r3, #1
 800f2f0:	80fa      	strh	r2, [r7, #6]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1f2      	bne.n	800f2dc <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3714      	adds	r7, #20
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	4603      	mov	r3, r0
 800f30c:	6039      	str	r1, [r7, #0]
 800f30e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	b25b      	sxtb	r3, r3
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	da0b      	bge.n	800f336 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800f31e:	f04f 33ff 	mov.w	r3, #4294967295
 800f322:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800f324:	e007      	b.n	800f336 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	021a      	lsls	r2, r3, #8
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	1c59      	adds	r1, r3, #1
 800f32e:	6039      	str	r1, [r7, #0]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	4313      	orrs	r3, r2
 800f334:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800f336:	88fb      	ldrh	r3, [r7, #6]
 800f338:	1e5a      	subs	r2, r3, #1
 800f33a:	80fa      	strh	r2, [r7, #6]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1f2      	bne.n	800f326 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800f340:	68fb      	ldr	r3, [r7, #12]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b084      	sub	sp, #16
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	460b      	mov	r3, r1
 800f358:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	78fa      	ldrb	r2, [r7, #3]
 800f366:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f370:	461a      	mov	r2, r3
 800f372:	2183      	movs	r1, #131	; 0x83
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f001 fd0d 	bl	8010d94 <VL53L1_WrByte>
 800f37a:	4603      	mov	r3, r0
 800f37c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800f37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b084      	sub	sp, #16
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f392:	2300      	movs	r3, #0
 800f394:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800f396:	2101      	movs	r1, #1
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff ffd8 	bl	800f34e <VL53L1_set_powerforce_register>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b086      	sub	sp, #24
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	460a      	mov	r2, r1
 800f3b8:	80fb      	strh	r3, [r7, #6]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800f3ca:	88fb      	ldrh	r3, [r7, #6]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 faa7 	bl	800f920 <VL53L1_calc_pll_period_us>
 800f3d2:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800f3d4:	797b      	ldrb	r3, [r7, #5]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fab6 	bl	800f948 <VL53L1_decode_vcsel_period>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	4413      	add	r3, r2
 800f3e8:	021b      	lsls	r3, r3, #8
 800f3ea:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	099b      	lsrs	r3, r3, #6
 800f3f0:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800f3f2:	7cfa      	ldrb	r2, [r7, #19]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	fb02 f303 	mul.w	r3, r2, r3
 800f3fa:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	099b      	lsrs	r3, r3, #6
 800f400:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800f402:	68fb      	ldr	r3, [r7, #12]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b089      	sub	sp, #36	; 0x24
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	4608      	mov	r0, r1
 800f416:	4611      	mov	r1, r2
 800f418:	461a      	mov	r2, r3
 800f41a:	4603      	mov	r3, r0
 800f41c:	817b      	strh	r3, [r7, #10]
 800f41e:	460b      	mov	r3, r1
 800f420:	813b      	strh	r3, [r7, #8]
 800f422:	4613      	mov	r3, r2
 800f424:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	011b      	lsls	r3, r3, #4
 800f43e:	4a23      	ldr	r2, [pc, #140]	; (800f4cc <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f440:	fb82 1203 	smull	r1, r2, r2, r3
 800f444:	1192      	asrs	r2, r2, #6
 800f446:	17db      	asrs	r3, r3, #31
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800f44c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f450:	2b00      	cmp	r3, #0
 800f452:	da03      	bge.n	800f45c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800f454:	897b      	ldrh	r3, [r7, #10]
 800f456:	425b      	negs	r3, r3
 800f458:	b29b      	uxth	r3, r3
 800f45a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800f45c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	da03      	bge.n	800f46c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800f464:	893b      	ldrh	r3, [r7, #8]
 800f466:	425b      	negs	r3, r3
 800f468:	b29b      	uxth	r3, r3
 800f46a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800f46c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f470:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f474:	4413      	add	r3, r2
 800f476:	015b      	lsls	r3, r3, #5
 800f478:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	4a13      	ldr	r2, [pc, #76]	; (800f4cc <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f47e:	fb82 1203 	smull	r1, r2, r2, r3
 800f482:	1192      	asrs	r2, r2, #6
 800f484:	17db      	asrs	r3, r3, #31
 800f486:	1ad3      	subs	r3, r2, r3
 800f488:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	4413      	add	r3, r2
 800f490:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800f492:	79fa      	ldrb	r2, [r7, #7]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	fb02 f303 	mul.w	r3, r2, r3
 800f49a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	3310      	adds	r3, #16
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	da00      	bge.n	800f4a6 <VL53L1_calc_range_ignore_threshold+0x9a>
 800f4a4:	331f      	adds	r3, #31
 800f4a6:	115b      	asrs	r3, r3, #5
 800f4a8:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4b0:	db03      	blt.n	800f4ba <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800f4b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4b6:	83fb      	strh	r3, [r7, #30]
 800f4b8:	e001      	b.n	800f4be <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800f4be:	8bfb      	ldrh	r3, [r7, #30]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3724      	adds	r7, #36	; 0x24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr
 800f4cc:	10624dd3 	.word	0x10624dd3

0800f4d0 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	031a      	lsls	r2, r3, #12
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	085b      	lsrs	r3, r3, #1
 800f4e6:	441a      	add	r2, r3
	timeout_mclks   =
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ee:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800f50c:	2300      	movs	r3, #0
 800f50e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7ff ffdc 	bl	800f4d0 <VL53L1_calc_timeout_mclks>
 800f518:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800f51a:	68f8      	ldr	r0, [r7, #12]
 800f51c:	f000 f85e 	bl	800f5dc <VL53L1_encode_timeout>
 800f520:	4603      	mov	r3, r0
 800f522:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800f524:	897b      	ldrh	r3, [r7, #10]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800f52e:	b4f0      	push	{r4, r5, r6, r7}
 800f530:	b086      	sub	sp, #24
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800f53c:	f04f 0200 	mov.w	r2, #0
 800f540:	f04f 0300 	mov.w	r3, #0
 800f544:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f04f 0100 	mov.w	r1, #0
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	f04f 0300 	mov.w	r3, #0
 800f558:	fb02 fc01 	mul.w	ip, r2, r1
 800f55c:	fb00 f603 	mul.w	r6, r0, r3
 800f560:	4466      	add	r6, ip
 800f562:	fba0 2302 	umull	r2, r3, r0, r2
 800f566:	18f1      	adds	r1, r6, r3
 800f568:	460b      	mov	r3, r1
 800f56a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f56e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800f572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f576:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800f57a:	f143 0500 	adc.w	r5, r3, #0
 800f57e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800f582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f586:	f04f 0200 	mov.w	r2, #0
 800f58a:	f04f 0300 	mov.w	r3, #0
 800f58e:	0b02      	lsrs	r2, r0, #12
 800f590:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800f594:	0b0b      	lsrs	r3, r1, #12
 800f596:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800f59e:	697b      	ldr	r3, [r7, #20]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bcf0      	pop	{r4, r5, r6, r7}
 800f5a8:	4770      	bx	lr

0800f5aa <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b084      	sub	sp, #16
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	6039      	str	r1, [r7, #0]
 800f5b4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800f5be:	88fb      	ldrh	r3, [r7, #6]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f000 f837 	bl	800f634 <VL53L1_decode_timeout>
 800f5c6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f7ff ffaf 	bl	800f52e <VL53L1_calc_timeout_us>
 800f5d0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800f5d2:	68bb      	ldr	r3, [r7, #8]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b087      	sub	sp, #28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d017      	beq.n	800f626 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f5fc:	e005      	b.n	800f60a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	085b      	lsrs	r3, r3, #1
 800f602:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800f604:	89fb      	ldrh	r3, [r7, #14]
 800f606:	3301      	adds	r3, #1
 800f608:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1f4      	bne.n	800f5fe <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800f614:	89fb      	ldrh	r3, [r7, #14]
 800f616:	021b      	lsls	r3, r3, #8
 800f618:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800f622:	4413      	add	r3, r2
 800f624:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800f626:	8afb      	ldrh	r3, [r7, #22]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	371c      	adds	r7, #28
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800f63e:	2300      	movs	r3, #0
 800f640:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f642:	88fb      	ldrh	r3, [r7, #6]
 800f644:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800f646:	88fa      	ldrh	r2, [r7, #6]
 800f648:	0a12      	lsrs	r2, r2, #8
 800f64a:	b292      	uxth	r2, r2
 800f64c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f64e:	3301      	adds	r3, #1
 800f650:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800f652:	68fb      	ldr	r3, [r7, #12]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3714      	adds	r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f66e:	2300      	movs	r3, #0
 800f670:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800f672:	2300      	movs	r3, #0
 800f674:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800f67e:	887b      	ldrh	r3, [r7, #2]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f684:	23f1      	movs	r3, #241	; 0xf1
 800f686:	77fb      	strb	r3, [r7, #31]
 800f688:	e05d      	b.n	800f746 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800f68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68c:	799a      	ldrb	r2, [r3, #6]
 800f68e:	887b      	ldrh	r3, [r7, #2]
 800f690:	4611      	mov	r1, r2
 800f692:	4618      	mov	r0, r3
 800f694:	f7ff fe8b 	bl	800f3ae <VL53L1_calc_macro_period_us>
 800f698:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800f69a:	6979      	ldr	r1, [r7, #20]
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7ff ff17 	bl	800f4d0 <VL53L1_calc_timeout_mclks>
 800f6a2:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	2bff      	cmp	r3, #255	; 0xff
 800f6a8:	d901      	bls.n	800f6ae <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800f6aa:	23ff      	movs	r3, #255	; 0xff
 800f6ac:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800f6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b4:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800f6b6:	6979      	ldr	r1, [r7, #20]
 800f6b8:	68b8      	ldr	r0, [r7, #8]
 800f6ba:	f7ff ff20 	bl	800f4fe <VL53L1_calc_encoded_timeout>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f6c2:	8a7b      	ldrh	r3, [r7, #18]
 800f6c4:	0a1b      	lsrs	r3, r3, #8
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f6ce:	8a7b      	ldrh	r3, [r7, #18]
 800f6d0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800f6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d4:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800f6d6:	6979      	ldr	r1, [r7, #20]
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff ff10 	bl	800f4fe <VL53L1_calc_encoded_timeout>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f6e2:	8a7b      	ldrh	r3, [r7, #18]
 800f6e4:	0a1b      	lsrs	r3, r3, #8
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f6ee:	8a7b      	ldrh	r3, [r7, #18]
 800f6f0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800f6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f4:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800f6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f8:	7a5a      	ldrb	r2, [r3, #9]
 800f6fa:	887b      	ldrh	r3, [r7, #2]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff fe55 	bl	800f3ae <VL53L1_calc_macro_period_us>
 800f704:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800f706:	6979      	ldr	r1, [r7, #20]
 800f708:	68b8      	ldr	r0, [r7, #8]
 800f70a:	f7ff fef8 	bl	800f4fe <VL53L1_calc_encoded_timeout>
 800f70e:	4603      	mov	r3, r0
 800f710:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f712:	8a7b      	ldrh	r3, [r7, #18]
 800f714:	0a1b      	lsrs	r3, r3, #8
 800f716:	b29b      	uxth	r3, r3
 800f718:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800f71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f71e:	8a7b      	ldrh	r3, [r7, #18]
 800f720:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f724:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800f726:	6979      	ldr	r1, [r7, #20]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff fee8 	bl	800f4fe <VL53L1_calc_encoded_timeout>
 800f72e:	4603      	mov	r3, r0
 800f730:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f732:	8a7b      	ldrh	r3, [r7, #18]
 800f734:	0a1b      	lsrs	r3, r3, #8
 800f736:	b29b      	uxth	r3, r3
 800f738:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f73e:	8a7b      	ldrh	r3, [r7, #18]
 800f740:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800f746:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3720      	adds	r7, #32
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800f752:	b480      	push	{r7}
 800f754:	b083      	sub	sp, #12
 800f756:	af00      	add	r7, sp, #0
 800f758:	4603      	mov	r3, r0
 800f75a:	603a      	str	r2, [r7, #0]
 800f75c:	71fb      	strb	r3, [r7, #7]
 800f75e:	460b      	mov	r3, r1
 800f760:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800f762:	79fb      	ldrb	r3, [r7, #7]
 800f764:	2b07      	cmp	r3, #7
 800f766:	d90a      	bls.n	800f77e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800f768:	79bb      	ldrb	r3, [r7, #6]
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	b2db      	uxtb	r3, r3
 800f774:	3b71      	subs	r3, #113	; 0x71
 800f776:	b2da      	uxtb	r2, r3
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800f77c:	e00a      	b.n	800f794 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800f77e:	79bb      	ldrb	r3, [r7, #6]
 800f780:	f1c3 030f 	rsb	r3, r3, #15
 800f784:	b2db      	uxtb	r3, r3
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	4413      	add	r3, r2
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	701a      	strb	r2, [r3, #0]
}
 800f794:	bf00      	nop
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	091b      	lsrs	r3, r3, #4
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	f003 030f 	and.w	r3, r3, #15
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	701a      	strb	r2, [r3, #0]

}
 800f7c4:	bf00      	nop
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	603a      	str	r2, [r7, #0]
 800f7da:	71fb      	strb	r3, [r7, #7]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800f7e0:	79bb      	ldrb	r3, [r7, #6]
 800f7e2:	011b      	lsls	r3, r3, #4
 800f7e4:	b2da      	uxtb	r2, r3
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	701a      	strb	r2, [r3, #0]

}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f804:	2300      	movs	r3, #0
 800f806:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2203      	movs	r2, #3
 800f810:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	2200      	movs	r2, #0
 800f818:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	2200      	movs	r2, #0
 800f830:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2200      	movs	r2, #0
 800f848:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	2200      	movs	r2, #0
 800f850:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800f854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800f864:	b480      	push	{r7}
 800f866:	b087      	sub	sp, #28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f870:	2300      	movs	r3, #0
 800f872:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	229b      	movs	r2, #155	; 0x9b
 800f884:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800f886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	371c      	adds	r7, #28
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800f896:	b480      	push	{r7}
 800f898:	b085      	sub	sp, #20
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800f8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f8d6:	f003 0303 	and.w	r3, r3, #3
 800f8da:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f8e6:	4413      	add	r3, r2
 800f8e8:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800f910:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f934:	fb92 f3f3 	sdiv	r3, r2, r3
 800f938:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800f93a:	68fb      	ldr	r3, [r7, #12]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3714      	adds	r7, #20
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	3301      	adds	r3, #1
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800f960:	7bfb      	ldrb	r3, [r7, #15]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800f96e:	b480      	push	{r7}
 800f970:	b085      	sub	sp, #20
 800f972:	af00      	add	r7, sp, #0
 800f974:	4603      	mov	r3, r0
 800f976:	60b9      	str	r1, [r7, #8]
 800f978:	607a      	str	r2, [r7, #4]
 800f97a:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800f97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f980:	2b00      	cmp	r3, #0
 800f982:	da10      	bge.n	800f9a6 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	43db      	mvns	r3, r3
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	f003 0307 	and.w	r3, r3, #7
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	3308      	adds	r3, #8
 800f992:	b2da      	uxtb	r2, r3
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	3b80      	subs	r3, #128	; 0x80
 800f99c:	10db      	asrs	r3, r3, #3
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800f9a4:	e00c      	b.n	800f9c0 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800f9a6:	7bfb      	ldrb	r3, [r7, #15]
 800f9a8:	f003 0307 	and.w	r3, r3, #7
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800f9b2:	7bfb      	ldrb	r3, [r7, #15]
 800f9b4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f9b8:	10db      	asrs	r3, r3, #3
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	701a      	strb	r2, [r3, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800f9de:	897b      	ldrh	r3, [r7, #10]
 800f9e0:	2b0a      	cmp	r3, #10
 800f9e2:	d802      	bhi.n	800f9ea <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f9e4:	f06f 0309 	mvn.w	r3, #9
 800f9e8:	e047      	b.n	800fa7a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9f2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800fa00:	f002 020f 	and.w	r2, r2, #15
 800fa04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fa06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800fa10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fa14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fa16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800fa20:	f002 0203 	and.w	r2, r2, #3
 800fa24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fa26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800fa30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fa34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fa36:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	88d8      	ldrh	r0, [r3, #6]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3305      	adds	r3, #5
 800fa40:	461a      	mov	r2, r3
 800fa42:	2102      	movs	r1, #2
 800fa44:	f7ff fb77 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fa50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fa5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800fa64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fa68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fa6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800fa74:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3718      	adds	r7, #24
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b086      	sub	sp, #24
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	4603      	mov	r3, r0
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
 800fa8e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fa90:	2300      	movs	r3, #0
 800fa92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fa94:	89fb      	ldrh	r3, [r7, #14]
 800fa96:	2b0a      	cmp	r3, #10
 800fa98:	d802      	bhi.n	800faa0 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa9a:	f06f 0309 	mvn.w	r3, #9
 800fa9e:	e046      	b.n	800fb2e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faa8:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	3301      	adds	r3, #1
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f003 030f 	and.w	r3, r3, #15
 800fab8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	3302      	adds	r3, #2
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fac8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	3303      	adds	r3, #3
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	f003 0303 	and.w	r3, r3, #3
 800fad8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3304      	adds	r3, #4
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fae8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	3305      	adds	r3, #5
 800faf2:	4619      	mov	r1, r3
 800faf4:	2002      	movs	r0, #2
 800faf6:	f7ff fb49 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 800fafa:	4603      	mov	r3, r0
 800fafc:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	79da      	ldrb	r2, [r3, #7]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	7a1a      	ldrb	r2, [r3, #8]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	3309      	adds	r3, #9
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb1c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	7a9a      	ldrb	r2, [r3, #10]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800fb2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b086      	sub	sp, #24
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fb40:	2300      	movs	r3, #0
 800fb42:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800fb44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d108      	bne.n	800fb5e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800fb4c:	f107 020c 	add.w	r2, r7, #12
 800fb50:	230b      	movs	r3, #11
 800fb52:	2101      	movs	r1, #1
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f001 f8e7 	bl	8010d28 <VL53L1_ReadMulti>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800fb5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d108      	bne.n	800fb78 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800fb66:	f107 030c 	add.w	r3, r7, #12
 800fb6a:	683a      	ldr	r2, [r7, #0]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	200b      	movs	r0, #11
 800fb70:	f7ff ff87 	bl	800fa82 <VL53L1_i2c_decode_static_nvm_managed>
 800fb74:	4603      	mov	r3, r0
 800fb76:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fb78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fb96:	897b      	ldrh	r3, [r7, #10]
 800fb98:	2b16      	cmp	r3, #22
 800fb9a:	d802      	bhi.n	800fba2 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb9c:	f06f 0309 	mvn.w	r3, #9
 800fba0:	e076      	b.n	800fc90 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fbb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fbbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fbda:	f002 020f 	and.w	r2, r2, #15
 800fbde:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fbe0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800fbea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fbf4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fbf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fbfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800fc04:	f002 0203 	and.w	r2, r2, #3
 800fc08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fc0a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	8958      	ldrh	r0, [r3, #10]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3309      	adds	r3, #9
 800fc14:	461a      	mov	r2, r3
 800fc16:	2102      	movs	r1, #2
 800fc18:	f7ff fa8d 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	330b      	adds	r3, #11
 800fc26:	461a      	mov	r2, r3
 800fc28:	2102      	movs	r1, #2
 800fc2a:	f7ff facf 	bl	800f1cc <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	330d      	adds	r3, #13
 800fc38:	461a      	mov	r2, r3
 800fc3a:	2102      	movs	r1, #2
 800fc3c:	f7ff fac6 	bl	800f1cc <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	8a18      	ldrh	r0, [r3, #16]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	330f      	adds	r3, #15
 800fc48:	461a      	mov	r2, r3
 800fc4a:	2102      	movs	r1, #2
 800fc4c:	f7ff fa73 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800fc56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc5a:	b218      	sxth	r0, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	3311      	adds	r3, #17
 800fc60:	461a      	mov	r2, r3
 800fc62:	2102      	movs	r1, #2
 800fc64:	f7ff fab2 	bl	800f1cc <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	3313      	adds	r3, #19
 800fc72:	461a      	mov	r2, r3
 800fc74:	2102      	movs	r1, #2
 800fc76:	f7ff faa9 	bl	800f1cc <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	3315      	adds	r3, #21
 800fc84:	461a      	mov	r2, r3
 800fc86:	2102      	movs	r1, #2
 800fc88:	f7ff faa0 	bl	800f1cc <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800fc8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fca6:	2300      	movs	r3, #0
 800fca8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fcaa:	89fb      	ldrh	r3, [r7, #14]
 800fcac:	2b16      	cmp	r3, #22
 800fcae:	d802      	bhi.n	800fcb6 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fcb0:	f06f 0309 	mvn.w	r3, #9
 800fcb4:	e079      	b.n	800fdaa <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	785a      	ldrb	r2, [r3, #1]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	789a      	ldrb	r2, [r3, #2]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	78da      	ldrb	r2, [r3, #3]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	791a      	ldrb	r2, [r3, #4]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	3305      	adds	r3, #5
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 030f 	and.w	r3, r3, #15
 800fce8:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	799a      	ldrb	r2, [r3, #6]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	3307      	adds	r3, #7
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd00:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	3308      	adds	r3, #8
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	f003 0303 	and.w	r3, r3, #3
 800fd10:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	3309      	adds	r3, #9
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	2002      	movs	r0, #2
 800fd1e:	f7ff fa35 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 800fd22:	4603      	mov	r3, r0
 800fd24:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	330b      	adds	r3, #11
 800fd2e:	4619      	mov	r1, r3
 800fd30:	2002      	movs	r0, #2
 800fd32:	f7ff fa77 	bl	800f224 <VL53L1_i2c_decode_int16_t>
 800fd36:	4603      	mov	r3, r0
 800fd38:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	330d      	adds	r3, #13
 800fd42:	4619      	mov	r1, r3
 800fd44:	2002      	movs	r0, #2
 800fd46:	f7ff fa6d 	bl	800f224 <VL53L1_i2c_decode_int16_t>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	330f      	adds	r3, #15
 800fd56:	4619      	mov	r1, r3
 800fd58:	2002      	movs	r0, #2
 800fd5a:	f7ff fa17 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	3311      	adds	r3, #17
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	2002      	movs	r0, #2
 800fd6e:	f7ff fa59 	bl	800f224 <VL53L1_i2c_decode_int16_t>
 800fd72:	4603      	mov	r3, r0
 800fd74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd78:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	3313      	adds	r3, #19
 800fd82:	4619      	mov	r1, r3
 800fd84:	2002      	movs	r0, #2
 800fd86:	f7ff fa4d 	bl	800f224 <VL53L1_i2c_decode_int16_t>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	3315      	adds	r3, #21
 800fd96:	4619      	mov	r1, r3
 800fd98:	2002      	movs	r0, #2
 800fd9a:	f7ff fa43 	bl	800f224 <VL53L1_i2c_decode_int16_t>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800fda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b088      	sub	sp, #32
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800fdc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d108      	bne.n	800fdda <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800fdc8:	f107 0208 	add.w	r2, r7, #8
 800fdcc:	2317      	movs	r3, #23
 800fdce:	210d      	movs	r1, #13
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 ffa9 	bl	8010d28 <VL53L1_ReadMulti>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800fdda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d108      	bne.n	800fdf4 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800fde2:	f107 0308 	add.w	r3, r7, #8
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	4619      	mov	r1, r3
 800fdea:	2017      	movs	r0, #23
 800fdec:	f7ff ff54 	bl	800fc98 <VL53L1_i2c_decode_customer_nvm_managed>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fdf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3720      	adds	r7, #32
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b086      	sub	sp, #24
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	607a      	str	r2, [r7, #4]
 800fe0c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800fe12:	897b      	ldrh	r3, [r7, #10]
 800fe14:	2b1f      	cmp	r3, #31
 800fe16:	d802      	bhi.n	800fe1e <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fe18:	f06f 0309 	mvn.w	r3, #9
 800fe1c:	e0cf      	b.n	800ffbe <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	2102      	movs	r1, #2
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff f985 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800fe34:	f002 0201 	and.w	r2, r2, #1
 800fe38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fe3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800fe44:	f002 020f 	and.w	r2, r2, #15
 800fe48:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fe4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800fe54:	f002 020f 	and.w	r2, r2, #15
 800fe58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fe5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800fe64:	f002 021f 	and.w	r2, r2, #31
 800fe68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fe6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fe74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fe78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fe7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800fe84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fe88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fe8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800fe94:	f002 0201 	and.w	r2, r2, #1
 800fe98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fe9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800fea4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800feae:	f002 0201 	and.w	r2, r2, #1
 800feb2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800feb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800febe:	f002 0203 	and.w	r2, r2, #3
 800fec2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fec4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fece:	f002 021f 	and.w	r2, r2, #31
 800fed2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800fede:	f002 0203 	and.w	r2, r2, #3
 800fee2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800feee:	f002 0203 	and.w	r2, r2, #3
 800fef2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800fef4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fefe:	f002 0207 	and.w	r2, r2, #7
 800ff02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ff04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ff0e:	f002 021f 	and.w	r2, r2, #31
 800ff12:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800ff14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ff1e:	f002 0201 	and.w	r2, r2, #1
 800ff22:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ff24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ff2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ff38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ff42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ff4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800ff56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800ff60:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	8b18      	ldrh	r0, [r3, #24]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	3318      	adds	r3, #24
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	2102      	movs	r1, #2
 800ff6e:	f7ff f8e2 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800ff7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800ff84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800ff8e:	f002 020f 	and.w	r2, r2, #15
 800ff92:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800ff94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800ff9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800ffa8:	f002 020f 	and.w	r2, r2, #15
 800ffac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800ffae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800ffb8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ffba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b086      	sub	sp, #24
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	60f8      	str	r0, [r7, #12]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	607a      	str	r2, [r7, #4]
 800ffd2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ffd8:	897b      	ldrh	r3, [r7, #10]
 800ffda:	2b15      	cmp	r3, #21
 800ffdc:	d802      	bhi.n	800ffe4 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffde:	f06f 0309 	mvn.w	r3, #9
 800ffe2:	e070      	b.n	80100c6 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fff4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8010008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801000c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801000e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8010014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010018:	b298      	uxth	r0, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	3304      	adds	r3, #4
 801001e:	461a      	mov	r2, r3
 8010020:	2102      	movs	r1, #2
 8010022:	f7ff f888 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801002e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010032:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010034:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801003e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8010052:	f002 0201 	and.w	r2, r2, #1
 8010056:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8010062:	f002 0207 	and.w	r2, r2, #7
 8010066:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010068:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	8998      	ldrh	r0, [r3, #12]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	330c      	adds	r3, #12
 8010072:	461a      	mov	r2, r3
 8010074:	2102      	movs	r1, #2
 8010076:	f7ff f85e 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	89d8      	ldrh	r0, [r3, #14]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	330e      	adds	r3, #14
 8010082:	461a      	mov	r2, r3
 8010084:	2102      	movs	r1, #2
 8010086:	f7ff f856 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8a18      	ldrh	r0, [r3, #16]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	3310      	adds	r3, #16
 8010092:	461a      	mov	r2, r3
 8010094:	2102      	movs	r1, #2
 8010096:	f7ff f84e 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80100a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80100ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80100b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80100c0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80100c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b086      	sub	sp, #24
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	60f8      	str	r0, [r7, #12]
 80100d6:	460b      	mov	r3, r1
 80100d8:	607a      	str	r2, [r7, #4]
 80100da:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80100dc:	2300      	movs	r3, #0
 80100de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80100e0:	897b      	ldrh	r3, [r7, #10]
 80100e2:	2b16      	cmp	r3, #22
 80100e4:	d802      	bhi.n	80100ec <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80100e6:	f06f 0309 	mvn.w	r3, #9
 80100ea:	e06e      	b.n	80101ca <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010102:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801010c:	f002 020f 	and.w	r2, r2, #15
 8010110:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010112:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801011c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010126:	f002 020f 	and.w	r2, r2, #15
 801012a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801012c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8010136:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8010140:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010144:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010146:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010150:	f002 020f 	and.w	r2, r2, #15
 8010154:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010156:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010160:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 801016a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801016e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010170:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	8958      	ldrh	r0, [r3, #10]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	330a      	adds	r3, #10
 801017a:	461a      	mov	r2, r3
 801017c:	2102      	movs	r1, #2
 801017e:	f7fe ffda 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	8998      	ldrh	r0, [r3, #12]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	330c      	adds	r3, #12
 801018a:	461a      	mov	r2, r3
 801018c:	2102      	movs	r1, #2
 801018e:	f7fe ffd2 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 801019a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80101a4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6918      	ldr	r0, [r3, #16]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3312      	adds	r3, #18
 80101ae:	461a      	mov	r2, r3
 80101b0:	2104      	movs	r1, #4
 80101b2:	f7ff f860 	bl	800f276 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80101be:	f002 0201 	and.w	r2, r2, #1
 80101c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80101c4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80101c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3718      	adds	r7, #24
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b086      	sub	sp, #24
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	60f8      	str	r0, [r7, #12]
 80101da:	460b      	mov	r3, r1
 80101dc:	607a      	str	r2, [r7, #4]
 80101de:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80101e0:	2300      	movs	r3, #0
 80101e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80101e4:	897b      	ldrh	r3, [r7, #10]
 80101e6:	2b11      	cmp	r3, #17
 80101e8:	d802      	bhi.n	80101f0 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80101ea:	f06f 0309 	mvn.w	r3, #9
 80101ee:	e071      	b.n	80102d4 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	f003 0303 	and.w	r3, r3, #3
 80101f8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	8858      	ldrh	r0, [r3, #2]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3301      	adds	r3, #1
 8010206:	461a      	mov	r2, r3
 8010208:	2102      	movs	r1, #2
 801020a:	f7fe ff94 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	8898      	ldrh	r0, [r3, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3303      	adds	r3, #3
 8010216:	461a      	mov	r2, r3
 8010218:	2102      	movs	r1, #2
 801021a:	f7fe ff8c 	bl	800f136 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010226:	f002 0201 	and.w	r2, r2, #1
 801022a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801022c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8010236:	f002 0207 	and.w	r2, r2, #7
 801023a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801023c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8010246:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010250:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801025a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801025e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010260:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801026a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801026e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010270:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801027a:	f002 0203 	and.w	r2, r2, #3
 801027e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010280:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 801028a:	f002 0203 	and.w	r2, r2, #3
 801028e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010290:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 801029a:	f002 020f 	and.w	r2, r2, #15
 801029e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80102a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80102aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80102b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80102be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80102c8:	f002 0203 	and.w	r2, r2, #3
 80102cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80102ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80102d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80102dc:	b480      	push	{r7}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	460b      	mov	r3, r1
 80102e6:	607a      	str	r2, [r7, #4]
 80102e8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80102ea:	2300      	movs	r3, #0
 80102ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 80102ee:	897b      	ldrh	r3, [r7, #10]
 80102f0:	2b04      	cmp	r3, #4
 80102f2:	d802      	bhi.n	80102fa <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80102f4:	f06f 0309 	mvn.w	r3, #9
 80102f8:	e025      	b.n	8010346 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8010310:	f002 0201 	and.w	r2, r2, #1
 8010314:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010316:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8010320:	f002 0201 	and.w	r2, r2, #1
 8010324:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010326:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8010330:	f002 0203 	and.w	r2, r2, #3
 8010334:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010336:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010340:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010342:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010346:	4618      	mov	r0, r3
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b086      	sub	sp, #24
 8010356:	af00      	add	r7, sp, #0
 8010358:	4603      	mov	r3, r0
 801035a:	60b9      	str	r1, [r7, #8]
 801035c:	607a      	str	r2, [r7, #4]
 801035e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010360:	2300      	movs	r3, #0
 8010362:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8010364:	89fb      	ldrh	r3, [r7, #14]
 8010366:	2b2b      	cmp	r3, #43	; 0x2b
 8010368:	d802      	bhi.n	8010370 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801036a:	f06f 0309 	mvn.w	r3, #9
 801036e:	e0e2      	b.n	8010536 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010378:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	785a      	ldrb	r2, [r3, #1]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	3302      	adds	r3, #2
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	f003 030f 	and.w	r3, r3, #15
 8010390:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	78da      	ldrb	r2, [r3, #3]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4619      	mov	r1, r3
 80103a4:	2002      	movs	r0, #2
 80103a6:	f7fe fef1 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80103aa:	4603      	mov	r3, r0
 80103ac:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	3306      	adds	r3, #6
 80103b6:	4619      	mov	r1, r3
 80103b8:	2002      	movs	r0, #2
 80103ba:	f7fe fee7 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80103be:	4603      	mov	r3, r0
 80103c0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	3308      	adds	r3, #8
 80103ca:	4619      	mov	r1, r3
 80103cc:	2002      	movs	r0, #2
 80103ce:	f7fe fedd 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80103d2:	4603      	mov	r3, r0
 80103d4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	330a      	adds	r3, #10
 80103de:	4619      	mov	r1, r3
 80103e0:	2002      	movs	r0, #2
 80103e2:	f7fe fed3 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80103e6:	4603      	mov	r3, r0
 80103e8:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	330c      	adds	r3, #12
 80103f2:	4619      	mov	r1, r3
 80103f4:	2002      	movs	r0, #2
 80103f6:	f7fe fec9 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80103fa:	4603      	mov	r3, r0
 80103fc:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	330e      	adds	r3, #14
 8010406:	4619      	mov	r1, r3
 8010408:	2002      	movs	r0, #2
 801040a:	f7fe febf 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	3310      	adds	r3, #16
 801041a:	4619      	mov	r1, r3
 801041c:	2002      	movs	r0, #2
 801041e:	f7fe feb5 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010422:	4603      	mov	r3, r0
 8010424:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	3312      	adds	r3, #18
 801042e:	4619      	mov	r1, r3
 8010430:	2002      	movs	r0, #2
 8010432:	f7fe feab 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010436:	4603      	mov	r3, r0
 8010438:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	3314      	adds	r3, #20
 8010442:	4619      	mov	r1, r3
 8010444:	2002      	movs	r0, #2
 8010446:	f7fe fea1 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801044a:	4603      	mov	r3, r0
 801044c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	3316      	adds	r3, #22
 8010456:	4619      	mov	r1, r3
 8010458:	2002      	movs	r0, #2
 801045a:	f7fe fe97 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801045e:	4603      	mov	r3, r0
 8010460:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	3318      	adds	r3, #24
 801046a:	4619      	mov	r1, r3
 801046c:	2002      	movs	r0, #2
 801046e:	f7fe fe8d 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010472:	4603      	mov	r3, r0
 8010474:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	331a      	adds	r3, #26
 801047e:	4619      	mov	r1, r3
 8010480:	2002      	movs	r0, #2
 8010482:	f7fe fe83 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010486:	4603      	mov	r3, r0
 8010488:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	331c      	adds	r3, #28
 8010492:	4619      	mov	r1, r3
 8010494:	2002      	movs	r0, #2
 8010496:	f7fe fe79 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801049a:	4603      	mov	r3, r0
 801049c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	331e      	adds	r3, #30
 80104a6:	4619      	mov	r1, r3
 80104a8:	2002      	movs	r0, #2
 80104aa:	f7fe fe6f 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80104ae:	4603      	mov	r3, r0
 80104b0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3320      	adds	r3, #32
 80104ba:	4619      	mov	r1, r3
 80104bc:	2002      	movs	r0, #2
 80104be:	f7fe fe65 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80104c2:	4603      	mov	r3, r0
 80104c4:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	3322      	adds	r3, #34	; 0x22
 80104ce:	4619      	mov	r1, r3
 80104d0:	2002      	movs	r0, #2
 80104d2:	f7fe fe5b 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80104d6:	4603      	mov	r3, r0
 80104d8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	3324      	adds	r3, #36	; 0x24
 80104e2:	4619      	mov	r1, r3
 80104e4:	2002      	movs	r0, #2
 80104e6:	f7fe fe51 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80104ea:	4603      	mov	r3, r0
 80104ec:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	3326      	adds	r3, #38	; 0x26
 80104f6:	4619      	mov	r1, r3
 80104f8:	2002      	movs	r0, #2
 80104fa:	f7fe fe47 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 80104fe:	4603      	mov	r3, r0
 8010500:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	3328      	adds	r3, #40	; 0x28
 801050a:	4619      	mov	r1, r3
 801050c:	2002      	movs	r0, #2
 801050e:	f7fe fe3d 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010512:	4603      	mov	r3, r0
 8010514:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8010532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 801053e:	b580      	push	{r7, lr}
 8010540:	b086      	sub	sp, #24
 8010542:	af00      	add	r7, sp, #0
 8010544:	4603      	mov	r3, r0
 8010546:	60b9      	str	r1, [r7, #8]
 8010548:	607a      	str	r2, [r7, #4]
 801054a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801054c:	2300      	movs	r3, #0
 801054e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8010550:	89fb      	ldrh	r3, [r7, #14]
 8010552:	2b20      	cmp	r3, #32
 8010554:	d802      	bhi.n	801055c <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010556:	f06f 0309 	mvn.w	r3, #9
 801055a:	e04d      	b.n	80105f8 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 801055c:	68b9      	ldr	r1, [r7, #8]
 801055e:	2004      	movs	r0, #4
 8010560:	f7fe feb3 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 8010564:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	3304      	adds	r3, #4
 801056e:	4619      	mov	r1, r3
 8010570:	2004      	movs	r0, #4
 8010572:	f7fe feaa 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 8010576:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	3308      	adds	r3, #8
 8010580:	4619      	mov	r1, r3
 8010582:	2004      	movs	r0, #4
 8010584:	f7fe febe 	bl	800f304 <VL53L1_i2c_decode_int32_t>
 8010588:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	330c      	adds	r3, #12
 8010592:	4619      	mov	r1, r3
 8010594:	2004      	movs	r0, #4
 8010596:	f7fe fe98 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 801059a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	3310      	adds	r3, #16
 80105a4:	4619      	mov	r1, r3
 80105a6:	2004      	movs	r0, #4
 80105a8:	f7fe fe8f 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 80105ac:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	3314      	adds	r3, #20
 80105b6:	4619      	mov	r1, r3
 80105b8:	2004      	movs	r0, #4
 80105ba:	f7fe fe86 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 80105be:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	3318      	adds	r3, #24
 80105c8:	4619      	mov	r1, r3
 80105ca:	2004      	movs	r0, #4
 80105cc:	f7fe fe9a 	bl	800f304 <VL53L1_i2c_decode_int32_t>
 80105d0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	331c      	adds	r3, #28
 80105da:	4619      	mov	r1, r3
 80105dc:	2004      	movs	r0, #4
 80105de:	f7fe fe74 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 80105e2:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	f893 2020 	ldrb.w	r2, [r3, #32]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80105f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3718      	adds	r7, #24
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	4603      	mov	r3, r0
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801060e:	2300      	movs	r3, #0
 8010610:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8010612:	89fb      	ldrh	r3, [r7, #14]
 8010614:	2b37      	cmp	r3, #55	; 0x37
 8010616:	d802      	bhi.n	801061e <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010618:	f06f 0309 	mvn.w	r3, #9
 801061c:	e15e      	b.n	80108dc <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801061e:	68b9      	ldr	r1, [r7, #8]
 8010620:	2002      	movs	r0, #2
 8010622:	f7fe fdb3 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010626:	4603      	mov	r3, r0
 8010628:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	3302      	adds	r3, #2
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010638:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	3303      	adds	r3, #3
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010648:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	3304      	adds	r3, #4
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	f003 0303 	and.w	r3, r3, #3
 8010658:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	3305      	adds	r3, #5
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	3306      	adds	r3, #6
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010678:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	3307      	adds	r3, #7
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010688:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	3308      	adds	r3, #8
 8010692:	4619      	mov	r1, r3
 8010694:	2002      	movs	r0, #2
 8010696:	f7fe fd79 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801069a:	4603      	mov	r3, r0
 801069c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106a0:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	330a      	adds	r3, #10
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	f003 0303 	and.w	r3, r3, #3
 80106b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	330b      	adds	r3, #11
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 0303 	and.w	r3, r3, #3
 80106c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	330c      	adds	r3, #12
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 030f 	and.w	r3, r3, #15
 80106d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	330d      	adds	r3, #13
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f003 0307 	and.w	r3, r3, #7
 80106e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	330e      	adds	r3, #14
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f003 0301 	and.w	r3, r3, #1
 80106f0:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	330f      	adds	r3, #15
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 0303 	and.w	r3, r3, #3
 8010700:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	7c1a      	ldrb	r2, [r3, #16]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	7c5a      	ldrb	r2, [r3, #17]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	3312      	adds	r3, #18
 801071a:	4619      	mov	r1, r3
 801071c:	2002      	movs	r0, #2
 801071e:	f7fe fd35 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010722:	4603      	mov	r3, r0
 8010724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010728:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	3316      	adds	r3, #22
 8010732:	4619      	mov	r1, r3
 8010734:	2002      	movs	r0, #2
 8010736:	f7fe fd29 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801073a:	4603      	mov	r3, r0
 801073c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	3318      	adds	r3, #24
 8010746:	4619      	mov	r1, r3
 8010748:	2002      	movs	r0, #2
 801074a:	f7fe fd1f 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 801074e:	4603      	mov	r3, r0
 8010750:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	331a      	adds	r3, #26
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	331b      	adds	r3, #27
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 0307 	and.w	r3, r3, #7
 8010770:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	7f1a      	ldrb	r2, [r3, #28]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	7f5a      	ldrb	r2, [r3, #29]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	331e      	adds	r3, #30
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010790:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	331f      	adds	r3, #31
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107a0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	3320      	adds	r3, #32
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f003 0303 	and.w	r3, r3, #3
 80107b0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	3321      	adds	r3, #33	; 0x21
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f003 030f 	and.w	r3, r3, #15
 80107c0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	3325      	adds	r3, #37	; 0x25
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	3326      	adds	r3, #38	; 0x26
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	f003 0303 	and.w	r3, r3, #3
 8010806:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	3327      	adds	r3, #39	; 0x27
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f003 031f 	and.w	r3, r3, #31
 8010818:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	3328      	adds	r3, #40	; 0x28
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	f003 031f 	and.w	r3, r3, #31
 801082a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	3329      	adds	r3, #41	; 0x29
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	f003 031f 	and.w	r3, r3, #31
 801083c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	332a      	adds	r3, #42	; 0x2a
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f003 0301 	and.w	r3, r3, #1
 801084e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	332b      	adds	r3, #43	; 0x2b
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	332c      	adds	r3, #44	; 0x2c
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	f003 0303 	and.w	r3, r3, #3
 8010872:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	332d      	adds	r3, #45	; 0x2d
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010884:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	332e      	adds	r3, #46	; 0x2e
 8010890:	4619      	mov	r1, r3
 8010892:	2004      	movs	r0, #4
 8010894:	f7fe fd19 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 8010898:	4603      	mov	r3, r0
 801089a:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	3332      	adds	r3, #50	; 0x32
 80108a6:	4619      	mov	r1, r3
 80108a8:	2004      	movs	r0, #4
 80108aa:	f7fe fd0e 	bl	800f2ca <VL53L1_i2c_decode_uint32_t>
 80108ae:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	3336      	adds	r3, #54	; 0x36
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	3337      	adds	r3, #55	; 0x37
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	f003 0301 	and.w	r3, r3, #1
 80108d0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80108d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3718      	adds	r7, #24
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b086      	sub	sp, #24
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	4603      	mov	r3, r0
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
 80108f0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80108f2:	2300      	movs	r3, #0
 80108f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80108f6:	89fb      	ldrh	r3, [r7, #14]
 80108f8:	2b30      	cmp	r3, #48	; 0x30
 80108fa:	d802      	bhi.n	8010902 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80108fc:	f06f 0309 	mvn.w	r3, #9
 8010900:	e112      	b.n	8010b28 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	785a      	ldrb	r2, [r3, #1]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	789a      	ldrb	r2, [r3, #2]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	3303      	adds	r3, #3
 801091e:	4619      	mov	r1, r3
 8010920:	2002      	movs	r0, #2
 8010922:	f7fe fc33 	bl	800f18c <VL53L1_i2c_decode_uint16_t>
 8010926:	4603      	mov	r3, r0
 8010928:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	3305      	adds	r3, #5
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010938:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	3306      	adds	r3, #6
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f003 0307 	and.w	r3, r3, #7
 8010948:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	3307      	adds	r3, #7
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	f003 0307 	and.w	r3, r3, #7
 8010958:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	3308      	adds	r3, #8
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010968:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	3309      	adds	r3, #9
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010978:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	330a      	adds	r3, #10
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	330b      	adds	r3, #11
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010998:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	330c      	adds	r3, #12
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	330d      	adds	r3, #13
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	330e      	adds	r3, #14
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109c8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	7bda      	ldrb	r2, [r3, #15]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	7c1a      	ldrb	r2, [r3, #16]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	7c5a      	ldrb	r2, [r3, #17]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	7c9a      	ldrb	r2, [r3, #18]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	7cda      	ldrb	r2, [r3, #19]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	7d1a      	ldrb	r2, [r3, #20]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	7d5a      	ldrb	r2, [r3, #21]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	7d9a      	ldrb	r2, [r3, #22]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	7dda      	ldrb	r2, [r3, #23]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	7e1a      	ldrb	r2, [r3, #24]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	7e5a      	ldrb	r2, [r3, #25]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	7e9a      	ldrb	r2, [r3, #26]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	7eda      	ldrb	r2, [r3, #27]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	7f1a      	ldrb	r2, [r3, #28]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	7f5a      	ldrb	r2, [r3, #29]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	7f9a      	ldrb	r2, [r3, #30]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	7fda      	ldrb	r2, [r3, #31]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8010b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3718      	adds	r7, #24
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b090      	sub	sp, #64	; 0x40
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8010b40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10a      	bne.n	8010b5e <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8010b48:	f107 020c 	add.w	r2, r7, #12
 8010b4c:	2331      	movs	r3, #49	; 0x31
 8010b4e:	f240 110f 	movw	r1, #271	; 0x10f
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 f8e8 	bl	8010d28 <VL53L1_ReadMulti>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8010b5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d109      	bne.n	8010b7a <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8010b66:	f107 030c 	add.w	r3, r7, #12
 8010b6a:	683a      	ldr	r2, [r7, #0]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	2031      	movs	r0, #49	; 0x31
 8010b70:	f7ff feb8 	bl	80108e4 <VL53L1_i2c_decode_nvm_copy_data>
 8010b74:	4603      	mov	r3, r0
 8010b76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010b7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3740      	adds	r7, #64	; 0x40
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b086      	sub	sp, #24
 8010b8a:	af02      	add	r7, sp, #8
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8010b90:	2300      	movs	r3, #0
 8010b92:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8010b94:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 f9b9 	bl	8010f10 <VL53L1_WaitUs>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8010ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10b      	bne.n	8010bc2 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8010baa:	2301      	movs	r3, #1
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	2301      	movs	r3, #1
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	22e5      	movs	r2, #229	; 0xe5
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f000 f9bf 	bl	8010f3c <VL53L1_WaitValueMaskEx>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d103      	bne.n	8010bd2 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8010bca:	2103      	movs	r1, #3
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7fe f896 	bl	800ecfe <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b088      	sub	sp, #32
 8010be2:	af02      	add	r7, sp, #8
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010be8:	2300      	movs	r3, #0
 8010bea:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8010bfe:	f003 0310 	and.w	r3, r3, #16
 8010c02:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d102      	bne.n	8010c10 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	75fb      	strb	r3, [r7, #23]
 8010c0e:	e001      	b.n	8010c14 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8010c10:	2300      	movs	r3, #0
 8010c12:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
 8010c16:	2201      	movs	r2, #1
 8010c18:	9201      	str	r2, [sp, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	9200      	str	r2, [sp, #0]
 8010c1e:	2231      	movs	r2, #49	; 0x31
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f98a 	bl	8010f3c <VL53L1_WaitValueMaskEx>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3718      	adds	r7, #24
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af02      	add	r7, sp, #8
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	330a      	adds	r3, #10
 8010c48:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8010c56:	b299      	uxth	r1, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	4613      	mov	r3, r2
 8010c62:	68ba      	ldr	r2, [r7, #8]
 8010c64:	f7f5 f9b0 	bl	8005fc8 <HAL_I2C_Master_Transmit>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010c6c:	693b      	ldr	r3, [r7, #16]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b088      	sub	sp, #32
 8010c7a:	af02      	add	r7, sp, #8
 8010c7c:	60f8      	str	r0, [r7, #12]
 8010c7e:	60b9      	str	r1, [r7, #8]
 8010c80:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	330a      	adds	r3, #10
 8010c86:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8010c94:	f043 0301 	orr.w	r3, r3, #1
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	b299      	uxth	r1, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	b29a      	uxth	r2, r3
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	68ba      	ldr	r2, [r7, #8]
 8010ca8:	f7f5 fa8c 	bl	80061c4 <HAL_I2C_Master_Receive>
 8010cac:	4603      	mov	r3, r0
 8010cae:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010cb0:	693b      	ldr	r3, [r7, #16]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3718      	adds	r7, #24
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b086      	sub	sp, #24
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	607a      	str	r2, [r7, #4]
 8010cc6:	603b      	str	r3, [r7, #0]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	2bff      	cmp	r3, #255	; 0xff
 8010cd4:	d902      	bls.n	8010cdc <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8010cd6:	f06f 0303 	mvn.w	r3, #3
 8010cda:	e01d      	b.n	8010d18 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010cdc:	897b      	ldrh	r3, [r7, #10]
 8010cde:	0a1b      	lsrs	r3, r3, #8
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	4b0e      	ldr	r3, [pc, #56]	; (8010d20 <VL53L1_WriteMulti+0x64>)
 8010ce6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010ce8:	897b      	ldrh	r3, [r7, #10]
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <VL53L1_WriteMulti+0x64>)
 8010cee:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	6879      	ldr	r1, [r7, #4]
 8010cf4:	480b      	ldr	r0, [pc, #44]	; (8010d24 <VL53L1_WriteMulti+0x68>)
 8010cf6:	f000 fb97 	bl	8011428 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	3302      	adds	r3, #2
 8010cfe:	461a      	mov	r2, r3
 8010d00:	4907      	ldr	r1, [pc, #28]	; (8010d20 <VL53L1_WriteMulti+0x64>)
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	f7ff ff98 	bl	8010c38 <_I2CWrite>
 8010d08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010d10:	23f3      	movs	r3, #243	; 0xf3
 8010d12:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8010d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3718      	adds	r7, #24
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	2000a030 	.word	0x2000a030
 8010d24:	2000a032 	.word	0x2000a032

08010d28 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b086      	sub	sp, #24
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	607a      	str	r2, [r7, #4]
 8010d32:	603b      	str	r3, [r7, #0]
 8010d34:	460b      	mov	r3, r1
 8010d36:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010d3c:	897b      	ldrh	r3, [r7, #10]
 8010d3e:	0a1b      	lsrs	r3, r3, #8
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	4b12      	ldr	r3, [pc, #72]	; (8010d90 <VL53L1_ReadMulti+0x68>)
 8010d46:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010d48:	897b      	ldrh	r3, [r7, #10]
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <VL53L1_ReadMulti+0x68>)
 8010d4e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010d50:	2202      	movs	r2, #2
 8010d52:	490f      	ldr	r1, [pc, #60]	; (8010d90 <VL53L1_ReadMulti+0x68>)
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f7ff ff6f 	bl	8010c38 <_I2CWrite>
 8010d5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d002      	beq.n	8010d68 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010d62:	23f3      	movs	r3, #243	; 0xf3
 8010d64:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010d66:	e00c      	b.n	8010d82 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010d68:	683a      	ldr	r2, [r7, #0]
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f7ff ff82 	bl	8010c76 <_I2CRead>
 8010d72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010d7a:	23f3      	movs	r3, #243	; 0xf3
 8010d7c:	75fb      	strb	r3, [r7, #23]
 8010d7e:	e000      	b.n	8010d82 <VL53L1_ReadMulti+0x5a>
    }
done:
 8010d80:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8010d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3718      	adds	r7, #24
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	2000a030 	.word	0x2000a030

08010d94 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	807b      	strh	r3, [r7, #2]
 8010da0:	4613      	mov	r3, r2
 8010da2:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8010da4:	2300      	movs	r3, #0
 8010da6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010da8:	887b      	ldrh	r3, [r7, #2]
 8010daa:	0a1b      	lsrs	r3, r3, #8
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	4b0c      	ldr	r3, [pc, #48]	; (8010de4 <VL53L1_WrByte+0x50>)
 8010db2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010db4:	887b      	ldrh	r3, [r7, #2]
 8010db6:	b2da      	uxtb	r2, r3
 8010db8:	4b0a      	ldr	r3, [pc, #40]	; (8010de4 <VL53L1_WrByte+0x50>)
 8010dba:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010dbc:	4a09      	ldr	r2, [pc, #36]	; (8010de4 <VL53L1_WrByte+0x50>)
 8010dbe:	787b      	ldrb	r3, [r7, #1]
 8010dc0:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010dc2:	2203      	movs	r2, #3
 8010dc4:	4907      	ldr	r1, [pc, #28]	; (8010de4 <VL53L1_WrByte+0x50>)
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f7ff ff36 	bl	8010c38 <_I2CWrite>
 8010dcc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d001      	beq.n	8010dd8 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010dd4:	23f3      	movs	r3, #243	; 0xf3
 8010dd6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8010dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	2000a030 	.word	0x2000a030

08010de8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	460b      	mov	r3, r1
 8010df2:	607a      	str	r2, [r7, #4]
 8010df4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8010dfa:	897b      	ldrh	r3, [r7, #10]
 8010dfc:	0a1b      	lsrs	r3, r3, #8
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	4b12      	ldr	r3, [pc, #72]	; (8010e4c <VL53L1_RdByte+0x64>)
 8010e04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010e06:	897b      	ldrh	r3, [r7, #10]
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	4b10      	ldr	r3, [pc, #64]	; (8010e4c <VL53L1_RdByte+0x64>)
 8010e0c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010e0e:	2202      	movs	r2, #2
 8010e10:	490e      	ldr	r1, [pc, #56]	; (8010e4c <VL53L1_RdByte+0x64>)
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f7ff ff10 	bl	8010c38 <_I2CWrite>
 8010e18:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010e20:	23f3      	movs	r3, #243	; 0xf3
 8010e22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e24:	e00c      	b.n	8010e40 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8010e26:	2201      	movs	r2, #1
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7ff ff23 	bl	8010c76 <_I2CRead>
 8010e30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010e38:	23f3      	movs	r3, #243	; 0xf3
 8010e3a:	75fb      	strb	r3, [r7, #23]
 8010e3c:	e000      	b.n	8010e40 <VL53L1_RdByte+0x58>
    }
done:
 8010e3e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8010e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	2000a030 	.word	0x2000a030

08010e50 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	607a      	str	r2, [r7, #4]
 8010e5c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010e62:	897b      	ldrh	r3, [r7, #10]
 8010e64:	0a1b      	lsrs	r3, r3, #8
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	4b18      	ldr	r3, [pc, #96]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010e6c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010e6e:	897b      	ldrh	r3, [r7, #10]
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b16      	ldr	r3, [pc, #88]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010e74:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010e76:	2202      	movs	r2, #2
 8010e78:	4914      	ldr	r1, [pc, #80]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f7ff fedc 	bl	8010c38 <_I2CWrite>
 8010e80:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010e88:	23f3      	movs	r3, #243	; 0xf3
 8010e8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e8c:	e017      	b.n	8010ebe <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010e8e:	2202      	movs	r2, #2
 8010e90:	490e      	ldr	r1, [pc, #56]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f7ff feef 	bl	8010c76 <_I2CRead>
 8010e98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010ea0:	23f3      	movs	r3, #243	; 0xf3
 8010ea2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010ea4:	e00b      	b.n	8010ebe <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	021b      	lsls	r3, r3, #8
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	4b06      	ldr	r3, [pc, #24]	; (8010ecc <VL53L1_RdWord+0x7c>)
 8010eb2:	785b      	ldrb	r3, [r3, #1]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	4413      	add	r3, r2
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8010ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	2000a030 	.word	0x2000a030

08010ed0 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8010ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3714      	adds	r7, #20
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr

08010ef2 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
 8010efa:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f3 fcda 	bl	80048b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
	...

08010f10 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	4a06      	ldr	r2, [pc, #24]	; (8010f38 <VL53L1_WaitUs+0x28>)
 8010f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8010f22:	1192      	asrs	r2, r2, #6
 8010f24:	17db      	asrs	r3, r3, #31
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7f3 fcc5 	bl	80048b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	10624dd3 	.word	0x10624dd3

08010f3c <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	f107 040c 	add.w	r4, r7, #12
 8010f48:	6020      	str	r0, [r4, #0]
 8010f4a:	f107 0008 	add.w	r0, r7, #8
 8010f4e:	6001      	str	r1, [r0, #0]
 8010f50:	4619      	mov	r1, r3
 8010f52:	1dbb      	adds	r3, r7, #6
 8010f54:	801a      	strh	r2, [r3, #0]
 8010f56:	1d7b      	adds	r3, r7, #5
 8010f58:	460a      	mov	r2, r1
 8010f5a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8010f62:	2300      	movs	r3, #0
 8010f64:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8010f80:	f107 0310 	add.w	r3, r7, #16
 8010f84:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010f88:	4935      	ldr	r1, [pc, #212]	; (8011060 <VL53L1_WaitValueMaskEx+0x124>)
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 fa62 	bl	8011454 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8010f90:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff ff9b 	bl	8010ed0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8010f9a:	e03f      	b.n	801101c <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8010f9c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10b      	bne.n	8010fbc <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 8010fa4:	f207 2213 	addw	r2, r7, #531	; 0x213
 8010fa8:	1dbb      	adds	r3, r7, #6
 8010faa:	8819      	ldrh	r1, [r3, #0]
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	6818      	ldr	r0, [r3, #0]
 8010fb2:	f7ff ff19 	bl	8010de8 <VL53L1_RdByte>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8010fbc:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8010fc0:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8010fc4:	4013      	ands	r3, r2
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	1d7a      	adds	r2, r7, #5
 8010fca:	7812      	ldrb	r2, [r2, #0]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d102      	bne.n	8010fd6 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8010fd6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d112      	bne.n	8011004 <VL53L1_WaitValueMaskEx+0xc8>
 8010fde:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d10e      	bne.n	8011004 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 8010fe6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00a      	beq.n	8011004 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8010fee:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8010ff2:	f107 030c 	add.w	r3, r7, #12
 8010ff6:	4611      	mov	r1, r2
 8010ff8:	6818      	ldr	r0, [r3, #0]
 8010ffa:	f7ff ff7a 	bl	8010ef2 <VL53L1_WaitMs>
 8010ffe:	4603      	mov	r3, r0
 8011000:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8011004:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8011008:	4618      	mov	r0, r3
 801100a:	f7ff ff61 	bl	8010ed0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801100e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011012:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 801101c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011020:	2b00      	cmp	r3, #0
 8011022:	d10a      	bne.n	801103a <VL53L1_WaitValueMaskEx+0xfe>
 8011024:	f107 0308 	add.w	r3, r7, #8
 8011028:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	429a      	cmp	r2, r3
 8011030:	d203      	bcs.n	801103a <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 8011032:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011036:	2b00      	cmp	r3, #0
 8011038:	d0b0      	beq.n	8010f9c <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 801103a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <VL53L1_WaitValueMaskEx+0x114>
 8011042:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011046:	2b00      	cmp	r3, #0
 8011048:	d102      	bne.n	8011050 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 801104a:	23f9      	movs	r3, #249	; 0xf9
 801104c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011050:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011054:	4618      	mov	r0, r3
 8011056:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 801105a:	46bd      	mov	sp, r7
 801105c:	bd90      	pop	{r4, r7, pc}
 801105e:	bf00      	nop
 8011060:	08011710 	.word	0x08011710

08011064 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b0a4      	sub	sp, #144	; 0x90
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801106e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	605a      	str	r2, [r3, #4]
 8011078:	609a      	str	r2, [r3, #8]
 801107a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 801107c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011080:	2200      	movs	r2, #0
 8011082:	601a      	str	r2, [r3, #0]
 8011084:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8011086:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	605a      	str	r2, [r3, #4]
 8011090:	609a      	str	r2, [r3, #8]
 8011092:	60da      	str	r2, [r3, #12]
 8011094:	611a      	str	r2, [r3, #16]
 8011096:	615a      	str	r2, [r3, #20]
 8011098:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 80110ac:	2301      	movs	r3, #1
 80110ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 80110b2:	2300      	movs	r3, #0
 80110b4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80110b8:	e009      	b.n	80110ce <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 80110ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 80110c4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80110c8:	3301      	adds	r3, #1
 80110ca:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80110ce:	79fa      	ldrb	r2, [r7, #7]
 80110d0:	494d      	ldr	r1, [pc, #308]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 80110d2:	4613      	mov	r3, r2
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	4413      	add	r3, r2
 80110d8:	009b      	lsls	r3, r3, #2
 80110da:	440b      	add	r3, r1
 80110dc:	3310      	adds	r3, #16
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d3e8      	bcc.n	80110ba <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 80110e8:	79fa      	ldrb	r2, [r7, #7]
 80110ea:	4947      	ldr	r1, [pc, #284]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 80110ec:	4613      	mov	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4413      	add	r3, r2
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	440b      	add	r3, r1
 80110f6:	3308      	adds	r3, #8
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	461a      	mov	r2, r3
 80110fc:	4b43      	ldr	r3, [pc, #268]	; (801120c <DC_MOTOR_Init+0x1a8>)
 80110fe:	fb03 f302 	mul.w	r3, r3, r2
 8011102:	4618      	mov	r0, r3
 8011104:	79fa      	ldrb	r2, [r7, #7]
 8011106:	4940      	ldr	r1, [pc, #256]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 8011108:	4613      	mov	r3, r2
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	4413      	add	r3, r2
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	440b      	add	r3, r1
 8011112:	330c      	adds	r3, #12
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801111a:	fb02 f303 	mul.w	r3, r2, r3
 801111e:	fbb0 f3f3 	udiv	r3, r0, r3
 8011122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 8011126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801112a:	3b01      	subs	r3, #1
 801112c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 8011130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011134:	3b02      	subs	r3, #2
 8011136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 801113a:	79fa      	ldrb	r2, [r7, #7]
 801113c:	4932      	ldr	r1, [pc, #200]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 801113e:	4613      	mov	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4413      	add	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	440b      	add	r3, r1
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 801114c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011150:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8011152:	2360      	movs	r3, #96	; 0x60
 8011154:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 8011156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801115a:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801115c:	2300      	movs	r3, #0
 801115e:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011160:	2380      	movs	r3, #128	; 0x80
 8011162:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 8011164:	f107 0308 	add.w	r3, r7, #8
 8011168:	4618      	mov	r0, r3
 801116a:	f7f7 fb89 	bl	8008880 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011172:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8011174:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011178:	f107 0308 	add.w	r3, r7, #8
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7f8 fc34 	bl	80099ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8011184:	f107 0308 	add.w	r3, r7, #8
 8011188:	4618      	mov	r0, r3
 801118a:	f7f7 fd2f 	bl	8008bec <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801118e:	2300      	movs	r3, #0
 8011190:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011192:	2300      	movs	r3, #0
 8011194:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8011196:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801119a:	f107 0308 	add.w	r3, r7, #8
 801119e:	4611      	mov	r1, r2
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f9 fbc3 	bl	800a92c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80111a6:	2360      	movs	r3, #96	; 0x60
 80111a8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 80111aa:	2300      	movs	r3, #0
 80111ac:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80111ae:	2300      	movs	r3, #0
 80111b0:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80111b2:	2300      	movs	r3, #0
 80111b4:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80111b6:	79fa      	ldrb	r2, [r7, #7]
 80111b8:	4913      	ldr	r1, [pc, #76]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 80111ba:	4613      	mov	r3, r2
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	4413      	add	r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	440b      	add	r3, r1
 80111c4:	3304      	adds	r3, #4
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80111cc:	f107 0308 	add.w	r3, r7, #8
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7f8 fa33 	bl	800963c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 80111d6:	f107 0308 	add.w	r3, r7, #8
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f3 f8e8 	bl	80043b0 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80111e0:	79fa      	ldrb	r2, [r7, #7]
 80111e2:	4909      	ldr	r1, [pc, #36]	; (8011208 <DC_MOTOR_Init+0x1a4>)
 80111e4:	4613      	mov	r3, r2
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	440b      	add	r3, r1
 80111ee:	3304      	adds	r3, #4
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	f107 0308 	add.w	r3, r7, #8
 80111f6:	4611      	mov	r1, r2
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f7 fde7 	bl	8008dcc <HAL_TIM_PWM_Start>
}
 80111fe:	bf00      	nop
 8011200:	3790      	adds	r7, #144	; 0x90
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	08011754 	.word	0x08011754
 801120c:	000f4240 	.word	0x000f4240

08011210 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	4603      	mov	r3, r0
 8011218:	460a      	mov	r2, r1
 801121a:	71fb      	strb	r3, [r7, #7]
 801121c:	4613      	mov	r3, r2
 801121e:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8011220:	79fa      	ldrb	r2, [r7, #7]
 8011222:	4928      	ldr	r1, [pc, #160]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	440b      	add	r3, r1
 801122e:	3304      	adds	r3, #4
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d10a      	bne.n	801124c <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8011236:	79fa      	ldrb	r2, [r7, #7]
 8011238:	4922      	ldr	r1, [pc, #136]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 801123a:	4613      	mov	r3, r2
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	440b      	add	r3, r1
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	88ba      	ldrh	r2, [r7, #4]
 8011248:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 801124a:	e035      	b.n	80112b8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 801124c:	79fa      	ldrb	r2, [r7, #7]
 801124e:	491d      	ldr	r1, [pc, #116]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 8011250:	4613      	mov	r3, r2
 8011252:	009b      	lsls	r3, r3, #2
 8011254:	4413      	add	r3, r2
 8011256:	009b      	lsls	r3, r3, #2
 8011258:	440b      	add	r3, r1
 801125a:	3304      	adds	r3, #4
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b04      	cmp	r3, #4
 8011260:	d10a      	bne.n	8011278 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8011262:	79fa      	ldrb	r2, [r7, #7]
 8011264:	4917      	ldr	r1, [pc, #92]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 8011266:	4613      	mov	r3, r2
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	4413      	add	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	440b      	add	r3, r1
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	88ba      	ldrh	r2, [r7, #4]
 8011274:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011276:	e01f      	b.n	80112b8 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8011278:	79fa      	ldrb	r2, [r7, #7]
 801127a:	4912      	ldr	r1, [pc, #72]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 801127c:	4613      	mov	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4413      	add	r3, r2
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	440b      	add	r3, r1
 8011286:	3304      	adds	r3, #4
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b08      	cmp	r3, #8
 801128c:	d10a      	bne.n	80112a4 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 801128e:	79fa      	ldrb	r2, [r7, #7]
 8011290:	490c      	ldr	r1, [pc, #48]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 8011292:	4613      	mov	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	440b      	add	r3, r1
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	88ba      	ldrh	r2, [r7, #4]
 80112a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80112a2:	e009      	b.n	80112b8 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80112a4:	79fa      	ldrb	r2, [r7, #7]
 80112a6:	4907      	ldr	r1, [pc, #28]	; (80112c4 <DC_MOTOR_Start+0xb4>)
 80112a8:	4613      	mov	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	4413      	add	r3, r2
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	440b      	add	r3, r1
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	88ba      	ldrh	r2, [r7, #4]
 80112b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	08011754 	.word	0x08011754

080112c8 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	460a      	mov	r2, r1
 80112d2:	71fb      	strb	r3, [r7, #7]
 80112d4:	4613      	mov	r3, r2
 80112d6:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80112d8:	79fa      	ldrb	r2, [r7, #7]
 80112da:	4928      	ldr	r1, [pc, #160]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 80112dc:	4613      	mov	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	440b      	add	r3, r1
 80112e6:	3304      	adds	r3, #4
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10a      	bne.n	8011304 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80112ee:	79fa      	ldrb	r2, [r7, #7]
 80112f0:	4922      	ldr	r1, [pc, #136]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 80112f2:	4613      	mov	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	440b      	add	r3, r1
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	88ba      	ldrh	r2, [r7, #4]
 8011300:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8011302:	e035      	b.n	8011370 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8011304:	79fa      	ldrb	r2, [r7, #7]
 8011306:	491d      	ldr	r1, [pc, #116]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 8011308:	4613      	mov	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	440b      	add	r3, r1
 8011312:	3304      	adds	r3, #4
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b04      	cmp	r3, #4
 8011318:	d10a      	bne.n	8011330 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 801131a:	79fa      	ldrb	r2, [r7, #7]
 801131c:	4917      	ldr	r1, [pc, #92]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 801131e:	4613      	mov	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4413      	add	r3, r2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	440b      	add	r3, r1
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	88ba      	ldrh	r2, [r7, #4]
 801132c:	639a      	str	r2, [r3, #56]	; 0x38
}
 801132e:	e01f      	b.n	8011370 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8011330:	79fa      	ldrb	r2, [r7, #7]
 8011332:	4912      	ldr	r1, [pc, #72]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 8011334:	4613      	mov	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	440b      	add	r3, r1
 801133e:	3304      	adds	r3, #4
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b08      	cmp	r3, #8
 8011344:	d10a      	bne.n	801135c <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8011346:	79fa      	ldrb	r2, [r7, #7]
 8011348:	490c      	ldr	r1, [pc, #48]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 801134a:	4613      	mov	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4413      	add	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	440b      	add	r3, r1
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	88ba      	ldrh	r2, [r7, #4]
 8011358:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801135a:	e009      	b.n	8011370 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 801135c:	79fa      	ldrb	r2, [r7, #7]
 801135e:	4907      	ldr	r1, [pc, #28]	; (801137c <DC_MOTOR_Set_Speed+0xb4>)
 8011360:	4613      	mov	r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4413      	add	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	440b      	add	r3, r1
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	88ba      	ldrh	r2, [r7, #4]
 801136e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	08011754 	.word	0x08011754

08011380 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8011380:	b480      	push	{r7}
 8011382:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8011384:	4b14      	ldr	r3, [pc, #80]	; (80113d8 <DWT_Delay_Init+0x58>)
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	4a13      	ldr	r2, [pc, #76]	; (80113d8 <DWT_Delay_Init+0x58>)
 801138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801138e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8011390:	4b11      	ldr	r3, [pc, #68]	; (80113d8 <DWT_Delay_Init+0x58>)
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	4a10      	ldr	r2, [pc, #64]	; (80113d8 <DWT_Delay_Init+0x58>)
 8011396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801139a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 801139c:	4b0f      	ldr	r3, [pc, #60]	; (80113dc <DWT_Delay_Init+0x5c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a0e      	ldr	r2, [pc, #56]	; (80113dc <DWT_Delay_Init+0x5c>)
 80113a2:	f023 0301 	bic.w	r3, r3, #1
 80113a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80113a8:	4b0c      	ldr	r3, [pc, #48]	; (80113dc <DWT_Delay_Init+0x5c>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a0b      	ldr	r2, [pc, #44]	; (80113dc <DWT_Delay_Init+0x5c>)
 80113ae:	f043 0301 	orr.w	r3, r3, #1
 80113b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80113b4:	4b09      	ldr	r3, [pc, #36]	; (80113dc <DWT_Delay_Init+0x5c>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80113ba:	bf00      	nop
    __ASM volatile ("NOP");
 80113bc:	bf00      	nop
    __ASM volatile ("NOP");
 80113be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80113c0:	4b06      	ldr	r3, [pc, #24]	; (80113dc <DWT_Delay_Init+0x5c>)
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d001      	beq.n	80113cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80113c8:	2300      	movs	r3, #0
 80113ca:	e000      	b.n	80113ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80113cc:	2301      	movs	r3, #1
    }
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	e000edf0 	.word	0xe000edf0
 80113dc:	e0001000 	.word	0xe0001000

080113e0 <__libc_init_array>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	4d0d      	ldr	r5, [pc, #52]	; (8011418 <__libc_init_array+0x38>)
 80113e4:	4c0d      	ldr	r4, [pc, #52]	; (801141c <__libc_init_array+0x3c>)
 80113e6:	1b64      	subs	r4, r4, r5
 80113e8:	10a4      	asrs	r4, r4, #2
 80113ea:	2600      	movs	r6, #0
 80113ec:	42a6      	cmp	r6, r4
 80113ee:	d109      	bne.n	8011404 <__libc_init_array+0x24>
 80113f0:	4d0b      	ldr	r5, [pc, #44]	; (8011420 <__libc_init_array+0x40>)
 80113f2:	4c0c      	ldr	r4, [pc, #48]	; (8011424 <__libc_init_array+0x44>)
 80113f4:	f000 f842 	bl	801147c <_init>
 80113f8:	1b64      	subs	r4, r4, r5
 80113fa:	10a4      	asrs	r4, r4, #2
 80113fc:	2600      	movs	r6, #0
 80113fe:	42a6      	cmp	r6, r4
 8011400:	d105      	bne.n	801140e <__libc_init_array+0x2e>
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	f855 3b04 	ldr.w	r3, [r5], #4
 8011408:	4798      	blx	r3
 801140a:	3601      	adds	r6, #1
 801140c:	e7ee      	b.n	80113ec <__libc_init_array+0xc>
 801140e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011412:	4798      	blx	r3
 8011414:	3601      	adds	r6, #1
 8011416:	e7f2      	b.n	80113fe <__libc_init_array+0x1e>
 8011418:	08011784 	.word	0x08011784
 801141c:	08011784 	.word	0x08011784
 8011420:	08011784 	.word	0x08011784
 8011424:	08011788 	.word	0x08011788

08011428 <memcpy>:
 8011428:	440a      	add	r2, r1
 801142a:	4291      	cmp	r1, r2
 801142c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011430:	d100      	bne.n	8011434 <memcpy+0xc>
 8011432:	4770      	bx	lr
 8011434:	b510      	push	{r4, lr}
 8011436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801143a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801143e:	4291      	cmp	r1, r2
 8011440:	d1f9      	bne.n	8011436 <memcpy+0xe>
 8011442:	bd10      	pop	{r4, pc}

08011444 <memset>:
 8011444:	4402      	add	r2, r0
 8011446:	4603      	mov	r3, r0
 8011448:	4293      	cmp	r3, r2
 801144a:	d100      	bne.n	801144e <memset+0xa>
 801144c:	4770      	bx	lr
 801144e:	f803 1b01 	strb.w	r1, [r3], #1
 8011452:	e7f9      	b.n	8011448 <memset+0x4>

08011454 <strncpy>:
 8011454:	b510      	push	{r4, lr}
 8011456:	3901      	subs	r1, #1
 8011458:	4603      	mov	r3, r0
 801145a:	b132      	cbz	r2, 801146a <strncpy+0x16>
 801145c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011460:	f803 4b01 	strb.w	r4, [r3], #1
 8011464:	3a01      	subs	r2, #1
 8011466:	2c00      	cmp	r4, #0
 8011468:	d1f7      	bne.n	801145a <strncpy+0x6>
 801146a:	441a      	add	r2, r3
 801146c:	2100      	movs	r1, #0
 801146e:	4293      	cmp	r3, r2
 8011470:	d100      	bne.n	8011474 <strncpy+0x20>
 8011472:	bd10      	pop	{r4, pc}
 8011474:	f803 1b01 	strb.w	r1, [r3], #1
 8011478:	e7f9      	b.n	801146e <strncpy+0x1a>
	...

0801147c <_init>:
 801147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147e:	bf00      	nop
 8011480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011482:	bc08      	pop	{r3}
 8011484:	469e      	mov	lr, r3
 8011486:	4770      	bx	lr

08011488 <_fini>:
 8011488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801148a:	bf00      	nop
 801148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801148e:	bc08      	pop	{r3}
 8011490:	469e      	mov	lr, r3
 8011492:	4770      	bx	lr
