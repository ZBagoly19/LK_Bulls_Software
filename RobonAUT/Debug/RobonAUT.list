
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fecc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08010090  08010090  00020090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010378  08010378  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  08010378  08010378  00020378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010380  08010380  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010384  08010384  00020384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08010388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000164  080104ec  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  080104ec  00030770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032543  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9b  00000000  00000000  000626d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00066578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00068120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  00069b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a034  00000000  00000000  00092d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f642c  00000000  00000000  000bcdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b31d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007810  00000000  00000000  001b322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000164 	.word	0x20000164
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08010078 	.word	0x08010078

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000168 	.word	0x20000168
 8000200:	08010078 	.word	0x08010078

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b96e 	b.w	8000cd4 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468c      	mov	ip, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8083 	bne.w	8000b26 <__udivmoddi4+0x116>
 8000a20:	428a      	cmp	r2, r1
 8000a22:	4617      	mov	r7, r2
 8000a24:	d947      	bls.n	8000ab6 <__udivmoddi4+0xa6>
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	b142      	cbz	r2, 8000a3e <__udivmoddi4+0x2e>
 8000a2c:	f1c2 0020 	rsb	r0, r2, #32
 8000a30:	fa24 f000 	lsr.w	r0, r4, r0
 8000a34:	4091      	lsls	r1, r2
 8000a36:	4097      	lsls	r7, r2
 8000a38:	ea40 0c01 	orr.w	ip, r0, r1
 8000a3c:	4094      	lsls	r4, r2
 8000a3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a42:	0c23      	lsrs	r3, r4, #16
 8000a44:	fbbc f6f8 	udiv	r6, ip, r8
 8000a48:	fa1f fe87 	uxth.w	lr, r7
 8000a4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000a50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a54:	fb06 f10e 	mul.w	r1, r6, lr
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x60>
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 8119 	bcs.w	8000c98 <__udivmoddi4+0x288>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 8116 	bls.w	8000c98 <__udivmoddi4+0x288>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x8c>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8e:	f080 8105 	bcs.w	8000c9c <__udivmoddi4+0x28c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f240 8102 	bls.w	8000c9c <__udivmoddi4+0x28c>
 8000a98:	3802      	subs	r0, #2
 8000a9a:	443c      	add	r4, r7
 8000a9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa0:	eba4 040e 	sub.w	r4, r4, lr
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa0>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xaa>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d150      	bne.n	8000b64 <__udivmoddi4+0x154>
 8000ac2:	1bcb      	subs	r3, r1, r7
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	fa1f f887 	uxth.w	r8, r7
 8000acc:	2601      	movs	r6, #1
 8000ace:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad2:	0c21      	lsrs	r1, r4, #16
 8000ad4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ad8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000adc:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xe4>
 8000ae4:	1879      	adds	r1, r7, r1
 8000ae6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aea:	d202      	bcs.n	8000af2 <__udivmoddi4+0xe2>
 8000aec:	428b      	cmp	r3, r1
 8000aee:	f200 80e9 	bhi.w	8000cc4 <__udivmoddi4+0x2b4>
 8000af2:	4684      	mov	ip, r0
 8000af4:	1ac9      	subs	r1, r1, r3
 8000af6:	b2a3      	uxth	r3, r4
 8000af8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000afc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b04:	fb08 f800 	mul.w	r8, r8, r0
 8000b08:	45a0      	cmp	r8, r4
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0x10c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x10a>
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	f200 80d9 	bhi.w	8000ccc <__udivmoddi4+0x2bc>
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	eba4 0408 	sub.w	r4, r4, r8
 8000b20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b24:	e7bf      	b.n	8000aa6 <__udivmoddi4+0x96>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x12e>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80b1 	beq.w	8000c92 <__udivmoddi4+0x282>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x1cc>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0x140>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80b8 	bhi.w	8000cc0 <__udivmoddi4+0x2b0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0103 	sbc.w	r1, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	468c      	mov	ip, r1
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0a8      	beq.n	8000ab0 <__udivmoddi4+0xa0>
 8000b5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000b64:	f1c2 0320 	rsb	r3, r2, #32
 8000b68:	fa20 f603 	lsr.w	r6, r0, r3
 8000b6c:	4097      	lsls	r7, r2
 8000b6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000b72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b76:	40d9      	lsrs	r1, r3
 8000b78:	4330      	orrs	r0, r6
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b80:	fa1f f887 	uxth.w	r8, r7
 8000b84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8c:	fb06 f108 	mul.w	r1, r6, r8
 8000b90:	4299      	cmp	r1, r3
 8000b92:	fa04 f402 	lsl.w	r4, r4, r2
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x19c>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b9e:	f080 808d 	bcs.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 808a 	bls.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b281      	uxth	r1, r0
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb00 f308 	mul.w	r3, r0, r8
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d907      	bls.n	8000bd4 <__udivmoddi4+0x1c4>
 8000bc4:	1879      	adds	r1, r7, r1
 8000bc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bca:	d273      	bcs.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d971      	bls.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4439      	add	r1, r7
 8000bd4:	1acb      	subs	r3, r1, r3
 8000bd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bda:	e778      	b.n	8000ace <__udivmoddi4+0xbe>
 8000bdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000be0:	fa03 f406 	lsl.w	r4, r3, r6
 8000be4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000be8:	431c      	orrs	r4, r3
 8000bea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	0c3b      	lsrs	r3, r7, #16
 8000bfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c02:	fa1f f884 	uxth.w	r8, r4
 8000c06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000c12:	458a      	cmp	sl, r1
 8000c14:	fa02 f206 	lsl.w	r2, r2, r6
 8000c18:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x220>
 8000c1e:	1861      	adds	r1, r4, r1
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	d248      	bcs.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c26:	458a      	cmp	sl, r1
 8000c28:	d946      	bls.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2e:	4421      	add	r1, r4
 8000c30:	eba1 010a 	sub.w	r1, r1, sl
 8000c34:	b2bf      	uxth	r7, r7
 8000c36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c42:	fb00 f808 	mul.w	r8, r0, r8
 8000c46:	45b8      	cmp	r8, r7
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x24a>
 8000c4a:	19e7      	adds	r7, r4, r7
 8000c4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c50:	d22e      	bcs.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d92c      	bls.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c56:	3802      	subs	r0, #2
 8000c58:	4427      	add	r7, r4
 8000c5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5e:	eba7 0708 	sub.w	r7, r7, r8
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	454f      	cmp	r7, r9
 8000c68:	46c6      	mov	lr, r8
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	d31a      	bcc.n	8000ca4 <__udivmoddi4+0x294>
 8000c6e:	d017      	beq.n	8000ca0 <__udivmoddi4+0x290>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x27a>
 8000c72:	ebb3 020e 	subs.w	r2, r3, lr
 8000c76:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c7e:	40f2      	lsrs	r2, r6
 8000c80:	ea4c 0202 	orr.w	r2, ip, r2
 8000c84:	40f7      	lsrs	r7, r6
 8000c86:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	462e      	mov	r6, r5
 8000c94:	4628      	mov	r0, r5
 8000c96:	e70b      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	e6e9      	b.n	8000a70 <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fd      	b.n	8000a9c <__udivmoddi4+0x8c>
 8000ca0:	4543      	cmp	r3, r8
 8000ca2:	d2e5      	bcs.n	8000c70 <__udivmoddi4+0x260>
 8000ca4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca8:	eb69 0104 	sbc.w	r1, r9, r4
 8000cac:	3801      	subs	r0, #1
 8000cae:	e7df      	b.n	8000c70 <__udivmoddi4+0x260>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e7d2      	b.n	8000c5a <__udivmoddi4+0x24a>
 8000cb4:	4660      	mov	r0, ip
 8000cb6:	e78d      	b.n	8000bd4 <__udivmoddi4+0x1c4>
 8000cb8:	4681      	mov	r9, r0
 8000cba:	e7b9      	b.n	8000c30 <__udivmoddi4+0x220>
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	e775      	b.n	8000bac <__udivmoddi4+0x19c>
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e74a      	b.n	8000b5a <__udivmoddi4+0x14a>
 8000cc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc8:	4439      	add	r1, r7
 8000cca:	e713      	b.n	8000af4 <__udivmoddi4+0xe4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	443c      	add	r4, r7
 8000cd0:	e724      	b.n	8000b1c <__udivmoddi4+0x10c>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b0a8      	sub	sp, #160	; 0xa0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000d1a:	f00f f92f 	bl	800ff7c <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4aaa      	ldr	r2, [pc, #680]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	4413      	add	r3, r2
 8000d26:	3314      	adds	r3, #20
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbac 	bl	8000488 <__aeabi_ui2d>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4ba6      	ldr	r3, [pc, #664]	; (8000fd0 <SERVO_Init+0x2f8>)
 8000d36:	f7ff fd4b 	bl	80007d0 <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	f7ff fe2d 	bl	80009a0 <__aeabi_d2uiz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4a9f      	ldr	r2, [pc, #636]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d50:	015b      	lsls	r3, r3, #5
 8000d52:	4413      	add	r3, r2
 8000d54:	3314      	adds	r3, #20
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb95 	bl	8000488 <__aeabi_ui2d>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000d66:	f7ff fb8f 	bl	8000488 <__aeabi_ui2d>
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000d70:	f7ff fa4e 	bl	8000210 <__adddf3>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b95      	ldr	r3, [pc, #596]	; (8000fd8 <SERVO_Init+0x300>)
 8000d82:	f7ff fbfb 	bl	800057c <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fd1f 	bl	80007d0 <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000da0:	f7ff fa34 	bl	800020c <__aeabi_dsub>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fdf8 	bl	80009a0 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000db6:	2313      	movs	r3, #19
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000dbc:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4a81      	ldr	r2, [pc, #516]	; (8000fcc <SERVO_Init+0x2f4>)
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4413      	add	r3, r2
 8000dcc:	3308      	adds	r3, #8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a82      	ldr	r2, [pc, #520]	; (8000fdc <SERVO_Init+0x304>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <SERVO_Init+0x308>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a80      	ldr	r2, [pc, #512]	; (8000fe0 <SERVO_Init+0x308>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <SERVO_Init+0x308>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	e046      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	4a75      	ldr	r2, [pc, #468]	; (8000fcc <SERVO_Init+0x2f4>)
 8000df8:	015b      	lsls	r3, r3, #5
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d10e      	bne.n	8000e24 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <SERVO_Init+0x308>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a74      	ldr	r2, [pc, #464]	; (8000fe0 <SERVO_Init+0x308>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b72      	ldr	r3, [pc, #456]	; (8000fe0 <SERVO_Init+0x308>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	e02e      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4a69      	ldr	r2, [pc, #420]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <SERVO_Init+0x30c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <SERVO_Init+0x308>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <SERVO_Init+0x308>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <SERVO_Init+0x308>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	e016      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e58:	015b      	lsls	r3, r3, #5
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a61      	ldr	r2, [pc, #388]	; (8000fe8 <SERVO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <SERVO_Init+0x308>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <SERVO_Init+0x308>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <SERVO_Init+0x308>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	4413      	add	r3, r2
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e94:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fae5 	bl	800747c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000eba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fb8f 	bl	80085e8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fc8a 	bl	80077e8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000ee0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 fb1c 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3310      	adds	r3, #16
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f007 f98f 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8000f1a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f1e:	f7ff fab3 	bl	8000488 <__aeabi_ui2d>
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3318      	adds	r3, #24
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faca 	bl	80004cc <__aeabi_f2d>
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <SERVO_Init+0x314>)
 8000f3e:	f7ff fc47 	bl	80007d0 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4620      	mov	r0, r4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	f7ff fb17 	bl	800057c <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	88fc      	ldrh	r4, [r7, #6]
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fd22 	bl	80009a0 <__aeabi_d2uiz>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SERVO_Init+0x318>)
 8000f62:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8000f66:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f6a:	f7ff fa8d 	bl	8000488 <__aeabi_ui2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <SERVO_Init+0x31c>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faa9 	bl	80004cc <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <SERVO_Init+0x314>)
 8000f80:	f7ff fc26 	bl	80007d0 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff faf6 	bl	800057c <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	88fc      	ldrh	r4, [r7, #6]
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd01 	bl	80009a0 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <SERVO_Init+0x318>)
 8000fa4:	00a3      	lsls	r3, r4, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	460a      	mov	r2, r1
 8000faa:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SERVO_Init+0x2f4>)
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fd02 	bl	80079c8 <HAL_TIM_PWM_Start>

}
 8000fc4:	bf00      	nop
 8000fc6:	37a0      	adds	r7, #160	; 0xa0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	08010310 	.word	0x08010310
 8000fd0:	41490000 	.word	0x41490000
 8000fd4:	3ff00000 	.word	0x3ff00000
 8000fd8:	40490000 	.word	0x40490000
 8000fdc:	40001800 	.word	0x40001800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	40340000 	.word	0x40340000
 8000ff0:	20000180 	.word	0x20000180
 8000ff4:	40066666 	.word	0x40066666

08000ff8 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	ed87 0a00 	vstr	s0, [r7]
 8001004:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <SERVO_MoveTo+0x94>)
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	885b      	ldrh	r3, [r3, #2]
 8001014:	4619      	mov	r1, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SERVO_MoveTo+0x94>)
 800101a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	ee17 0a90 	vmov	r0, s15
 8001034:	f7ff fa4a 	bl	80004cc <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SERVO_MoveTo+0x98>)
 800103e:	f7ff fbc7 	bl	80007d0 <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <SERVO_MoveTo+0x94>)
 800104e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa28 	bl	80004a8 <__aeabi_i2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f8d6 	bl	8000210 <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fc98 	bl	80009a0 <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SERVO_MoveTo+0x9c>)
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	4413      	add	r3, r2
 800107c:	330c      	adds	r3, #12
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	89fa      	ldrh	r2, [r7, #14]
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	20000180 	.word	0x20000180
 8001090:	40668000 	.word	0x40668000
 8001094:	08010310 	.word	0x08010310

08001098 <HAL_UART_RxCpltCallback>:
void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny);	//aktualisan chip selectelt adc-bol parameterben adott chanelen olvas; ret: [0, 3]
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80010c6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f002 f97f 	bl	80033d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 fa55 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fea7 	bl	8001e28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010da:	f000 fe5b 	bl	8001d94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010de:	f000 fac1 	bl	8001664 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010e2:	f000 faed 	bl	80016c0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010e6:	f000 fb7d 	bl	80017e4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010ea:	f000 fbb1 	bl	8001850 <MX_SPI3_Init>
  MX_TIM3_Init();
 80010ee:	f000 fc33 	bl	8001958 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f2:	f000 fc8b 	bl	8001a0c <MX_TIM4_Init>
  MX_UART4_Init();
 80010f6:	f000 fdf9 	bl	8001cec <MX_UART4_Init>
  MX_TIM8_Init();
 80010fa:	f000 fcdb 	bl	8001ab4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80010fe:	f000 fe1f 	bl	8001d40 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001102:	f000 fb0b 	bl	800171c <MX_I2C3_Init>
  MX_TIM12_Init();
 8001106:	f000 fd81 	bl	8001c0c <MX_TIM12_Init>
  MX_DMA_Init();
 800110a:	f000 fe6d 	bl	8001de8 <MX_DMA_Init>
  MX_TIM2_Init();
 800110e:	f000 fbd5 	bl	80018bc <MX_TIM2_Init>
  MX_SPI1_Init();
 8001112:	f000 fb31 	bl	8001778 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fdde 	bl	8000cd8 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800111c:	2000      	movs	r0, #0
 800111e:	f00e fd9f 	bl	800fc60 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001122:	2001      	movs	r0, #1
 8001124:	f00e fd9c 	bl	800fc60 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f00e fe6e 	bl	800fe0c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f00e fe6a 	bl	800fe0c <DC_MOTOR_Start>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001138:	48cd      	ldr	r0, [pc, #820]	; (8001470 <main+0x3b0>)
 800113a:	f006 fa8f 	bl	800765c <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 800113e:	2104      	movs	r1, #4
 8001140:	48cc      	ldr	r0, [pc, #816]	; (8001474 <main+0x3b4>)
 8001142:	f006 fc41 	bl	80079c8 <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 8001146:	f000 ff39 	bl	8001fbc <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 800114a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800114e:	4aca      	ldr	r2, [pc, #808]	; (8001478 <main+0x3b8>)
 8001150:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 8001154:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001158:	2252      	movs	r2, #82	; 0x52
 800115a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 800115e:	2314      	movs	r3, #20
 8001160:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001170:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2303      	movs	r3, #3
 800117c:	2184      	movs	r1, #132	; 0x84
 800117e:	48be      	ldr	r0, [pc, #760]	; (8001478 <main+0x3b8>)
 8001180:	f003 fd20 	bl	8004bc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001184:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2303      	movs	r3, #3
 8001190:	2186      	movs	r1, #134	; 0x86
 8001192:	48b9      	ldr	r0, [pc, #740]	; (8001478 <main+0x3b8>)
 8001194:	f003 fd16 	bl	8004bc4 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001198:	2313      	movs	r3, #19
 800119a:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800119e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2184      	movs	r1, #132	; 0x84
 80011ac:	48b2      	ldr	r0, [pc, #712]	; (8001478 <main+0x3b8>)
 80011ae:	f003 fd09 	bl	8004bc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011b2:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2184      	movs	r1, #132	; 0x84
 80011c0:	48ad      	ldr	r0, [pc, #692]	; (8001478 <main+0x3b8>)
 80011c2:	f003 fdfd 	bl	8004dc0 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80011c6:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 80011ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80011d4:	2313      	movs	r3, #19
 80011d6:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80011da:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2184      	movs	r1, #132	; 0x84
 80011e8:	48a3      	ldr	r0, [pc, #652]	; (8001478 <main+0x3b8>)
 80011ea:	f003 fceb 	bl	8004bc4 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 80011ee:	2002      	movs	r0, #2
 80011f0:	f002 f960 	bl	80034b4 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 80011f4:	2313      	movs	r3, #19
 80011f6:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011fa:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	2184      	movs	r1, #132	; 0x84
 8001208:	489b      	ldr	r0, [pc, #620]	; (8001478 <main+0x3b8>)
 800120a:	f003 fcdb 	bl	8004bc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 800120e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2184      	movs	r1, #132	; 0x84
 800121c:	4896      	ldr	r0, [pc, #600]	; (8001478 <main+0x3b8>)
 800121e:	f003 fdcf 	bl	8004dc0 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001222:	f897 33c4 	ldrb.w	r3, [r7, #964]	; 0x3c4
 8001226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f887 33c5 	strb.w	r3, [r7, #965]	; 0x3c5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001230:	2313      	movs	r3, #19
 8001232:	f887 33c4 	strb.w	r3, [r7, #964]	; 0x3c4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001236:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	2184      	movs	r1, #132	; 0x84
 8001244:	488c      	ldr	r0, [pc, #560]	; (8001478 <main+0x3b8>)
 8001246:	f003 fcbd 	bl	8004bc4 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 800124a:	2002      	movs	r0, #2
 800124c:	f002 f932 	bl	80034b4 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 8001250:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001254:	f009 faaa 	bl	800a7ac <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 8001258:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800125c:	f009 fa4e 	bl	800a6fc <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 8001260:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001264:	f009 fa83 	bl	800a76e <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8001268:	2103      	movs	r1, #3
 800126a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800126e:	f009 fbcf 	bl	800aa10 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8001272:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001276:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800127a:	f009 fc3f 	bl	800aafc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 800127e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001282:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001286:	f009 fdc5 	bl	800ae14 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 800128a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800128e:	f009 feff 	bl	800b090 <VL53L1_StartMeasurement>
		kapu2 = kapuk[2];
		kapu3 = kapuk[3];
		kapu4 = kapuk[4];				ez a resz itt valahogy gebaszt okoz, akasztja a while-t
		kapu5 = kapuk[5];*/

		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001298:	e010      	b.n	80012bc <main+0x1fc>
			vonalak_elso[i] = '-';
 800129a:	4a78      	ldr	r2, [pc, #480]	; (800147c <main+0x3bc>)
 800129c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012a0:	4413      	add	r3, r2
 80012a2:	222d      	movs	r2, #45	; 0x2d
 80012a4:	701a      	strb	r2, [r3, #0]
			vonalak_hatso[i] = '-';
 80012a6:	4a76      	ldr	r2, [pc, #472]	; (8001480 <main+0x3c0>)
 80012a8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012ac:	4413      	add	r3, r2
 80012ae:	222d      	movs	r2, #45	; 0x2d
 80012b0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80012b2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012b6:	3301      	adds	r3, #1
 80012b8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80012bc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	ddea      	ble.n	800129a <main+0x1da>
		}
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80012ca:	e010      	b.n	80012ee <main+0x22e>
			vonal_eredmeny_elso[i] = '-';
 80012cc:	4a6d      	ldr	r2, [pc, #436]	; (8001484 <main+0x3c4>)
 80012ce:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80012d2:	4413      	add	r3, r2
 80012d4:	222d      	movs	r2, #45	; 0x2d
 80012d6:	701a      	strb	r2, [r3, #0]
			vonal_eredmeny_hatso[i] = '-';
 80012d8:	4a6b      	ldr	r2, [pc, #428]	; (8001488 <main+0x3c8>)
 80012da:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80012de:	4413      	add	r3, r2
 80012e0:	222d      	movs	r2, #45	; 0x2d
 80012e2:	701a      	strb	r2, [r3, #0]
		for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 80012e4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80012e8:	3301      	adds	r3, #1
 80012ea:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80012ee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	ddea      	ble.n	80012cc <main+0x20c>
		}

		Vonalszenzor_operal(vonal_eredmeny_elso, vonal_eredmeny_hatso);
 80012f6:	4964      	ldr	r1, [pc, #400]	; (8001488 <main+0x3c8>)
 80012f8:	4862      	ldr	r0, [pc, #392]	; (8001484 <main+0x3c4>)
 80012fa:	f000 fe71 	bl	8001fe0 <Vonalszenzor_operal>
		for(int poz=1; poz < 33-1; poz++) {
 80012fe:	2301      	movs	r3, #1
 8001300:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001304:	e03b      	b.n	800137e <main+0x2be>
		// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
			if(vonal_eredmeny_elso[poz] > VONAL_THRESHOLD) {
 8001306:	4a5f      	ldr	r2, [pc, #380]	; (8001484 <main+0x3c4>)
 8001308:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <main+0x3cc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	dd2c      	ble.n	8001374 <main+0x2b4>
				if(vonal_eredmeny_elso[poz+1] > VONAL_THRESHOLD) {
 800131a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800131e:	3301      	adds	r3, #1
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <main+0x3c4>)
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	461a      	mov	r2, r3
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <main+0x3cc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	dd22      	ble.n	8001374 <main+0x2b4>
					if(vonal_eredmeny_elso[poz-1] < VONAL_THRESHOLD) {
 800132e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001332:	3b01      	subs	r3, #1
 8001334:	4a53      	ldr	r2, [pc, #332]	; (8001484 <main+0x3c4>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	461a      	mov	r2, r3
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <main+0x3cc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	da18      	bge.n	8001374 <main+0x2b4>
						int i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
							while(vonalak_elso[i] != '-') {
 8001348:	e004      	b.n	8001354 <main+0x294>
								i++;
 800134a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
							while(vonalak_elso[i] != '-') {
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <main+0x3bc>)
 8001356:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b2d      	cmp	r3, #45	; 0x2d
 8001360:	d1f3      	bne.n	800134a <main+0x28a>
							}
							vonalak_elso[i] = poz;
 8001362:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001366:	b2d9      	uxtb	r1, r3
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <main+0x3bc>)
 800136a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 8001374:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001378:	3301      	adds	r3, #1
 800137a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800137e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001382:	2b1f      	cmp	r3, #31
 8001384:	ddbf      	ble.n	8001306 <main+0x246>
					}
				}
			}
		}
		for(int poz=1; poz < 33-1; poz++) {
 8001386:	2301      	movs	r3, #1
 8001388:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800138c:	e03b      	b.n	8001406 <main+0x346>
				// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
					if(vonal_eredmeny_hatso[poz] > VONAL_THRESHOLD) {
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <main+0x3c8>)
 8001390:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <main+0x3cc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dd2c      	ble.n	80013fc <main+0x33c>
						if(vonal_eredmeny_hatso[poz+1] > VONAL_THRESHOLD) {
 80013a2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a37      	ldr	r2, [pc, #220]	; (8001488 <main+0x3c8>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <main+0x3cc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dd22      	ble.n	80013fc <main+0x33c>
							if(vonal_eredmeny_hatso[poz-1] < VONAL_THRESHOLD) {
 80013b6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <main+0x3c8>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <main+0x3cc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	da18      	bge.n	80013fc <main+0x33c>
								int i = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
									while(vonalak_hatso[i] != '-') {
 80013d0:	e004      	b.n	80013dc <main+0x31c>
										i++;
 80013d2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80013d6:	3301      	adds	r3, #1
 80013d8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
									while(vonalak_hatso[i] != '-') {
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <main+0x3c0>)
 80013de:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b2d      	cmp	r3, #45	; 0x2d
 80013e8:	d1f3      	bne.n	80013d2 <main+0x312>
									}
									vonalak_hatso[i] = poz;
 80013ea:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <main+0x3c0>)
 80013f2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80013f6:	4413      	add	r3, r2
 80013f8:	460a      	mov	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
		for(int poz=1; poz < 33-1; poz++) {
 80013fc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001406:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800140a:	2b1f      	cmp	r3, #31
 800140c:	ddbf      	ble.n	800138e <main+0x2ce>
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 800140e:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001412:	f009 febf 	bl	800b194 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8001416:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800141a:	4619      	mov	r1, r3
 800141c:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001420:	f00a f874 	bl	800b50c <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 8001424:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001428:	f009 fe9e 	bl	800b168 <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <main+0x3d0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8087 	bne.w	8001544 <main+0x484>
			if (szervoEnable == 1) {
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <main+0x3d4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d15b      	bne.n	80014f6 <main+0x436>
				if 			(0 <= vonal1_elso && vonal1_elso < 6) {
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <main+0x3d8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d805      	bhi.n	8001452 <main+0x392>
					SERVO_MoveTo(SZERVO, 0);
 8001446:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800149c <main+0x3dc>
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fdd4 	bl	8000ff8 <SERVO_MoveTo>
 8001450:	e051      	b.n	80014f6 <main+0x436>
					//motornak nagyon lassu megadas
				} else if 	(6 <= vonal1_elso && vonal1_elso < 13) {
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <main+0x3d8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b05      	cmp	r3, #5
 8001458:	d924      	bls.n	80014a4 <main+0x3e4>
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <main+0x3d8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d820      	bhi.n	80014a4 <main+0x3e4>
					SERVO_MoveTo(SZERVO, 60);
 8001462:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80014a0 <main+0x3e0>
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fdc6 	bl	8000ff8 <SERVO_MoveTo>
 800146c:	e043      	b.n	80014f6 <main+0x436>
 800146e:	bf00      	nop
 8001470:	20000598 	.word	0x20000598
 8001474:	20000624 	.word	0x20000624
 8001478:	20000310 	.word	0x20000310
 800147c:	20000114 	.word	0x20000114
 8001480:	2000011c 	.word	0x2000011c
 8001484:	20000188 	.word	0x20000188
 8001488:	200001ac 	.word	0x200001ac
 800148c:	20000110 	.word	0x20000110
 8001490:	20000184 	.word	0x20000184
 8001494:	20000185 	.word	0x20000185
 8001498:	20000119 	.word	0x20000119
 800149c:	00000000 	.word	0x00000000
 80014a0:	42700000 	.word	0x42700000
					//motornak lassu megadas
				} else if 	(13 <= vonal1_elso && vonal1_elso < 19) {
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <main+0x4a8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d909      	bls.n	80014c0 <main+0x400>
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <main+0x4a8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b12      	cmp	r3, #18
 80014b2:	d805      	bhi.n	80014c0 <main+0x400>
					SERVO_MoveTo(SZERVO, 90);
 80014b4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800156c <main+0x4ac>
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fd9d 	bl	8000ff8 <SERVO_MoveTo>
 80014be:	e01a      	b.n	80014f6 <main+0x436>
					//motornak gyors megadas
				} else if 	(19 <= vonal1_elso && vonal1_elso < 26) {
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <main+0x4a8>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d909      	bls.n	80014dc <main+0x41c>
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <main+0x4a8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b19      	cmp	r3, #25
 80014ce:	d805      	bhi.n	80014dc <main+0x41c>
					SERVO_MoveTo(SZERVO, 120);
 80014d0:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001570 <main+0x4b0>
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fd8f 	bl	8000ff8 <SERVO_MoveTo>
 80014da:	e00c      	b.n	80014f6 <main+0x436>
					//motornak lassu megadas
				} else if 	(26 <= vonal1_elso && vonal1_elso < 32) {
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <main+0x4a8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b19      	cmp	r3, #25
 80014e2:	d908      	bls.n	80014f6 <main+0x436>
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <main+0x4a8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b1f      	cmp	r3, #31
 80014ea:	d804      	bhi.n	80014f6 <main+0x436>
					SERVO_MoveTo(SZERVO, 180);
 80014ec:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001574 <main+0x4b4>
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd81 	bl	8000ff8 <SERVO_MoveTo>
					//motornak nagyon lassu megadas
				}
			}

			if (motvezEnable == 1) {
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <main+0x4b8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	f47f aec9 	bne.w	8001292 <main+0x1d2>
				int k = 200;
 8001500:	23c8      	movs	r3, #200	; 0xc8
 8001502:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				if (k < motvez_d / 2) {
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <main+0x4bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0fda      	lsrs	r2, r3, #31
 800150c:	4413      	add	r3, r2
 800150e:	105b      	asrs	r3, r3, #1
 8001510:	461a      	mov	r2, r3
 8001512:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001516:	4293      	cmp	r3, r2
 8001518:	f6bf aebb 	bge.w	8001292 <main+0x1d2>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); //ha pwm1 nagyobb, előremenet
 800151c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001520:	b29b      	uxth	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	2000      	movs	r0, #0
 8001526:	f00e fccd 	bl	800fec4 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <main+0x4bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29a      	uxth	r2, r3
 8001530:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001534:	b29b      	uxth	r3, r3
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	2001      	movs	r0, #1
 800153e:	f00e fcc1 	bl	800fec4 <DC_MOTOR_Set_Speed>
 8001542:	e6a6      	b.n	8001292 <main+0x1d2>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 8001544:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800156c <main+0x4ac>
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fd55 	bl	8000ff8 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d);// elvileg ez a ketto a megallas
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <main+0x4bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	2000      	movs	r0, #0
 8001558:	f00e fcb4 	bl	800fec4 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	2001      	movs	r0, #1
 8001560:	f00e fcb0 	bl	800fec4 <DC_MOTOR_Set_Speed>
		for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8001564:	e695      	b.n	8001292 <main+0x1d2>
 8001566:	bf00      	nop
 8001568:	20000119 	.word	0x20000119
 800156c:	42b40000 	.word	0x42b40000
 8001570:	42f00000 	.word	0x42f00000
 8001574:	43340000 	.word	0x43340000
 8001578:	20000186 	.word	0x20000186
 800157c:	20000124 	.word	0x20000124

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2234      	movs	r2, #52	; 0x34
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00e fd56 	bl	8010040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <SystemClock_Config+0xdc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a2b      	ldr	r2, [pc, #172]	; (800165c <SystemClock_Config+0xdc>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <SystemClock_Config+0xdc>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <SystemClock_Config+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a25      	ldr	r2, [pc, #148]	; (8001660 <SystemClock_Config+0xe0>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <SystemClock_Config+0xe0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015f4:	23b4      	movs	r3, #180	; 0xb4
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001600:	2302      	movs	r3, #2
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fd09 	bl	8006020 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001614:	f001 f984 	bl	8002920 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001618:	f004 f926 	bl	8005868 <HAL_PWREx_EnableOverDrive>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001622:	f001 f97d 	bl	8002920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001626:	230f      	movs	r3, #15
 8001628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162a:	2302      	movs	r3, #2
 800162c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001632:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800163c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2105      	movs	r1, #5
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f95f 	bl	8005908 <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001650:	f001 f966 	bl	8002920 <Error_Handler>
  }
}
 8001654:	bf00      	nop
 8001656:	3750      	adds	r7, #80	; 0x50
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000

08001664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_I2C1_Init+0x50>)
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_I2C1_Init+0x54>)
 800166c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_I2C1_Init+0x58>)
 8001672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_I2C1_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_I2C1_Init+0x50>)
 80016a2:	f003 f8c3 	bl	800482c <HAL_I2C_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ac:	f001 f938 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000310 	.word	0x20000310
 80016b8:	40005400 	.word	0x40005400
 80016bc:	000186a0 	.word	0x000186a0

080016c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C2_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_I2C2_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_I2C2_Init+0x50>)
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_I2C2_Init+0x58>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_I2C2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_I2C2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_I2C2_Init+0x50>)
 80016de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_I2C2_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_I2C2_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_I2C2_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_I2C2_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_I2C2_Init+0x50>)
 80016fe:	f003 f895 	bl	800482c <HAL_I2C_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001708:	f001 f90a 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000364 	.word	0x20000364
 8001714:	40005800 	.word	0x40005800
 8001718:	000186a0 	.word	0x000186a0

0800171c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C3_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C3_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C3_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C3_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C3_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C3_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C3_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C3_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C3_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C3_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C3_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C3_Init+0x50>)
 800175a:	f003 f867 	bl	800482c <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001764:	f001 f8dc 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200001d4 	.word	0x200001d4
 8001770:	40005c00 	.word	0x40005c00
 8001774:	000186a0 	.word	0x000186a0

08001778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_SPI1_Init+0x64>)
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <MX_SPI1_Init+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_SPI1_Init+0x64>)
 8001784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_SPI1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_SPI1_Init+0x64>)
 80017a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_SPI1_Init+0x64>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_SPI1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_SPI1_Init+0x64>)
 80017c4:	220a      	movs	r2, #10
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_SPI1_Init+0x64>)
 80017ca:	f004 ff87 	bl	80066dc <HAL_SPI_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017d4:	f001 f8a4 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000540 	.word	0x20000540
 80017e0:	40013000 	.word	0x40013000

080017e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_SPI2_Init+0x64>)
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <MX_SPI2_Init+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_SPI2_Init+0x64>)
 80017f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_SPI2_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_SPI2_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_SPI2_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_SPI2_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_SPI2_Init+0x64>)
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_SPI2_Init+0x64>)
 8001818:	2218      	movs	r2, #24
 800181a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_SPI2_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_SPI2_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_SPI2_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_SPI2_Init+0x64>)
 8001830:	220a      	movs	r2, #10
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_SPI2_Init+0x64>)
 8001836:	f004 ff51 	bl	80066dc <HAL_SPI_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001840:	f001 f86e 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000228 	.word	0x20000228
 800184c:	40003800 	.word	0x40003800

08001850 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <MX_SPI3_Init+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_SPI3_Init+0x64>)
 800185c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_SPI3_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_SPI3_Init+0x64>)
 800187c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001880:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <MX_SPI3_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_SPI3_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SPI3_Init+0x64>)
 800189c:	220a      	movs	r2, #10
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_SPI3_Init+0x64>)
 80018a2:	f004 ff1b 	bl	80066dc <HAL_SPI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018ac:	f001 f838 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000400 	.word	0x20000400
 80018b8:	40003c00 	.word	0x40003c00

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_TIM2_Init+0x98>)
 80018da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_TIM2_Init+0x98>)
 80018e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM2_Init+0x98>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_TIM2_Init+0x98>)
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_TIM2_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM2_Init+0x98>)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <MX_TIM2_Init+0x98>)
 8001904:	f005 fdba 	bl	800747c <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800190e:	f001 f807 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4619      	mov	r1, r3
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_TIM2_Init+0x98>)
 8001920:	f006 fe62 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800192a:	f000 fff9 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <MX_TIM2_Init+0x98>)
 800193c:	f007 fdf4 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001946:	f000 ffeb 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000598 	.word	0x20000598

08001958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_TIM3_Init+0xac>)
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <MX_TIM3_Init+0xb0>)
 800197e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM3_Init+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM3_Init+0xac>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_TIM3_Init+0xac>)
 800198e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_TIM3_Init+0xac>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_TIM3_Init+0xac>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019a0:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM3_Init+0xac>)
 80019a2:	f005 ff21 	bl	80077e8 <HAL_TIM_PWM_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019ac:	f000 ffb8 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	4619      	mov	r1, r3
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_TIM3_Init+0xac>)
 80019c0:	f007 fdb2 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019ca:	f000 ffa9 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ce:	2360      	movs	r3, #96	; 0x60
 80019d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM3_Init+0xac>)
 80019e6:	f006 fc27 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019f0:	f000 ff96 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM3_Init+0xac>)
 80019f6:	f001 fae3 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200003b8 	.word	0x200003b8
 8001a08:	40000400 	.word	0x40000400

08001a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00e fb10 	bl	8010040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <MX_TIM4_Init+0xa4>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a7a:	f006 f92d 	bl	8007cd8 <HAL_TIM_Encoder_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a84:	f000 ff4c 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_TIM4_Init+0xa0>)
 8001a96:	f007 fd47 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001aa0:	f000 ff3e 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200002c8 	.word	0x200002c8
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2220      	movs	r2, #32
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00e faa7 	bl	8010040 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001af4:	4a44      	ldr	r2, [pc, #272]	; (8001c08 <MX_TIM8_Init+0x154>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b00:	2260      	movs	r2, #96	; 0x60
 8001b02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b04:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b1e:	4839      	ldr	r0, [pc, #228]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b20:	f005 fcac 	bl	800747c <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b2a:	f000 fef9 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4832      	ldr	r0, [pc, #200]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b3c:	f006 fd54 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b46:	f000 feeb 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b4a:	482e      	ldr	r0, [pc, #184]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b4c:	f005 fe4c 	bl	80077e8 <HAL_TIM_PWM_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b56:	f000 fee3 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b66:	4619      	mov	r1, r3
 8001b68:	4826      	ldr	r0, [pc, #152]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b6a:	f007 fcdd 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b74:	f000 fed4 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b78:	2360      	movs	r3, #96	; 0x60
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4819      	ldr	r0, [pc, #100]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001b9e:	f006 fb4b 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ba8:	f000 feba 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4813      	ldr	r0, [pc, #76]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001bb6:	f006 fb3f 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001bc0:	f000 feae 	bl	8002920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001be8:	f007 fd7c 	bl	80096e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001bf2:	f000 fe95 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM8_Init+0x150>)
 8001bf8:	f001 f9e2 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8001bfc:	bf00      	nop
 8001bfe:	3758      	adds	r7, #88	; 0x58
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000280 	.word	0x20000280
 8001c08:	40010400 	.word	0x40010400

08001c0c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c34:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <MX_TIM12_Init+0xdc>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c3a:	2213      	movs	r2, #19
 8001c3c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c46:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c58:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c5a:	f005 fc0f 	bl	800747c <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c64:	f000 fe5c 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	4619      	mov	r1, r3
 8001c74:	481b      	ldr	r0, [pc, #108]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c76:	f006 fcb7 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001c80:	f000 fe4e 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c84:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001c86:	f005 fdaf 	bl	80077e8 <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001c90:	f000 fe46 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c94:	2360      	movs	r3, #96	; 0x60
 8001c96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001cac:	f006 fac4 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001cb6:	f000 fe33 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001cc2:	f006 fab9 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f000 fe28 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001cd2:	f005 fcc3 	bl	800765c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001cd6:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <MX_TIM12_Init+0xd8>)
 8001cd8:	f001 f972 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000624 	.word	0x20000624
 8001ce8:	40001800 	.word	0x40001800

08001cec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_UART4_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001cf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_UART4_Init+0x4c>)
 8001d24:	f007 fdbe 	bl	80098a4 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f000 fdf7 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200004fc 	.word	0x200004fc
 8001d3c:	40004c00 	.word	0x40004c00

08001d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_USART1_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d78:	f007 fd94 	bl	80098a4 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f000 fdcd 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004b8 	.word	0x200004b8
 8001d90:	40011000 	.word	0x40011000

08001d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART2_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f007 fd6a 	bl	80098a4 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 fda3 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200005e0 	.word	0x200005e0
 8001de4:	40004400 	.word	0x40004400

08001de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2010      	movs	r0, #16
 8001e10:	f001 fc64 	bl	80036dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e14:	2010      	movs	r0, #16
 8001e16:	f001 fc8d 	bl	8003734 <HAL_NVIC_EnableIRQ>

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b52      	ldr	r3, [pc, #328]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <MX_GPIO_Init+0x180>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	213d      	movs	r1, #61	; 0x3d
 8001ece:	4837      	ldr	r0, [pc, #220]	; (8001fac <MX_GPIO_Init+0x184>)
 8001ed0:	f002 fc62 	bl	8004798 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f641 0102 	movw	r1, #6146	; 0x1802
 8001eda:	4835      	ldr	r0, [pc, #212]	; (8001fb0 <MX_GPIO_Init+0x188>)
 8001edc:	f002 fc5c 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f241 0126 	movw	r1, #4134	; 0x1026
 8001ee6:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <MX_GPIO_Init+0x18c>)
 8001ee8:	f002 fc56 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	482a      	ldr	r0, [pc, #168]	; (8001fac <MX_GPIO_Init+0x184>)
 8001f04:	f002 f924 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f08:	233d      	movs	r3, #61	; 0x3d
 8001f0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <MX_GPIO_Init+0x184>)
 8001f20:	f002 f916 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f24:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <MX_GPIO_Init+0x188>)
 8001f3e:	f002 f907 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f42:	2310      	movs	r3, #16
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <MX_GPIO_Init+0x188>)
 8001f56:	f002 f8fb 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001f5a:	f241 0326 	movw	r3, #4134	; 0x1026
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <MX_GPIO_Init+0x18c>)
 8001f74:	f002 f8ec 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <MX_GPIO_Init+0x190>)
 8001f8c:	f002 f8e0 	bl	8004150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2100      	movs	r1, #0
 8001f94:	2028      	movs	r0, #40	; 0x28
 8001f96:	f001 fba1 	bl	80036dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f9a:	2028      	movs	r0, #40	; 0x28
 8001f9c:	f001 fbca 	bl	8003734 <HAL_NVIC_EnableIRQ>

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020c00 	.word	0x40020c00

08001fbc <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <Vonalszenzor_Init+0x1c>)
 8001fc6:	f002 fbe7 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2120      	movs	r1, #32
 8001fce:	4803      	ldr	r0, [pc, #12]	; (8001fdc <Vonalszenzor_Init+0x20>)
 8001fd0:	f002 fbe2 	bl	8004798 <HAL_GPIO_WritePin>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_elso, uint8_t* teljes_kiolvasott_hatso) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8001fea:	48be      	ldr	r0, [pc, #760]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8001fec:	f000 fc36 	bl	800285c <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8001ff0:	2370      	movs	r3, #112	; 0x70
 8001ff2:	81bb      	strh	r3, [r7, #12]
	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8001ff4:	48bc      	ldr	r0, [pc, #752]	; (80022e8 <Vonalszenzor_operal+0x308>)
 8001ff6:	f000 fc31 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8001ffa:	4bbc      	ldr	r3, [pc, #752]	; (80022ec <Vonalszenzor_operal+0x30c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fc51 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[1] = (uint8_t) eredmeny_16bit_temp[0];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3301      	adds	r3, #1
 800200e:	7b3a      	ldrb	r2, [r7, #12]
 8002010:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002012:	4bb7      	ldr	r3, [pc, #732]	; (80022f0 <Vonalszenzor_operal+0x310>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f107 020c 	add.w	r2, r7, #12
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fc45 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	7b3a      	ldrb	r2, [r7, #12]
 8002028:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800202a:	48ae      	ldr	r0, [pc, #696]	; (80022e4 <Vonalszenzor_operal+0x304>)
 800202c:	f000 fc16 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002030:	48b0      	ldr	r0, [pc, #704]	; (80022f4 <Vonalszenzor_operal+0x314>)
 8002032:	f000 fc13 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002036:	4bad      	ldr	r3, [pc, #692]	; (80022ec <Vonalszenzor_operal+0x30c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f107 020c 	add.w	r2, r7, #12
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fc33 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3309      	adds	r3, #9
 800204a:	7b3a      	ldrb	r2, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800204e:	4ba8      	ldr	r3, [pc, #672]	; (80022f0 <Vonalszenzor_operal+0x310>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fc27 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[13] = (uint8_t) eredmeny_16bit_temp[0];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	330d      	adds	r3, #13
 8002062:	7b3a      	ldrb	r2, [r7, #12]
 8002064:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002066:	489f      	ldr	r0, [pc, #636]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8002068:	f000 fbf8 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 800206c:	48a2      	ldr	r0, [pc, #648]	; (80022f8 <Vonalszenzor_operal+0x318>)
 800206e:	f000 fbf5 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <Vonalszenzor_operal+0x30c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fc15 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3311      	adds	r3, #17
 8002086:	7b3a      	ldrb	r2, [r7, #12]
 8002088:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800208a:	4b99      	ldr	r3, [pc, #612]	; (80022f0 <Vonalszenzor_operal+0x310>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f107 020c 	add.w	r2, r7, #12
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fc09 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[21] = (uint8_t) eredmeny_16bit_temp[0];
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3315      	adds	r3, #21
 800209e:	7b3a      	ldrb	r2, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020a2:	4890      	ldr	r0, [pc, #576]	; (80022e4 <Vonalszenzor_operal+0x304>)
 80020a4:	f000 fbda 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80020a8:	4894      	ldr	r0, [pc, #592]	; (80022fc <Vonalszenzor_operal+0x31c>)
 80020aa:	f000 fbd7 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020ae:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <Vonalszenzor_operal+0x30c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f107 020c 	add.w	r2, r7, #12
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fbf7 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[25] = (uint8_t) eredmeny_16bit_temp[0];
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3319      	adds	r3, #25
 80020c2:	7b3a      	ldrb	r2, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020c6:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <Vonalszenzor_operal+0x310>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fbeb 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[29] = (uint8_t) eredmeny_16bit_temp[0];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	331d      	adds	r3, #29
 80020da:	7b3a      	ldrb	r2, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80020de:	4881      	ldr	r0, [pc, #516]	; (80022e4 <Vonalszenzor_operal+0x304>)
 80020e0:	f000 fbbc 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 80020e4:	4886      	ldr	r0, [pc, #536]	; (8002300 <Vonalszenzor_operal+0x320>)
 80020e6:	f000 fbb9 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80020ea:	4b86      	ldr	r3, [pc, #536]	; (8002304 <Vonalszenzor_operal+0x324>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f107 020c 	add.w	r2, r7, #12
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fbd9 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[2] = (uint8_t) eredmeny_16bit_temp[0];
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3302      	adds	r3, #2
 80020fe:	7b3a      	ldrb	r2, [r7, #12]
 8002100:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <Vonalszenzor_operal+0x328>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fbcd 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3306      	adds	r3, #6
 8002116:	7b3a      	ldrb	r2, [r7, #12]
 8002118:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800211a:	4872      	ldr	r0, [pc, #456]	; (80022e4 <Vonalszenzor_operal+0x304>)
 800211c:	f000 fb9e 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002120:	487a      	ldr	r0, [pc, #488]	; (800230c <Vonalszenzor_operal+0x32c>)
 8002122:	f000 fb9b 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002126:	4b77      	ldr	r3, [pc, #476]	; (8002304 <Vonalszenzor_operal+0x324>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fbbb 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	330a      	adds	r3, #10
 800213a:	7b3a      	ldrb	r2, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <Vonalszenzor_operal+0x328>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fbaf 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[14] = (uint8_t) eredmeny_16bit_temp[0];
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	330e      	adds	r3, #14
 8002152:	7b3a      	ldrb	r2, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002156:	4863      	ldr	r0, [pc, #396]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8002158:	f000 fb80 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 800215c:	486c      	ldr	r0, [pc, #432]	; (8002310 <Vonalszenzor_operal+0x330>)
 800215e:	f000 fb7d 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002162:	4b68      	ldr	r3, [pc, #416]	; (8002304 <Vonalszenzor_operal+0x324>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fb9d 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3312      	adds	r3, #18
 8002176:	7b3a      	ldrb	r2, [r7, #12]
 8002178:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <Vonalszenzor_operal+0x328>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fb91 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[22] = (uint8_t) eredmeny_16bit_temp[0];
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3316      	adds	r3, #22
 800218e:	7b3a      	ldrb	r2, [r7, #12]
 8002190:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002192:	4854      	ldr	r0, [pc, #336]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8002194:	f000 fb62 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 8002198:	485e      	ldr	r0, [pc, #376]	; (8002314 <Vonalszenzor_operal+0x334>)
 800219a:	f000 fb5f 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800219e:	4b59      	ldr	r3, [pc, #356]	; (8002304 <Vonalszenzor_operal+0x324>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f107 020c 	add.w	r2, r7, #12
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fb7f 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[26] = (uint8_t) eredmeny_16bit_temp[0];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	331a      	adds	r3, #26
 80021b2:	7b3a      	ldrb	r2, [r7, #12]
 80021b4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <Vonalszenzor_operal+0x328>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f107 020c 	add.w	r2, r7, #12
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fb73 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[30] = (uint8_t) eredmeny_16bit_temp[0];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	331e      	adds	r3, #30
 80021ca:	7b3a      	ldrb	r2, [r7, #12]
 80021cc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80021ce:	4845      	ldr	r0, [pc, #276]	; (80022e4 <Vonalszenzor_operal+0x304>)
 80021d0:	f000 fb44 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 80021d4:	4850      	ldr	r0, [pc, #320]	; (8002318 <Vonalszenzor_operal+0x338>)
 80021d6:	f000 fb41 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80021da:	4b50      	ldr	r3, [pc, #320]	; (800231c <Vonalszenzor_operal+0x33c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fb61 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[3] = (uint8_t) eredmeny_16bit_temp[0];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3303      	adds	r3, #3
 80021ee:	7b3a      	ldrb	r2, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <Vonalszenzor_operal+0x340>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fb55 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3307      	adds	r3, #7
 8002206:	7b3a      	ldrb	r2, [r7, #12]
 8002208:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800220a:	4836      	ldr	r0, [pc, #216]	; (80022e4 <Vonalszenzor_operal+0x304>)
 800220c:	f000 fb26 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002210:	4844      	ldr	r0, [pc, #272]	; (8002324 <Vonalszenzor_operal+0x344>)
 8002212:	f000 fb23 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <Vonalszenzor_operal+0x33c>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fb43 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	330b      	adds	r3, #11
 800222a:	7b3a      	ldrb	r2, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <Vonalszenzor_operal+0x340>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f107 020c 	add.w	r2, r7, #12
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fb37 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[15] = (uint8_t) eredmeny_16bit_temp[0];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	330f      	adds	r3, #15
 8002242:	7b3a      	ldrb	r2, [r7, #12]
 8002244:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002246:	4827      	ldr	r0, [pc, #156]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8002248:	f000 fb08 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 800224c:	4836      	ldr	r0, [pc, #216]	; (8002328 <Vonalszenzor_operal+0x348>)
 800224e:	f000 fb05 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <Vonalszenzor_operal+0x33c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f107 020c 	add.w	r2, r7, #12
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fb25 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[19] = (uint8_t) eredmeny_16bit_temp[0];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3313      	adds	r3, #19
 8002266:	7b3a      	ldrb	r2, [r7, #12]
 8002268:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <Vonalszenzor_operal+0x340>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fb19 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[23] = (uint8_t) eredmeny_16bit_temp[0];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3317      	adds	r3, #23
 800227e:	7b3a      	ldrb	r2, [r7, #12]
 8002280:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002282:	4818      	ldr	r0, [pc, #96]	; (80022e4 <Vonalszenzor_operal+0x304>)
 8002284:	f000 faea 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 8002288:	4828      	ldr	r0, [pc, #160]	; (800232c <Vonalszenzor_operal+0x34c>)
 800228a:	f000 fae7 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <Vonalszenzor_operal+0x33c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	f107 020c 	add.w	r2, r7, #12
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fb07 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[27] = (uint8_t) eredmeny_16bit_temp[0];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	331b      	adds	r3, #27
 80022a2:	7b3a      	ldrb	r2, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <Vonalszenzor_operal+0x340>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f107 020c 	add.w	r2, r7, #12
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fafb 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[31] = (uint8_t) eredmeny_16bit_temp[0];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	331f      	adds	r3, #31
 80022ba:	7b3a      	ldrb	r2, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022be:	4809      	ldr	r0, [pc, #36]	; (80022e4 <Vonalszenzor_operal+0x304>)
 80022c0:	f000 facc 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <Vonalszenzor_operal+0x350>)
 80022c6:	f000 fac9 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <Vonalszenzor_operal+0x354>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fae9 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[4] = (uint8_t) eredmeny_16bit_temp[0];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	7b3a      	ldrb	r2, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e029      	b.n	8002338 <Vonalszenzor_operal+0x358>
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000080 	.word	0x20000080
 80022ec:	20000187 	.word	0x20000187
 80022f0:	20000109 	.word	0x20000109
 80022f4:	20000078 	.word	0x20000078
 80022f8:	20000070 	.word	0x20000070
 80022fc:	20000068 	.word	0x20000068
 8002300:	20000060 	.word	0x20000060
 8002304:	20000106 	.word	0x20000106
 8002308:	2000010a 	.word	0x2000010a
 800230c:	20000058 	.word	0x20000058
 8002310:	20000050 	.word	0x20000050
 8002314:	20000048 	.word	0x20000048
 8002318:	20000040 	.word	0x20000040
 800231c:	20000107 	.word	0x20000107
 8002320:	2000010b 	.word	0x2000010b
 8002324:	20000038 	.word	0x20000038
 8002328:	20000030 	.word	0x20000030
 800232c:	20000028 	.word	0x20000028
 8002330:	20000020 	.word	0x20000020
 8002334:	20000108 	.word	0x20000108
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002338:	4bbe      	ldr	r3, [pc, #760]	; (8002634 <Vonalszenzor_operal+0x654>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f107 020c 	add.w	r2, r7, #12
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fab2 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3308      	adds	r3, #8
 800234c:	7b3a      	ldrb	r2, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002350:	48b9      	ldr	r0, [pc, #740]	; (8002638 <Vonalszenzor_operal+0x658>)
 8002352:	f000 fa83 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 8002356:	48b9      	ldr	r0, [pc, #740]	; (800263c <Vonalszenzor_operal+0x65c>)
 8002358:	f000 fa80 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800235c:	4bb8      	ldr	r3, [pc, #736]	; (8002640 <Vonalszenzor_operal+0x660>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 faa0 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[12] = (uint8_t) eredmeny_16bit_temp[0];
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	330c      	adds	r3, #12
 8002370:	7b3a      	ldrb	r2, [r7, #12]
 8002372:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002374:	4baf      	ldr	r3, [pc, #700]	; (8002634 <Vonalszenzor_operal+0x654>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa94 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[16] = (uint8_t) eredmeny_16bit_temp[0];
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3310      	adds	r3, #16
 8002388:	7b3a      	ldrb	r2, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800238c:	48aa      	ldr	r0, [pc, #680]	; (8002638 <Vonalszenzor_operal+0x658>)
 800238e:	f000 fa65 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 8002392:	48ac      	ldr	r0, [pc, #688]	; (8002644 <Vonalszenzor_operal+0x664>)
 8002394:	f000 fa62 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002398:	4ba9      	ldr	r3, [pc, #676]	; (8002640 <Vonalszenzor_operal+0x660>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fa82 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[20] = (uint8_t) eredmeny_16bit_temp[0];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3314      	adds	r3, #20
 80023ac:	7b3a      	ldrb	r2, [r7, #12]
 80023ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023b0:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <Vonalszenzor_operal+0x654>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f107 020c 	add.w	r2, r7, #12
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fa76 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[24] = (uint8_t) eredmeny_16bit_temp[0];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3318      	adds	r3, #24
 80023c4:	7b3a      	ldrb	r2, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023c8:	489b      	ldr	r0, [pc, #620]	; (8002638 <Vonalszenzor_operal+0x658>)
 80023ca:	f000 fa47 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 80023ce:	489e      	ldr	r0, [pc, #632]	; (8002648 <Vonalszenzor_operal+0x668>)
 80023d0:	f000 fa44 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023d4:	4b9a      	ldr	r3, [pc, #616]	; (8002640 <Vonalszenzor_operal+0x660>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f107 020c 	add.w	r2, r7, #12
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fa64 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[28] = (uint8_t) eredmeny_16bit_temp[0];
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	331c      	adds	r3, #28
 80023e8:	7b3a      	ldrb	r2, [r7, #12]
 80023ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023ec:	4b91      	ldr	r3, [pc, #580]	; (8002634 <Vonalszenzor_operal+0x654>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f107 020c 	add.w	r2, r7, #12
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa58 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_elso[32] = (uint8_t) eredmeny_16bit_temp[0];
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	7b3a      	ldrb	r2, [r7, #12]
 8002402:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002404:	488c      	ldr	r0, [pc, #560]	; (8002638 <Vonalszenzor_operal+0x658>)
 8002406:	f000 fa29 	bl	800285c <Vonalszenzor_minta_kuldes>

	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 800240a:	4890      	ldr	r0, [pc, #576]	; (800264c <Vonalszenzor_operal+0x66c>)
 800240c:	f000 fa26 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002410:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <Vonalszenzor_operal+0x670>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f107 020c 	add.w	r2, r7, #12
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fa46 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	7b3a      	ldrb	r2, [r7, #12]
 8002426:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002428:	4b8a      	ldr	r3, [pc, #552]	; (8002654 <Vonalszenzor_operal+0x674>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f107 020c 	add.w	r2, r7, #12
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fa3a 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3305      	adds	r3, #5
 800243c:	7b3a      	ldrb	r2, [r7, #12]
 800243e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002440:	487d      	ldr	r0, [pc, #500]	; (8002638 <Vonalszenzor_operal+0x658>)
 8002442:	f000 fa0b 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002446:	4884      	ldr	r0, [pc, #528]	; (8002658 <Vonalszenzor_operal+0x678>)
 8002448:	f000 fa08 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800244c:	4b80      	ldr	r3, [pc, #512]	; (8002650 <Vonalszenzor_operal+0x670>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f107 020c 	add.w	r2, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa28 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[9] = (uint8_t) eredmeny_16bit_temp[0];
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3309      	adds	r3, #9
 8002460:	7b3a      	ldrb	r2, [r7, #12]
 8002462:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002464:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <Vonalszenzor_operal+0x674>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f107 020c 	add.w	r2, r7, #12
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fa1c 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[13] = (uint8_t) eredmeny_16bit_temp[0];
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	330d      	adds	r3, #13
 8002478:	7b3a      	ldrb	r2, [r7, #12]
 800247a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800247c:	486e      	ldr	r0, [pc, #440]	; (8002638 <Vonalszenzor_operal+0x658>)
 800247e:	f000 f9ed 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 8002482:	4876      	ldr	r0, [pc, #472]	; (800265c <Vonalszenzor_operal+0x67c>)
 8002484:	f000 f9ea 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <Vonalszenzor_operal+0x670>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fa0a 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[17] = (uint8_t) eredmeny_16bit_temp[0];
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3311      	adds	r3, #17
 800249c:	7b3a      	ldrb	r2, [r7, #12]
 800249e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <Vonalszenzor_operal+0x674>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f107 020c 	add.w	r2, r7, #12
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f9fe 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[21] = (uint8_t) eredmeny_16bit_temp[0];
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3315      	adds	r3, #21
 80024b4:	7b3a      	ldrb	r2, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024b8:	485f      	ldr	r0, [pc, #380]	; (8002638 <Vonalszenzor_operal+0x658>)
 80024ba:	f000 f9cf 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 80024be:	4868      	ldr	r0, [pc, #416]	; (8002660 <Vonalszenzor_operal+0x680>)
 80024c0:	f000 f9cc 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024c4:	4b62      	ldr	r3, [pc, #392]	; (8002650 <Vonalszenzor_operal+0x670>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f107 020c 	add.w	r2, r7, #12
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f9ec 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[25] = (uint8_t) eredmeny_16bit_temp[0];
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3319      	adds	r3, #25
 80024d8:	7b3a      	ldrb	r2, [r7, #12]
 80024da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024dc:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <Vonalszenzor_operal+0x674>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f107 020c 	add.w	r2, r7, #12
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f9e0 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[29] = (uint8_t) eredmeny_16bit_temp[0];
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	331d      	adds	r3, #29
 80024f0:	7b3a      	ldrb	r2, [r7, #12]
 80024f2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80024f4:	4850      	ldr	r0, [pc, #320]	; (8002638 <Vonalszenzor_operal+0x658>)
 80024f6:	f000 f9b1 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 80024fa:	485a      	ldr	r0, [pc, #360]	; (8002664 <Vonalszenzor_operal+0x684>)
 80024fc:	f000 f9ae 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <Vonalszenzor_operal+0x688>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f107 020c 	add.w	r2, r7, #12
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f9ce 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3302      	adds	r3, #2
 8002514:	7b3a      	ldrb	r2, [r7, #12]
 8002516:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002518:	4b54      	ldr	r3, [pc, #336]	; (800266c <Vonalszenzor_operal+0x68c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9c2 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	3306      	adds	r3, #6
 800252c:	7b3a      	ldrb	r2, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002530:	4841      	ldr	r0, [pc, #260]	; (8002638 <Vonalszenzor_operal+0x658>)
 8002532:	f000 f993 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002536:	484e      	ldr	r0, [pc, #312]	; (8002670 <Vonalszenzor_operal+0x690>)
 8002538:	f000 f990 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <Vonalszenzor_operal+0x688>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f107 020c 	add.w	r2, r7, #12
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f9b0 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[10] = (uint8_t) eredmeny_16bit_temp[0];
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	330a      	adds	r3, #10
 8002550:	7b3a      	ldrb	r2, [r7, #12]
 8002552:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002554:	4b45      	ldr	r3, [pc, #276]	; (800266c <Vonalszenzor_operal+0x68c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f107 020c 	add.w	r2, r7, #12
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f9a4 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	330e      	adds	r3, #14
 8002568:	7b3a      	ldrb	r2, [r7, #12]
 800256a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800256c:	4832      	ldr	r0, [pc, #200]	; (8002638 <Vonalszenzor_operal+0x658>)
 800256e:	f000 f975 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 8002572:	4840      	ldr	r0, [pc, #256]	; (8002674 <Vonalszenzor_operal+0x694>)
 8002574:	f000 f972 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <Vonalszenzor_operal+0x688>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f992 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3312      	adds	r3, #18
 800258c:	7b3a      	ldrb	r2, [r7, #12]
 800258e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <Vonalszenzor_operal+0x68c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f986 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[22] = (uint8_t) eredmeny_16bit_temp[0];
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	3316      	adds	r3, #22
 80025a4:	7b3a      	ldrb	r2, [r7, #12]
 80025a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025a8:	4823      	ldr	r0, [pc, #140]	; (8002638 <Vonalszenzor_operal+0x658>)
 80025aa:	f000 f957 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80025ae:	4832      	ldr	r0, [pc, #200]	; (8002678 <Vonalszenzor_operal+0x698>)
 80025b0:	f000 f954 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <Vonalszenzor_operal+0x688>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f974 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[26] = (uint8_t) eredmeny_16bit_temp[0];
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	331a      	adds	r3, #26
 80025c8:	7b3a      	ldrb	r2, [r7, #12]
 80025ca:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <Vonalszenzor_operal+0x68c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f107 020c 	add.w	r2, r7, #12
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f968 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[30] = (uint8_t) eredmeny_16bit_temp[0];
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	331e      	adds	r3, #30
 80025e0:	7b3a      	ldrb	r2, [r7, #12]
 80025e2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80025e4:	4814      	ldr	r0, [pc, #80]	; (8002638 <Vonalszenzor_operal+0x658>)
 80025e6:	f000 f939 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 80025ea:	4824      	ldr	r0, [pc, #144]	; (800267c <Vonalszenzor_operal+0x69c>)
 80025ec:	f000 f936 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <Vonalszenzor_operal+0x6a0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f107 020c 	add.w	r2, r7, #12
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f956 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3303      	adds	r3, #3
 8002604:	7b3a      	ldrb	r2, [r7, #12]
 8002606:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <Vonalszenzor_operal+0x6a4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f94a 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	3307      	adds	r3, #7
 800261c:	7b3a      	ldrb	r2, [r7, #12]
 800261e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <Vonalszenzor_operal+0x658>)
 8002622:	f000 f91b 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 8002626:	4818      	ldr	r0, [pc, #96]	; (8002688 <Vonalszenzor_operal+0x6a8>)
 8002628:	f000 f918 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <Vonalszenzor_operal+0x6a0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	e02c      	b.n	800268c <Vonalszenzor_operal+0x6ac>
 8002632:	bf00      	nop
 8002634:	2000010c 	.word	0x2000010c
 8002638:	20000000 	.word	0x20000000
 800263c:	20000018 	.word	0x20000018
 8002640:	20000108 	.word	0x20000108
 8002644:	20000010 	.word	0x20000010
 8002648:	20000008 	.word	0x20000008
 800264c:	20000100 	.word	0x20000100
 8002650:	20000187 	.word	0x20000187
 8002654:	20000109 	.word	0x20000109
 8002658:	200000f8 	.word	0x200000f8
 800265c:	200000f0 	.word	0x200000f0
 8002660:	200000e8 	.word	0x200000e8
 8002664:	200000e0 	.word	0x200000e0
 8002668:	20000106 	.word	0x20000106
 800266c:	2000010a 	.word	0x2000010a
 8002670:	200000d8 	.word	0x200000d8
 8002674:	200000d0 	.word	0x200000d0
 8002678:	200000c8 	.word	0x200000c8
 800267c:	200000c0 	.word	0x200000c0
 8002680:	20000107 	.word	0x20000107
 8002684:	2000010b 	.word	0x2000010b
 8002688:	200000b8 	.word	0x200000b8
 800268c:	f107 020c 	add.w	r2, r7, #12
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f90a 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[11] = (uint8_t) eredmeny_16bit_temp[0];
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	330b      	adds	r3, #11
 800269c:	7b3a      	ldrb	r2, [r7, #12]
 800269e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <Vonalszenzor_operal+0x850>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8fe 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[15] = (uint8_t) eredmeny_16bit_temp[0];
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	330f      	adds	r3, #15
 80026b4:	7b3a      	ldrb	r2, [r7, #12]
 80026b6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026b8:	485e      	ldr	r0, [pc, #376]	; (8002834 <Vonalszenzor_operal+0x854>)
 80026ba:	f000 f8cf 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 80026be:	485e      	ldr	r0, [pc, #376]	; (8002838 <Vonalszenzor_operal+0x858>)
 80026c0:	f000 f8cc 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026c4:	4b5d      	ldr	r3, [pc, #372]	; (800283c <Vonalszenzor_operal+0x85c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8ec 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[19] = (uint8_t) eredmeny_16bit_temp[0];
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	3313      	adds	r3, #19
 80026d8:	7b3a      	ldrb	r2, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026dc:	4b54      	ldr	r3, [pc, #336]	; (8002830 <Vonalszenzor_operal+0x850>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f8e0 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[23] = (uint8_t) eredmeny_16bit_temp[0];
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3317      	adds	r3, #23
 80026f0:	7b3a      	ldrb	r2, [r7, #12]
 80026f2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026f4:	484f      	ldr	r0, [pc, #316]	; (8002834 <Vonalszenzor_operal+0x854>)
 80026f6:	f000 f8b1 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80026fa:	4851      	ldr	r0, [pc, #324]	; (8002840 <Vonalszenzor_operal+0x860>)
 80026fc:	f000 f8ae 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002700:	4b4e      	ldr	r3, [pc, #312]	; (800283c <Vonalszenzor_operal+0x85c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f107 020c 	add.w	r2, r7, #12
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f8ce 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	331b      	adds	r3, #27
 8002714:	7b3a      	ldrb	r2, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002718:	4b45      	ldr	r3, [pc, #276]	; (8002830 <Vonalszenzor_operal+0x850>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f107 020c 	add.w	r2, r7, #12
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f8c2 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	331f      	adds	r3, #31
 800272c:	7b3a      	ldrb	r2, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002730:	4840      	ldr	r0, [pc, #256]	; (8002834 <Vonalszenzor_operal+0x854>)
 8002732:	f000 f893 	bl	800285c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 8002736:	4843      	ldr	r0, [pc, #268]	; (8002844 <Vonalszenzor_operal+0x864>)
 8002738:	f000 f890 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <Vonalszenzor_operal+0x868>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f107 020c 	add.w	r2, r7, #12
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f8b0 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[4] = (uint8_t) eredmeny_16bit_temp[0];
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3304      	adds	r3, #4
 8002750:	7b3a      	ldrb	r2, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <Vonalszenzor_operal+0x86c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f8a4 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3308      	adds	r3, #8
 8002768:	7b3a      	ldrb	r2, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800276c:	4831      	ldr	r0, [pc, #196]	; (8002834 <Vonalszenzor_operal+0x854>)
 800276e:	f000 f875 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 8002772:	4837      	ldr	r0, [pc, #220]	; (8002850 <Vonalszenzor_operal+0x870>)
 8002774:	f000 f872 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <Vonalszenzor_operal+0x868>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f892 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[12] = (uint8_t) eredmeny_16bit_temp[0];
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	7b3a      	ldrb	r2, [r7, #12]
 800278e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002790:	4b2e      	ldr	r3, [pc, #184]	; (800284c <Vonalszenzor_operal+0x86c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f886 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[16] = (uint8_t) eredmeny_16bit_temp[0];
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3310      	adds	r3, #16
 80027a4:	7b3a      	ldrb	r2, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027a8:	4822      	ldr	r0, [pc, #136]	; (8002834 <Vonalszenzor_operal+0x854>)
 80027aa:	f000 f857 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80027ae:	4829      	ldr	r0, [pc, #164]	; (8002854 <Vonalszenzor_operal+0x874>)
 80027b0:	f000 f854 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <Vonalszenzor_operal+0x868>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f874 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[20] = (uint8_t) eredmeny_16bit_temp[0];
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3314      	adds	r3, #20
 80027c8:	7b3a      	ldrb	r2, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <Vonalszenzor_operal+0x86c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f868 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[24] = (uint8_t) eredmeny_16bit_temp[0];
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3318      	adds	r3, #24
 80027e0:	7b3a      	ldrb	r2, [r7, #12]
 80027e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027e4:	4813      	ldr	r0, [pc, #76]	; (8002834 <Vonalszenzor_operal+0x854>)
 80027e6:	f000 f839 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 80027ea:	481b      	ldr	r0, [pc, #108]	; (8002858 <Vonalszenzor_operal+0x878>)
 80027ec:	f000 f836 	bl	800285c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <Vonalszenzor_operal+0x868>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f107 020c 	add.w	r2, r7, #12
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f856 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	331c      	adds	r3, #28
 8002804:	7b3a      	ldrb	r2, [r7, #12]
 8002806:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <Vonalszenzor_operal+0x86c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f107 020c 	add.w	r2, r7, #12
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f84a 	bl	80028ac <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_hatso[32] = (uint8_t) eredmeny_16bit_temp[0];
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3320      	adds	r3, #32
 800281c:	7b3a      	ldrb	r2, [r7, #12]
 800281e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002820:	4804      	ldr	r0, [pc, #16]	; (8002834 <Vonalszenzor_operal+0x854>)
 8002822:	f000 f81b 	bl	800285c <Vonalszenzor_minta_kuldes>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000010b 	.word	0x2000010b
 8002834:	20000000 	.word	0x20000000
 8002838:	200000b0 	.word	0x200000b0
 800283c:	20000107 	.word	0x20000107
 8002840:	200000a8 	.word	0x200000a8
 8002844:	200000a0 	.word	0x200000a0
 8002848:	20000108 	.word	0x20000108
 800284c:	2000010c 	.word	0x2000010c
 8002850:	20000098 	.word	0x20000098
 8002854:	20000090 	.word	0x20000090
 8002858:	20000088 	.word	0x20000088

0800285c <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002864:	2200      	movs	r2, #0
 8002866:	2110      	movs	r1, #16
 8002868:	480d      	ldr	r0, [pc, #52]	; (80028a0 <Vonalszenzor_minta_kuldes+0x44>)
 800286a:	f001 ff95 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 800286e:	2200      	movs	r2, #0
 8002870:	2102      	movs	r1, #2
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <Vonalszenzor_minta_kuldes+0x48>)
 8002874:	f001 ff90 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002878:	2364      	movs	r3, #100	; 0x64
 800287a:	2206      	movs	r2, #6
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	480a      	ldr	r0, [pc, #40]	; (80028a8 <Vonalszenzor_minta_kuldes+0x4c>)
 8002880:	f004 f8c0 	bl	8006a04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002884:	2201      	movs	r2, #1
 8002886:	2110      	movs	r1, #16
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <Vonalszenzor_minta_kuldes+0x44>)
 800288a:	f001 ff85 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 800288e:	2201      	movs	r2, #1
 8002890:	2102      	movs	r1, #2
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <Vonalszenzor_minta_kuldes+0x48>)
 8002894:	f001 ff80 	bl	8004798 <HAL_GPIO_WritePin>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020400 	.word	0x40020400
 80028a8:	20000228 	.word	0x20000228

080028ac <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	733b      	strb	r3, [r7, #12]
 80028bc:	2300      	movs	r3, #0
 80028be:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 80028c0:	f107 010c 	add.w	r1, r7, #12
 80028c4:	2364      	movs	r3, #100	; 0x64
 80028c6:	2202      	movs	r2, #2
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80028ca:	f004 f89b 	bl	8006a04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 80028ce:	2364      	movs	r3, #100	; 0x64
 80028d0:	2202      	movs	r2, #2
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80028d6:	f004 f9e1 	bl	8006c9c <HAL_SPI_Receive>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000540 	.word	0x20000540

080028e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d109      	bne.n	800290e <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_GPIO_EXTI_Callback+0x34>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_GPIO_EXTI_Callback+0x34>)
 800290c:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000184 	.word	0x20000184

08002920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002928:	e7fe      	b.n	8002928 <Error_Handler+0x8>

0800292a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_MspInit+0x4c>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_MspInit+0x4c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_MspInit+0x4c>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800297e:	2007      	movs	r0, #7
 8002980:	f000 fe8c 	bl	800369c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b090      	sub	sp, #64	; 0x40
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6b      	ldr	r2, [pc, #428]	; (8002b5c <HAL_I2C_MspInit+0x1cc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12d      	bne.n	8002a0e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e0:	2304      	movs	r3, #4
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e8:	4619      	mov	r1, r3
 80029ea:	485e      	ldr	r0, [pc, #376]	; (8002b64 <HAL_I2C_MspInit+0x1d4>)
 80029ec:	f001 fbb0 	bl	8004150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a59      	ldr	r2, [pc, #356]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 80029fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002a00:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a0c:	e0a2      	b.n	8002b54 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a55      	ldr	r2, [pc, #340]	; (8002b68 <HAL_I2C_MspInit+0x1d8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d14c      	bne.n	8002ab2 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a56:	2312      	movs	r3, #18
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a62:	2304      	movs	r3, #4
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	483d      	ldr	r0, [pc, #244]	; (8002b64 <HAL_I2C_MspInit+0x1d4>)
 8002a6e:	f001 fb6f 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a78:	2312      	movs	r3, #18
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a84:	2304      	movs	r3, #4
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4837      	ldr	r0, [pc, #220]	; (8002b6c <HAL_I2C_MspInit+0x1dc>)
 8002a90:	f001 fb5e 	bl	8004150 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]
}
 8002ab0:	e050      	b.n	8002b54 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2e      	ldr	r2, [pc, #184]	; (8002b70 <HAL_I2C_MspInit+0x1e0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d14b      	bne.n	8002b54 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afa:	2312      	movs	r3, #18
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b06:	2304      	movs	r3, #4
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4816      	ldr	r0, [pc, #88]	; (8002b6c <HAL_I2C_MspInit+0x1dc>)
 8002b12:	f001 fb1d 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b30:	4619      	mov	r1, r3
 8002b32:	4810      	ldr	r0, [pc, #64]	; (8002b74 <HAL_I2C_MspInit+0x1e4>)
 8002b34:	f001 fb0c 	bl	8004150 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_I2C_MspInit+0x1d0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3740      	adds	r7, #64	; 0x40
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40005800 	.word	0x40005800
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40005c00 	.word	0x40005c00
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b090      	sub	sp, #64	; 0x40
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a98      	ldr	r2, [pc, #608]	; (8002df8 <HAL_SPI_MspInit+0x280>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12c      	bne.n	8002bf4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9e:	4b97      	ldr	r3, [pc, #604]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a96      	ldr	r2, [pc, #600]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b94      	ldr	r3, [pc, #592]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	4b90      	ldr	r3, [pc, #576]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a8f      	ldr	r2, [pc, #572]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b8d      	ldr	r3, [pc, #564]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bd2:	23e0      	movs	r3, #224	; 0xe0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be2:	2305      	movs	r3, #5
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4884      	ldr	r0, [pc, #528]	; (8002e00 <HAL_SPI_MspInit+0x288>)
 8002bee:	f001 faaf 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002bf2:	e0fd      	b.n	8002df0 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a82      	ldr	r2, [pc, #520]	; (8002e04 <HAL_SPI_MspInit+0x28c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d14b      	bne.n	8002c96 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a7d      	ldr	r2, [pc, #500]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a76      	ldr	r2, [pc, #472]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a6f      	ldr	r2, [pc, #444]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c52:	2302      	movs	r3, #2
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002c62:	2307      	movs	r3, #7
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4866      	ldr	r0, [pc, #408]	; (8002e08 <HAL_SPI_MspInit+0x290>)
 8002c6e:	f001 fa6f 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	485f      	ldr	r0, [pc, #380]	; (8002e0c <HAL_SPI_MspInit+0x294>)
 8002c90:	f001 fa5e 	bl	8004150 <HAL_GPIO_Init>
}
 8002c94:	e0ac      	b.n	8002df0 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_SPI_MspInit+0x298>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f040 80a7 	bne.w	8002df0 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_SPI_MspInit+0x284>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d12:	2301      	movs	r3, #1
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002d22:	2307      	movs	r3, #7
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4837      	ldr	r0, [pc, #220]	; (8002e0c <HAL_SPI_MspInit+0x294>)
 8002d2e:	f001 fa0f 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d44:	2306      	movs	r3, #6
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	482c      	ldr	r0, [pc, #176]	; (8002e00 <HAL_SPI_MspInit+0x288>)
 8002d50:	f001 f9fe 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d66:	2306      	movs	r3, #6
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4825      	ldr	r0, [pc, #148]	; (8002e08 <HAL_SPI_MspInit+0x290>)
 8002d72:	f001 f9ed 	bl	8004150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d76:	2310      	movs	r3, #16
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d86:	2306      	movs	r3, #6
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481e      	ldr	r0, [pc, #120]	; (8002e0c <HAL_SPI_MspInit+0x294>)
 8002d92:	f001 f9dd 	bl	8004150 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_SPI_MspInit+0x2a0>)
 8002d9a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dd6:	f000 fcd1 	bl	800377c <HAL_DMA_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8002de0:	f7ff fd9e 	bl	8002920 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002de8:	649a      	str	r2, [r3, #72]	; 0x48
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_SPI_MspInit+0x29c>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002df0:	bf00      	nop
 8002df2:	3740      	adds	r7, #64	; 0x40
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40003800 	.word	0x40003800
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40003c00 	.word	0x40003c00
 8002e14:	20000458 	.word	0x20000458
 8002e18:	40026088 	.word	0x40026088

08002e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d116      	bne.n	8002e5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	201c      	movs	r0, #28
 8002e50:	f000 fc44 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e54:	201c      	movs	r0, #28
 8002e56:	f000 fc6d 	bl	8003734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002e5a:	e036      	b.n	8002eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d116      	bne.n	8002e94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002e82:	2201      	movs	r2, #1
 8002e84:	2100      	movs	r1, #0
 8002e86:	202b      	movs	r0, #43	; 0x2b
 8002e88:	f000 fc28 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e8c:	202b      	movs	r0, #43	; 0x2b
 8002e8e:	f000 fc51 	bl	8003734 <HAL_NVIC_EnableIRQ>
}
 8002e92:	e01a      	b.n	8002eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_TIM_Base_MspInit+0xc0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	202b      	movs	r0, #43	; 0x2b
 8002ec0:	f000 fc0c 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ec4:	202b      	movs	r0, #43	; 0x2b
 8002ec6:	f000 fc35 	bl	8003734 <HAL_NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40001800 	.word	0x40001800

08002ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_TIM_PWM_MspInit+0x48>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d115      	bne.n	8002f1e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_TIM_PWM_MspInit+0x4c>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_TIM_PWM_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	201d      	movs	r0, #29
 8002f14:	f000 fbe2 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f18:	201d      	movs	r0, #29
 8002f1a:	f000 fc0b 	bl	8003734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12b      	bne.n	8002faa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f8a:	23c0      	movs	r3, #192	; 0xc0
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002fa6:	f001 f8d3 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	; 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020400 	.word	0x40020400

08002fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a37      	ldr	r2, [pc, #220]	; (80030bc <HAL_TIM_MspPostInit+0xfc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d11e      	bne.n	8003020 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ffe:	2340      	movs	r3, #64	; 0x40
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800300e:	2302      	movs	r3, #2
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	482a      	ldr	r0, [pc, #168]	; (80030c4 <HAL_TIM_MspPostInit+0x104>)
 800301a:	f001 f899 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800301e:	e048      	b.n	80030b2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_TIM_MspPostInit+0x108>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d11f      	bne.n	800306a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003046:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003058:	2303      	movs	r3, #3
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4619      	mov	r1, r3
 8003062:	4818      	ldr	r0, [pc, #96]	; (80030c4 <HAL_TIM_MspPostInit+0x104>)
 8003064:	f001 f874 	bl	8004150 <HAL_GPIO_Init>
}
 8003068:	e023      	b.n	80030b2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_TIM_MspPostInit+0x10c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d11e      	bne.n	80030b2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	6313      	str	r3, [r2, #48]	; 0x30
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003090:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80030a2:	2309      	movs	r3, #9
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4808      	ldr	r0, [pc, #32]	; (80030d0 <HAL_TIM_MspPostInit+0x110>)
 80030ae:	f001 f84f 	bl	8004150 <HAL_GPIO_Init>
}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40001800 	.word	0x40001800
 80030d0:	40020400 	.word	0x40020400

080030d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5f      	ldr	r2, [pc, #380]	; (8003270 <HAL_UART_MspInit+0x19c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d153      	bne.n	800319e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a5d      	ldr	r2, [pc, #372]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b5b      	ldr	r3, [pc, #364]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	4b57      	ldr	r3, [pc, #348]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a56      	ldr	r2, [pc, #344]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b4d      	ldr	r3, [pc, #308]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800315a:	2308      	movs	r3, #8
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	4619      	mov	r1, r3
 8003164:	4844      	ldr	r0, [pc, #272]	; (8003278 <HAL_UART_MspInit+0x1a4>)
 8003166:	f000 fff3 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800316a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	2301      	movs	r3, #1
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800317c:	2308      	movs	r3, #8
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	4619      	mov	r1, r3
 8003186:	483d      	ldr	r0, [pc, #244]	; (800327c <HAL_UART_MspInit+0x1a8>)
 8003188:	f000 ffe2 	bl	8004150 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	2034      	movs	r0, #52	; 0x34
 8003192:	f000 faa3 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003196:	2034      	movs	r0, #52	; 0x34
 8003198:	f000 facc 	bl	8003734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319c:	e063      	b.n	8003266 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <HAL_UART_MspInit+0x1ac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d12d      	bne.n	8003204 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031b2:	f043 0310 	orr.w	r3, r3, #16
 80031b6:	6453      	str	r3, [r2, #68]	; 0x44
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4a29      	ldr	r2, [pc, #164]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6313      	str	r3, [r2, #48]	; 0x30
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f2:	2307      	movs	r3, #7
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fa:	4619      	mov	r1, r3
 80031fc:	481e      	ldr	r0, [pc, #120]	; (8003278 <HAL_UART_MspInit+0x1a4>)
 80031fe:	f000 ffa7 	bl	8004150 <HAL_GPIO_Init>
}
 8003202:	e030      	b.n	8003266 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_UART_MspInit+0x1b0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12b      	bne.n	8003266 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_UART_MspInit+0x1a0>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003246:	230c      	movs	r3, #12
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003256:	2307      	movs	r3, #7
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_UART_MspInit+0x1a4>)
 8003262:	f000 ff75 	bl	8004150 <HAL_GPIO_Init>
}
 8003266:	bf00      	nop
 8003268:	3738      	adds	r7, #56	; 0x38
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40004c00 	.word	0x40004c00
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020800 	.word	0x40020800
 8003280:	40011000 	.word	0x40011000
 8003284:	40004400 	.word	0x40004400

08003288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800328c:	e7fe      	b.n	800328c <NMI_Handler+0x4>

0800328e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <HardFault_Handler+0x4>

08003294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <MemManage_Handler+0x4>

0800329a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329e:	e7fe      	b.n	800329e <BusFault_Handler+0x4>

080032a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <UsageFault_Handler+0x4>

080032a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d4:	f000 f8ce 	bl	8003474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}

080032dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <DMA1_Stream5_IRQHandler+0x10>)
 80032e2:	f000 fcf9 	bl	8003cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000458 	.word	0x20000458

080032f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <TIM2_IRQHandler+0x10>)
 80032f6:	f004 fe97 	bl	8008028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000598 	.word	0x20000598

08003304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM3_IRQHandler+0x10>)
 800330a:	f004 fe8d 	bl	8008028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200003b8 	.word	0x200003b8

08003318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800331c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003320:	f001 fa6c 	bl	80047fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}

08003328 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800332e:	f004 fe7b 	bl	8008028 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003332:	4803      	ldr	r0, [pc, #12]	; (8003340 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003334:	f004 fe78 	bl	8008028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000280 	.word	0x20000280
 8003340:	20000624 	.word	0x20000624

08003344 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003348:	4802      	ldr	r0, [pc, #8]	; (8003354 <UART4_IRQHandler+0x10>)
 800334a:	f006 fb85 	bl	8009a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200004fc 	.word	0x200004fc

08003358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <SystemInit+0x20>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <SystemInit+0x20>)
 8003364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003382:	490e      	ldr	r1, [pc, #56]	; (80033bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003388:	e002      	b.n	8003390 <LoopCopyDataInit>

0800338a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800338c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800338e:	3304      	adds	r3, #4

08003390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003394:	d3f9      	bcc.n	800338a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003398:	4c0b      	ldr	r4, [pc, #44]	; (80033c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800339c:	e001      	b.n	80033a2 <LoopFillZerobss>

0800339e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800339e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a0:	3204      	adds	r2, #4

080033a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a4:	d3fb      	bcc.n	800339e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033a6:	f7ff ffd7 	bl	8003358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033aa:	f00c fe17 	bl	800ffdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ae:	f7fd fe87 	bl	80010c0 <main>
  bx  lr    
 80033b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033bc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80033c0:	08010388 	.word	0x08010388
  ldr r2, =_sbss
 80033c4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80033c8:	20000770 	.word	0x20000770

080033cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC_IRQHandler>
	...

080033d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <HAL_Init+0x40>)
 80033da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_Init+0x40>)
 80033e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_Init+0x40>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f8:	2003      	movs	r0, #3
 80033fa:	f000 f94f 	bl	800369c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033fe:	2000      	movs	r0, #0
 8003400:	f000 f808 	bl	8003414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003404:	f7ff fa9c 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00

08003414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_InitTick+0x54>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_InitTick+0x58>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342a:	fbb3 f3f1 	udiv	r3, r3, r1
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f996 	bl	8003764 <HAL_SYSTICK_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00e      	b.n	8003460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d80a      	bhi.n	800345e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003448:	2200      	movs	r2, #0
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f000 f944 	bl	80036dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <HAL_InitTick+0x5c>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000128 	.word	0x20000128
 800346c:	20000130 	.word	0x20000130
 8003470:	2000012c 	.word	0x2000012c

08003474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_IncTick+0x20>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_IncTick+0x24>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4413      	add	r3, r2
 8003484:	4a04      	ldr	r2, [pc, #16]	; (8003498 <HAL_IncTick+0x24>)
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000130 	.word	0x20000130
 8003498:	2000066c 	.word	0x2000066c

0800349c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return uwTick;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_GetTick+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2000066c 	.word	0x2000066c

080034b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff ffee 	bl	800349c <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d005      	beq.n	80034da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_Delay+0x44>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034da:	bf00      	nop
 80034dc:	f7ff ffde 	bl	800349c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d8f7      	bhi.n	80034dc <HAL_Delay+0x28>
  {
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000130 	.word	0x20000130

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db0b      	blt.n	800358a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4907      	ldr	r1, [pc, #28]	; (8003598 <__NVIC_EnableIRQ+0x38>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2001      	movs	r0, #1
 8003582:	fa00 f202 	lsl.w	r2, r0, r2
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000e100 	.word	0xe000e100

0800359c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0a      	blt.n	80035c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	490c      	ldr	r1, [pc, #48]	; (80035e8 <__NVIC_SetPriority+0x4c>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	440b      	add	r3, r1
 80035c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c4:	e00a      	b.n	80035dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <__NVIC_SetPriority+0x50>)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	3b04      	subs	r3, #4
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	440b      	add	r3, r1
 80035da:	761a      	strb	r2, [r3, #24]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000e100 	.word	0xe000e100
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	2b04      	cmp	r3, #4
 800360c:	bf28      	it	cs
 800360e:	2304      	movcs	r3, #4
 8003610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3304      	adds	r3, #4
 8003616:	2b06      	cmp	r3, #6
 8003618:	d902      	bls.n	8003620 <NVIC_EncodePriority+0x30>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3b03      	subs	r3, #3
 800361e:	e000      	b.n	8003622 <NVIC_EncodePriority+0x32>
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003638:	f04f 31ff 	mov.w	r1, #4294967295
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43d9      	mvns	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	4313      	orrs	r3, r2
         );
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003668:	d301      	bcc.n	800366e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800366a:	2301      	movs	r3, #1
 800366c:	e00f      	b.n	800368e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <SysTick_Config+0x40>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003676:	210f      	movs	r1, #15
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	f7ff ff8e 	bl	800359c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SysTick_Config+0x40>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <SysTick_Config+0x40>)
 8003688:	2207      	movs	r2, #7
 800368a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010

0800369c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d00f      	beq.n	80036ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b06      	cmp	r3, #6
 80036ae:	d00c      	beq.n	80036ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d009      	beq.n	80036ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d006      	beq.n	80036ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d003      	beq.n	80036ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80036c2:	2192      	movs	r1, #146	; 0x92
 80036c4:	4804      	ldr	r0, [pc, #16]	; (80036d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80036c6:	f7ff f930 	bl	800292a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff16 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	08010090 	.word	0x08010090

080036dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d903      	bls.n	80036fc <HAL_NVIC_SetPriority+0x20>
 80036f4:	21aa      	movs	r1, #170	; 0xaa
 80036f6:	480e      	ldr	r0, [pc, #56]	; (8003730 <HAL_NVIC_SetPriority+0x54>)
 80036f8:	f7ff f917 	bl	800292a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	d903      	bls.n	800370a <HAL_NVIC_SetPriority+0x2e>
 8003702:	21ab      	movs	r1, #171	; 0xab
 8003704:	480a      	ldr	r0, [pc, #40]	; (8003730 <HAL_NVIC_SetPriority+0x54>)
 8003706:	f7ff f910 	bl	800292a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370a:	f7ff ff1b 	bl	8003544 <__NVIC_GetPriorityGrouping>
 800370e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	f7ff ff6b 	bl	80035f0 <NVIC_EncodePriority>
 800371a:	4602      	mov	r2, r0
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff3a 	bl	800359c <__NVIC_SetPriority>
}
 8003728:	bf00      	nop
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	08010090 	.word	0x08010090

08003734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da03      	bge.n	800374e <HAL_NVIC_EnableIRQ+0x1a>
 8003746:	21be      	movs	r1, #190	; 0xbe
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <HAL_NVIC_EnableIRQ+0x2c>)
 800374a:	f7ff f8ee 	bl	800292a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff04 	bl	8003560 <__NVIC_EnableIRQ>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	08010090 	.word	0x08010090

08003764 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff73 	bl	8003658 <SysTick_Config>
 8003772:	4603      	mov	r3, r0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff fe88 	bl	800349c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e204      	b.n	8003ba2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a97      	ldr	r2, [pc, #604]	; (80039fc <HAL_DMA_Init+0x280>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04e      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a96      	ldr	r2, [pc, #600]	; (8003a00 <HAL_DMA_Init+0x284>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d049      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a94      	ldr	r2, [pc, #592]	; (8003a04 <HAL_DMA_Init+0x288>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d044      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a93      	ldr	r2, [pc, #588]	; (8003a08 <HAL_DMA_Init+0x28c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03f      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a91      	ldr	r2, [pc, #580]	; (8003a0c <HAL_DMA_Init+0x290>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d03a      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a90      	ldr	r2, [pc, #576]	; (8003a10 <HAL_DMA_Init+0x294>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d035      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a8e      	ldr	r2, [pc, #568]	; (8003a14 <HAL_DMA_Init+0x298>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d030      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a8d      	ldr	r2, [pc, #564]	; (8003a18 <HAL_DMA_Init+0x29c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d02b      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8b      	ldr	r2, [pc, #556]	; (8003a1c <HAL_DMA_Init+0x2a0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d026      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a8a      	ldr	r2, [pc, #552]	; (8003a20 <HAL_DMA_Init+0x2a4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d021      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a88      	ldr	r2, [pc, #544]	; (8003a24 <HAL_DMA_Init+0x2a8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01c      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a87      	ldr	r2, [pc, #540]	; (8003a28 <HAL_DMA_Init+0x2ac>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d017      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a85      	ldr	r2, [pc, #532]	; (8003a2c <HAL_DMA_Init+0x2b0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d012      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a84      	ldr	r2, [pc, #528]	; (8003a30 <HAL_DMA_Init+0x2b4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00d      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a82      	ldr	r2, [pc, #520]	; (8003a34 <HAL_DMA_Init+0x2b8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d008      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a81      	ldr	r2, [pc, #516]	; (8003a38 <HAL_DMA_Init+0x2bc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <HAL_DMA_Init+0xc4>
 8003838:	21b8      	movs	r1, #184	; 0xb8
 800383a:	4880      	ldr	r0, [pc, #512]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 800383c:	f7ff f875 	bl	800292a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d026      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003850:	d021      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385a:	d01c      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003864:	d017      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800386e:	d012      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003878:	d00d      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800388c:	d003      	beq.n	8003896 <HAL_DMA_Init+0x11a>
 800388e:	21b9      	movs	r1, #185	; 0xb9
 8003890:	486a      	ldr	r0, [pc, #424]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 8003892:	f7ff f84a 	bl	800292a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_DMA_Init+0x13a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_Init+0x13a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d003      	beq.n	80038b6 <HAL_DMA_Init+0x13a>
 80038ae:	21ba      	movs	r1, #186	; 0xba
 80038b0:	4862      	ldr	r0, [pc, #392]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 80038b2:	f7ff f83a 	bl	800292a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038be:	d007      	beq.n	80038d0 <HAL_DMA_Init+0x154>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_Init+0x154>
 80038c8:	21bb      	movs	r1, #187	; 0xbb
 80038ca:	485c      	ldr	r0, [pc, #368]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 80038cc:	f7ff f82d 	bl	800292a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_Init+0x16e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_Init+0x16e>
 80038e2:	21bc      	movs	r1, #188	; 0xbc
 80038e4:	4855      	ldr	r0, [pc, #340]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 80038e6:	f7ff f820 	bl	800292a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <HAL_DMA_Init+0x192>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	d008      	beq.n	800390e <HAL_DMA_Init+0x192>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d003      	beq.n	800390e <HAL_DMA_Init+0x192>
 8003906:	21bd      	movs	r1, #189	; 0xbd
 8003908:	484c      	ldr	r0, [pc, #304]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 800390a:	f7ff f80e 	bl	800292a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <HAL_DMA_Init+0x1b6>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d008      	beq.n	8003932 <HAL_DMA_Init+0x1b6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003928:	d003      	beq.n	8003932 <HAL_DMA_Init+0x1b6>
 800392a:	21be      	movs	r1, #190	; 0xbe
 800392c:	4843      	ldr	r0, [pc, #268]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 800392e:	f7fe fffc 	bl	800292a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_DMA_Init+0x1d8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	d007      	beq.n	8003954 <HAL_DMA_Init+0x1d8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b20      	cmp	r3, #32
 800394a:	d003      	beq.n	8003954 <HAL_DMA_Init+0x1d8>
 800394c:	21bf      	movs	r1, #191	; 0xbf
 800394e:	483b      	ldr	r0, [pc, #236]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 8003950:	f7fe ffeb 	bl	800292a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <HAL_DMA_Init+0x206>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d00d      	beq.n	8003982 <HAL_DMA_Init+0x206>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800396e:	d008      	beq.n	8003982 <HAL_DMA_Init+0x206>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003978:	d003      	beq.n	8003982 <HAL_DMA_Init+0x206>
 800397a:	21c0      	movs	r1, #192	; 0xc0
 800397c:	482f      	ldr	r0, [pc, #188]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 800397e:	f7fe ffd4 	bl	800292a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_DMA_Init+0x21e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b04      	cmp	r3, #4
 8003990:	d003      	beq.n	800399a <HAL_DMA_Init+0x21e>
 8003992:	21c1      	movs	r1, #193	; 0xc1
 8003994:	4829      	ldr	r0, [pc, #164]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 8003996:	f7fe ffc8 	bl	800292a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d065      	beq.n	8003a6e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00f      	beq.n	80039ca <HAL_DMA_Init+0x24e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d00b      	beq.n	80039ca <HAL_DMA_Init+0x24e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d007      	beq.n	80039ca <HAL_DMA_Init+0x24e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d003      	beq.n	80039ca <HAL_DMA_Init+0x24e>
 80039c2:	21c6      	movs	r1, #198	; 0xc6
 80039c4:	481d      	ldr	r0, [pc, #116]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 80039c6:	f7fe ffb0 	bl	800292a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d036      	beq.n	8003a40 <HAL_DMA_Init+0x2c4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039da:	d031      	beq.n	8003a40 <HAL_DMA_Init+0x2c4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d02c      	beq.n	8003a40 <HAL_DMA_Init+0x2c4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ee:	d027      	beq.n	8003a40 <HAL_DMA_Init+0x2c4>
 80039f0:	21c7      	movs	r1, #199	; 0xc7
 80039f2:	4812      	ldr	r0, [pc, #72]	; (8003a3c <HAL_DMA_Init+0x2c0>)
 80039f4:	f7fe ff99 	bl	800292a <assert_failed>
 80039f8:	e022      	b.n	8003a40 <HAL_DMA_Init+0x2c4>
 80039fa:	bf00      	nop
 80039fc:	40026010 	.word	0x40026010
 8003a00:	40026028 	.word	0x40026028
 8003a04:	40026040 	.word	0x40026040
 8003a08:	40026058 	.word	0x40026058
 8003a0c:	40026070 	.word	0x40026070
 8003a10:	40026088 	.word	0x40026088
 8003a14:	400260a0 	.word	0x400260a0
 8003a18:	400260b8 	.word	0x400260b8
 8003a1c:	40026410 	.word	0x40026410
 8003a20:	40026428 	.word	0x40026428
 8003a24:	40026440 	.word	0x40026440
 8003a28:	40026458 	.word	0x40026458
 8003a2c:	40026470 	.word	0x40026470
 8003a30:	40026488 	.word	0x40026488
 8003a34:	400264a0 	.word	0x400264a0
 8003a38:	400264b8 	.word	0x400264b8
 8003a3c:	080100cc 	.word	0x080100cc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_DMA_Init+0x2f2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a50:	d00d      	beq.n	8003a6e <HAL_DMA_Init+0x2f2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Init+0x2f2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a64:	d003      	beq.n	8003a6e <HAL_DMA_Init+0x2f2>
 8003a66:	21c8      	movs	r1, #200	; 0xc8
 8003a68:	4850      	ldr	r0, [pc, #320]	; (8003bac <HAL_DMA_Init+0x430>)
 8003a6a:	f7fe ff5e 	bl	800292a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a90:	f7ff fd04 	bl	800349c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d908      	bls.n	8003ab0 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e078      	b.n	8003ba2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e8      	bne.n	8003a90 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <HAL_DMA_Init+0x434>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4313      	orrs	r3, r2
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0307 	bic.w	r3, r3, #7
 8003b30:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d117      	bne.n	8003b74 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa7e 	bl	8004058 <DMA_CheckFifoParam>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b70:	2301      	movs	r3, #1
 8003b72:	e016      	b.n	8003ba2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa35 	bl	8003fec <DMA_CalcBaseAndBitshift>
 8003b82:	4603      	mov	r3, r0
 8003b84:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	223f      	movs	r2, #63	; 0x3f
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	080100cc 	.word	0x080100cc
 8003bb0:	f010803f 	.word	0xf010803f

08003bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bc2:	f7ff fc6b 	bl	800349c <HAL_GetTick>
 8003bc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d008      	beq.n	8003be6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e052      	b.n	8003c8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0216 	bic.w	r2, r2, #22
 8003bf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_DMA_Abort+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0208 	bic.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c36:	e013      	b.n	8003c60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c38:	f7ff fc30 	bl	800349c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d90c      	bls.n	8003c60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e015      	b.n	8003c8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e4      	bne.n	8003c38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	223f      	movs	r2, #63	; 0x3f
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00c      	b.n	8003ccc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce4:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <HAL_DMA_IRQHandler+0x258>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a92      	ldr	r2, [pc, #584]	; (8003f34 <HAL_DMA_IRQHandler+0x25c>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a9b      	lsrs	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2208      	movs	r2, #8
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	2208      	movs	r2, #8
 8003d32:	409a      	lsls	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	2201      	movs	r2, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d012      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2201      	movs	r2, #1
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f043 0202 	orr.w	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	2204      	movs	r2, #4
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f043 0204 	orr.w	r2, r3, #4
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2210      	movs	r2, #16
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d043      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03c      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d024      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e01f      	b.n	8003e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
 8003e18:	e016      	b.n	8003e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0208 	bic.w	r2, r2, #8
 8003e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 808e 	beq.w	8003f76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8086 	beq.w	8003f76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2220      	movs	r2, #32
 8003e70:	409a      	lsls	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d136      	bne.n	8003ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0216 	bic.w	r2, r2, #22
 8003e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x1da>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	223f      	movs	r2, #63	; 0x3f
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d07d      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
        }
        return;
 8003eee:	e078      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01c      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d030      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e02b      	b.n	8003f76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e022      	b.n	8003f76 <HAL_DMA_IRQHandler+0x29e>
 8003f30:	20000128 	.word	0x20000128
 8003f34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0210 	bic.w	r2, r2, #16
 8003f54:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d032      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d307      	bcc.n	8003fbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f2      	bne.n	8003fa2 <HAL_DMA_IRQHandler+0x2ca>
 8003fbc:	e000      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fbe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
 8003fe0:	e000      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fe2:	bf00      	nop
    }
  }
}
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop

08003fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	3b10      	subs	r3, #16
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <DMA_CalcBaseAndBitshift+0x64>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <DMA_CalcBaseAndBitshift+0x68>)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d909      	bls.n	800402e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	659a      	str	r2, [r3, #88]	; 0x58
 800402c:	e007      	b.n	800403e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	aaaaaaab 	.word	0xaaaaaaab
 8004054:	08010348 	.word	0x08010348

08004058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11f      	bne.n	80040b2 <DMA_CheckFifoParam+0x5a>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d856      	bhi.n	8004126 <DMA_CheckFifoParam+0xce>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <DMA_CheckFifoParam+0x28>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	08004091 	.word	0x08004091
 8004084:	080040a3 	.word	0x080040a3
 8004088:	08004091 	.word	0x08004091
 800408c:	08004127 	.word	0x08004127
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d046      	beq.n	800412a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a0:	e043      	b.n	800412a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040aa:	d140      	bne.n	800412e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b0:	e03d      	b.n	800412e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	d121      	bne.n	8004100 <DMA_CheckFifoParam+0xa8>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d837      	bhi.n	8004132 <DMA_CheckFifoParam+0xda>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <DMA_CheckFifoParam+0x70>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040df 	.word	0x080040df
 80040d0:	080040d9 	.word	0x080040d9
 80040d4:	080040f1 	.word	0x080040f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e030      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d025      	beq.n	8004136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ee:	e022      	b.n	8004136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040f8:	d11f      	bne.n	800413a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040fe:	e01c      	b.n	800413a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d903      	bls.n	800410e <DMA_CheckFifoParam+0xb6>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d003      	beq.n	8004114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800410c:	e018      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
      break;
 8004112:	e015      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      break;
 8004124:	e00b      	b.n	800413e <DMA_CheckFifoParam+0xe6>
      break;
 8004126:	bf00      	nop
 8004128:	e00a      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e008      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e006      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e004      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;   
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
      break;
 800413e:	bf00      	nop
    }
  } 
  
  return status; 
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a37      	ldr	r2, [pc, #220]	; (8004248 <HAL_GPIO_Init+0xf8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a36      	ldr	r2, [pc, #216]	; (800424c <HAL_GPIO_Init+0xfc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01b      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a35      	ldr	r2, [pc, #212]	; (8004250 <HAL_GPIO_Init+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d017      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a34      	ldr	r2, [pc, #208]	; (8004254 <HAL_GPIO_Init+0x104>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a33      	ldr	r2, [pc, #204]	; (8004258 <HAL_GPIO_Init+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00f      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a32      	ldr	r2, [pc, #200]	; (800425c <HAL_GPIO_Init+0x10c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a31      	ldr	r2, [pc, #196]	; (8004260 <HAL_GPIO_Init+0x110>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a30      	ldr	r2, [pc, #192]	; (8004264 <HAL_GPIO_Init+0x114>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x5e>
 80041a6:	21ac      	movs	r1, #172	; 0xac
 80041a8:	482f      	ldr	r0, [pc, #188]	; (8004268 <HAL_GPIO_Init+0x118>)
 80041aa:	f7fe fbbe 	bl	800292a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_GPIO_Init+0x74>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x7c>
 80041c4:	21ad      	movs	r1, #173	; 0xad
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <HAL_GPIO_Init+0x118>)
 80041c8:	f7fe fbaf 	bl	800292a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d035      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d031      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b11      	cmp	r3, #17
 80041e2:	d02d      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d029      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b12      	cmp	r3, #18
 80041f2:	d025      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80041fc:	d020      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004206:	d01b      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004210:	d016      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800421a:	d011      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004224:	d00c      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800422e:	d007      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
 8004238:	21ae      	movs	r1, #174	; 0xae
 800423a:	480b      	ldr	r0, [pc, #44]	; (8004268 <HAL_GPIO_Init+0x118>)
 800423c:	f7fe fb75 	bl	800292a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e289      	b.n	800475a <HAL_GPIO_Init+0x60a>
 8004246:	bf00      	nop
 8004248:	40020000 	.word	0x40020000
 800424c:	40020400 	.word	0x40020400
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40021400 	.word	0x40021400
 8004260:	40021800 	.word	0x40021800
 8004264:	40021c00 	.word	0x40021c00
 8004268:	08010104 	.word	0x08010104
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800426c:	2201      	movs	r2, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	f040 8265 	bne.w	8004754 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d005      	beq.n	80042a2 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d144      	bne.n	800432c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00f      	beq.n	80042ca <HAL_GPIO_Init+0x17a>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d00b      	beq.n	80042ca <HAL_GPIO_Init+0x17a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d007      	beq.n	80042ca <HAL_GPIO_Init+0x17a>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x17a>
 80042c2:	21c0      	movs	r1, #192	; 0xc0
 80042c4:	4831      	ldr	r0, [pc, #196]	; (800438c <HAL_GPIO_Init+0x23c>)
 80042c6:	f7fe fb30 	bl	800292a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004300:	2201      	movs	r2, #1
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 0201 	and.w	r2, r3, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b03      	cmp	r3, #3
 8004336:	d02b      	beq.n	8004390 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_GPIO_Init+0x208>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x208>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x208>
 8004350:	21d1      	movs	r1, #209	; 0xd1
 8004352:	480e      	ldr	r0, [pc, #56]	; (800438c <HAL_GPIO_Init+0x23c>)
 8004354:	f7fe fae9 	bl	800292a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e002      	b.n	8004390 <HAL_GPIO_Init+0x240>
 800438a:	bf00      	nop
 800438c:	08010104 	.word	0x08010104
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b02      	cmp	r3, #2
 800439a:	f040 810c 	bne.w	80045b6 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80e3 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	f000 80de 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80d9 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80d4 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80cf 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80ca 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	f000 80c5 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	f000 80c0 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	f000 80bb 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f000 80b6 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b02      	cmp	r3, #2
 8004408:	f000 80b1 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b03      	cmp	r3, #3
 8004412:	f000 80ac 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b04      	cmp	r3, #4
 800441c:	f000 80a7 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b04      	cmp	r3, #4
 8004426:	f000 80a2 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b04      	cmp	r3, #4
 8004430:	f000 809d 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b05      	cmp	r3, #5
 800443a:	f000 8098 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b05      	cmp	r3, #5
 8004444:	f000 8093 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b09      	cmp	r3, #9
 800444e:	f000 808e 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b06      	cmp	r3, #6
 8004458:	f000 8089 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b09      	cmp	r3, #9
 8004462:	f000 8084 	beq.w	800456e <HAL_GPIO_Init+0x41e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b07      	cmp	r3, #7
 800446c:	d07f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b07      	cmp	r3, #7
 8004474:	d07b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b07      	cmp	r3, #7
 800447c:	d077      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d073      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d06f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b08      	cmp	r3, #8
 8004494:	d06b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b09      	cmp	r3, #9
 800449c:	d067      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d063      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b0a      	cmp	r3, #10
 80044ac:	d05f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b0a      	cmp	r3, #10
 80044b4:	d05b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b0b      	cmp	r3, #11
 80044bc:	d057      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d053      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d04f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b0d      	cmp	r3, #13
 80044d4:	d04b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d047      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d043      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d03f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d03b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d037      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d033      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d02f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d02b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d027      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b07      	cmp	r3, #7
 8004524:	d023      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b07      	cmp	r3, #7
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b07      	cmp	r3, #7
 8004534:	d01b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b07      	cmp	r3, #7
 800453c:	d017      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d013      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d00f      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b09      	cmp	r3, #9
 8004554:	d00b      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b0a      	cmp	r3, #10
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x41e>
 8004566:	21de      	movs	r1, #222	; 0xde
 8004568:	4880      	ldr	r0, [pc, #512]	; (800476c <HAL_GPIO_Init+0x61c>)
 800456a:	f7fe f9de 	bl	800292a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80ae 	beq.w	8004754 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_GPIO_Init+0x620>)
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	4a5b      	ldr	r2, [pc, #364]	; (8004770 <HAL_GPIO_Init+0x620>)
 8004602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004606:	6453      	str	r3, [r2, #68]	; 0x44
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_GPIO_Init+0x620>)
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004614:	4a57      	ldr	r2, [pc, #348]	; (8004774 <HAL_GPIO_Init+0x624>)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	220f      	movs	r2, #15
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <HAL_GPIO_Init+0x628>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d025      	beq.n	800468c <HAL_GPIO_Init+0x53c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_GPIO_Init+0x62c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d01f      	beq.n	8004688 <HAL_GPIO_Init+0x538>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a4d      	ldr	r2, [pc, #308]	; (8004780 <HAL_GPIO_Init+0x630>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d019      	beq.n	8004684 <HAL_GPIO_Init+0x534>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a4c      	ldr	r2, [pc, #304]	; (8004784 <HAL_GPIO_Init+0x634>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_GPIO_Init+0x530>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_GPIO_Init+0x638>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00d      	beq.n	800467c <HAL_GPIO_Init+0x52c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a4a      	ldr	r2, [pc, #296]	; (800478c <HAL_GPIO_Init+0x63c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <HAL_GPIO_Init+0x528>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a49      	ldr	r2, [pc, #292]	; (8004790 <HAL_GPIO_Init+0x640>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_GPIO_Init+0x524>
 8004670:	2306      	movs	r3, #6
 8004672:	e00c      	b.n	800468e <HAL_GPIO_Init+0x53e>
 8004674:	2307      	movs	r3, #7
 8004676:	e00a      	b.n	800468e <HAL_GPIO_Init+0x53e>
 8004678:	2305      	movs	r3, #5
 800467a:	e008      	b.n	800468e <HAL_GPIO_Init+0x53e>
 800467c:	2304      	movs	r3, #4
 800467e:	e006      	b.n	800468e <HAL_GPIO_Init+0x53e>
 8004680:	2303      	movs	r3, #3
 8004682:	e004      	b.n	800468e <HAL_GPIO_Init+0x53e>
 8004684:	2302      	movs	r3, #2
 8004686:	e002      	b.n	800468e <HAL_GPIO_Init+0x53e>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_GPIO_Init+0x53e>
 800468c:	2300      	movs	r3, #0
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	f002 0203 	and.w	r2, r2, #3
 8004694:	0092      	lsls	r2, r2, #2
 8004696:	4093      	lsls	r3, r2
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800469e:	4935      	ldr	r1, [pc, #212]	; (8004774 <HAL_GPIO_Init+0x624>)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	3302      	adds	r3, #2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ac:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_GPIO_Init+0x644>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046d0:	4a30      	ldr	r2, [pc, #192]	; (8004794 <HAL_GPIO_Init+0x644>)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_GPIO_Init+0x644>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <HAL_GPIO_Init+0x644>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_GPIO_Init+0x644>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_GPIO_Init+0x644>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800472a:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_GPIO_Init+0x644>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800474e:	4a11      	ldr	r2, [pc, #68]	; (8004794 <HAL_GPIO_Init+0x644>)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b0f      	cmp	r3, #15
 800475e:	f67f ad85 	bls.w	800426c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08010104 	.word	0x08010104
 8004770:	40023800 	.word	0x40023800
 8004774:	40013800 	.word	0x40013800
 8004778:	40020000 	.word	0x40020000
 800477c:	40020400 	.word	0x40020400
 8004780:	40020800 	.word	0x40020800
 8004784:	40020c00 	.word	0x40020c00
 8004788:	40021000 	.word	0x40021000
 800478c:	40021400 	.word	0x40021400
 8004790:	40021800 	.word	0x40021800
 8004794:	40013c00 	.word	0x40013c00

08004798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
 80047a4:	4613      	mov	r3, r2
 80047a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_GPIO_WritePin+0x20>
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_GPIO_WritePin+0x2a>
 80047b8:	f240 119d 	movw	r1, #413	; 0x19d
 80047bc:	480e      	ldr	r0, [pc, #56]	; (80047f8 <HAL_GPIO_WritePin+0x60>)
 80047be:	f7fe f8b4 	bl	800292a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80047c2:	787b      	ldrb	r3, [r7, #1]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_GPIO_WritePin+0x40>
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d004      	beq.n	80047d8 <HAL_GPIO_WritePin+0x40>
 80047ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80047d2:	4809      	ldr	r0, [pc, #36]	; (80047f8 <HAL_GPIO_WritePin+0x60>)
 80047d4:	f7fe f8a9 	bl	800292a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80047d8:	787b      	ldrb	r3, [r7, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047e4:	e003      	b.n	80047ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	041a      	lsls	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	619a      	str	r2, [r3, #24]
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	08010104 	.word	0x08010104

080047fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe f864 	bl	80028e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40013c00 	.word	0x40013c00

0800482c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1be      	b.n	8004bbc <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a9f      	ldr	r2, [pc, #636]	; (8004ac0 <HAL_I2C_Init+0x294>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_I2C_Init+0x3a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a9d      	ldr	r2, [pc, #628]	; (8004ac4 <HAL_I2C_Init+0x298>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_I2C_Init+0x3a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a9c      	ldr	r2, [pc, #624]	; (8004ac8 <HAL_I2C_Init+0x29c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_I2C_Init+0x3a>
 800485c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004860:	489a      	ldr	r0, [pc, #616]	; (8004acc <HAL_I2C_Init+0x2a0>)
 8004862:	f7fe f862 	bl	800292a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_I2C_Init+0x4c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a97      	ldr	r2, [pc, #604]	; (8004ad0 <HAL_I2C_Init+0x2a4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d904      	bls.n	8004882 <HAL_I2C_Init+0x56>
 8004878:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800487c:	4893      	ldr	r0, [pc, #588]	; (8004acc <HAL_I2C_Init+0x2a0>)
 800487e:	f7fe f854 	bl	800292a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_I2C_Init+0x72>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004892:	d004      	beq.n	800489e <HAL_I2C_Init+0x72>
 8004894:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004898:	488c      	ldr	r0, [pc, #560]	; (8004acc <HAL_I2C_Init+0x2a0>)
 800489a:	f7fe f846 	bl	800292a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_I2C_Init+0x8c>
 80048ae:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80048b2:	4886      	ldr	r0, [pc, #536]	; (8004acc <HAL_I2C_Init+0x2a0>)
 80048b4:	f7fe f839 	bl	800292a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c0:	d009      	beq.n	80048d6 <HAL_I2C_Init+0xaa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ca:	d004      	beq.n	80048d6 <HAL_I2C_Init+0xaa>
 80048cc:	f240 11c3 	movw	r1, #451	; 0x1c3
 80048d0:	487e      	ldr	r0, [pc, #504]	; (8004acc <HAL_I2C_Init+0x2a0>)
 80048d2:	f7fe f82a 	bl	800292a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_I2C_Init+0xc4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d004      	beq.n	80048f0 <HAL_I2C_Init+0xc4>
 80048e6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80048ea:	4878      	ldr	r0, [pc, #480]	; (8004acc <HAL_I2C_Init+0x2a0>)
 80048ec:	f7fe f81d 	bl	800292a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_I2C_Init+0xda>
 80048fc:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004900:	4872      	ldr	r0, [pc, #456]	; (8004acc <HAL_I2C_Init+0x2a0>)
 8004902:	f7fe f812 	bl	800292a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_I2C_Init+0xf4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d004      	beq.n	8004920 <HAL_I2C_Init+0xf4>
 8004916:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800491a:	486c      	ldr	r0, [pc, #432]	; (8004acc <HAL_I2C_Init+0x2a0>)
 800491c:	f7fe f805 	bl	800292a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_I2C_Init+0x10e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d004      	beq.n	800493a <HAL_I2C_Init+0x10e>
 8004930:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004934:	4865      	ldr	r0, [pc, #404]	; (8004acc <HAL_I2C_Init+0x2a0>)
 8004936:	f7fd fff8 	bl	800292a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fe f81e 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800498c:	f001 f96e 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a4f      	ldr	r2, [pc, #316]	; (8004ad4 <HAL_I2C_Init+0x2a8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d807      	bhi.n	80049ac <HAL_I2C_Init+0x180>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a4e      	ldr	r2, [pc, #312]	; (8004ad8 <HAL_I2C_Init+0x2ac>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e006      	b.n	80049ba <HAL_I2C_Init+0x18e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_I2C_Init+0x2b0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bf94      	ite	ls
 80049b4:	2301      	movls	r3, #1
 80049b6:	2300      	movhi	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0fc      	b.n	8004bbc <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a46      	ldr	r2, [pc, #280]	; (8004ae0 <HAL_I2C_Init+0x2b4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a38      	ldr	r2, [pc, #224]	; (8004ad4 <HAL_I2C_Init+0x2a8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d802      	bhi.n	80049fc <HAL_I2C_Init+0x1d0>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3301      	adds	r3, #1
 80049fa:	e009      	b.n	8004a10 <HAL_I2C_Init+0x1e4>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a37      	ldr	r2, [pc, #220]	; (8004ae4 <HAL_I2C_Init+0x2b8>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	3301      	adds	r3, #1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	492a      	ldr	r1, [pc, #168]	; (8004ad4 <HAL_I2C_Init+0x2a8>)
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d819      	bhi.n	8004a64 <HAL_I2C_Init+0x238>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e59      	subs	r1, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a44:	400b      	ands	r3, r1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_I2C_Init+0x234>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e59      	subs	r1, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5e:	e066      	b.n	8004b2e <HAL_I2C_Init+0x302>
 8004a60:	2304      	movs	r3, #4
 8004a62:	e064      	b.n	8004b2e <HAL_I2C_Init+0x302>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <HAL_I2C_Init+0x264>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	440b      	add	r3, r1
 8004a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e012      	b.n	8004ab6 <HAL_I2C_Init+0x28a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e58      	subs	r0, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	0099      	lsls	r1, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_I2C_Init+0x2bc>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e037      	b.n	8004b2e <HAL_I2C_Init+0x302>
 8004abe:	bf00      	nop
 8004ac0:	40005400 	.word	0x40005400
 8004ac4:	40005800 	.word	0x40005800
 8004ac8:	40005c00 	.word	0x40005c00
 8004acc:	08010140 	.word	0x08010140
 8004ad0:	00061a80 	.word	0x00061a80
 8004ad4:	000186a0 	.word	0x000186a0
 8004ad8:	001e847f 	.word	0x001e847f
 8004adc:	003d08ff 	.word	0x003d08ff
 8004ae0:	431bde83 	.word	0x431bde83
 8004ae4:	10624dd3 	.word	0x10624dd3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10e      	bne.n	8004b0e <HAL_I2C_Init+0x2e2>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1e58      	subs	r0, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	440b      	add	r3, r1
 8004afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0c:	e00f      	b.n	8004b2e <HAL_I2C_Init+0x302>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1e58      	subs	r0, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	0099      	lsls	r1, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	6809      	ldr	r1, [r1, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6911      	ldr	r1, [r2, #16]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68d2      	ldr	r2, [r2, #12]
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	817b      	strh	r3, [r7, #10]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bd8:	f7fe fc60 	bl	800349c <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	f040 80e0 	bne.w	8004dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2319      	movs	r3, #25
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4970      	ldr	r1, [pc, #448]	; (8004db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fc58 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0d3      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_I2C_Master_Transmit+0x50>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0cc      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d007      	beq.n	8004c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2221      	movs	r2, #33	; 0x21
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2210      	movs	r2, #16
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	893a      	ldrh	r2, [r7, #8]
 8004c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a50      	ldr	r2, [pc, #320]	; (8004dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c7c:	8979      	ldrh	r1, [r7, #10]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fac2 	bl	800520c <I2C_MasterRequestWrite>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e08d      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ca8:	e066      	b.n	8004d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6a39      	ldr	r1, [r7, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fcd2 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11b      	bne.n	8004d4c <HAL_I2C_Master_Transmit+0x188>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	6a39      	ldr	r1, [r7, #32]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fcc2 	bl	80056da <I2C_WaitOnBTFFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d107      	bne.n	8004d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01a      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d194      	bne.n	8004caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000

08004dc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	460b      	mov	r3, r1
 8004dce:	817b      	strh	r3, [r7, #10]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd4:	f7fe fb62 	bl	800349c <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f040 820b 	bne.w	80051fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2319      	movs	r3, #25
 8004dee:	2201      	movs	r2, #1
 8004df0:	497c      	ldr	r1, [pc, #496]	; (8004fe4 <HAL_I2C_Master_Receive+0x224>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fb5a 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e1fe      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_I2C_Master_Receive+0x50>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e1f7      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d007      	beq.n	8004e36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2222      	movs	r2, #34	; 0x22
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2210      	movs	r2, #16
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	893a      	ldrh	r2, [r7, #8]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <HAL_I2C_Master_Receive+0x228>)
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e78:	8979      	ldrh	r1, [r7, #10]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fa46 	bl	8005310 <I2C_MasterRequestRead>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1b8      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d113      	bne.n	8004ebe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e18c      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d11b      	bne.n	8004efe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e16c      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d11b      	bne.n	8004f3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	e14c      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f64:	e138      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	f200 80f1 	bhi.w	8005152 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d123      	bne.n	8004fc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fbed 	bl	800575c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e139      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fbe:	e10b      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d14e      	bne.n	8005066 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4906      	ldr	r1, [pc, #24]	; (8004fec <HAL_I2C_Master_Receive+0x22c>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa6a 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e10e      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
 8004fe2:	bf00      	nop
 8004fe4:	00100002 	.word	0x00100002
 8004fe8:	ffff0000 	.word	0xffff0000
 8004fec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005064:	e0b8      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2200      	movs	r2, #0
 800506e:	4966      	ldr	r1, [pc, #408]	; (8005208 <HAL_I2C_Master_Receive+0x448>)
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fa1b 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0bf      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	2200      	movs	r2, #0
 80050ca:	494f      	ldr	r1, [pc, #316]	; (8005208 <HAL_I2C_Master_Receive+0x448>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f9ed 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e091      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005150:	e042      	b.n	80051d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fb00 	bl	800575c <I2C_WaitOnRXNEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e04c      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d118      	bne.n	80051d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f aec2 	bne.w	8004f66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e000      	b.n	8005200 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	00010004 	.word	0x00010004

0800520c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	460b      	mov	r3, r1
 800521a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d006      	beq.n	8005236 <I2C_MasterRequestWrite+0x2a>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d003      	beq.n	8005236 <I2C_MasterRequestWrite+0x2a>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005234:	d108      	bne.n	8005248 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e00b      	b.n	8005260 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b12      	cmp	r3, #18
 800524e:	d107      	bne.n	8005260 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800525e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f91d 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d103      	bne.n	8005290 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e035      	b.n	8005300 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529c:	d108      	bne.n	80052b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052ac:	611a      	str	r2, [r3, #16]
 80052ae:	e01b      	b.n	80052e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	11db      	asrs	r3, r3, #7
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f063 030f 	orn	r3, r3, #15
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	490e      	ldr	r1, [pc, #56]	; (8005308 <I2C_MasterRequestWrite+0xfc>)
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f943 	bl	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e010      	b.n	8005300 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052de:	897b      	ldrh	r3, [r7, #10]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4907      	ldr	r1, [pc, #28]	; (800530c <I2C_MasterRequestWrite+0x100>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f933 	bl	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	00010008 	.word	0x00010008
 800530c:	00010002 	.word	0x00010002

08005310 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	460b      	mov	r3, r1
 800531e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d006      	beq.n	800534a <I2C_MasterRequestRead+0x3a>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d003      	beq.n	800534a <I2C_MasterRequestRead+0x3a>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005348:	d108      	bne.n	800535c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e00b      	b.n	8005374 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	2b11      	cmp	r3, #17
 8005362:	d107      	bne.n	8005374 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005372:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f893 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d103      	bne.n	80053a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e079      	b.n	800549c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053b0:	d108      	bne.n	80053c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053b2:	897b      	ldrh	r3, [r7, #10]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]
 80053c2:	e05f      	b.n	8005484 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053c4:	897b      	ldrh	r3, [r7, #10]
 80053c6:	11db      	asrs	r3, r3, #7
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0306 	and.w	r3, r3, #6
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f063 030f 	orn	r3, r3, #15
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4930      	ldr	r1, [pc, #192]	; (80054a4 <I2C_MasterRequestRead+0x194>)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8b9 	bl	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e054      	b.n	800549c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4929      	ldr	r1, [pc, #164]	; (80054a8 <I2C_MasterRequestRead+0x198>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f8a9 	bl	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e044      	b.n	800549c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f831 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d103      	bne.n	8005468 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e017      	b.n	800549c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800546c:	897b      	ldrh	r3, [r7, #10]
 800546e:	11db      	asrs	r3, r3, #7
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f063 030e 	orn	r3, r3, #14
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4907      	ldr	r1, [pc, #28]	; (80054a8 <I2C_MasterRequestRead+0x198>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f865 	bl	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	00010008 	.word	0x00010008
 80054a8:	00010002 	.word	0x00010002

080054ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054bc:	e025      	b.n	800550a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d021      	beq.n	800550a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fd ffe9 	bl	800349c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e023      	b.n	8005552 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10d      	bne.n	8005530 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	43da      	mvns	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	e00c      	b.n	800554a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d0b6      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005568:	e051      	b.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005578:	d123      	bne.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005588:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005592:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0204 	orr.w	r2, r3, #4
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e046      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d021      	beq.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fd ff67 	bl	800349c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d116      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e020      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10c      	bne.n	8005632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	43da      	mvns	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e00b      	b.n	800564a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	43da      	mvns	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d18d      	bne.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005664:	e02d      	b.n	80056c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8ce 	bl	8005808 <I2C_IsAcknowledgeFailed>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e02d      	b.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d021      	beq.n	80056c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fd ff0d 	bl	800349c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d116      	bne.n	80056c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e007      	b.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d1ca      	bne.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e6:	e02d      	b.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f88d 	bl	8005808 <I2C_IsAcknowledgeFailed>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e02d      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d021      	beq.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005700:	f7fd fecc 	bl	800349c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d116      	bne.n	8005744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e007      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b04      	cmp	r3, #4
 8005750:	d1ca      	bne.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005768:	e042      	b.n	80057f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d119      	bne.n	80057ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e029      	b.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ac:	f7fd fe76 	bl	800349c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d116      	bne.n	80057f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e007      	b.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d1b5      	bne.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581e:	d11b      	bne.n	8005858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6413      	str	r3, [r2, #64]	; 0x40
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_PWREx_EnableOverDrive+0x94>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005894:	f7fd fe02 	bl	800349c <HAL_GetTick>
 8005898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800589a:	e009      	b.n	80058b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800589c:	f7fd fdfe 	bl	800349c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058aa:	d901      	bls.n	80058b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e01f      	b.n	80058f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80058b0:	4b13      	ldr	r3, [pc, #76]	; (8005900 <HAL_PWREx_EnableOverDrive+0x98>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d1ee      	bne.n	800589c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c4:	f7fd fdea 	bl	800349c <HAL_GetTick>
 80058c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058ca:	e009      	b.n	80058e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058cc:	f7fd fde6 	bl	800349c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058da:	d901      	bls.n	80058e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e007      	b.n	80058f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_PWREx_EnableOverDrive+0x98>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ec:	d1ee      	bne.n	80058cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	420e0040 	.word	0x420e0040
 8005900:	40007000 	.word	0x40007000
 8005904:	420e0044 	.word	0x420e0044

08005908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e18c      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_RCC_ClockConfig+0x24>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d904      	bls.n	8005936 <HAL_RCC_ClockConfig+0x2e>
 800592c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005930:	4887      	ldr	r0, [pc, #540]	; (8005b50 <HAL_RCC_ClockConfig+0x248>)
 8005932:	f7fc fffa 	bl	800292a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d031      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d02e      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d02b      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d028      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d025      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b05      	cmp	r3, #5
 8005958:	d022      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b06      	cmp	r3, #6
 800595e:	d01f      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b07      	cmp	r3, #7
 8005964:	d01c      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d019      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b09      	cmp	r3, #9
 8005970:	d016      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b0a      	cmp	r3, #10
 8005976:	d013      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b0b      	cmp	r3, #11
 800597c:	d010      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d00d      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b0d      	cmp	r3, #13
 8005988:	d00a      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b0e      	cmp	r3, #14
 800598e:	d007      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d004      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x98>
 8005996:	f240 215d 	movw	r1, #605	; 0x25d
 800599a:	486d      	ldr	r0, [pc, #436]	; (8005b50 <HAL_RCC_ClockConfig+0x248>)
 800599c:	f7fc ffc5 	bl	800292a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b6c      	ldr	r3, [pc, #432]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d90c      	bls.n	80059c8 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b67      	ldr	r3, [pc, #412]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e136      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d049      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e0:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a5c      	ldr	r2, [pc, #368]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 80059e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059f8:	4b57      	ldr	r3, [pc, #348]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a56      	ldr	r2, [pc, #344]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 80059fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d024      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b80      	cmp	r3, #128	; 0x80
 8005a12:	d020      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b90      	cmp	r3, #144	; 0x90
 8005a1a:	d01c      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2ba0      	cmp	r3, #160	; 0xa0
 8005a22:	d018      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2bb0      	cmp	r3, #176	; 0xb0
 8005a2a:	d014      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2bc0      	cmp	r3, #192	; 0xc0
 8005a32:	d010      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	2bd0      	cmp	r3, #208	; 0xd0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2be0      	cmp	r3, #224	; 0xe0
 8005a42:	d008      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2bf0      	cmp	r3, #240	; 0xf0
 8005a4a:	d004      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x14e>
 8005a4c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005a50:	483f      	ldr	r0, [pc, #252]	; (8005b50 <HAL_RCC_ClockConfig+0x248>)
 8005a52:	f7fc ff6a 	bl	800292a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a56:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	493d      	ldr	r1, [pc, #244]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d059      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x196>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d00c      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x196>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d008      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x196>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d004      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x196>
 8005a94:	f240 2187 	movw	r1, #647	; 0x287
 8005a98:	482d      	ldr	r0, [pc, #180]	; (8005b50 <HAL_RCC_ClockConfig+0x248>)
 8005a9a:	f7fc ff46 	bl	800292a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b2c      	ldr	r3, [pc, #176]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d119      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0bf      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e0af      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0a7      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4919      	ldr	r1, [pc, #100]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fd fcd0 	bl	800349c <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fd fccc 	bl	800349c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e08f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_RCC_ClockConfig+0x250>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d212      	bcs.n	8005b5c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_RCC_ClockConfig+0x24c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d007      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e072      	b.n	8005c36 <HAL_RCC_ClockConfig+0x32e>
 8005b50:	08010178 	.word	0x08010178
 8005b54:	40023c00 	.word	0x40023c00
 8005b58:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d025      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d018      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x29a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b78:	d013      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x29a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b82:	d00e      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x29a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x29a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005b96:	d004      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x29a>
 8005b98:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005b9c:	4828      	ldr	r0, [pc, #160]	; (8005c40 <HAL_RCC_ClockConfig+0x338>)
 8005b9e:	f7fc fec4 	bl	800292a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba2:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <HAL_RCC_ClockConfig+0x33c>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4925      	ldr	r1, [pc, #148]	; (8005c44 <HAL_RCC_ClockConfig+0x33c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d026      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d018      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2f2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d013      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2f2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bda:	d00e      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2f2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005be4:	d009      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2f2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005bee:	d004      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2f2>
 8005bf0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005bf4:	4812      	ldr	r0, [pc, #72]	; (8005c40 <HAL_RCC_ClockConfig+0x338>)
 8005bf6:	f7fc fe98 	bl	800292a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_RCC_ClockConfig+0x33c>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	490e      	ldr	r1, [pc, #56]	; (8005c44 <HAL_RCC_ClockConfig+0x33c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c0e:	f000 f855 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_ClockConfig+0x33c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	490a      	ldr	r1, [pc, #40]	; (8005c48 <HAL_RCC_ClockConfig+0x340>)
 8005c20:	5ccb      	ldrb	r3, [r1, r3]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_RCC_ClockConfig+0x344>)
 8005c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_RCC_ClockConfig+0x348>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fd fbf0 	bl	8003414 <HAL_InitTick>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	08010178 	.word	0x08010178
 8005c44:	40023800 	.word	0x40023800
 8005c48:	08010330 	.word	0x08010330
 8005c4c:	20000128 	.word	0x20000128
 8005c50:	2000012c 	.word	0x2000012c

08005c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000128 	.word	0x20000128

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	08010340 	.word	0x08010340

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c98:	f7ff ffdc 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4903      	ldr	r1, [pc, #12]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	08010340 	.word	0x08010340

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cd8:	4bce      	ldr	r3, [pc, #824]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	f200 818d 	bhi.w	8006000 <HAL_RCC_GetSysClockFreq+0x344>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_RCC_GetSysClockFreq+0x30>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08006001 	.word	0x08006001
 8005cf4:	08006001 	.word	0x08006001
 8005cf8:	08006001 	.word	0x08006001
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08006001 	.word	0x08006001
 8005d04:	08006001 	.word	0x08006001
 8005d08:	08006001 	.word	0x08006001
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08006001 	.word	0x08006001
 8005d14:	08006001 	.word	0x08006001
 8005d18:	08006001 	.word	0x08006001
 8005d1c:	08005ea1 	.word	0x08005ea1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4bbd      	ldr	r3, [pc, #756]	; (8006018 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005d22:	61bb      	str	r3, [r7, #24]
       break;
 8005d24:	e16f      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d26:	4bbd      	ldr	r3, [pc, #756]	; (800601c <HAL_RCC_GetSysClockFreq+0x360>)
 8005d28:	61bb      	str	r3, [r7, #24]
      break;
 8005d2a:	e16c      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2c:	4bb9      	ldr	r3, [pc, #740]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d36:	4bb7      	ldr	r3, [pc, #732]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d053      	beq.n	8005dea <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d42:	4bb4      	ldr	r3, [pc, #720]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d52:	f04f 0100 	mov.w	r1, #0
 8005d56:	ea02 0400 	and.w	r4, r2, r0
 8005d5a:	603c      	str	r4, [r7, #0]
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	014b      	lsls	r3, r1, #5
 8005d72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d76:	0142      	lsls	r2, r0, #5
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	1ac0      	subs	r0, r0, r3
 8005d80:	462b      	mov	r3, r5
 8005d82:	eb61 0103 	sbc.w	r1, r1, r3
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d94:	0182      	lsls	r2, r0, #6
 8005d96:	1a12      	subs	r2, r2, r0
 8005d98:	eb63 0301 	sbc.w	r3, r3, r1
 8005d9c:	f04f 0000 	mov.w	r0, #0
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	00d9      	lsls	r1, r3, #3
 8005da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005daa:	00d0      	lsls	r0, r2, #3
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4621      	mov	r1, r4
 8005db2:	1852      	adds	r2, r2, r1
 8005db4:	4629      	mov	r1, r5
 8005db6:	eb43 0101 	adc.w	r1, r3, r1
 8005dba:	460b      	mov	r3, r1
 8005dbc:	f04f 0000 	mov.w	r0, #0
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	0259      	lsls	r1, r3, #9
 8005dc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005dca:	0250      	lsls	r0, r2, #9
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	f7fa fe00 	bl	80009e0 <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4613      	mov	r3, r2
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	e04c      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dea:	4b8a      	ldr	r3, [pc, #552]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	099b      	lsrs	r3, r3, #6
 8005df0:	461a      	mov	r2, r3
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	ea02 0a00 	and.w	sl, r2, r0
 8005e02:	ea03 0b01 	and.w	fp, r3, r1
 8005e06:	4650      	mov	r0, sl
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	014b      	lsls	r3, r1, #5
 8005e14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e18:	0142      	lsls	r2, r0, #5
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	ebb0 000a 	subs.w	r0, r0, sl
 8005e22:	eb61 010b 	sbc.w	r1, r1, fp
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	018b      	lsls	r3, r1, #6
 8005e30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e34:	0182      	lsls	r2, r0, #6
 8005e36:	1a12      	subs	r2, r2, r0
 8005e38:	eb63 0301 	sbc.w	r3, r3, r1
 8005e3c:	f04f 0000 	mov.w	r0, #0
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	00d9      	lsls	r1, r3, #3
 8005e46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e4a:	00d0      	lsls	r0, r2, #3
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	eb12 020a 	adds.w	r2, r2, sl
 8005e54:	eb43 030b 	adc.w	r3, r3, fp
 8005e58:	f04f 0000 	mov.w	r0, #0
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	0299      	lsls	r1, r3, #10
 8005e62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e66:	0290      	lsls	r0, r2, #10
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	f7fa fdb2 	bl	80009e0 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4613      	mov	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e84:	4b63      	ldr	r3, [pc, #396]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	61bb      	str	r3, [r7, #24]
      break;
 8005e9e:	e0b2      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ea0:	4b5c      	ldr	r3, [pc, #368]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eaa:	4b5a      	ldr	r3, [pc, #360]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d04d      	beq.n	8005f52 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb6:	4b57      	ldr	r3, [pc, #348]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	099b      	lsrs	r3, r3, #6
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	ea02 0800 	and.w	r8, r2, r0
 8005ece:	ea03 0901 	and.w	r9, r3, r1
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	014b      	lsls	r3, r1, #5
 8005ee0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ee4:	0142      	lsls	r2, r0, #5
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	ebb0 0008 	subs.w	r0, r0, r8
 8005eee:	eb61 0109 	sbc.w	r1, r1, r9
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	018b      	lsls	r3, r1, #6
 8005efc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f00:	0182      	lsls	r2, r0, #6
 8005f02:	1a12      	subs	r2, r2, r0
 8005f04:	eb63 0301 	sbc.w	r3, r3, r1
 8005f08:	f04f 0000 	mov.w	r0, #0
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	00d9      	lsls	r1, r3, #3
 8005f12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f16:	00d0      	lsls	r0, r2, #3
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	eb12 0208 	adds.w	r2, r2, r8
 8005f20:	eb43 0309 	adc.w	r3, r3, r9
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	0259      	lsls	r1, r3, #9
 8005f2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f32:	0250      	lsls	r0, r2, #9
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	f7fa fd4c 	bl	80009e0 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e04a      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f52:	4b30      	ldr	r3, [pc, #192]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	099b      	lsrs	r3, r3, #6
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f62:	f04f 0100 	mov.w	r1, #0
 8005f66:	ea02 0400 	and.w	r4, r2, r0
 8005f6a:	ea03 0501 	and.w	r5, r3, r1
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	014b      	lsls	r3, r1, #5
 8005f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f80:	0142      	lsls	r2, r0, #5
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	1b00      	subs	r0, r0, r4
 8005f88:	eb61 0105 	sbc.w	r1, r1, r5
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	018b      	lsls	r3, r1, #6
 8005f96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f9a:	0182      	lsls	r2, r0, #6
 8005f9c:	1a12      	subs	r2, r2, r0
 8005f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	00d9      	lsls	r1, r3, #3
 8005fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fb0:	00d0      	lsls	r0, r2, #3
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	1912      	adds	r2, r2, r4
 8005fb8:	eb45 0303 	adc.w	r3, r5, r3
 8005fbc:	f04f 0000 	mov.w	r0, #0
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	0299      	lsls	r1, r3, #10
 8005fc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fca:	0290      	lsls	r0, r2, #10
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	f7fa fd00 	bl	80009e0 <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	0f1b      	lsrs	r3, r3, #28
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	61bb      	str	r3, [r7, #24]
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006002:	61bb      	str	r3, [r7, #24]
      break;
 8006004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006006:	69bb      	ldr	r3, [r7, #24]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200

08006020 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e34b      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d904      	bls.n	8006044 <HAL_RCC_OscConfig+0x24>
 800603a:	f640 5112 	movw	r1, #3346	; 0xd12
 800603e:	48a5      	ldr	r0, [pc, #660]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 8006040:	f7fc fc73 	bl	800292a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8096 	beq.w	800617e <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_RCC_OscConfig+0x58>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006062:	d009      	beq.n	8006078 <HAL_RCC_OscConfig+0x58>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	d004      	beq.n	8006078 <HAL_RCC_OscConfig+0x58>
 800606e:	f640 5117 	movw	r1, #3351	; 0xd17
 8006072:	4898      	ldr	r0, [pc, #608]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 8006074:	f7fc fc59 	bl	800292a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006078:	4b97      	ldr	r3, [pc, #604]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b04      	cmp	r3, #4
 8006082:	d019      	beq.n	80060b8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006084:	4b94      	ldr	r3, [pc, #592]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800608c:	2b08      	cmp	r3, #8
 800608e:	d106      	bne.n	800609e <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006090:	4b91      	ldr	r3, [pc, #580]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609c:	d00c      	beq.n	80060b8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800609e:	4b8e      	ldr	r3, [pc, #568]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	d112      	bne.n	80060d0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060aa:	4b8b      	ldr	r3, [pc, #556]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b6:	d10b      	bne.n	80060d0 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	4b87      	ldr	r3, [pc, #540]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05b      	beq.n	800617c <HAL_RCC_OscConfig+0x15c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d157      	bne.n	800617c <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e2fc      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCC_OscConfig+0xc8>
 80060da:	4b7f      	ldr	r3, [pc, #508]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a7e      	ldr	r2, [pc, #504]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e01d      	b.n	8006124 <HAL_RCC_OscConfig+0x104>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0xec>
 80060f2:	4b79      	ldr	r3, [pc, #484]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a78      	ldr	r2, [pc, #480]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80060f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	4b76      	ldr	r3, [pc, #472]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a75      	ldr	r2, [pc, #468]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	e00b      	b.n	8006124 <HAL_RCC_OscConfig+0x104>
 800610c:	4b72      	ldr	r3, [pc, #456]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a71      	ldr	r2, [pc, #452]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b6f      	ldr	r3, [pc, #444]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a6e      	ldr	r2, [pc, #440]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800611e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d013      	beq.n	8006154 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd f9b6 	bl	800349c <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006134:	f7fd f9b2 	bl	800349c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e2c1      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006146:	4b64      	ldr	r3, [pc, #400]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x114>
 8006152:	e014      	b.n	800617e <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7fd f9a2 	bl	800349c <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800615c:	f7fd f99e 	bl	800349c <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b64      	cmp	r3, #100	; 0x64
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e2ad      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800616e:	4b5a      	ldr	r3, [pc, #360]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x13c>
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8086 	beq.w	8006298 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCC_OscConfig+0x186>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d004      	beq.n	80061a6 <HAL_RCC_OscConfig+0x186>
 800619c:	f640 514f 	movw	r1, #3407	; 0xd4f
 80061a0:	484c      	ldr	r0, [pc, #304]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 80061a2:	f7fc fbc2 	bl	800292a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b1f      	cmp	r3, #31
 80061ac:	d904      	bls.n	80061b8 <HAL_RCC_OscConfig+0x198>
 80061ae:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 80061b2:	4848      	ldr	r0, [pc, #288]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 80061b4:	f7fc fbb9 	bl	800292a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061b8:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d017      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061c4:	4b44      	ldr	r3, [pc, #272]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d105      	bne.n	80061dc <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061dc:	4b3e      	ldr	r3, [pc, #248]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d11c      	bne.n	8006222 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061e8:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f4:	4b38      	ldr	r3, [pc, #224]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_OscConfig+0x1ec>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e25e      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620c:	4b32      	ldr	r3, [pc, #200]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	492f      	ldr	r1, [pc, #188]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006220:	e03a      	b.n	8006298 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d020      	beq.n	800626c <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800622a:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_RCC_OscConfig+0x2bc>)
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fd f934 	bl	800349c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006238:	f7fd f930 	bl	800349c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e23f      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624a:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	491c      	ldr	r1, [pc, #112]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
 800626a:	e015      	b.n	8006298 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <HAL_RCC_OscConfig+0x2bc>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006272:	f7fd f913 	bl	800349c <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800627a:	f7fd f90f 	bl	800349c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e21e      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d045      	beq.n	8006330 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_RCC_OscConfig+0x29e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d004      	beq.n	80062be <HAL_RCC_OscConfig+0x29e>
 80062b4:	f640 5196 	movw	r1, #3478	; 0xd96
 80062b8:	4806      	ldr	r0, [pc, #24]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 80062ba:	f7fc fb36 	bl	800292a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01e      	beq.n	8006304 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_RCC_OscConfig+0x2c0>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7fd f8e6 	bl	800349c <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d2:	e010      	b.n	80062f6 <HAL_RCC_OscConfig+0x2d6>
 80062d4:	080101b0 	.word	0x080101b0
 80062d8:	40023800 	.word	0x40023800
 80062dc:	42470000 	.word	0x42470000
 80062e0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fd f8da 	bl	800349c <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e1e9      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	4ba4      	ldr	r3, [pc, #656]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x2c4>
 8006302:	e015      	b.n	8006330 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006304:	4ba1      	ldr	r3, [pc, #644]	; (800658c <HAL_RCC_OscConfig+0x56c>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fd f8c7 	bl	800349c <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006312:	f7fd f8c3 	bl	800349c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e1d2      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	4b98      	ldr	r3, [pc, #608]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f0      	bne.n	8006312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a8 	beq.w	800648e <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <HAL_RCC_OscConfig+0x344>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d008      	beq.n	8006364 <HAL_RCC_OscConfig+0x344>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b05      	cmp	r3, #5
 8006358:	d004      	beq.n	8006364 <HAL_RCC_OscConfig+0x344>
 800635a:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800635e:	488c      	ldr	r0, [pc, #560]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 8006360:	f7fc fae3 	bl	800292a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006364:	4b88      	ldr	r3, [pc, #544]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10f      	bne.n	8006390 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	4b84      	ldr	r3, [pc, #528]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	4a83      	ldr	r2, [pc, #524]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 800637a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637e:	6413      	str	r3, [r2, #64]	; 0x40
 8006380:	4b81      	ldr	r3, [pc, #516]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006390:	4b80      	ldr	r3, [pc, #512]	; (8006594 <HAL_RCC_OscConfig+0x574>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d118      	bne.n	80063ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800639c:	4b7d      	ldr	r3, [pc, #500]	; (8006594 <HAL_RCC_OscConfig+0x574>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a7c      	ldr	r2, [pc, #496]	; (8006594 <HAL_RCC_OscConfig+0x574>)
 80063a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a8:	f7fd f878 	bl	800349c <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063b0:	f7fd f874 	bl	800349c <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e183      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c2:	4b74      	ldr	r3, [pc, #464]	; (8006594 <HAL_RCC_OscConfig+0x574>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d106      	bne.n	80063e4 <HAL_RCC_OscConfig+0x3c4>
 80063d6:	4b6c      	ldr	r3, [pc, #432]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a6b      	ldr	r2, [pc, #428]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
 80063e2:	e01c      	b.n	800641e <HAL_RCC_OscConfig+0x3fe>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b05      	cmp	r3, #5
 80063ea:	d10c      	bne.n	8006406 <HAL_RCC_OscConfig+0x3e6>
 80063ec:	4b66      	ldr	r3, [pc, #408]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	4a65      	ldr	r2, [pc, #404]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063f2:	f043 0304 	orr.w	r3, r3, #4
 80063f6:	6713      	str	r3, [r2, #112]	; 0x70
 80063f8:	4b63      	ldr	r3, [pc, #396]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	4a62      	ldr	r2, [pc, #392]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	6713      	str	r3, [r2, #112]	; 0x70
 8006404:	e00b      	b.n	800641e <HAL_RCC_OscConfig+0x3fe>
 8006406:	4b60      	ldr	r3, [pc, #384]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a5f      	ldr	r2, [pc, #380]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	6713      	str	r3, [r2, #112]	; 0x70
 8006412:	4b5d      	ldr	r3, [pc, #372]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	4a5c      	ldr	r2, [pc, #368]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006418:	f023 0304 	bic.w	r3, r3, #4
 800641c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d015      	beq.n	8006452 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006426:	f7fd f839 	bl	800349c <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642c:	e00a      	b.n	8006444 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800642e:	f7fd f835 	bl	800349c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f241 3288 	movw	r2, #5000	; 0x1388
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e142      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006444:	4b50      	ldr	r3, [pc, #320]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ee      	beq.n	800642e <HAL_RCC_OscConfig+0x40e>
 8006450:	e014      	b.n	800647c <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd f823 	bl	800349c <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fd f81f 	bl	800349c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	; 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e12c      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006470:	4b45      	ldr	r3, [pc, #276]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1ee      	bne.n	800645a <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006482:	4b41      	ldr	r3, [pc, #260]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4a40      	ldr	r2, [pc, #256]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 8006488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x490>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d008      	beq.n	80064b0 <HAL_RCC_OscConfig+0x490>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d004      	beq.n	80064b0 <HAL_RCC_OscConfig+0x490>
 80064a6:	f640 6105 	movw	r1, #3589	; 0xe05
 80064aa:	4839      	ldr	r0, [pc, #228]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 80064ac:	f7fc fa3d 	bl	800292a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8107 	beq.w	80066c8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064ba:	4b33      	ldr	r3, [pc, #204]	; (8006588 <HAL_RCC_OscConfig+0x568>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	f000 80c0 	beq.w	8006648 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	f040 80a4 	bne.w	800661a <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_RCC_OscConfig+0x4ce>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e2:	d004      	beq.n	80064ee <HAL_RCC_OscConfig+0x4ce>
 80064e4:	f640 610e 	movw	r1, #3598	; 0xe0e
 80064e8:	4829      	ldr	r0, [pc, #164]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 80064ea:	f7fc fa1e 	bl	800292a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	2b3f      	cmp	r3, #63	; 0x3f
 80064f4:	d904      	bls.n	8006500 <HAL_RCC_OscConfig+0x4e0>
 80064f6:	f640 610f 	movw	r1, #3599	; 0xe0f
 80064fa:	4825      	ldr	r0, [pc, #148]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 80064fc:	f7fc fa15 	bl	800292a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b31      	cmp	r3, #49	; 0x31
 8006506:	d904      	bls.n	8006512 <HAL_RCC_OscConfig+0x4f2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006510:	d904      	bls.n	800651c <HAL_RCC_OscConfig+0x4fc>
 8006512:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006516:	481e      	ldr	r0, [pc, #120]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 8006518:	f7fc fa07 	bl	800292a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	2b02      	cmp	r3, #2
 8006522:	d010      	beq.n	8006546 <HAL_RCC_OscConfig+0x526>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	2b04      	cmp	r3, #4
 800652a:	d00c      	beq.n	8006546 <HAL_RCC_OscConfig+0x526>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	2b06      	cmp	r3, #6
 8006532:	d008      	beq.n	8006546 <HAL_RCC_OscConfig+0x526>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	2b08      	cmp	r3, #8
 800653a:	d004      	beq.n	8006546 <HAL_RCC_OscConfig+0x526>
 800653c:	f640 6111 	movw	r1, #3601	; 0xe11
 8006540:	4813      	ldr	r0, [pc, #76]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 8006542:	f7fc f9f2 	bl	800292a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d903      	bls.n	8006556 <HAL_RCC_OscConfig+0x536>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d904      	bls.n	8006560 <HAL_RCC_OscConfig+0x540>
 8006556:	f640 6112 	movw	r1, #3602	; 0xe12
 800655a:	480d      	ldr	r0, [pc, #52]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 800655c:	f7fc f9e5 	bl	800292a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	2b01      	cmp	r3, #1
 8006566:	d903      	bls.n	8006570 <HAL_RCC_OscConfig+0x550>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	2b07      	cmp	r3, #7
 800656e:	d904      	bls.n	800657a <HAL_RCC_OscConfig+0x55a>
 8006570:	f640 6113 	movw	r1, #3603	; 0xe13
 8006574:	4806      	ldr	r0, [pc, #24]	; (8006590 <HAL_RCC_OscConfig+0x570>)
 8006576:	f7fc f9d8 	bl	800292a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <HAL_RCC_OscConfig+0x578>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fc ff8c 	bl	800349c <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006586:	e012      	b.n	80065ae <HAL_RCC_OscConfig+0x58e>
 8006588:	40023800 	.word	0x40023800
 800658c:	42470e80 	.word	0x42470e80
 8006590:	080101b0 	.word	0x080101b0
 8006594:	40007000 	.word	0x40007000
 8006598:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fc ff7e 	bl	800349c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e08d      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b49      	ldr	r3, [pc, #292]	; (80066d4 <HAL_RCC_OscConfig+0x6b4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	071b      	lsls	r3, r3, #28
 80065e6:	493b      	ldr	r1, [pc, #236]	; (80066d4 <HAL_RCC_OscConfig+0x6b4>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ec:	4b3a      	ldr	r3, [pc, #232]	; (80066d8 <HAL_RCC_OscConfig+0x6b8>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f2:	f7fc ff53 	bl	800349c <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065fa:	f7fc ff4f 	bl	800349c <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e05e      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <HAL_RCC_OscConfig+0x6b4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x5da>
 8006618:	e056      	b.n	80066c8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	4b2f      	ldr	r3, [pc, #188]	; (80066d8 <HAL_RCC_OscConfig+0x6b8>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fc ff3c 	bl	800349c <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006628:	f7fc ff38 	bl	800349c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e047      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <HAL_RCC_OscConfig+0x6b4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x608>
 8006646:	e03f      	b.n	80066c8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e03a      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <HAL_RCC_OscConfig+0x6b4>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d030      	beq.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d129      	bne.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d122      	bne.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800668c:	4293      	cmp	r3, r2
 800668e:	d119      	bne.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d10f      	bne.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d107      	bne.n	80066c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40023800 	.word	0x40023800
 80066d8:	42470060 	.word	0x42470060

080066dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e184      	b.n	80069f8 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a72      	ldr	r2, [pc, #456]	; (80068bc <HAL_SPI_Init+0x1e0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_SPI_Init+0x44>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a70      	ldr	r2, [pc, #448]	; (80068c0 <HAL_SPI_Init+0x1e4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00e      	beq.n	8006720 <HAL_SPI_Init+0x44>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a6f      	ldr	r2, [pc, #444]	; (80068c4 <HAL_SPI_Init+0x1e8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_SPI_Init+0x44>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a6d      	ldr	r2, [pc, #436]	; (80068c8 <HAL_SPI_Init+0x1ec>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <HAL_SPI_Init+0x44>
 8006716:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800671a:	486c      	ldr	r0, [pc, #432]	; (80068cc <HAL_SPI_Init+0x1f0>)
 800671c:	f7fc f905 	bl	800292a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <HAL_SPI_Init+0x60>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006730:	d004      	beq.n	800673c <HAL_SPI_Init+0x60>
 8006732:	f240 1143 	movw	r1, #323	; 0x143
 8006736:	4865      	ldr	r0, [pc, #404]	; (80068cc <HAL_SPI_Init+0x1f0>)
 8006738:	f7fc f8f7 	bl	800292a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00e      	beq.n	8006762 <HAL_SPI_Init+0x86>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d009      	beq.n	8006762 <HAL_SPI_Init+0x86>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d004      	beq.n	8006762 <HAL_SPI_Init+0x86>
 8006758:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800675c:	485b      	ldr	r0, [pc, #364]	; (80068cc <HAL_SPI_Init+0x1f0>)
 800675e:	f7fc f8e4 	bl	800292a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676a:	d008      	beq.n	800677e <HAL_SPI_Init+0xa2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_SPI_Init+0xa2>
 8006774:	f240 1145 	movw	r1, #325	; 0x145
 8006778:	4854      	ldr	r0, [pc, #336]	; (80068cc <HAL_SPI_Init+0x1f0>)
 800677a:	f7fc f8d6 	bl	800292a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006786:	d00d      	beq.n	80067a4 <HAL_SPI_Init+0xc8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <HAL_SPI_Init+0xc8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006798:	d004      	beq.n	80067a4 <HAL_SPI_Init+0xc8>
 800679a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800679e:	484b      	ldr	r0, [pc, #300]	; (80068cc <HAL_SPI_Init+0x1f0>)
 80067a0:	f7fc f8c3 	bl	800292a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d020      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d01c      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d018      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	2b18      	cmp	r3, #24
 80067c2:	d014      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d010      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	2b28      	cmp	r3, #40	; 0x28
 80067d2:	d00c      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d008      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b38      	cmp	r3, #56	; 0x38
 80067e2:	d004      	beq.n	80067ee <HAL_SPI_Init+0x112>
 80067e4:	f240 1147 	movw	r1, #327	; 0x147
 80067e8:	4838      	ldr	r0, [pc, #224]	; (80068cc <HAL_SPI_Init+0x1f0>)
 80067ea:	f7fc f89e 	bl	800292a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_SPI_Init+0x12c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d004      	beq.n	8006808 <HAL_SPI_Init+0x12c>
 80067fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006802:	4832      	ldr	r0, [pc, #200]	; (80068cc <HAL_SPI_Init+0x1f0>)
 8006804:	f7fc f891 	bl	800292a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_SPI_Init+0x146>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b10      	cmp	r3, #16
 8006816:	d004      	beq.n	8006822 <HAL_SPI_Init+0x146>
 8006818:	f240 1149 	movw	r1, #329	; 0x149
 800681c:	482b      	ldr	r0, [pc, #172]	; (80068cc <HAL_SPI_Init+0x1f0>)
 800681e:	f7fc f884 	bl	800292a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d152      	bne.n	80068d0 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <HAL_SPI_Init+0x168>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d004      	beq.n	8006844 <HAL_SPI_Init+0x168>
 800683a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800683e:	4823      	ldr	r0, [pc, #140]	; (80068cc <HAL_SPI_Init+0x1f0>)
 8006840:	f7fc f873 	bl	800292a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_SPI_Init+0x182>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d004      	beq.n	800685e <HAL_SPI_Init+0x182>
 8006854:	f240 114d 	movw	r1, #333	; 0x14d
 8006858:	481c      	ldr	r0, [pc, #112]	; (80068cc <HAL_SPI_Init+0x1f0>)
 800685a:	f7fc f866 	bl	800292a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006866:	d125      	bne.n	80068b4 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05a      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d056      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	2b10      	cmp	r3, #16
 800687e:	d052      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b18      	cmp	r3, #24
 8006886:	d04e      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2b20      	cmp	r3, #32
 800688e:	d04a      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b28      	cmp	r3, #40	; 0x28
 8006896:	d046      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	2b30      	cmp	r3, #48	; 0x30
 800689e:	d042      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	2b38      	cmp	r3, #56	; 0x38
 80068a6:	d03e      	beq.n	8006926 <HAL_SPI_Init+0x24a>
 80068a8:	f240 1151 	movw	r1, #337	; 0x151
 80068ac:	4807      	ldr	r0, [pc, #28]	; (80068cc <HAL_SPI_Init+0x1f0>)
 80068ae:	f7fc f83c 	bl	800292a <assert_failed>
 80068b2:	e038      	b.n	8006926 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	61da      	str	r2, [r3, #28]
 80068ba:	e034      	b.n	8006926 <HAL_SPI_Init+0x24a>
 80068bc:	40013000 	.word	0x40013000
 80068c0:	40003800 	.word	0x40003800
 80068c4:	40003c00 	.word	0x40003c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	080101ec 	.word	0x080101ec
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <HAL_SPI_Init+0x23e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d01c      	beq.n	800691a <HAL_SPI_Init+0x23e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d018      	beq.n	800691a <HAL_SPI_Init+0x23e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	2b18      	cmp	r3, #24
 80068ee:	d014      	beq.n	800691a <HAL_SPI_Init+0x23e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d010      	beq.n	800691a <HAL_SPI_Init+0x23e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	2b28      	cmp	r3, #40	; 0x28
 80068fe:	d00c      	beq.n	800691a <HAL_SPI_Init+0x23e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d008      	beq.n	800691a <HAL_SPI_Init+0x23e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	2b38      	cmp	r3, #56	; 0x38
 800690e:	d004      	beq.n	800691a <HAL_SPI_Init+0x23e>
 8006910:	f240 115b 	movw	r1, #347	; 0x15b
 8006914:	483a      	ldr	r0, [pc, #232]	; (8006a00 <HAL_SPI_Init+0x324>)
 8006916:	f7fc f808 	bl	800292a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fc f919 	bl	8002b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	ea42 0103 	orr.w	r1, r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	f003 0104 	and.w	r1, r3, #4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f003 0210 	and.w	r2, r3, #16
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	080101ec 	.word	0x080101ec

08006a04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <HAL_SPI_Transmit+0x30>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a28:	d004      	beq.n	8006a34 <HAL_SPI_Transmit+0x30>
 8006a2a:	f240 310a 	movw	r1, #778	; 0x30a
 8006a2e:	4893      	ldr	r0, [pc, #588]	; (8006c7c <HAL_SPI_Transmit+0x278>)
 8006a30:	f7fb ff7b 	bl	800292a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_SPI_Transmit+0x3e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e128      	b.n	8006c94 <HAL_SPI_Transmit+0x290>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a4a:	f7fc fd27 	bl	800349c <HAL_GetTick>
 8006a4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d002      	beq.n	8006a66 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
 8006a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a64:	e10d      	b.n	8006c82 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_Transmit+0x6e>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a76:	e104      	b.n	8006c82 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abe:	d10f      	bne.n	8006ae0 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ace:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ade:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d007      	beq.n	8006afe <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b06:	d14b      	bne.n	8006ba0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Transmit+0x112>
 8006b10:	8afb      	ldrh	r3, [r7, #22]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d13e      	bne.n	8006b94 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	881a      	ldrh	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b3a:	e02b      	b.n	8006b94 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d112      	bne.n	8006b70 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b6e:	e011      	b.n	8006b94 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b70:	f7fc fc94 	bl	800349c <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d803      	bhi.n	8006b88 <HAL_SPI_Transmit+0x184>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d102      	bne.n	8006b8e <HAL_SPI_Transmit+0x18a>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b92:	e076      	b.n	8006c82 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1ce      	bne.n	8006b3c <HAL_SPI_Transmit+0x138>
 8006b9e:	e04c      	b.n	8006c3a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_SPI_Transmit+0x1aa>
 8006ba8:	8afb      	ldrh	r3, [r7, #22]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d140      	bne.n	8006c30 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bd4:	e02c      	b.n	8006c30 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d113      	bne.n	8006c0c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c0a:	e011      	b.n	8006c30 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c0c:	f7fc fc46 	bl	800349c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d803      	bhi.n	8006c24 <HAL_SPI_Transmit+0x220>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d102      	bne.n	8006c2a <HAL_SPI_Transmit+0x226>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c2e:	e028      	b.n	8006c82 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1cd      	bne.n	8006bd6 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fbda 	bl	80073f8 <SPI_EndRxTxTransaction>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e002      	b.n	8006c82 <HAL_SPI_Transmit+0x27e>
 8006c7c:	080101ec 	.word	0x080101ec
  }

error:
 8006c80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cb8:	d112      	bne.n	8006ce0 <HAL_SPI_Receive+0x44>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f8f2 	bl	8006ec0 <HAL_SPI_TransmitReceive>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	e0ea      	b.n	8006eb6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_SPI_Receive+0x52>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e0e3      	b.n	8006eb6 <HAL_SPI_Receive+0x21a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf6:	f7fc fbd1 	bl	800349c <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d0c:	e0ca      	b.n	8006ea4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_SPI_Receive+0x7e>
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d102      	bne.n	8006d20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d1e:	e0c1      	b.n	8006ea4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2204      	movs	r2, #4
 8006d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d66:	d10f      	bne.n	8006d88 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d007      	beq.n	8006da6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d162      	bne.n	8006e74 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dae:	e02e      	b.n	8006e0e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d115      	bne.n	8006dea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f103 020c 	add.w	r2, r3, #12
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	7812      	ldrb	r2, [r2, #0]
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006de8:	e011      	b.n	8006e0e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dea:	f7fc fb57 	bl	800349c <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d803      	bhi.n	8006e02 <HAL_SPI_Receive+0x166>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d102      	bne.n	8006e08 <HAL_SPI_Receive+0x16c>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e0c:	e04a      	b.n	8006ea4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1cb      	bne.n	8006db0 <HAL_SPI_Receive+0x114>
 8006e18:	e031      	b.n	8006e7e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d113      	bne.n	8006e50 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	b292      	uxth	r2, r2
 8006e34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e4e:	e011      	b.n	8006e74 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e50:	f7fc fb24 	bl	800349c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d803      	bhi.n	8006e68 <HAL_SPI_Receive+0x1cc>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d102      	bne.n	8006e6e <HAL_SPI_Receive+0x1d2>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e72:	e017      	b.n	8006ea4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1cd      	bne.n	8006e1a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fa52 	bl	800732c <SPI_EndRxTransaction>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	e000      	b.n	8006ea4 <HAL_SPI_Receive+0x208>
  }

error :
 8006ea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	; 0x30
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x2a>
 8006ee0:	f240 417e 	movw	r1, #1150	; 0x47e
 8006ee4:	4884      	ldr	r0, [pc, #528]	; (80070f8 <HAL_SPI_TransmitReceive+0x238>)
 8006ee6:	f7fb fd20 	bl	800292a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x38>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e18d      	b.n	8007214 <HAL_SPI_TransmitReceive+0x354>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f00:	f7fc facc 	bl	800349c <HAL_GetTick>
 8006f04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d00f      	beq.n	8006f42 <HAL_SPI_TransmitReceive+0x82>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f28:	d107      	bne.n	8006f3a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <HAL_SPI_TransmitReceive+0x7a>
 8006f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d003      	beq.n	8006f42 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f40:	e15e      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_SPI_TransmitReceive+0x94>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_SPI_TransmitReceive+0x94>
 8006f4e:	887b      	ldrh	r3, [r7, #2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f5a:	e151      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d003      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2205      	movs	r2, #5
 8006f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	887a      	ldrh	r2, [r7, #2]
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	887a      	ldrh	r2, [r7, #2]
 8006f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	887a      	ldrh	r2, [r7, #2]
 8006f92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	887a      	ldrh	r2, [r7, #2]
 8006f98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d007      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fcc:	d178      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x11c>
 8006fd6:	8b7b      	ldrh	r3, [r7, #26]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d166      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007000:	e053      	b.n	80070aa <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b02      	cmp	r3, #2
 800700e:	d11b      	bne.n	8007048 <HAL_SPI_TransmitReceive+0x188>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d016      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x188>
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d113      	bne.n	8007048 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b01      	cmp	r3, #1
 8007054:	d119      	bne.n	800708a <HAL_SPI_TransmitReceive+0x1ca>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d014      	beq.n	800708a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	b292      	uxth	r2, r2
 800706c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007086:	2301      	movs	r3, #1
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800708a:	f7fc fa07 	bl	800349c <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007096:	429a      	cmp	r2, r3
 8007098:	d807      	bhi.n	80070aa <HAL_SPI_TransmitReceive+0x1ea>
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d003      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070a8:	e0aa      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1a6      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x142>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1a1      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x142>
 80070be:	e07f      	b.n	80071c0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x20e>
 80070c8:	8b7b      	ldrh	r3, [r7, #26]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d16e      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	7812      	ldrb	r2, [r2, #0]
 80070da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070f4:	e05a      	b.n	80071ac <HAL_SPI_TransmitReceive+0x2ec>
 80070f6:	bf00      	nop
 80070f8:	080101ec 	.word	0x080101ec
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d11c      	bne.n	8007144 <HAL_SPI_TransmitReceive+0x284>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x284>
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d114      	bne.n	8007144 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b01      	cmp	r3, #1
 8007150:	d119      	bne.n	8007186 <HAL_SPI_TransmitReceive+0x2c6>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d014      	beq.n	8007186 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007182:	2301      	movs	r3, #1
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007186:	f7fc f989 	bl	800349c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007192:	429a      	cmp	r2, r3
 8007194:	d803      	bhi.n	800719e <HAL_SPI_TransmitReceive+0x2de>
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d102      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x2e4>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071aa:	e029      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1a2      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x23c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d19d      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f917 	bl	80073f8 <SPI_EndRxTxTransaction>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071dc:	e010      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	e000      	b.n	8007200 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80071fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007214:	4618      	mov	r0, r3
 8007216:	3730      	adds	r7, #48	; 0x30
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800722c:	f7fc f936 	bl	800349c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800723c:	f7fc f92e 	bl	800349c <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	015b      	lsls	r3, r3, #5
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007252:	e054      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d050      	beq.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725c:	f7fc f91e 	bl	800349c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	d902      	bls.n	8007272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d13d      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728a:	d111      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d004      	beq.n	80072a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729e:	d107      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b8:	d10f      	bne.n	80072da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e017      	b.n	800731e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	429a      	cmp	r2, r3
 800731a:	d19b      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000128 	.word	0x20000128

0800732c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007340:	d111      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734a:	d004      	beq.n	8007356 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007354:	d107      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736e:	d12a      	bne.n	80073c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d012      	beq.n	80073a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff ff49 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02d      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e026      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2101      	movs	r1, #1
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff ff36 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01a      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e013      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2101      	movs	r1, #1
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff23 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e000      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007404:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <SPI_EndRxTxTransaction+0x7c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <SPI_EndRxTxTransaction+0x80>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	0d5b      	lsrs	r3, r3, #21
 8007410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007422:	d112      	bne.n	800744a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fef4 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e00f      	b.n	800746a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3b01      	subs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d0f2      	beq.n	800744a <SPI_EndRxTxTransaction+0x52>
 8007464:	e000      	b.n	8007468 <SPI_EndRxTxTransaction+0x70>
        break;
 8007466:	bf00      	nop
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000128 	.word	0x20000128
 8007478:	165e9f81 	.word	0x165e9f81

0800747c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0c5      	b.n	800761a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a64      	ldr	r2, [pc, #400]	; (8007624 <HAL_TIM_Base_Init+0x1a8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d045      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a0:	d040      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a60      	ldr	r2, [pc, #384]	; (8007628 <HAL_TIM_Base_Init+0x1ac>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d03b      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5e      	ldr	r2, [pc, #376]	; (800762c <HAL_TIM_Base_Init+0x1b0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d036      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a5d      	ldr	r2, [pc, #372]	; (8007630 <HAL_TIM_Base_Init+0x1b4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d031      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a5b      	ldr	r2, [pc, #364]	; (8007634 <HAL_TIM_Base_Init+0x1b8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d02c      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a5a      	ldr	r2, [pc, #360]	; (8007638 <HAL_TIM_Base_Init+0x1bc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d027      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a58      	ldr	r2, [pc, #352]	; (800763c <HAL_TIM_Base_Init+0x1c0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d022      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a57      	ldr	r2, [pc, #348]	; (8007640 <HAL_TIM_Base_Init+0x1c4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d01d      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a55      	ldr	r2, [pc, #340]	; (8007644 <HAL_TIM_Base_Init+0x1c8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d018      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a54      	ldr	r2, [pc, #336]	; (8007648 <HAL_TIM_Base_Init+0x1cc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a52      	ldr	r2, [pc, #328]	; (800764c <HAL_TIM_Base_Init+0x1d0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00e      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a51      	ldr	r2, [pc, #324]	; (8007650 <HAL_TIM_Base_Init+0x1d4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d009      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a4f      	ldr	r2, [pc, #316]	; (8007654 <HAL_TIM_Base_Init+0x1d8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d004      	beq.n	8007524 <HAL_TIM_Base_Init+0xa8>
 800751a:	f240 1113 	movw	r1, #275	; 0x113
 800751e:	484e      	ldr	r0, [pc, #312]	; (8007658 <HAL_TIM_Base_Init+0x1dc>)
 8007520:	f7fb fa03 	bl	800292a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d014      	beq.n	8007556 <HAL_TIM_Base_Init+0xda>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b10      	cmp	r3, #16
 8007532:	d010      	beq.n	8007556 <HAL_TIM_Base_Init+0xda>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b20      	cmp	r3, #32
 800753a:	d00c      	beq.n	8007556 <HAL_TIM_Base_Init+0xda>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d008      	beq.n	8007556 <HAL_TIM_Base_Init+0xda>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d004      	beq.n	8007556 <HAL_TIM_Base_Init+0xda>
 800754c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007550:	4841      	ldr	r0, [pc, #260]	; (8007658 <HAL_TIM_Base_Init+0x1dc>)
 8007552:	f7fb f9ea 	bl	800292a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00e      	beq.n	800757c <HAL_TIM_Base_Init+0x100>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007566:	d009      	beq.n	800757c <HAL_TIM_Base_Init+0x100>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007570:	d004      	beq.n	800757c <HAL_TIM_Base_Init+0x100>
 8007572:	f240 1115 	movw	r1, #277	; 0x115
 8007576:	4838      	ldr	r0, [pc, #224]	; (8007658 <HAL_TIM_Base_Init+0x1dc>)
 8007578:	f7fb f9d7 	bl	800292a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_TIM_Base_Init+0x11a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d004      	beq.n	8007596 <HAL_TIM_Base_Init+0x11a>
 800758c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007590:	4831      	ldr	r0, [pc, #196]	; (8007658 <HAL_TIM_Base_Init+0x1dc>)
 8007592:	f7fb f9ca 	bl	800292a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fb fc36 	bl	8002e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f001 fbb8 	bl	8008d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40010000 	.word	0x40010000
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800
 8007630:	40000c00 	.word	0x40000c00
 8007634:	40001000 	.word	0x40001000
 8007638:	40001400 	.word	0x40001400
 800763c:	40010400 	.word	0x40010400
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800
 800764c:	40001800 	.word	0x40001800
 8007650:	40001c00 	.word	0x40001c00
 8007654:	40002000 	.word	0x40002000
 8007658:	08010224 	.word	0x08010224

0800765c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a51      	ldr	r2, [pc, #324]	; (80077b0 <HAL_TIM_Base_Start_IT+0x154>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d045      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007676:	d040      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a4d      	ldr	r2, [pc, #308]	; (80077b4 <HAL_TIM_Base_Start_IT+0x158>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d03b      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4c      	ldr	r2, [pc, #304]	; (80077b8 <HAL_TIM_Base_Start_IT+0x15c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d036      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a4a      	ldr	r2, [pc, #296]	; (80077bc <HAL_TIM_Base_Start_IT+0x160>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d031      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a49      	ldr	r2, [pc, #292]	; (80077c0 <HAL_TIM_Base_Start_IT+0x164>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d02c      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a47      	ldr	r2, [pc, #284]	; (80077c4 <HAL_TIM_Base_Start_IT+0x168>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d027      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a46      	ldr	r2, [pc, #280]	; (80077c8 <HAL_TIM_Base_Start_IT+0x16c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d022      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a44      	ldr	r2, [pc, #272]	; (80077cc <HAL_TIM_Base_Start_IT+0x170>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01d      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a43      	ldr	r2, [pc, #268]	; (80077d0 <HAL_TIM_Base_Start_IT+0x174>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d018      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a41      	ldr	r2, [pc, #260]	; (80077d4 <HAL_TIM_Base_Start_IT+0x178>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a40      	ldr	r2, [pc, #256]	; (80077d8 <HAL_TIM_Base_Start_IT+0x17c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a3e      	ldr	r2, [pc, #248]	; (80077dc <HAL_TIM_Base_Start_IT+0x180>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3d      	ldr	r2, [pc, #244]	; (80077e0 <HAL_TIM_Base_Start_IT+0x184>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x9e>
 80076f0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80076f4:	483b      	ldr	r0, [pc, #236]	; (80077e4 <HAL_TIM_Base_Start_IT+0x188>)
 80076f6:	f7fb f918 	bl	800292a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	d001      	beq.n	800770a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e04e      	b.n	80077a8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <HAL_TIM_Base_Start_IT+0x154>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d022      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007734:	d01d      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <HAL_TIM_Base_Start_IT+0x158>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <HAL_TIM_Base_Start_IT+0x15c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_TIM_Base_Start_IT+0x160>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <HAL_TIM_Base_Start_IT+0x16c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1a      	ldr	r2, [pc, #104]	; (80077cc <HAL_TIM_Base_Start_IT+0x170>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIM_Base_Start_IT+0x116>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1a      	ldr	r2, [pc, #104]	; (80077d8 <HAL_TIM_Base_Start_IT+0x17c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d111      	bne.n	8007796 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b06      	cmp	r3, #6
 8007782:	d010      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	e007      	b.n	80077a6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800
 80077bc:	40000c00 	.word	0x40000c00
 80077c0:	40001000 	.word	0x40001000
 80077c4:	40001400 	.word	0x40001400
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800
 80077d8:	40001800 	.word	0x40001800
 80077dc:	40001c00 	.word	0x40001c00
 80077e0:	40002000 	.word	0x40002000
 80077e4:	08010224 	.word	0x08010224

080077e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e0c5      	b.n	8007986 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a64      	ldr	r2, [pc, #400]	; (8007990 <HAL_TIM_PWM_Init+0x1a8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d045      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d040      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a60      	ldr	r2, [pc, #384]	; (8007994 <HAL_TIM_PWM_Init+0x1ac>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d03b      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a5e      	ldr	r2, [pc, #376]	; (8007998 <HAL_TIM_PWM_Init+0x1b0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d036      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a5d      	ldr	r2, [pc, #372]	; (800799c <HAL_TIM_PWM_Init+0x1b4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d031      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a5b      	ldr	r2, [pc, #364]	; (80079a0 <HAL_TIM_PWM_Init+0x1b8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d02c      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a5a      	ldr	r2, [pc, #360]	; (80079a4 <HAL_TIM_PWM_Init+0x1bc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d027      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a58      	ldr	r2, [pc, #352]	; (80079a8 <HAL_TIM_PWM_Init+0x1c0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d022      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a57      	ldr	r2, [pc, #348]	; (80079ac <HAL_TIM_PWM_Init+0x1c4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d01d      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a55      	ldr	r2, [pc, #340]	; (80079b0 <HAL_TIM_PWM_Init+0x1c8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d018      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a54      	ldr	r2, [pc, #336]	; (80079b4 <HAL_TIM_PWM_Init+0x1cc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d013      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a52      	ldr	r2, [pc, #328]	; (80079b8 <HAL_TIM_PWM_Init+0x1d0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00e      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a51      	ldr	r2, [pc, #324]	; (80079bc <HAL_TIM_PWM_Init+0x1d4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d009      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a4f      	ldr	r2, [pc, #316]	; (80079c0 <HAL_TIM_PWM_Init+0x1d8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d004      	beq.n	8007890 <HAL_TIM_PWM_Init+0xa8>
 8007886:	f240 5129 	movw	r1, #1321	; 0x529
 800788a:	484e      	ldr	r0, [pc, #312]	; (80079c4 <HAL_TIM_PWM_Init+0x1dc>)
 800788c:	f7fb f84d 	bl	800292a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d014      	beq.n	80078c2 <HAL_TIM_PWM_Init+0xda>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b10      	cmp	r3, #16
 800789e:	d010      	beq.n	80078c2 <HAL_TIM_PWM_Init+0xda>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d00c      	beq.n	80078c2 <HAL_TIM_PWM_Init+0xda>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d008      	beq.n	80078c2 <HAL_TIM_PWM_Init+0xda>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b60      	cmp	r3, #96	; 0x60
 80078b6:	d004      	beq.n	80078c2 <HAL_TIM_PWM_Init+0xda>
 80078b8:	f240 512a 	movw	r1, #1322	; 0x52a
 80078bc:	4841      	ldr	r0, [pc, #260]	; (80079c4 <HAL_TIM_PWM_Init+0x1dc>)
 80078be:	f7fb f834 	bl	800292a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00e      	beq.n	80078e8 <HAL_TIM_PWM_Init+0x100>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d2:	d009      	beq.n	80078e8 <HAL_TIM_PWM_Init+0x100>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078dc:	d004      	beq.n	80078e8 <HAL_TIM_PWM_Init+0x100>
 80078de:	f240 512b 	movw	r1, #1323	; 0x52b
 80078e2:	4838      	ldr	r0, [pc, #224]	; (80079c4 <HAL_TIM_PWM_Init+0x1dc>)
 80078e4:	f7fb f821 	bl	800292a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_TIM_PWM_Init+0x11a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d004      	beq.n	8007902 <HAL_TIM_PWM_Init+0x11a>
 80078f8:	f240 512c 	movw	r1, #1324	; 0x52c
 80078fc:	4831      	ldr	r0, [pc, #196]	; (80079c4 <HAL_TIM_PWM_Init+0x1dc>)
 80078fe:	f7fb f814 	bl	800292a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fb fae2 	bl	8002ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f001 fa02 	bl	8008d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40001000 	.word	0x40001000
 80079a4:	40001400 	.word	0x40001400
 80079a8:	40010400 	.word	0x40010400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800
 80079b8:	40001800 	.word	0x40001800
 80079bc:	40001c00 	.word	0x40001c00
 80079c0:	40002000 	.word	0x40002000
 80079c4:	08010224 	.word	0x08010224

080079c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a84      	ldr	r2, [pc, #528]	; (8007be8 <HAL_TIM_PWM_Start+0x220>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10f      	bne.n	80079fc <HAL_TIM_PWM_Start+0x34>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 809f 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	f000 809b 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	f000 8097 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b0c      	cmp	r3, #12
 80079f8:	f000 8093 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a04:	d10e      	bne.n	8007a24 <HAL_TIM_PWM_Start+0x5c>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 808a 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	f000 8086 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	f000 8082 	beq.w	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b0c      	cmp	r3, #12
 8007a22:	d07e      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a70      	ldr	r2, [pc, #448]	; (8007bec <HAL_TIM_PWM_Start+0x224>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d10b      	bne.n	8007a46 <HAL_TIM_PWM_Start+0x7e>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d076      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d073      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d070      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b0c      	cmp	r3, #12
 8007a44:	d06d      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a69      	ldr	r2, [pc, #420]	; (8007bf0 <HAL_TIM_PWM_Start+0x228>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10b      	bne.n	8007a68 <HAL_TIM_PWM_Start+0xa0>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d065      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d062      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d05f      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d05c      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a61      	ldr	r2, [pc, #388]	; (8007bf4 <HAL_TIM_PWM_Start+0x22c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10b      	bne.n	8007a8a <HAL_TIM_PWM_Start+0xc2>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d054      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d051      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d04e      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b0c      	cmp	r3, #12
 8007a88:	d04b      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a5a      	ldr	r2, [pc, #360]	; (8007bf8 <HAL_TIM_PWM_Start+0x230>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10b      	bne.n	8007aac <HAL_TIM_PWM_Start+0xe4>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d043      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d040      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d03d      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d03a      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a52      	ldr	r2, [pc, #328]	; (8007bfc <HAL_TIM_PWM_Start+0x234>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d105      	bne.n	8007ac2 <HAL_TIM_PWM_Start+0xfa>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d032      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d02f      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a4e      	ldr	r2, [pc, #312]	; (8007c00 <HAL_TIM_PWM_Start+0x238>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d102      	bne.n	8007ad2 <HAL_TIM_PWM_Start+0x10a>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d027      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a4b      	ldr	r2, [pc, #300]	; (8007c04 <HAL_TIM_PWM_Start+0x23c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d102      	bne.n	8007ae2 <HAL_TIM_PWM_Start+0x11a>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d01f      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a48      	ldr	r2, [pc, #288]	; (8007c08 <HAL_TIM_PWM_Start+0x240>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d105      	bne.n	8007af8 <HAL_TIM_PWM_Start+0x130>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d017      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d014      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a43      	ldr	r2, [pc, #268]	; (8007c0c <HAL_TIM_PWM_Start+0x244>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d102      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x140>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00c      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a40      	ldr	r2, [pc, #256]	; (8007c10 <HAL_TIM_PWM_Start+0x248>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d102      	bne.n	8007b18 <HAL_TIM_PWM_Start+0x150>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <HAL_TIM_PWM_Start+0x15a>
 8007b18:	f240 51af 	movw	r1, #1455	; 0x5af
 8007b1c:	483d      	ldr	r0, [pc, #244]	; (8007c14 <HAL_TIM_PWM_Start+0x24c>)
 8007b1e:	f7fa ff04 	bl	800292a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <HAL_TIM_PWM_Start+0x174>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e022      	b.n	8007b82 <HAL_TIM_PWM_Start+0x1ba>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d109      	bne.n	8007b56 <HAL_TIM_PWM_Start+0x18e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e015      	b.n	8007b82 <HAL_TIM_PWM_Start+0x1ba>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d109      	bne.n	8007b70 <HAL_TIM_PWM_Start+0x1a8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e008      	b.n	8007b82 <HAL_TIM_PWM_Start+0x1ba>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e094      	b.n	8007cb4 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <HAL_TIM_PWM_Start+0x1d2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b98:	e013      	b.n	8007bc2 <HAL_TIM_PWM_Start+0x1fa>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d104      	bne.n	8007baa <HAL_TIM_PWM_Start+0x1e2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba8:	e00b      	b.n	8007bc2 <HAL_TIM_PWM_Start+0x1fa>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_PWM_Start+0x1f2>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb8:	e003      	b.n	8007bc2 <HAL_TIM_PWM_Start+0x1fa>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 fc28 	bl	8009420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a04      	ldr	r2, [pc, #16]	; (8007be8 <HAL_TIM_PWM_Start+0x220>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <HAL_TIM_PWM_Start+0x21c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <HAL_TIM_PWM_Start+0x230>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d119      	bne.n	8007c18 <HAL_TIM_PWM_Start+0x250>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e018      	b.n	8007c1a <HAL_TIM_PWM_Start+0x252>
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	40001c00 	.word	0x40001c00
 8007c10:	40002000 	.word	0x40002000
 8007c14:	08010224 	.word	0x08010224
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a22      	ldr	r2, [pc, #136]	; (8007cbc <HAL_TIM_PWM_Start+0x2f4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d022      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c40:	d01d      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <HAL_TIM_PWM_Start+0x2f8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d018      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <HAL_TIM_PWM_Start+0x2fc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <HAL_TIM_PWM_Start+0x300>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a19      	ldr	r2, [pc, #100]	; (8007ccc <HAL_TIM_PWM_Start+0x304>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <HAL_TIM_PWM_Start+0x308>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x2b6>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a16      	ldr	r2, [pc, #88]	; (8007cd4 <HAL_TIM_PWM_Start+0x30c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d111      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b06      	cmp	r3, #6
 8007c8e:	d010      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0201 	orr.w	r2, r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca0:	e007      	b.n	8007cb2 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0201 	orr.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800
 8007cc8:	40000c00 	.word	0x40000c00
 8007ccc:	40010400 	.word	0x40010400
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40001800 	.word	0x40001800

08007cd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e198      	b.n	800801e <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7d      	ldr	r2, [pc, #500]	; (8007ee8 <HAL_TIM_Encoder_Init+0x210>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d027      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfe:	d022      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a79      	ldr	r2, [pc, #484]	; (8007eec <HAL_TIM_Encoder_Init+0x214>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01d      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a78      	ldr	r2, [pc, #480]	; (8007ef0 <HAL_TIM_Encoder_Init+0x218>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d018      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a76      	ldr	r2, [pc, #472]	; (8007ef4 <HAL_TIM_Encoder_Init+0x21c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d013      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a75      	ldr	r2, [pc, #468]	; (8007ef8 <HAL_TIM_Encoder_Init+0x220>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00e      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a73      	ldr	r2, [pc, #460]	; (8007efc <HAL_TIM_Encoder_Init+0x224>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a72      	ldr	r2, [pc, #456]	; (8007f00 <HAL_TIM_Encoder_Init+0x228>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_TIM_Encoder_Init+0x6e>
 8007d3c:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007d40:	4870      	ldr	r0, [pc, #448]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007d42:	f7fa fdf2 	bl	800292a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d014      	beq.n	8007d78 <HAL_TIM_Encoder_Init+0xa0>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d010      	beq.n	8007d78 <HAL_TIM_Encoder_Init+0xa0>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d00c      	beq.n	8007d78 <HAL_TIM_Encoder_Init+0xa0>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d008      	beq.n	8007d78 <HAL_TIM_Encoder_Init+0xa0>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b60      	cmp	r3, #96	; 0x60
 8007d6c:	d004      	beq.n	8007d78 <HAL_TIM_Encoder_Init+0xa0>
 8007d6e:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007d72:	4864      	ldr	r0, [pc, #400]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007d74:	f7fa fdd9 	bl	800292a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIM_Encoder_Init+0xc6>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d88:	d009      	beq.n	8007d9e <HAL_TIM_Encoder_Init+0xc6>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d92:	d004      	beq.n	8007d9e <HAL_TIM_Encoder_Init+0xc6>
 8007d94:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007d98:	485a      	ldr	r0, [pc, #360]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007d9a:	f7fa fdc6 	bl	800292a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_TIM_Encoder_Init+0xe0>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d004      	beq.n	8007db8 <HAL_TIM_Encoder_Init+0xe0>
 8007dae:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007db2:	4854      	ldr	r0, [pc, #336]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007db4:	f7fa fdb9 	bl	800292a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d00c      	beq.n	8007dda <HAL_TIM_Encoder_Init+0x102>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d008      	beq.n	8007dda <HAL_TIM_Encoder_Init+0x102>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d004      	beq.n	8007dda <HAL_TIM_Encoder_Init+0x102>
 8007dd0:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007dd4:	484b      	ldr	r0, [pc, #300]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007dd6:	f7fa fda8 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00c      	beq.n	8007dfc <HAL_TIM_Encoder_Init+0x124>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d008      	beq.n	8007dfc <HAL_TIM_Encoder_Init+0x124>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d004      	beq.n	8007dfc <HAL_TIM_Encoder_Init+0x124>
 8007df2:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8007df6:	4843      	ldr	r0, [pc, #268]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007df8:	f7fa fd97 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d00c      	beq.n	8007e1e <HAL_TIM_Encoder_Init+0x146>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d008      	beq.n	8007e1e <HAL_TIM_Encoder_Init+0x146>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d004      	beq.n	8007e1e <HAL_TIM_Encoder_Init+0x146>
 8007e14:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8007e18:	483a      	ldr	r0, [pc, #232]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007e1a:	f7fa fd86 	bl	800292a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_TIM_Encoder_Init+0x160>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d004      	beq.n	8007e38 <HAL_TIM_Encoder_Init+0x160>
 8007e2e:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007e32:	4834      	ldr	r0, [pc, #208]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007e34:	f7fa fd79 	bl	800292a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <HAL_TIM_Encoder_Init+0x17a>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d004      	beq.n	8007e52 <HAL_TIM_Encoder_Init+0x17a>
 8007e48:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007e4c:	482d      	ldr	r0, [pc, #180]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007e4e:	f7fa fd6c 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <HAL_TIM_Encoder_Init+0x1a4>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d00c      	beq.n	8007e7c <HAL_TIM_Encoder_Init+0x1a4>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	d008      	beq.n	8007e7c <HAL_TIM_Encoder_Init+0x1a4>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b0c      	cmp	r3, #12
 8007e70:	d004      	beq.n	8007e7c <HAL_TIM_Encoder_Init+0x1a4>
 8007e72:	f640 31da 	movw	r1, #3034	; 0xbda
 8007e76:	4823      	ldr	r0, [pc, #140]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007e78:	f7fa fd57 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d010      	beq.n	8007ea6 <HAL_TIM_Encoder_Init+0x1ce>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d00c      	beq.n	8007ea6 <HAL_TIM_Encoder_Init+0x1ce>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d008      	beq.n	8007ea6 <HAL_TIM_Encoder_Init+0x1ce>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d004      	beq.n	8007ea6 <HAL_TIM_Encoder_Init+0x1ce>
 8007e9c:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007ea0:	4818      	ldr	r0, [pc, #96]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007ea2:	f7fa fd42 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b0f      	cmp	r3, #15
 8007eac:	d904      	bls.n	8007eb8 <HAL_TIM_Encoder_Init+0x1e0>
 8007eae:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007eb2:	4814      	ldr	r0, [pc, #80]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007eb4:	f7fa fd39 	bl	800292a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	2b0f      	cmp	r3, #15
 8007ebe:	d904      	bls.n	8007eca <HAL_TIM_Encoder_Init+0x1f2>
 8007ec0:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007ec4:	480f      	ldr	r0, [pc, #60]	; (8007f04 <HAL_TIM_Encoder_Init+0x22c>)
 8007ec6:	f7fa fd30 	bl	800292a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d118      	bne.n	8007f08 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fb f826 	bl	8002f30 <HAL_TIM_Encoder_MspInit>
 8007ee4:	e010      	b.n	8007f08 <HAL_TIM_Encoder_Init+0x230>
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40000400 	.word	0x40000400
 8007ef0:	40000800 	.word	0x40000800
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	40010400 	.word	0x40010400
 8007efc:	40014000 	.word	0x40014000
 8007f00:	40001800 	.word	0x40001800
 8007f04:	08010224 	.word	0x08010224
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f000 ff02 	bl	8008d38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5c:	f023 0303 	bic.w	r3, r3, #3
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007f7a:	f023 030c 	bic.w	r3, r3, #12
 8007f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	4313      	orrs	r3, r2
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	011a      	lsls	r2, r3, #4
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	031b      	lsls	r3, r3, #12
 8007faa:	4313      	orrs	r3, r2
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007fb8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007fc0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop

08008028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0202 	mvn.w	r2, #2
 8008054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fe46 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fe38 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fe49 	bl	8008d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b04      	cmp	r3, #4
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b04      	cmp	r3, #4
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0204 	mvn.w	r2, #4
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fe1c 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fe0e 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fe1f 	bl	8008d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d122      	bne.n	800812c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d11b      	bne.n	800812c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0208 	mvn.w	r2, #8
 80080fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fdf2 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 8008118:	e005      	b.n	8008126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fde4 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fdf5 	bl	8008d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b10      	cmp	r3, #16
 8008138:	d122      	bne.n	8008180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b10      	cmp	r3, #16
 8008146:	d11b      	bne.n	8008180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0210 	mvn.w	r2, #16
 8008150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2208      	movs	r2, #8
 8008156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fdc8 	bl	8008cfc <HAL_TIM_IC_CaptureCallback>
 800816c:	e005      	b.n	800817a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fdba 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fdcb 	bl	8008d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10e      	bne.n	80081ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d107      	bne.n	80081ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0201 	mvn.w	r2, #1
 80081a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7f8 ff80 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d10e      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d107      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fb5c 	bl	8009890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d10e      	bne.n	8008204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d107      	bne.n	8008204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fd90 	bl	8008d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b20      	cmp	r3, #32
 8008210:	d10e      	bne.n	8008230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b20      	cmp	r3, #32
 800821e:	d107      	bne.n	8008230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0220 	mvn.w	r2, #32
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 fb26 	bl	800987c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <HAL_TIM_PWM_ConfigChannel+0x38>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d00d      	beq.n	8008270 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d00a      	beq.n	8008270 <HAL_TIM_PWM_ConfigChannel+0x38>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b0c      	cmp	r3, #12
 800825e:	d007      	beq.n	8008270 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b3c      	cmp	r3, #60	; 0x3c
 8008264:	d004      	beq.n	8008270 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008266:	f241 0177 	movw	r1, #4215	; 0x1077
 800826a:	4883      	ldr	r0, [pc, #524]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800826c:	f7fa fb5d 	bl	800292a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b60      	cmp	r3, #96	; 0x60
 8008276:	d008      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x52>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b70      	cmp	r3, #112	; 0x70
 800827e:	d004      	beq.n	800828a <HAL_TIM_PWM_ConfigChannel+0x52>
 8008280:	f241 0178 	movw	r1, #4216	; 0x1078
 8008284:	487c      	ldr	r0, [pc, #496]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008286:	f7fa fb50 	bl	800292a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d008      	beq.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800829a:	f241 0179 	movw	r1, #4217	; 0x1079
 800829e:	4876      	ldr	r0, [pc, #472]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80082a0:	f7fa fb43 	bl	800292a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <HAL_TIM_PWM_ConfigChannel+0x86>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d004      	beq.n	80082be <HAL_TIM_PWM_ConfigChannel+0x86>
 80082b4:	f241 017a 	movw	r1, #4218	; 0x107a
 80082b8:	486f      	ldr	r0, [pc, #444]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80082ba:	f7fa fb36 	bl	800292a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x94>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e17c      	b.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x38e>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b0c      	cmp	r3, #12
 80082d8:	f200 816d 	bhi.w	80085b6 <HAL_TIM_PWM_ConfigChannel+0x37e>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	08008319 	.word	0x08008319
 80082e8:	080085b7 	.word	0x080085b7
 80082ec:	080085b7 	.word	0x080085b7
 80082f0:	080085b7 	.word	0x080085b7
 80082f4:	080083db 	.word	0x080083db
 80082f8:	080085b7 	.word	0x080085b7
 80082fc:	080085b7 	.word	0x080085b7
 8008300:	080085b7 	.word	0x080085b7
 8008304:	080084a9 	.word	0x080084a9
 8008308:	080085b7 	.word	0x080085b7
 800830c:	080085b7 	.word	0x080085b7
 8008310:	080085b7 	.word	0x080085b7
 8008314:	0800852f 	.word	0x0800852f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a57      	ldr	r2, [pc, #348]	; (800847c <HAL_TIM_PWM_ConfigChannel+0x244>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d03b      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832a:	d036      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a53      	ldr	r2, [pc, #332]	; (8008480 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d031      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a52      	ldr	r2, [pc, #328]	; (8008484 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d02c      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a50      	ldr	r2, [pc, #320]	; (8008488 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d027      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a4f      	ldr	r2, [pc, #316]	; (800848c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d022      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a4d      	ldr	r2, [pc, #308]	; (8008490 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d01d      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a4c      	ldr	r2, [pc, #304]	; (8008494 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d018      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a4a      	ldr	r2, [pc, #296]	; (8008498 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d013      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a49      	ldr	r2, [pc, #292]	; (800849c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00e      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a47      	ldr	r2, [pc, #284]	; (80084a0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d009      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a46      	ldr	r2, [pc, #280]	; (80084a4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d004      	beq.n	800839a <HAL_TIM_PWM_ConfigChannel+0x162>
 8008390:	f241 0184 	movw	r1, #4228	; 0x1084
 8008394:	4838      	ldr	r0, [pc, #224]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008396:	f7fa fac8 	bl	800292a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fd69 	bl	8008e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0208 	orr.w	r2, r2, #8
 80083b4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0204 	bic.w	r2, r2, #4
 80083c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6999      	ldr	r1, [r3, #24]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	619a      	str	r2, [r3, #24]
      break;
 80083d8:	e0f0      	b.n	80085bc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a27      	ldr	r2, [pc, #156]	; (800847c <HAL_TIM_PWM_ConfigChannel+0x244>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d027      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ec:	d022      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a23      	ldr	r2, [pc, #140]	; (8008480 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d01d      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a21      	ldr	r2, [pc, #132]	; (8008484 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d018      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a20      	ldr	r2, [pc, #128]	; (8008488 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d013      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a1e      	ldr	r2, [pc, #120]	; (800848c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00e      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d009      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1d      	ldr	r2, [pc, #116]	; (800849c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d004      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800842a:	f241 0195 	movw	r1, #4245	; 0x1095
 800842e:	4812      	ldr	r0, [pc, #72]	; (8008478 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008430:	f7fa fa7b 	bl	800292a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fdb6 	bl	8008fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800844e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800845e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6999      	ldr	r1, [r3, #24]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	021a      	lsls	r2, r3, #8
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	619a      	str	r2, [r3, #24]
      break;
 8008474:	e0a2      	b.n	80085bc <HAL_TIM_PWM_ConfigChannel+0x384>
 8008476:	bf00      	nop
 8008478:	08010224 	.word	0x08010224
 800847c:	40010000 	.word	0x40010000
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40010400 	.word	0x40010400
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800
 800849c:	40001800 	.word	0x40001800
 80084a0:	40001c00 	.word	0x40001c00
 80084a4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a48      	ldr	r2, [pc, #288]	; (80085d0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d01d      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ba:	d018      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a44      	ldr	r2, [pc, #272]	; (80085d4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a43      	ldr	r2, [pc, #268]	; (80085d8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00e      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a41      	ldr	r2, [pc, #260]	; (80085dc <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d009      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a40      	ldr	r2, [pc, #256]	; (80085e0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d004      	beq.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80084e4:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80084e8:	483e      	ldr	r0, [pc, #248]	; (80085e4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80084ea:	f7fa fa1e 	bl	800292a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fdf7 	bl	80090e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0208 	orr.w	r2, r2, #8
 8008508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0204 	bic.w	r2, r2, #4
 8008518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69d9      	ldr	r1, [r3, #28]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	61da      	str	r2, [r3, #28]
      break;
 800852c:	e046      	b.n	80085bc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d01d      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d018      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a23      	ldr	r2, [pc, #140]	; (80085d4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d013      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00e      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a20      	ldr	r2, [pc, #128]	; (80085dc <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d009      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d004      	beq.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800856a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800856e:	481d      	ldr	r0, [pc, #116]	; (80085e4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008570:	f7fa f9db 	bl	800292a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fe52 	bl	8009224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800858e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69da      	ldr	r2, [r3, #28]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800859e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69d9      	ldr	r1, [r3, #28]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	021a      	lsls	r2, r3, #8
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	61da      	str	r2, [r3, #28]
      break;
 80085b4:	e002      	b.n	80085bc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40010400 	.word	0x40010400
 80085e4:	08010224 	.word	0x08010224

080085e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_ConfigClockSource+0x1c>
 8008600:	2302      	movs	r3, #2
 8008602:	e35c      	b.n	8008cbe <HAL_TIM_ConfigClockSource+0x6d6>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861c:	d029      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008626:	d024      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d020      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b10      	cmp	r3, #16
 8008636:	d01c      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b20      	cmp	r3, #32
 800863e:	d018      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b30      	cmp	r3, #48	; 0x30
 8008646:	d014      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b40      	cmp	r3, #64	; 0x40
 800864e:	d010      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b50      	cmp	r3, #80	; 0x50
 8008656:	d00c      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b60      	cmp	r3, #96	; 0x60
 800865e:	d008      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b70      	cmp	r3, #112	; 0x70
 8008666:	d004      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x8a>
 8008668:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800866c:	4893      	ldr	r0, [pc, #588]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 800866e:	f7fa f95c 	bl	800292a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008680:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008688:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	f000 812b 	beq.w	80088f4 <HAL_TIM_ConfigClockSource+0x30c>
 800869e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a2:	f200 82ff 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086aa:	d02e      	beq.n	800870a <HAL_TIM_ConfigClockSource+0x122>
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	f200 82f8 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086b4:	2b70      	cmp	r3, #112	; 0x70
 80086b6:	f000 8082 	beq.w	80087be <HAL_TIM_ConfigClockSource+0x1d6>
 80086ba:	2b70      	cmp	r3, #112	; 0x70
 80086bc:	f200 82f2 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086c0:	2b60      	cmp	r3, #96	; 0x60
 80086c2:	f000 81e8 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x4ae>
 80086c6:	2b60      	cmp	r3, #96	; 0x60
 80086c8:	f200 82ec 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	f000 8182 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x3ee>
 80086d2:	2b50      	cmp	r3, #80	; 0x50
 80086d4:	f200 82e6 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	f000 824d 	beq.w	8008b78 <HAL_TIM_ConfigClockSource+0x590>
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	f200 82e0 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	f000 82a7 	beq.w	8008c38 <HAL_TIM_ConfigClockSource+0x650>
 80086ea:	2b30      	cmp	r3, #48	; 0x30
 80086ec:	f200 82da 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	f000 82a1 	beq.w	8008c38 <HAL_TIM_ConfigClockSource+0x650>
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f200 82d4 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 829b 	beq.w	8008c38 <HAL_TIM_ConfigClockSource+0x650>
 8008702:	2b10      	cmp	r3, #16
 8008704:	f000 8298 	beq.w	8008c38 <HAL_TIM_ConfigClockSource+0x650>
 8008708:	e2cc      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a6c      	ldr	r2, [pc, #432]	; (80088c0 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	f000 82ca 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871e:	f000 82c4 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a67      	ldr	r2, [pc, #412]	; (80088c4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008728:	4293      	cmp	r3, r2
 800872a:	f000 82be 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a65      	ldr	r2, [pc, #404]	; (80088c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	f000 82b8 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a63      	ldr	r2, [pc, #396]	; (80088cc <HAL_TIM_ConfigClockSource+0x2e4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	f000 82b2 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	f000 82ac 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a5f      	ldr	r2, [pc, #380]	; (80088d4 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008758:	4293      	cmp	r3, r2
 800875a:	f000 82a6 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a5d      	ldr	r2, [pc, #372]	; (80088d8 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	f000 82a0 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a5b      	ldr	r2, [pc, #364]	; (80088dc <HAL_TIM_ConfigClockSource+0x2f4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	f000 829a 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a59      	ldr	r2, [pc, #356]	; (80088e0 <HAL_TIM_ConfigClockSource+0x2f8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	f000 8294 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a57      	ldr	r2, [pc, #348]	; (80088e4 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	f000 828e 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a55      	ldr	r2, [pc, #340]	; (80088e8 <HAL_TIM_ConfigClockSource+0x300>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f000 8288 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a53      	ldr	r2, [pc, #332]	; (80088ec <HAL_TIM_ConfigClockSource+0x304>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	f000 8282 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a51      	ldr	r2, [pc, #324]	; (80088f0 <HAL_TIM_ConfigClockSource+0x308>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f000 827c 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
 80087b2:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80087b6:	4841      	ldr	r0, [pc, #260]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 80087b8:	f7fa f8b7 	bl	800292a <assert_failed>
      break;
 80087bc:	e275      	b.n	8008caa <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a3f      	ldr	r2, [pc, #252]	; (80088c0 <HAL_TIM_ConfigClockSource+0x2d8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d027      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d022      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a3b      	ldr	r2, [pc, #236]	; (80088c4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d01d      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a39      	ldr	r2, [pc, #228]	; (80088c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a38      	ldr	r2, [pc, #224]	; (80088cc <HAL_TIM_ConfigClockSource+0x2e4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a38      	ldr	r2, [pc, #224]	; (80088d8 <HAL_TIM_ConfigClockSource+0x2f0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a37      	ldr	r2, [pc, #220]	; (80088dc <HAL_TIM_ConfigClockSource+0x2f4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a37      	ldr	r2, [pc, #220]	; (80088e8 <HAL_TIM_ConfigClockSource+0x300>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x230>
 800880e:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008812:	482a      	ldr	r0, [pc, #168]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008814:	f7fa f889 	bl	800292a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <HAL_TIM_ConfigClockSource+0x260>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008828:	d00e      	beq.n	8008848 <HAL_TIM_ConfigClockSource+0x260>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008832:	d009      	beq.n	8008848 <HAL_TIM_ConfigClockSource+0x260>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800883c:	d004      	beq.n	8008848 <HAL_TIM_ConfigClockSource+0x260>
 800883e:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008842:	481e      	ldr	r0, [pc, #120]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008844:	f7fa f871 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008850:	d014      	beq.n	800887c <HAL_TIM_ConfigClockSource+0x294>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_TIM_ConfigClockSource+0x294>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00c      	beq.n	800887c <HAL_TIM_ConfigClockSource+0x294>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d008      	beq.n	800887c <HAL_TIM_ConfigClockSource+0x294>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b0a      	cmp	r3, #10
 8008870:	d004      	beq.n	800887c <HAL_TIM_ConfigClockSource+0x294>
 8008872:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008876:	4811      	ldr	r0, [pc, #68]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008878:	f7fa f857 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d904      	bls.n	800888e <HAL_TIM_ConfigClockSource+0x2a6>
 8008884:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <HAL_TIM_ConfigClockSource+0x2d4>)
 800888a:	f7fa f84e 	bl	800292a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f000 fd9f 	bl	80093e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	609a      	str	r2, [r3, #8]
      break;
 80088ba:	e1f7      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
 80088bc:	08010224 	.word	0x08010224
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40001000 	.word	0x40001000
 80088d4:	40001400 	.word	0x40001400
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800
 80088e8:	40001800 	.word	0x40001800
 80088ec:	40001c00 	.word	0x40001c00
 80088f0:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a97      	ldr	r2, [pc, #604]	; (8008b58 <HAL_TIM_ConfigClockSource+0x570>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d01d      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008906:	d018      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a93      	ldr	r2, [pc, #588]	; (8008b5c <HAL_TIM_ConfigClockSource+0x574>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d013      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a92      	ldr	r2, [pc, #584]	; (8008b60 <HAL_TIM_ConfigClockSource+0x578>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00e      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a90      	ldr	r2, [pc, #576]	; (8008b64 <HAL_TIM_ConfigClockSource+0x57c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d009      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a8f      	ldr	r2, [pc, #572]	; (8008b68 <HAL_TIM_ConfigClockSource+0x580>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d004      	beq.n	800893a <HAL_TIM_ConfigClockSource+0x352>
 8008930:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008934:	488d      	ldr	r0, [pc, #564]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008936:	f7f9 fff8 	bl	800292a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d013      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x382>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894a:	d00e      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x382>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008954:	d009      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x382>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800895e:	d004      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x382>
 8008960:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008964:	4881      	ldr	r0, [pc, #516]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008966:	f7f9 ffe0 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008972:	d014      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x3b6>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d010      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x3b6>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00c      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x3b6>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d008      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x3b6>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b0a      	cmp	r3, #10
 8008992:	d004      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x3b6>
 8008994:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8008998:	4874      	ldr	r0, [pc, #464]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 800899a:	f7f9 ffc6 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	2b0f      	cmp	r3, #15
 80089a4:	d904      	bls.n	80089b0 <HAL_TIM_ConfigClockSource+0x3c8>
 80089a6:	f241 41eb 	movw	r1, #5355	; 0x14eb
 80089aa:	4870      	ldr	r0, [pc, #448]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 80089ac:	f7f9 ffbd 	bl	800292a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	6899      	ldr	r1, [r3, #8]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f000 fd0e 	bl	80093e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089d2:	609a      	str	r2, [r3, #8]
      break;
 80089d4:	e16a      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a5f      	ldr	r2, [pc, #380]	; (8008b58 <HAL_TIM_ConfigClockSource+0x570>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d027      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e8:	d022      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5b      	ldr	r2, [pc, #364]	; (8008b5c <HAL_TIM_ConfigClockSource+0x574>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d01d      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a59      	ldr	r2, [pc, #356]	; (8008b60 <HAL_TIM_ConfigClockSource+0x578>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d018      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a58      	ldr	r2, [pc, #352]	; (8008b64 <HAL_TIM_ConfigClockSource+0x57c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d013      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a56      	ldr	r2, [pc, #344]	; (8008b68 <HAL_TIM_ConfigClockSource+0x580>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00e      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a56      	ldr	r2, [pc, #344]	; (8008b70 <HAL_TIM_ConfigClockSource+0x588>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d009      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a54      	ldr	r2, [pc, #336]	; (8008b74 <HAL_TIM_ConfigClockSource+0x58c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <HAL_TIM_ConfigClockSource+0x448>
 8008a26:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8008a2a:	4850      	ldr	r0, [pc, #320]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008a2c:	f7f9 ff7d 	bl	800292a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a38:	d014      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x47c>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x47c>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x47c>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d008      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x47c>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b0a      	cmp	r3, #10
 8008a58:	d004      	beq.n	8008a64 <HAL_TIM_ConfigClockSource+0x47c>
 8008a5a:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8008a5e:	4843      	ldr	r0, [pc, #268]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008a60:	f7f9 ff63 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b0f      	cmp	r3, #15
 8008a6a:	d904      	bls.n	8008a76 <HAL_TIM_ConfigClockSource+0x48e>
 8008a6c:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008a70:	483e      	ldr	r0, [pc, #248]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008a72:	f7f9 ff5a 	bl	800292a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	6859      	ldr	r1, [r3, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f000 fc32 	bl	80092ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2150      	movs	r1, #80	; 0x50
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fc8b 	bl	80093aa <TIM_ITRx_SetConfig>
      break;
 8008a94:	e10a      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <HAL_TIM_ConfigClockSource+0x570>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d027      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa8:	d022      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a2b      	ldr	r2, [pc, #172]	; (8008b5c <HAL_TIM_ConfigClockSource+0x574>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a29      	ldr	r2, [pc, #164]	; (8008b60 <HAL_TIM_ConfigClockSource+0x578>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a28      	ldr	r2, [pc, #160]	; (8008b64 <HAL_TIM_ConfigClockSource+0x57c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a26      	ldr	r2, [pc, #152]	; (8008b68 <HAL_TIM_ConfigClockSource+0x580>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <HAL_TIM_ConfigClockSource+0x588>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a24      	ldr	r2, [pc, #144]	; (8008b74 <HAL_TIM_ConfigClockSource+0x58c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x508>
 8008ae6:	f241 510a 	movw	r1, #5386	; 0x150a
 8008aea:	4820      	ldr	r0, [pc, #128]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008aec:	f7f9 ff1d 	bl	800292a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af8:	d014      	beq.n	8008b24 <HAL_TIM_ConfigClockSource+0x53c>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d010      	beq.n	8008b24 <HAL_TIM_ConfigClockSource+0x53c>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00c      	beq.n	8008b24 <HAL_TIM_ConfigClockSource+0x53c>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d008      	beq.n	8008b24 <HAL_TIM_ConfigClockSource+0x53c>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b0a      	cmp	r3, #10
 8008b18:	d004      	beq.n	8008b24 <HAL_TIM_ConfigClockSource+0x53c>
 8008b1a:	f241 510d 	movw	r1, #5389	; 0x150d
 8008b1e:	4813      	ldr	r0, [pc, #76]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008b20:	f7f9 ff03 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d904      	bls.n	8008b36 <HAL_TIM_ConfigClockSource+0x54e>
 8008b2c:	f241 510e 	movw	r1, #5390	; 0x150e
 8008b30:	480e      	ldr	r0, [pc, #56]	; (8008b6c <HAL_TIM_ConfigClockSource+0x584>)
 8008b32:	f7f9 fefa 	bl	800292a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 fc01 	bl	800934a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2160      	movs	r1, #96	; 0x60
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fc2b 	bl	80093aa <TIM_ITRx_SetConfig>
      break;
 8008b54:	e0aa      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	08010224 	.word	0x08010224
 8008b70:	40014000 	.word	0x40014000
 8008b74:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a52      	ldr	r2, [pc, #328]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d027      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	d022      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a4e      	ldr	r2, [pc, #312]	; (8008ccc <HAL_TIM_ConfigClockSource+0x6e4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01d      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a4d      	ldr	r2, [pc, #308]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d018      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a4b      	ldr	r2, [pc, #300]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a4a      	ldr	r2, [pc, #296]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00e      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a48      	ldr	r2, [pc, #288]	; (8008cdc <HAL_TIM_ConfigClockSource+0x6f4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a47      	ldr	r2, [pc, #284]	; (8008ce0 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d004      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008bc8:	f241 511a 	movw	r1, #5402	; 0x151a
 8008bcc:	4845      	ldr	r0, [pc, #276]	; (8008ce4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008bce:	f7f9 feac 	bl	800292a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bda:	d014      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x61e>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d010      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x61e>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00c      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x61e>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d008      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x61e>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b0a      	cmp	r3, #10
 8008bfa:	d004      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x61e>
 8008bfc:	f241 511d 	movw	r1, #5405	; 0x151d
 8008c00:	4838      	ldr	r0, [pc, #224]	; (8008ce4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008c02:	f7f9 fe92 	bl	800292a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d904      	bls.n	8008c18 <HAL_TIM_ConfigClockSource+0x630>
 8008c0e:	f241 511e 	movw	r1, #5406	; 0x151e
 8008c12:	4834      	ldr	r0, [pc, #208]	; (8008ce4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008c14:	f7f9 fe89 	bl	800292a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	461a      	mov	r2, r3
 8008c26:	f000 fb61 	bl	80092ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2140      	movs	r1, #64	; 0x40
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fbba 	bl	80093aa <TIM_ITRx_SetConfig>
      break;
 8008c36:	e039      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d027      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d022      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1e      	ldr	r2, [pc, #120]	; (8008ccc <HAL_TIM_ConfigClockSource+0x6e4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01d      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1d      	ldr	r2, [pc, #116]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x6e8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d018      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00e      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_TIM_ConfigClockSource+0x6f4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d009      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a17      	ldr	r2, [pc, #92]	; (8008ce0 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d004      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x6aa>
 8008c88:	f241 512d 	movw	r1, #5421	; 0x152d
 8008c8c:	4815      	ldr	r0, [pc, #84]	; (8008ce4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008c8e:	f7f9 fe4c 	bl	800292a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f000 fb84 	bl	80093aa <TIM_ITRx_SetConfig>
      break;
 8008ca2:	e003      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca8:	e000      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8008caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40010000 	.word	0x40010000
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40010400 	.word	0x40010400
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40001800 	.word	0x40001800
 8008ce4:	08010224 	.word	0x08010224

08008ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a40      	ldr	r2, [pc, #256]	; (8008e4c <TIM_Base_SetConfig+0x114>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <TIM_Base_SetConfig+0x40>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d56:	d00f      	beq.n	8008d78 <TIM_Base_SetConfig+0x40>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a3d      	ldr	r2, [pc, #244]	; (8008e50 <TIM_Base_SetConfig+0x118>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00b      	beq.n	8008d78 <TIM_Base_SetConfig+0x40>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a3c      	ldr	r2, [pc, #240]	; (8008e54 <TIM_Base_SetConfig+0x11c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d007      	beq.n	8008d78 <TIM_Base_SetConfig+0x40>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a3b      	ldr	r2, [pc, #236]	; (8008e58 <TIM_Base_SetConfig+0x120>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_Base_SetConfig+0x40>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a3a      	ldr	r2, [pc, #232]	; (8008e5c <TIM_Base_SetConfig+0x124>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d108      	bne.n	8008d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a2f      	ldr	r2, [pc, #188]	; (8008e4c <TIM_Base_SetConfig+0x114>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d02b      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d98:	d027      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2c      	ldr	r2, [pc, #176]	; (8008e50 <TIM_Base_SetConfig+0x118>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d023      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2b      	ldr	r2, [pc, #172]	; (8008e54 <TIM_Base_SetConfig+0x11c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d01f      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a2a      	ldr	r2, [pc, #168]	; (8008e58 <TIM_Base_SetConfig+0x120>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01b      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a29      	ldr	r2, [pc, #164]	; (8008e5c <TIM_Base_SetConfig+0x124>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d017      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a28      	ldr	r2, [pc, #160]	; (8008e60 <TIM_Base_SetConfig+0x128>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d013      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a27      	ldr	r2, [pc, #156]	; (8008e64 <TIM_Base_SetConfig+0x12c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d00f      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a26      	ldr	r2, [pc, #152]	; (8008e68 <TIM_Base_SetConfig+0x130>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00b      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a25      	ldr	r2, [pc, #148]	; (8008e6c <TIM_Base_SetConfig+0x134>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d007      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a24      	ldr	r2, [pc, #144]	; (8008e70 <TIM_Base_SetConfig+0x138>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d003      	beq.n	8008dea <TIM_Base_SetConfig+0xb2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a23      	ldr	r2, [pc, #140]	; (8008e74 <TIM_Base_SetConfig+0x13c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d108      	bne.n	8008dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a0a      	ldr	r2, [pc, #40]	; (8008e4c <TIM_Base_SetConfig+0x114>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d003      	beq.n	8008e30 <TIM_Base_SetConfig+0xf8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <TIM_Base_SetConfig+0x124>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d103      	bne.n	8008e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	615a      	str	r2, [r3, #20]
}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	40000c00 	.word	0x40000c00
 8008e5c:	40010400 	.word	0x40010400
 8008e60:	40014000 	.word	0x40014000
 8008e64:	40014400 	.word	0x40014400
 8008e68:	40014800 	.word	0x40014800
 8008e6c:	40001800 	.word	0x40001800
 8008e70:	40001c00 	.word	0x40001c00
 8008e74:	40002000 	.word	0x40002000

08008e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f023 0201 	bic.w	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 0302 	bic.w	r3, r3, #2
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a34      	ldr	r2, [pc, #208]	; (8008fa0 <TIM_OC1_SetConfig+0x128>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_OC1_SetConfig+0x64>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <TIM_OC1_SetConfig+0x12c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d119      	bne.n	8008f10 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d008      	beq.n	8008ef6 <TIM_OC1_SetConfig+0x7e>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d004      	beq.n	8008ef6 <TIM_OC1_SetConfig+0x7e>
 8008eec:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8008ef0:	482d      	ldr	r0, [pc, #180]	; (8008fa8 <TIM_OC1_SetConfig+0x130>)
 8008ef2:	f7f9 fd1a 	bl	800292a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 0308 	bic.w	r3, r3, #8
 8008efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0304 	bic.w	r3, r3, #4
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a23      	ldr	r2, [pc, #140]	; (8008fa0 <TIM_OC1_SetConfig+0x128>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d003      	beq.n	8008f20 <TIM_OC1_SetConfig+0xa8>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a22      	ldr	r2, [pc, #136]	; (8008fa4 <TIM_OC1_SetConfig+0x12c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d12d      	bne.n	8008f7c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f28:	d008      	beq.n	8008f3c <TIM_OC1_SetConfig+0xc4>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <TIM_OC1_SetConfig+0xc4>
 8008f32:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8008f36:	481c      	ldr	r0, [pc, #112]	; (8008fa8 <TIM_OC1_SetConfig+0x130>)
 8008f38:	f7f9 fcf7 	bl	800292a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f44:	d008      	beq.n	8008f58 <TIM_OC1_SetConfig+0xe0>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <TIM_OC1_SetConfig+0xe0>
 8008f4e:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8008f52:	4815      	ldr	r0, [pc, #84]	; (8008fa8 <TIM_OC1_SetConfig+0x130>)
 8008f54:	f7f9 fce9 	bl	800292a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40010400 	.word	0x40010400
 8008fa8:	08010224 	.word	0x08010224

08008fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	f023 0210 	bic.w	r2, r3, #16
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f023 0320 	bic.w	r3, r3, #32
 8008ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a35      	ldr	r2, [pc, #212]	; (80090dc <TIM_OC2_SetConfig+0x130>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_OC2_SetConfig+0x68>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a34      	ldr	r2, [pc, #208]	; (80090e0 <TIM_OC2_SetConfig+0x134>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d11a      	bne.n	800904a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <TIM_OC2_SetConfig+0x82>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	2b08      	cmp	r3, #8
 8009022:	d004      	beq.n	800902e <TIM_OC2_SetConfig+0x82>
 8009024:	f641 3116 	movw	r1, #6934	; 0x1b16
 8009028:	482e      	ldr	r0, [pc, #184]	; (80090e4 <TIM_OC2_SetConfig+0x138>)
 800902a:	f7f9 fc7e 	bl	800292a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009048:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a23      	ldr	r2, [pc, #140]	; (80090dc <TIM_OC2_SetConfig+0x130>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC2_SetConfig+0xae>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a22      	ldr	r2, [pc, #136]	; (80090e0 <TIM_OC2_SetConfig+0x134>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d12f      	bne.n	80090ba <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009062:	d008      	beq.n	8009076 <TIM_OC2_SetConfig+0xca>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d004      	beq.n	8009076 <TIM_OC2_SetConfig+0xca>
 800906c:	f641 3124 	movw	r1, #6948	; 0x1b24
 8009070:	481c      	ldr	r0, [pc, #112]	; (80090e4 <TIM_OC2_SetConfig+0x138>)
 8009072:	f7f9 fc5a 	bl	800292a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907e:	d008      	beq.n	8009092 <TIM_OC2_SetConfig+0xe6>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <TIM_OC2_SetConfig+0xe6>
 8009088:	f641 3125 	movw	r1, #6949	; 0x1b25
 800908c:	4815      	ldr	r0, [pc, #84]	; (80090e4 <TIM_OC2_SetConfig+0x138>)
 800908e:	f7f9 fc4c 	bl	800292a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	621a      	str	r2, [r3, #32]
}
 80090d4:	bf00      	nop
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40010400 	.word	0x40010400
 80090e4:	08010224 	.word	0x08010224

080090e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a35      	ldr	r2, [pc, #212]	; (8009218 <TIM_OC3_SetConfig+0x130>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_OC3_SetConfig+0x66>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a34      	ldr	r2, [pc, #208]	; (800921c <TIM_OC3_SetConfig+0x134>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d11a      	bne.n	8009184 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d008      	beq.n	8009168 <TIM_OC3_SetConfig+0x80>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b08      	cmp	r3, #8
 800915c:	d004      	beq.n	8009168 <TIM_OC3_SetConfig+0x80>
 800915e:	f641 3161 	movw	r1, #7009	; 0x1b61
 8009162:	482f      	ldr	r0, [pc, #188]	; (8009220 <TIM_OC3_SetConfig+0x138>)
 8009164:	f7f9 fbe1 	bl	800292a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009182:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a24      	ldr	r2, [pc, #144]	; (8009218 <TIM_OC3_SetConfig+0x130>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d003      	beq.n	8009194 <TIM_OC3_SetConfig+0xac>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a23      	ldr	r2, [pc, #140]	; (800921c <TIM_OC3_SetConfig+0x134>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d12f      	bne.n	80091f4 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800919c:	d008      	beq.n	80091b0 <TIM_OC3_SetConfig+0xc8>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <TIM_OC3_SetConfig+0xc8>
 80091a6:	f641 316e 	movw	r1, #7022	; 0x1b6e
 80091aa:	481d      	ldr	r0, [pc, #116]	; (8009220 <TIM_OC3_SetConfig+0x138>)
 80091ac:	f7f9 fbbd 	bl	800292a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b8:	d008      	beq.n	80091cc <TIM_OC3_SetConfig+0xe4>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d004      	beq.n	80091cc <TIM_OC3_SetConfig+0xe4>
 80091c2:	f641 316f 	movw	r1, #7023	; 0x1b6f
 80091c6:	4816      	ldr	r0, [pc, #88]	; (8009220 <TIM_OC3_SetConfig+0x138>)
 80091c8:	f7f9 fbaf 	bl	800292a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40010000 	.word	0x40010000
 800921c:	40010400 	.word	0x40010400
 8009220:	08010224 	.word	0x08010224

08009224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800925a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	021b      	lsls	r3, r3, #8
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800926e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	031b      	lsls	r3, r3, #12
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a18      	ldr	r2, [pc, #96]	; (80092e0 <TIM_OC4_SetConfig+0xbc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC4_SetConfig+0x68>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a17      	ldr	r2, [pc, #92]	; (80092e4 <TIM_OC4_SetConfig+0xc0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d117      	bne.n	80092bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009294:	d008      	beq.n	80092a8 <TIM_OC4_SetConfig+0x84>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <TIM_OC4_SetConfig+0x84>
 800929e:	f641 31ad 	movw	r1, #7085	; 0x1bad
 80092a2:	4811      	ldr	r0, [pc, #68]	; (80092e8 <TIM_OC4_SetConfig+0xc4>)
 80092a4:	f7f9 fb41 	bl	800292a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40010400 	.word	0x40010400
 80092e8:	08010224 	.word	0x08010224

080092ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	f023 0201 	bic.w	r2, r3, #1
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f023 030a 	bic.w	r3, r3, #10
 8009328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934a:	b480      	push	{r7}
 800934c:	b087      	sub	sp, #28
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	f023 0210 	bic.w	r2, r3, #16
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	031b      	lsls	r3, r3, #12
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	f043 0307 	orr.w	r3, r3, #7
 80093cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	609a      	str	r2, [r3, #8]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	021a      	lsls	r2, r3, #8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	431a      	orrs	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4313      	orrs	r3, r2
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	609a      	str	r2, [r3, #8]
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a32      	ldr	r2, [pc, #200]	; (80094f8 <TIM_CCxChannelCmd+0xd8>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d030      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d02c      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a2f      	ldr	r2, [pc, #188]	; (80094fc <TIM_CCxChannelCmd+0xdc>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d028      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a2e      	ldr	r2, [pc, #184]	; (8009500 <TIM_CCxChannelCmd+0xe0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d024      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a2d      	ldr	r2, [pc, #180]	; (8009504 <TIM_CCxChannelCmd+0xe4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d020      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a2c      	ldr	r2, [pc, #176]	; (8009508 <TIM_CCxChannelCmd+0xe8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d01c      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a2b      	ldr	r2, [pc, #172]	; (800950c <TIM_CCxChannelCmd+0xec>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d018      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a2a      	ldr	r2, [pc, #168]	; (8009510 <TIM_CCxChannelCmd+0xf0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d014      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a29      	ldr	r2, [pc, #164]	; (8009514 <TIM_CCxChannelCmd+0xf4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d010      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a28      	ldr	r2, [pc, #160]	; (8009518 <TIM_CCxChannelCmd+0xf8>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00c      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a27      	ldr	r2, [pc, #156]	; (800951c <TIM_CCxChannelCmd+0xfc>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d008      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4a26      	ldr	r2, [pc, #152]	; (8009520 <TIM_CCxChannelCmd+0x100>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d004      	beq.n	8009496 <TIM_CCxChannelCmd+0x76>
 800948c:	f641 5198 	movw	r1, #7576	; 0x1d98
 8009490:	4824      	ldr	r0, [pc, #144]	; (8009524 <TIM_CCxChannelCmd+0x104>)
 8009492:	f7f9 fa4a 	bl	800292a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <TIM_CCxChannelCmd+0x9e>
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b04      	cmp	r3, #4
 80094a0:	d00d      	beq.n	80094be <TIM_CCxChannelCmd+0x9e>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d00a      	beq.n	80094be <TIM_CCxChannelCmd+0x9e>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b0c      	cmp	r3, #12
 80094ac:	d007      	beq.n	80094be <TIM_CCxChannelCmd+0x9e>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b3c      	cmp	r3, #60	; 0x3c
 80094b2:	d004      	beq.n	80094be <TIM_CCxChannelCmd+0x9e>
 80094b4:	f641 5199 	movw	r1, #7577	; 0x1d99
 80094b8:	481a      	ldr	r0, [pc, #104]	; (8009524 <TIM_CCxChannelCmd+0x104>)
 80094ba:	f7f9 fa36 	bl	800292a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f003 031f 	and.w	r3, r3, #31
 80094c4:	2201      	movs	r2, #1
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	43db      	mvns	r3, r3
 80094d4:	401a      	ands	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1a      	ldr	r2, [r3, #32]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f003 031f 	and.w	r3, r3, #31
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ea:	431a      	orrs	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	621a      	str	r2, [r3, #32]
}
 80094f0:	bf00      	nop
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	40010000 	.word	0x40010000
 80094fc:	40000400 	.word	0x40000400
 8009500:	40000800 	.word	0x40000800
 8009504:	40000c00 	.word	0x40000c00
 8009508:	40010400 	.word	0x40010400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800
 8009518:	40001800 	.word	0x40001800
 800951c:	40001c00 	.word	0x40001c00
 8009520:	40002000 	.word	0x40002000
 8009524:	08010224 	.word	0x08010224

08009528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a61      	ldr	r2, [pc, #388]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d027      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009544:	d022      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a5d      	ldr	r2, [pc, #372]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d01d      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a5b      	ldr	r2, [pc, #364]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d018      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a5a      	ldr	r2, [pc, #360]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a58      	ldr	r2, [pc, #352]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00e      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a57      	ldr	r2, [pc, #348]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a55      	ldr	r2, [pc, #340]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009582:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009586:	4854      	ldr	r0, [pc, #336]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009588:	f7f9 f9cf 	bl	800292a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d020      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b10      	cmp	r3, #16
 800959a:	d01c      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d018      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b30      	cmp	r3, #48	; 0x30
 80095aa:	d014      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d010      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b50      	cmp	r3, #80	; 0x50
 80095ba:	d00c      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b60      	cmp	r3, #96	; 0x60
 80095c2:	d008      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b70      	cmp	r3, #112	; 0x70
 80095ca:	d004      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095cc:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80095d0:	4841      	ldr	r0, [pc, #260]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80095d2:	f7f9 f9aa 	bl	800292a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2b80      	cmp	r3, #128	; 0x80
 80095dc:	d008      	beq.n	80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095e6:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80095ea:	483b      	ldr	r0, [pc, #236]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80095ec:	f7f9 f99d 	bl	800292a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e05a      	b.n	80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2202      	movs	r2, #2
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d022      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d01d      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d018      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d013      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00e      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d009      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d004      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a17      	ldr	r2, [pc, #92]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d10c      	bne.n	80096a2 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800968e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	4313      	orrs	r3, r2
 8009698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40000800 	.word	0x40000800
 80096c8:	40000c00 	.word	0x40000c00
 80096cc:	40001000 	.word	0x40001000
 80096d0:	40001400 	.word	0x40001400
 80096d4:	40010400 	.word	0x40010400
 80096d8:	0801025c 	.word	0x0801025c
 80096dc:	40014000 	.word	0x40014000
 80096e0:	40001800 	.word	0x40001800

080096e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a5e      	ldr	r2, [pc, #376]	; (8009870 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a5c      	ldr	r2, [pc, #368]	; (8009874 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009706:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800970a:	485b      	ldr	r0, [pc, #364]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800970c:	f7f9 f90d 	bl	800292a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009718:	d008      	beq.n	800972c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009722:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8009726:	4854      	ldr	r0, [pc, #336]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009728:	f7f9 f8ff 	bl	800292a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009734:	d008      	beq.n	8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800973e:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009742:	484d      	ldr	r0, [pc, #308]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009744:	f7f9 f8f1 	bl	800292a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d013      	beq.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009758:	d00e      	beq.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009762:	d009      	beq.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800976c:	d004      	beq.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800976e:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009772:	4841      	ldr	r0, [pc, #260]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009774:	f7f9 f8d9 	bl	800292a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2bff      	cmp	r3, #255	; 0xff
 800977e:	d904      	bls.n	800978a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009780:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8009784:	483c      	ldr	r0, [pc, #240]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009786:	f7f9 f8d0 	bl	800292a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009792:	d008      	beq.n	80097a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d004      	beq.n	80097a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800979c:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80097a0:	4835      	ldr	r0, [pc, #212]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80097a2:	f7f9 f8c2 	bl	800292a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b6:	d004      	beq.n	80097c2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80097b8:	f240 71f4 	movw	r1, #2036	; 0x7f4
 80097bc:	482e      	ldr	r0, [pc, #184]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80097be:	f7f9 f8b4 	bl	800292a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ca:	d008      	beq.n	80097de <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80097d4:	f240 71f5 	movw	r1, #2037	; 0x7f5
 80097d8:	4827      	ldr	r0, [pc, #156]	; (8009878 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80097da:	f7f9 f8a6 	bl	800292a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e03d      	b.n	8009868 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40010000 	.word	0x40010000
 8009874:	40010400 	.word	0x40010400
 8009878:	0801025c 	.word	0x0801025c

0800987c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e0be      	b.n	8009a34 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d03b      	beq.n	8009936 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a5e      	ldr	r2, [pc, #376]	; (8009a3c <HAL_UART_Init+0x198>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d01d      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a5c      	ldr	r2, [pc, #368]	; (8009a40 <HAL_UART_Init+0x19c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d018      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a5b      	ldr	r2, [pc, #364]	; (8009a44 <HAL_UART_Init+0x1a0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d013      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a59      	ldr	r2, [pc, #356]	; (8009a48 <HAL_UART_Init+0x1a4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00e      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a58      	ldr	r2, [pc, #352]	; (8009a4c <HAL_UART_Init+0x1a8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a56      	ldr	r2, [pc, #344]	; (8009a50 <HAL_UART_Init+0x1ac>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_UART_Init+0x60>
 80098fa:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80098fe:	4855      	ldr	r0, [pc, #340]	; (8009a54 <HAL_UART_Init+0x1b0>)
 8009900:	f7f9 f813 	bl	800292a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d037      	beq.n	800997c <HAL_UART_Init+0xd8>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009914:	d032      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800991e:	d02d      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009928:	d028      	beq.n	800997c <HAL_UART_Init+0xd8>
 800992a:	f240 1173 	movw	r1, #371	; 0x173
 800992e:	4849      	ldr	r0, [pc, #292]	; (8009a54 <HAL_UART_Init+0x1b0>)
 8009930:	f7f8 fffb 	bl	800292a <assert_failed>
 8009934:	e022      	b.n	800997c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a40      	ldr	r2, [pc, #256]	; (8009a3c <HAL_UART_Init+0x198>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d01d      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a3e      	ldr	r2, [pc, #248]	; (8009a40 <HAL_UART_Init+0x19c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d018      	beq.n	800997c <HAL_UART_Init+0xd8>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a3d      	ldr	r2, [pc, #244]	; (8009a44 <HAL_UART_Init+0x1a0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d013      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a3b      	ldr	r2, [pc, #236]	; (8009a48 <HAL_UART_Init+0x1a4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00e      	beq.n	800997c <HAL_UART_Init+0xd8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a3a      	ldr	r2, [pc, #232]	; (8009a4c <HAL_UART_Init+0x1a8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d009      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a38      	ldr	r2, [pc, #224]	; (8009a50 <HAL_UART_Init+0x1ac>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <HAL_UART_Init+0xd8>
 8009972:	f240 1177 	movw	r1, #375	; 0x177
 8009976:	4837      	ldr	r0, [pc, #220]	; (8009a54 <HAL_UART_Init+0x1b0>)
 8009978:	f7f8 ffd7 	bl	800292a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d009      	beq.n	8009998 <HAL_UART_Init+0xf4>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998c:	d004      	beq.n	8009998 <HAL_UART_Init+0xf4>
 800998e:	f240 1179 	movw	r1, #377	; 0x179
 8009992:	4830      	ldr	r0, [pc, #192]	; (8009a54 <HAL_UART_Init+0x1b0>)
 8009994:	f7f8 ffc9 	bl	800292a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <HAL_UART_Init+0x110>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a8:	d004      	beq.n	80099b4 <HAL_UART_Init+0x110>
 80099aa:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80099ae:	4829      	ldr	r0, [pc, #164]	; (8009a54 <HAL_UART_Init+0x1b0>)
 80099b0:	f7f8 ffbb 	bl	800292a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7f9 fb83 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2224      	movs	r2, #36	; 0x24
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fc7e 	bl	800a2e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691a      	ldr	r2, [r3, #16]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40011000 	.word	0x40011000
 8009a40:	40004400 	.word	0x40004400
 8009a44:	40004800 	.word	0x40004800
 8009a48:	40004c00 	.word	0x40004c00
 8009a4c:	40005000 	.word	0x40005000
 8009a50:	40011400 	.word	0x40011400
 8009a54:	08010298 	.word	0x08010298

08009a58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b0ba      	sub	sp, #232	; 0xe8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8e:	f003 030f 	and.w	r3, r3, #15
 8009a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10f      	bne.n	8009abe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <HAL_UART_IRQHandler+0x66>
 8009aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fb5b 	bl	800a172 <UART_Receive_IT>
      return;
 8009abc:	e256      	b.n	8009f6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80de 	beq.w	8009c84 <HAL_UART_IRQHandler+0x22c>
 8009ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d106      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80d1 	beq.w	8009c84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <HAL_UART_IRQHandler+0xae>
 8009aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	f043 0201 	orr.w	r2, r3, #1
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <HAL_UART_IRQHandler+0xd2>
 8009b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d005      	beq.n	8009b2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	f043 0202 	orr.w	r2, r3, #2
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <HAL_UART_IRQHandler+0xf6>
 8009b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f043 0204 	orr.w	r2, r3, #4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d011      	beq.n	8009b7e <HAL_UART_IRQHandler+0x126>
 8009b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f043 0208 	orr.w	r2, r3, #8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 81ed 	beq.w	8009f62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d008      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x14e>
 8009b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fae6 	bl	800a172 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	bf0c      	ite	eq
 8009bb4:	2301      	moveq	r3, #1
 8009bb6:	2300      	movne	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x17a>
 8009bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d04f      	beq.n	8009c72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9ee 	bl	8009fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be2:	2b40      	cmp	r3, #64	; 0x40
 8009be4:	d141      	bne.n	8009c6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3314      	adds	r3, #20
 8009bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1d9      	bne.n	8009be6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d013      	beq.n	8009c62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	4a7d      	ldr	r2, [pc, #500]	; (8009e34 <HAL_UART_IRQHandler+0x3dc>)
 8009c40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fa f824 	bl	8003c94 <HAL_DMA_Abort_IT>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	e00e      	b.n	8009c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f990 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	e00a      	b.n	8009c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f98c 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c70:	e006      	b.n	8009c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f988 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c7e:	e170      	b.n	8009f62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	bf00      	nop
    return;
 8009c82:	e16e      	b.n	8009f62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	f040 814a 	bne.w	8009f22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c92:	f003 0310 	and.w	r3, r3, #16
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 8143 	beq.w	8009f22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca0:	f003 0310 	and.w	r3, r3, #16
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 813c 	beq.w	8009f22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60bb      	str	r3, [r7, #8]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	60bb      	str	r3, [r7, #8]
 8009cbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cca:	2b40      	cmp	r3, #64	; 0x40
 8009ccc:	f040 80b4 	bne.w	8009e38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8140 	beq.w	8009f66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	f080 8139 	bcs.w	8009f66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d06:	f000 8088 	beq.w	8009e1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	330c      	adds	r3, #12
 8009d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1d9      	bne.n	8009d0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3314      	adds	r3, #20
 8009d5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3314      	adds	r3, #20
 8009d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1e1      	bne.n	8009d56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3314      	adds	r3, #20
 8009d98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3314      	adds	r3, #20
 8009db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009db6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009db8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009dbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e3      	bne.n	8009d92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	330c      	adds	r3, #12
 8009dde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dea:	f023 0310 	bic.w	r3, r3, #16
 8009dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009dfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e3      	bne.n	8009dd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7f9 fecd 	bl	8003bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f8b6 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e30:	e099      	b.n	8009f66 <HAL_UART_IRQHandler+0x50e>
 8009e32:	bf00      	nop
 8009e34:	0800a07b 	.word	0x0800a07b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 808b 	beq.w	8009f6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 8086 	beq.w	8009f6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	330c      	adds	r3, #12
 8009e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e82:	647a      	str	r2, [r7, #68]	; 0x44
 8009e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e3      	bne.n	8009e5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3314      	adds	r3, #20
 8009eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009eba:	633a      	str	r2, [r7, #48]	; 0x30
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e3      	bne.n	8009e96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	330c      	adds	r3, #12
 8009efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009f00:	61fa      	str	r2, [r7, #28]
 8009f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	69b9      	ldr	r1, [r7, #24]
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e3      	bne.n	8009edc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f83e 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f20:	e023      	b.n	8009f6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <HAL_UART_IRQHandler+0x4ea>
 8009f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8b1 	bl	800a0a2 <UART_Transmit_IT>
    return;
 8009f40:	e014      	b.n	8009f6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00e      	beq.n	8009f6c <HAL_UART_IRQHandler+0x514>
 8009f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f8f1 	bl	800a142 <UART_EndTransmit_IT>
    return;
 8009f60:	e004      	b.n	8009f6c <HAL_UART_IRQHandler+0x514>
    return;
 8009f62:	bf00      	nop
 8009f64:	e002      	b.n	8009f6c <HAL_UART_IRQHandler+0x514>
      return;
 8009f66:	bf00      	nop
 8009f68:	e000      	b.n	8009f6c <HAL_UART_IRQHandler+0x514>
      return;
 8009f6a:	bf00      	nop
  }
}
 8009f6c:	37e8      	adds	r7, #232	; 0xe8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop

08009f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b095      	sub	sp, #84	; 0x54
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e5      	bne.n	8009fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f023 0301 	bic.w	r3, r3, #1
 800a006:	64bb      	str	r3, [r7, #72]	; 0x48
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3314      	adds	r3, #20
 800a00e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a010:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a018:	e841 2300 	strex	r3, r2, [r1]
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e5      	bne.n	8009ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d119      	bne.n	800a060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	330c      	adds	r3, #12
 800a032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f023 0310 	bic.w	r3, r3, #16
 800a042:	647b      	str	r3, [r7, #68]	; 0x44
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	330c      	adds	r3, #12
 800a04a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a04c:	61ba      	str	r2, [r7, #24]
 800a04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6979      	ldr	r1, [r7, #20]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	613b      	str	r3, [r7, #16]
   return(result);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e5      	bne.n	800a02c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a06e:	bf00      	nop
 800a070:	3754      	adds	r7, #84	; 0x54
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7ff ff77 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b21      	cmp	r3, #33	; 0x21
 800a0b4:	d13e      	bne.n	800a134 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0be:	d114      	bne.n	800a0ea <UART_Transmit_IT+0x48>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d110      	bne.n	800a0ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	1c9a      	adds	r2, r3, #2
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	621a      	str	r2, [r3, #32]
 800a0e8:	e008      	b.n	800a0fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	1c59      	adds	r1, r3, #1
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6211      	str	r1, [r2, #32]
 800a0f4:	781a      	ldrb	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29b      	uxth	r3, r3
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	4619      	mov	r1, r3
 800a10a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10f      	bne.n	800a130 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a11e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a12e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	e000      	b.n	800a136 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a134:	2302      	movs	r3, #2
  }
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a158:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff ff06 	bl	8009f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b08c      	sub	sp, #48	; 0x30
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b22      	cmp	r3, #34	; 0x22
 800a184:	f040 80ab 	bne.w	800a2de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a190:	d117      	bne.n	800a1c2 <UART_Receive_IT+0x50>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d113      	bne.n	800a1c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	1c9a      	adds	r2, r3, #2
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	629a      	str	r2, [r3, #40]	; 0x28
 800a1c0:	e026      	b.n	800a210 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d4:	d007      	beq.n	800a1e6 <UART_Receive_IT+0x74>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <UART_Receive_IT+0x82>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	701a      	strb	r2, [r3, #0]
 800a1f2:	e008      	b.n	800a206 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a200:	b2da      	uxtb	r2, r3
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29b      	uxth	r3, r3
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4619      	mov	r1, r3
 800a21e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a220:	2b00      	cmp	r3, #0
 800a222:	d15a      	bne.n	800a2da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68da      	ldr	r2, [r3, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0220 	bic.w	r2, r2, #32
 800a232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	695a      	ldr	r2, [r3, #20]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f022 0201 	bic.w	r2, r2, #1
 800a252:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a260:	2b01      	cmp	r3, #1
 800a262:	d135      	bne.n	800a2d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	330c      	adds	r3, #12
 800a270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	613b      	str	r3, [r7, #16]
   return(result);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f023 0310 	bic.w	r3, r3, #16
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	330c      	adds	r3, #12
 800a288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28a:	623a      	str	r2, [r7, #32]
 800a28c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	69f9      	ldr	r1, [r7, #28]
 800a290:	6a3a      	ldr	r2, [r7, #32]
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	61bb      	str	r3, [r7, #24]
   return(result);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e5      	bne.n	800a26a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b10      	cmp	r3, #16
 800a2aa:	d10a      	bne.n	800a2c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff fe67 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
 800a2ce:	e002      	b.n	800a2d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7f6 fee1 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e002      	b.n	800a2e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e000      	b.n	800a2e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a2de:	2302      	movs	r3, #2
  }
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3730      	adds	r7, #48	; 0x30
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	b09f      	sub	sp, #124	; 0x7c
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	4b9b      	ldr	r3, [pc, #620]	; (800a564 <UART_SetConfig+0x27c>)
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d904      	bls.n	800a306 <UART_SetConfig+0x1e>
 800a2fc:	f640 6156 	movw	r1, #3670	; 0xe56
 800a300:	4899      	ldr	r0, [pc, #612]	; (800a568 <UART_SetConfig+0x280>)
 800a302:	f7f8 fb12 	bl	800292a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <UART_SetConfig+0x3a>
 800a30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a316:	d004      	beq.n	800a322 <UART_SetConfig+0x3a>
 800a318:	f640 6157 	movw	r1, #3671	; 0xe57
 800a31c:	4892      	ldr	r0, [pc, #584]	; (800a568 <UART_SetConfig+0x280>)
 800a31e:	f7f8 fb04 	bl	800292a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <UART_SetConfig+0x60>
 800a32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a332:	d009      	beq.n	800a348 <UART_SetConfig+0x60>
 800a334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a33c:	d004      	beq.n	800a348 <UART_SetConfig+0x60>
 800a33e:	f640 6158 	movw	r1, #3672	; 0xe58
 800a342:	4889      	ldr	r0, [pc, #548]	; (800a568 <UART_SetConfig+0x280>)
 800a344:	f7f8 faf1 	bl	800292a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34a:	695a      	ldr	r2, [r3, #20]
 800a34c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a350:	4013      	ands	r3, r2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <UART_SetConfig+0x76>
 800a356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <UART_SetConfig+0x80>
 800a35e:	f640 6159 	movw	r1, #3673	; 0xe59
 800a362:	4881      	ldr	r0, [pc, #516]	; (800a568 <UART_SetConfig+0x280>)
 800a364:	f7f8 fae1 	bl	800292a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a374:	68d9      	ldr	r1, [r3, #12]
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	ea40 0301 	orr.w	r3, r0, r1
 800a37e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	431a      	orrs	r2, r3
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	431a      	orrs	r2, r3
 800a390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	4313      	orrs	r3, r2
 800a396:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3a2:	f021 010c 	bic.w	r1, r1, #12
 800a3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3bc:	6999      	ldr	r1, [r3, #24]
 800a3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	ea40 0301 	orr.w	r3, r0, r1
 800a3c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	4b67      	ldr	r3, [pc, #412]	; (800a56c <UART_SetConfig+0x284>)
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d004      	beq.n	800a3dc <UART_SetConfig+0xf4>
 800a3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	4b66      	ldr	r3, [pc, #408]	; (800a570 <UART_SetConfig+0x288>)
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d103      	bne.n	800a3e4 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3dc:	f7fb fc5a 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 800a3e0:	6778      	str	r0, [r7, #116]	; 0x74
 800a3e2:	e002      	b.n	800a3ea <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3e4:	f7fb fc42 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 800a3e8:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f2:	f040 80c1 	bne.w	800a578 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f8:	461c      	mov	r4, r3
 800a3fa:	f04f 0500 	mov.w	r5, #0
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	1891      	adds	r1, r2, r2
 800a404:	6439      	str	r1, [r7, #64]	; 0x40
 800a406:	415b      	adcs	r3, r3
 800a408:	647b      	str	r3, [r7, #68]	; 0x44
 800a40a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a40e:	1912      	adds	r2, r2, r4
 800a410:	eb45 0303 	adc.w	r3, r5, r3
 800a414:	f04f 0000 	mov.w	r0, #0
 800a418:	f04f 0100 	mov.w	r1, #0
 800a41c:	00d9      	lsls	r1, r3, #3
 800a41e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a422:	00d0      	lsls	r0, r2, #3
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	1911      	adds	r1, r2, r4
 800a42a:	6639      	str	r1, [r7, #96]	; 0x60
 800a42c:	416b      	adcs	r3, r5
 800a42e:	667b      	str	r3, [r7, #100]	; 0x64
 800a430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	461a      	mov	r2, r3
 800a436:	f04f 0300 	mov.w	r3, #0
 800a43a:	1891      	adds	r1, r2, r2
 800a43c:	63b9      	str	r1, [r7, #56]	; 0x38
 800a43e:	415b      	adcs	r3, r3
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a442:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a446:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a44a:	f7f6 fac9 	bl	80009e0 <__aeabi_uldivmod>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4b48      	ldr	r3, [pc, #288]	; (800a574 <UART_SetConfig+0x28c>)
 800a454:	fba3 2302 	umull	r2, r3, r3, r2
 800a458:	095b      	lsrs	r3, r3, #5
 800a45a:	011e      	lsls	r6, r3, #4
 800a45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a45e:	461c      	mov	r4, r3
 800a460:	f04f 0500 	mov.w	r5, #0
 800a464:	4622      	mov	r2, r4
 800a466:	462b      	mov	r3, r5
 800a468:	1891      	adds	r1, r2, r2
 800a46a:	6339      	str	r1, [r7, #48]	; 0x30
 800a46c:	415b      	adcs	r3, r3
 800a46e:	637b      	str	r3, [r7, #52]	; 0x34
 800a470:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a474:	1912      	adds	r2, r2, r4
 800a476:	eb45 0303 	adc.w	r3, r5, r3
 800a47a:	f04f 0000 	mov.w	r0, #0
 800a47e:	f04f 0100 	mov.w	r1, #0
 800a482:	00d9      	lsls	r1, r3, #3
 800a484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a488:	00d0      	lsls	r0, r2, #3
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	1911      	adds	r1, r2, r4
 800a490:	65b9      	str	r1, [r7, #88]	; 0x58
 800a492:	416b      	adcs	r3, r5
 800a494:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f04f 0300 	mov.w	r3, #0
 800a4a0:	1891      	adds	r1, r2, r2
 800a4a2:	62b9      	str	r1, [r7, #40]	; 0x28
 800a4a4:	415b      	adcs	r3, r3
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4b0:	f7f6 fa96 	bl	80009e0 <__aeabi_uldivmod>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4b2e      	ldr	r3, [pc, #184]	; (800a574 <UART_SetConfig+0x28c>)
 800a4ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a4be:	095b      	lsrs	r3, r3, #5
 800a4c0:	2164      	movs	r1, #100	; 0x64
 800a4c2:	fb01 f303 	mul.w	r3, r1, r3
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	3332      	adds	r3, #50	; 0x32
 800a4cc:	4a29      	ldr	r2, [pc, #164]	; (800a574 <UART_SetConfig+0x28c>)
 800a4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4da:	441e      	add	r6, r3
 800a4dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f04f 0100 	mov.w	r1, #0
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	1894      	adds	r4, r2, r2
 800a4ea:	623c      	str	r4, [r7, #32]
 800a4ec:	415b      	adcs	r3, r3
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4f4:	1812      	adds	r2, r2, r0
 800a4f6:	eb41 0303 	adc.w	r3, r1, r3
 800a4fa:	f04f 0400 	mov.w	r4, #0
 800a4fe:	f04f 0500 	mov.w	r5, #0
 800a502:	00dd      	lsls	r5, r3, #3
 800a504:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a508:	00d4      	lsls	r4, r2, #3
 800a50a:	4622      	mov	r2, r4
 800a50c:	462b      	mov	r3, r5
 800a50e:	1814      	adds	r4, r2, r0
 800a510:	653c      	str	r4, [r7, #80]	; 0x50
 800a512:	414b      	adcs	r3, r1
 800a514:	657b      	str	r3, [r7, #84]	; 0x54
 800a516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f04f 0300 	mov.w	r3, #0
 800a520:	1891      	adds	r1, r2, r2
 800a522:	61b9      	str	r1, [r7, #24]
 800a524:	415b      	adcs	r3, r3
 800a526:	61fb      	str	r3, [r7, #28]
 800a528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a52c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a530:	f7f6 fa56 	bl	80009e0 <__aeabi_uldivmod>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <UART_SetConfig+0x28c>)
 800a53a:	fba3 1302 	umull	r1, r3, r3, r2
 800a53e:	095b      	lsrs	r3, r3, #5
 800a540:	2164      	movs	r1, #100	; 0x64
 800a542:	fb01 f303 	mul.w	r3, r1, r3
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	3332      	adds	r3, #50	; 0x32
 800a54c:	4a09      	ldr	r2, [pc, #36]	; (800a574 <UART_SetConfig+0x28c>)
 800a54e:	fba2 2303 	umull	r2, r3, r2, r3
 800a552:	095b      	lsrs	r3, r3, #5
 800a554:	f003 0207 	and.w	r2, r3, #7
 800a558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4432      	add	r2, r6
 800a55e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a560:	e0c4      	b.n	800a6ec <UART_SetConfig+0x404>
 800a562:	bf00      	nop
 800a564:	00a037a0 	.word	0x00a037a0
 800a568:	08010298 	.word	0x08010298
 800a56c:	40011000 	.word	0x40011000
 800a570:	40011400 	.word	0x40011400
 800a574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57a:	461c      	mov	r4, r3
 800a57c:	f04f 0500 	mov.w	r5, #0
 800a580:	4622      	mov	r2, r4
 800a582:	462b      	mov	r3, r5
 800a584:	1891      	adds	r1, r2, r2
 800a586:	6139      	str	r1, [r7, #16]
 800a588:	415b      	adcs	r3, r3
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a590:	1912      	adds	r2, r2, r4
 800a592:	eb45 0303 	adc.w	r3, r5, r3
 800a596:	f04f 0000 	mov.w	r0, #0
 800a59a:	f04f 0100 	mov.w	r1, #0
 800a59e:	00d9      	lsls	r1, r3, #3
 800a5a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5a4:	00d0      	lsls	r0, r2, #3
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	eb12 0804 	adds.w	r8, r2, r4
 800a5ae:	eb43 0905 	adc.w	r9, r3, r5
 800a5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f04f 0100 	mov.w	r1, #0
 800a5bc:	f04f 0200 	mov.w	r2, #0
 800a5c0:	f04f 0300 	mov.w	r3, #0
 800a5c4:	008b      	lsls	r3, r1, #2
 800a5c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5ca:	0082      	lsls	r2, r0, #2
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 fa06 	bl	80009e0 <__aeabi_uldivmod>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4b47      	ldr	r3, [pc, #284]	; (800a6f8 <UART_SetConfig+0x410>)
 800a5da:	fba3 2302 	umull	r2, r3, r3, r2
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	011e      	lsls	r6, r3, #4
 800a5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f04f 0100 	mov.w	r1, #0
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	1894      	adds	r4, r2, r2
 800a5f0:	60bc      	str	r4, [r7, #8]
 800a5f2:	415b      	adcs	r3, r3
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5fa:	1812      	adds	r2, r2, r0
 800a5fc:	eb41 0303 	adc.w	r3, r1, r3
 800a600:	f04f 0400 	mov.w	r4, #0
 800a604:	f04f 0500 	mov.w	r5, #0
 800a608:	00dd      	lsls	r5, r3, #3
 800a60a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a60e:	00d4      	lsls	r4, r2, #3
 800a610:	4622      	mov	r2, r4
 800a612:	462b      	mov	r3, r5
 800a614:	1814      	adds	r4, r2, r0
 800a616:	64bc      	str	r4, [r7, #72]	; 0x48
 800a618:	414b      	adcs	r3, r1
 800a61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f04f 0100 	mov.w	r1, #0
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	008b      	lsls	r3, r1, #2
 800a630:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a634:	0082      	lsls	r2, r0, #2
 800a636:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a63a:	f7f6 f9d1 	bl	80009e0 <__aeabi_uldivmod>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4b2d      	ldr	r3, [pc, #180]	; (800a6f8 <UART_SetConfig+0x410>)
 800a644:	fba3 1302 	umull	r1, r3, r3, r2
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	2164      	movs	r1, #100	; 0x64
 800a64c:	fb01 f303 	mul.w	r3, r1, r3
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	3332      	adds	r3, #50	; 0x32
 800a656:	4a28      	ldr	r2, [pc, #160]	; (800a6f8 <UART_SetConfig+0x410>)
 800a658:	fba2 2303 	umull	r2, r3, r2, r3
 800a65c:	095b      	lsrs	r3, r3, #5
 800a65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a662:	441e      	add	r6, r3
 800a664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a666:	4618      	mov	r0, r3
 800a668:	f04f 0100 	mov.w	r1, #0
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	1894      	adds	r4, r2, r2
 800a672:	603c      	str	r4, [r7, #0]
 800a674:	415b      	adcs	r3, r3
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67c:	1812      	adds	r2, r2, r0
 800a67e:	eb41 0303 	adc.w	r3, r1, r3
 800a682:	f04f 0400 	mov.w	r4, #0
 800a686:	f04f 0500 	mov.w	r5, #0
 800a68a:	00dd      	lsls	r5, r3, #3
 800a68c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a690:	00d4      	lsls	r4, r2, #3
 800a692:	4622      	mov	r2, r4
 800a694:	462b      	mov	r3, r5
 800a696:	eb12 0a00 	adds.w	sl, r2, r0
 800a69a:	eb43 0b01 	adc.w	fp, r3, r1
 800a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f04f 0100 	mov.w	r1, #0
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	f04f 0300 	mov.w	r3, #0
 800a6b0:	008b      	lsls	r3, r1, #2
 800a6b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6b6:	0082      	lsls	r2, r0, #2
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	4659      	mov	r1, fp
 800a6bc:	f7f6 f990 	bl	80009e0 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <UART_SetConfig+0x410>)
 800a6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	2164      	movs	r1, #100	; 0x64
 800a6ce:	fb01 f303 	mul.w	r3, r1, r3
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	3332      	adds	r3, #50	; 0x32
 800a6d8:	4a07      	ldr	r2, [pc, #28]	; (800a6f8 <UART_SetConfig+0x410>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	f003 020f 	and.w	r2, r3, #15
 800a6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4432      	add	r2, r6
 800a6ea:	609a      	str	r2, [r3, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	377c      	adds	r7, #124	; 0x7c
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	bf00      	nop
 800a6f8:	51eb851f 	.word	0x51eb851f

0800a6fc <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d105      	bne.n	800a71c <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a710:	2101      	movs	r1, #1
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 f824 	bl	800b760 <VL53L1_data_init>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a72c:	2300      	movs	r3, #0
 800a72e:	73bb      	strb	r3, [r7, #14]
 800a730:	e012      	b.n	800a758 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d112      	bne.n	800a760 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	2201      	movs	r2, #1
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fbd3 	bl	800aeee <VL53L1_SetLimitCheckEnable>
 800a748:	4603      	mov	r3, r0
 800a74a:	461a      	mov	r2, r3
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	4313      	orrs	r3, r2
 800a750:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	3301      	adds	r3, #1
 800a756:	73bb      	strb	r3, [r7, #14]
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d9e9      	bls.n	800a732 <VL53L1_DataInit+0x36>
 800a75e:	e000      	b.n	800a762 <VL53L1_DataInit+0x66>
		else
			break;
 800a760:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2203      	movs	r2, #3
 800a77e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a782:	2320      	movs	r3, #32
 800a784:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7bba      	ldrb	r2, [r7, #14]
 800a78a:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800a78c:	2108      	movs	r1, #8
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f8f9 	bl	800a986 <VL53L1_SetPresetMode>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2208      	movs	r2, #8
 800a79c:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800a7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800a7b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f004 ffe0 	bl	800f782 <VL53L1_poll_for_boot_completion>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800a7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	603a      	str	r2, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800a7e8:	4a2c      	ldr	r2, [pc, #176]	; (800a89c <ComputeDevicePresetMode+0xc8>)
 800a7ea:	f107 0310 	add.w	r3, r7, #16
 800a7ee:	6812      	ldr	r2, [r2, #0]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	8019      	strh	r1, [r3, #0]
 800a7f4:	3302      	adds	r3, #2
 800a7f6:	0c12      	lsrs	r2, r2, #16
 800a7f8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800a7fa:	4a29      	ldr	r2, [pc, #164]	; (800a8a0 <ComputeDevicePresetMode+0xcc>)
 800a7fc:	f107 030c 	add.w	r3, r7, #12
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	4611      	mov	r1, r2
 800a804:	8019      	strh	r1, [r3, #0]
 800a806:	3302      	adds	r3, #2
 800a808:	0c12      	lsrs	r2, r2, #16
 800a80a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800a80c:	4a25      	ldr	r2, [pc, #148]	; (800a8a4 <ComputeDevicePresetMode+0xd0>)
 800a80e:	f107 0308 	add.w	r3, r7, #8
 800a812:	6812      	ldr	r2, [r2, #0]
 800a814:	4611      	mov	r1, r2
 800a816:	8019      	strh	r1, [r3, #0]
 800a818:	3302      	adds	r3, #2
 800a81a:	0c12      	lsrs	r2, r2, #16
 800a81c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2201      	movs	r2, #1
 800a822:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800a824:	79bb      	ldrb	r3, [r7, #6]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d002      	beq.n	800a830 <ComputeDevicePresetMode+0x5c>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d003      	beq.n	800a836 <ComputeDevicePresetMode+0x62>
 800a82e:	e005      	b.n	800a83c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	75bb      	strb	r3, [r7, #22]
		break;
 800a834:	e004      	b.n	800a840 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800a836:	2301      	movs	r3, #1
 800a838:	75bb      	strb	r3, [r7, #22]
		break;
 800a83a:	e001      	b.n	800a840 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800a83c:	2302      	movs	r3, #2
 800a83e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	2b08      	cmp	r3, #8
 800a844:	d017      	beq.n	800a876 <ComputeDevicePresetMode+0xa2>
 800a846:	2b08      	cmp	r3, #8
 800a848:	dc1e      	bgt.n	800a888 <ComputeDevicePresetMode+0xb4>
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d00a      	beq.n	800a864 <ComputeDevicePresetMode+0x90>
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d11a      	bne.n	800a888 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800a852:	7dbb      	ldrb	r3, [r7, #22]
 800a854:	f107 0218 	add.w	r2, r7, #24
 800a858:	4413      	add	r3, r2
 800a85a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	701a      	strb	r2, [r3, #0]
		break;
 800a862:	e013      	b.n	800a88c <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800a864:	7dbb      	ldrb	r3, [r7, #22]
 800a866:	f107 0218 	add.w	r2, r7, #24
 800a86a:	4413      	add	r3, r2
 800a86c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	701a      	strb	r2, [r3, #0]
		break;
 800a874:	e00a      	b.n	800a88c <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800a876:	7dbb      	ldrb	r3, [r7, #22]
 800a878:	f107 0218 	add.w	r2, r7, #24
 800a87c:	4413      	add	r3, r2
 800a87e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	701a      	strb	r2, [r3, #0]
		break;
 800a886:	e001      	b.n	800a88c <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a888:	23f8      	movs	r3, #248	; 0xf8
 800a88a:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800a88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a890:	4618      	mov	r0, r3
 800a892:	371c      	adds	r7, #28
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	08010300 	.word	0x08010300
 800a8a0:	08010304 	.word	0x08010304
 800a8a4:	08010308 	.word	0x08010308

0800a8a8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08e      	sub	sp, #56	; 0x38
 800a8ac:	af04      	add	r7, sp, #16
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	607b      	str	r3, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	72fb      	strb	r3, [r7, #11]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d002      	beq.n	800a8dc <SetPresetMode+0x34>
 800a8d6:	7afb      	ldrb	r3, [r7, #11]
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d103      	bne.n	800a8e4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800a8dc:	2340      	movs	r3, #64	; 0x40
 800a8de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8e2:	e002      	b.n	800a8ea <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800a8ea:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800a8ee:	7ab9      	ldrb	r1, [r7, #10]
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff ff6e 	bl	800a7d4 <ComputeDevicePresetMode>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a8fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a902:	2b00      	cmp	r3, #0
 800a904:	d112      	bne.n	800a92c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800a906:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800a90a:	f107 001c 	add.w	r0, r7, #28
 800a90e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800a912:	f107 0314 	add.w	r3, r7, #20
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	f107 0318 	add.w	r3, r7, #24
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4603      	mov	r3, r0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f001 f9dd 	bl	800bce0 <VL53L1_get_preset_mode_timing_cfg>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800a92c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a930:	2b00      	cmp	r3, #0
 800a932:	d112      	bne.n	800a95a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800a934:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800a938:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a93a:	69fd      	ldr	r5, [r7, #28]
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	9102      	str	r1, [sp, #8]
 800a944:	9201      	str	r2, [sp, #4]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	462b      	mov	r3, r5
 800a94a:	4622      	mov	r2, r4
 800a94c:	4601      	mov	r1, r0
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 fa70 	bl	800be34 <VL53L1_set_preset_mode>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a95a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a968:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a96a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d103      	bne.n	800a97a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	7afa      	ldrb	r2, [r7, #11]
 800a976:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800a97a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bdb0      	pop	{r4, r5, r7, pc}

0800a986 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800a996:	2303      	movs	r3, #3
 800a998:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f003 fd2c 	bl	800e3f8 <VL53L1_low_power_auto_data_init>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800a9a4:	7bba      	ldrb	r2, [r7, #14]
 800a9a6:	78f9      	ldrb	r1, [r7, #3]
 800a9a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff ff7b 	bl	800a8a8 <SetPresetMode>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800a9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d117      	bne.n	800a9ee <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d005      	beq.n	800a9d0 <VL53L1_SetPresetMode+0x4a>
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d002      	beq.n	800a9d0 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d107      	bne.n	800a9e0 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a9d0:	f24a 0128 	movw	r1, #41000	; 0xa028
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f891 	bl	800aafc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73fb      	strb	r3, [r7, #15]
 800a9de:	e006      	b.n	800a9ee <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a9e0:	f248 2135 	movw	r1, #33333	; 0x8235
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f889 	bl	800aafc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800a9f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa0a 	bl	800ae14 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800aa32:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d008      	beq.n	800aa4c <VL53L1_SetDistanceMode+0x3c>
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d005      	beq.n	800aa4c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d002      	beq.n	800aa4c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800aa46:	f06f 0303 	mvn.w	r3, #3
 800aa4a:	e052      	b.n	800aaf2 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800aa4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 f8e9 	bl	800bc32 <VL53L1_get_user_zone>
 800aa60:	4603      	mov	r3, r0
 800aa62:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800aa6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800aa72:	f107 0314 	add.w	r3, r7, #20
 800aa76:	f107 0210 	add.w	r2, r7, #16
 800aa7a:	f107 010c 	add.w	r1, r7, #12
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f812 	bl	800baa8 <VL53L1_get_timeouts_us>
 800aa84:	4603      	mov	r3, r0
 800aa86:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800aa88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d107      	bne.n	800aaa0 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	7fb9      	ldrb	r1, [r7, #30]
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff ff06 	bl	800a8a8 <SetPresetMode>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800aaa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800aab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10e      	bne.n	800aad6 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800aab8:	68f9      	ldr	r1, [r7, #12]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 ffba 	bl	800ba38 <VL53L1_set_timeouts_us>
 800aac4:	4603      	mov	r3, r0
 800aac6:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800aac8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800aad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d107      	bne.n	800aaee <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f881 	bl	800bbec <VL53L1_set_user_zone>
 800aaea:	4603      	mov	r3, r0
 800aaec:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800aaee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3720      	adds	r7, #32
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08c      	sub	sp, #48	; 0x30
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800ab20:	4b64      	ldr	r3, [pc, #400]	; (800acb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800ab22:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	4a64      	ldr	r2, [pc, #400]	; (800acb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d902      	bls.n	800ab32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ab2c:	23fc      	movs	r3, #252	; 0xfc
 800ab2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800ab32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ab3a:	f107 031a 	add.w	r3, r7, #26
 800ab3e:	461a      	mov	r2, r3
 800ab40:	2105      	movs	r1, #5
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa8d 	bl	800b062 <VL53L1_GetSequenceStepEnable>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ab4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ab56:	f107 0319 	add.w	r3, r7, #25
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	2106      	movs	r1, #6
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa7f 	bl	800b062 <VL53L1_GetSequenceStepEnable>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800ab6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800ab72:	f107 0314 	add.w	r3, r7, #20
 800ab76:	f107 0210 	add.w	r2, r7, #16
 800ab7a:	f107 010c 	add.w	r1, r7, #12
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 ff92 	bl	800baa8 <VL53L1_get_timeouts_us>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800ab8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f040 8081 	bne.w	800ac96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ab9a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800aba0:	2301      	movs	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800aba4:	7efb      	ldrb	r3, [r7, #27]
 800aba6:	2b08      	cmp	r3, #8
 800aba8:	d026      	beq.n	800abf8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800abaa:	2b08      	cmp	r3, #8
 800abac:	dc43      	bgt.n	800ac36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d00f      	beq.n	800abd2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d13f      	bne.n	800ac36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800abb6:	7ebb      	ldrb	r3, [r7, #26]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d002      	beq.n	800abc2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800abbc:	7e7b      	ldrb	r3, [r7, #25]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d103      	bne.n	800abca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800abc2:	f241 3388 	movw	r3, #5000	; 0x1388
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800abc8:	e038      	b.n	800ac3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800abca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800abd0:	e034      	b.n	800ac3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800abd8:	7ebb      	ldrb	r3, [r7, #26]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d002      	beq.n	800abe4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800abde:	7e7b      	ldrb	r3, [r7, #25]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d103      	bne.n	800abec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800abe4:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800abe8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abea:	e002      	b.n	800abf2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800abec:	f245 4360 	movw	r3, #21600	; 0x5460
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800abf2:	2302      	movs	r3, #2
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800abf6:	e021      	b.n	800ac3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800abfe:	23f5      	movs	r3, #245	; 0xf5
 800ac00:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	461a      	mov	r2, r3
 800ac08:	f248 0136 	movw	r1, #32822	; 0x8036
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 ff75 	bl	800cafc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd07      	ble.n	800ac28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	22f5      	movs	r2, #245	; 0xf5
 800ac1c:	fb02 f303 	mul.w	r3, r2, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	4413      	add	r3, r2
 800ac26:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800ac30:	2302      	movs	r3, #2
 800ac32:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ac34:	e002      	b.n	800ac3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ac36:	23f8      	movs	r3, #248	; 0xf8
 800ac38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d803      	bhi.n	800ac4c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800ac44:	23fc      	movs	r3, #252	; 0xfc
 800ac46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac4a:	e003      	b.n	800ac54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800ac52:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800ac54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11c      	bne.n	800ac96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d203      	bcs.n	800ac6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800ac64:	23fc      	movs	r3, #252	; 0xfc
 800ac66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac6a:	e00d      	b.n	800ac88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac74:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fedb 	bl	800ba38 <VL53L1_set_timeouts_us>
 800ac82:	4603      	mov	r3, r0
 800ac84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800ac88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800ac96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aca6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3730      	adds	r7, #48	; 0x30
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	00086470 	.word	0x00086470
 800acb8:	00989680 	.word	0x00989680

0800acbc <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08c      	sub	sp, #48	; 0x30
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800acea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800acf2:	f107 031b 	add.w	r3, r7, #27
 800acf6:	461a      	mov	r2, r3
 800acf8:	2105      	movs	r1, #5
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9b1 	bl	800b062 <VL53L1_GetSequenceStepEnable>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800ad06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ad0e:	f107 031a 	add.w	r3, r7, #26
 800ad12:	461a      	mov	r2, r3
 800ad14:	2106      	movs	r1, #6
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f9a3 	bl	800b062 <VL53L1_GetSequenceStepEnable>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800ad22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800ad2a:	f107 0310 	add.w	r3, r7, #16
 800ad2e:	f107 0214 	add.w	r2, r7, #20
 800ad32:	f107 010c 	add.w	r1, r7, #12
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 feb6 	bl	800baa8 <VL53L1_get_timeouts_us>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800ad42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d156      	bne.n	800adf8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ad50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800ad54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d02a      	beq.n	800adb2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	dc47      	bgt.n	800adf0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d012      	beq.n	800ad8a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d143      	bne.n	800adf0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ad68:	7efb      	ldrb	r3, [r7, #27]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d002      	beq.n	800ad74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800ad6e:	7ebb      	ldrb	r3, [r7, #26]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d105      	bne.n	800ad80 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800ad7e:	e03c      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ad86:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ad88:	e037      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ad8a:	7efb      	ldrb	r3, [r7, #27]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d002      	beq.n	800ad96 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800ad90:	7ebb      	ldrb	r3, [r7, #26]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d106      	bne.n	800ada4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800ad9c:	3334      	adds	r3, #52	; 0x34
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800ada2:	e02a      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800adaa:	3330      	adds	r3, #48	; 0x30
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800adb0:	e023      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800adb2:	23f5      	movs	r3, #245	; 0xf5
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800adb6:	f107 0308 	add.w	r3, r7, #8
 800adba:	461a      	mov	r2, r3
 800adbc:	f248 0136 	movw	r1, #32822	; 0x8036
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 fe9b 	bl	800cafc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dd07      	ble.n	800addc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	22f5      	movs	r2, #245	; 0xf5
 800add0:	fb02 f303 	mul.w	r3, r2, r3
 800add4:	461a      	mov	r2, r3
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	4413      	add	r3, r2
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ade2:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800adee:	e004      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800adf0:	23f8      	movs	r3, #248	; 0xf8
 800adf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adf6:	e000      	b.n	800adfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800adf8:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800adfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d102      	bne.n	800ae08 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae06:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ae08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3730      	adds	r7, #48	; 0x30
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	019b      	lsls	r3, r3, #6
 800ae2a:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800ae2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae30:	099b      	lsrs	r3, r3, #6
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	4413      	add	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fdad 	bl	800b99a <VL53L1_set_inter_measurement_period_ms>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800ae44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	10624dd3 	.word	0x10624dd3

0800ae54 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fdbf 	bl	800b9ec <VL53L1_get_inter_measurement_period_ms>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	019b      	lsls	r3, r3, #6
 800ae78:	4907      	ldr	r1, [pc, #28]	; (800ae98 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800ae7a:	fba1 1303 	umull	r1, r3, r1, r3
 800ae7e:	099b      	lsrs	r3, r3, #6
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800ae8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	10624dd3 	.word	0x10624dd3

0800ae9c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	460b      	mov	r3, r1
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800aeae:	897b      	ldrh	r3, [r7, #10]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <SetLimitValue+0x1e>
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d009      	beq.n	800aecc <SetLimitValue+0x30>
 800aeb8:	e011      	b.n	800aede <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	0b9b      	lsrs	r3, r3, #14
 800aebe:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800aec0:	8abb      	ldrh	r3, [r7, #20]
 800aec2:	4619      	mov	r1, r3
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f001 f941 	bl	800c14c <VL53L1_set_lite_sigma_threshold>
		break;
 800aeca:	e00a      	b.n	800aee2 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	0a5b      	lsrs	r3, r3, #9
 800aed0:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800aed2:	8abb      	ldrh	r3, [r7, #20]
 800aed4:	4619      	mov	r1, r3
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f001 f964 	bl	800c1a4 <VL53L1_set_lite_min_count_rate>
		break;
 800aedc:	e001      	b.n	800aee2 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aede:	23fc      	movs	r3, #252	; 0xfc
 800aee0:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	807b      	strh	r3, [r7, #2]
 800aefa:	4613      	mov	r3, r2
 800aefc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d902      	bls.n	800af12 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800af0c:	23fc      	movs	r3, #252	; 0xfc
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	e014      	b.n	800af3c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800af12:	787b      	ldrb	r3, [r7, #1]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	60bb      	str	r3, [r7, #8]
 800af1c:	e006      	b.n	800af2c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800af1e:	887b      	ldrh	r3, [r7, #2]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	33e0      	adds	r3, #224	; 0xe0
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800af2c:	887b      	ldrh	r3, [r7, #2]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff ffb2 	bl	800ae9c <SetLimitValue>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800af3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10c      	bne.n	800af5e <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af44:	787b      	ldrb	r3, [r7, #1]
 800af46:	2b00      	cmp	r3, #0
 800af48:	bf14      	ite	ne
 800af4a:	2301      	movne	r3, #1
 800af4c:	2300      	moveq	r3, #0
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	887b      	ldrh	r3, [r7, #2]
 800af52:	4611      	mov	r1, r2
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	4413      	add	r3, r2
 800af58:	460a      	mov	r2, r1
 800af5a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800af5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b087      	sub	sp, #28
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	460b      	mov	r3, r1
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800af78:	2300      	movs	r3, #0
 800af7a:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800af7c:	897b      	ldrh	r3, [r7, #10]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d905      	bls.n	800af8e <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800af82:	23fc      	movs	r3, #252	; 0xfc
 800af84:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	e008      	b.n	800afa0 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800af8e:	897b      	ldrh	r3, [r7, #10]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	4413      	add	r3, r2
 800af94:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800af98:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7dba      	ldrb	r2, [r7, #22]
 800af9e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800afa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	460b      	mov	r3, r1
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800afc6:	897b      	ldrh	r3, [r7, #10]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <VL53L1_GetLimitCheckValue+0x22>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d00c      	beq.n	800afea <VL53L1_GetLimitCheckValue+0x3a>
 800afd0:	e017      	b.n	800b002 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800afd2:	f107 0314 	add.w	r3, r7, #20
 800afd6:	4619      	mov	r1, r3
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f001 f8a1 	bl	800c120 <VL53L1_get_lite_sigma_threshold>
 800afde:	4603      	mov	r3, r0
 800afe0:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800afe2:	8abb      	ldrh	r3, [r7, #20]
 800afe4:	039b      	lsls	r3, r3, #14
 800afe6:	61bb      	str	r3, [r7, #24]
		break;
 800afe8:	e00d      	b.n	800b006 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800afea:	f107 0316 	add.w	r3, r7, #22
 800afee:	4619      	mov	r1, r3
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f001 f8c1 	bl	800c178 <VL53L1_get_lite_min_count_rate>
 800aff6:	4603      	mov	r3, r0
 800aff8:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800affa:	8afb      	ldrh	r3, [r7, #22]
 800affc:	025b      	lsls	r3, r3, #9
 800affe:	61bb      	str	r3, [r7, #24]
		break;
 800b000:	e001      	b.n	800b006 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b002:	23fc      	movs	r3, #252	; 0xfc
 800b004:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b006:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d123      	bne.n	800b056 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d110      	bne.n	800b036 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b014:	897b      	ldrh	r3, [r7, #10]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	33e0      	adds	r3, #224	; 0xe0
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b028:	897b      	ldrh	r3, [r7, #10]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4413      	add	r3, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b034:	e00f      	b.n	800b056 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b03c:	897b      	ldrh	r3, [r7, #10]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	33e0      	adds	r3, #224	; 0xe0
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b04a:	897b      	ldrh	r3, [r7, #10]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4413      	add	r3, r2
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b056:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	460b      	mov	r3, r1
 800b06c:	607a      	str	r2, [r7, #4]
 800b06e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b070:	2300      	movs	r3, #0
 800b072:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4619      	mov	r1, r3
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fd7f 	bl	800bb7e <VL53L1_get_sequence_config_bit>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b084:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b098:	2300      	movs	r3, #0
 800b09a:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	789b      	ldrb	r3, [r3, #2]
 800b0a0:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800b0a2:	7dbb      	ldrb	r3, [r7, #22]
 800b0a4:	2b40      	cmp	r3, #64	; 0x40
 800b0a6:	d002      	beq.n	800b0ae <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fa6b 	bl	800b584 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b0b4:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800b0b6:	7d7b      	ldrb	r3, [r7, #21]
 800b0b8:	2b63      	cmp	r3, #99	; 0x63
 800b0ba:	dc12      	bgt.n	800b0e2 <VL53L1_StartMeasurement+0x52>
 800b0bc:	2b62      	cmp	r3, #98	; 0x62
 800b0be:	da0d      	bge.n	800b0dc <VL53L1_StartMeasurement+0x4c>
 800b0c0:	2b05      	cmp	r3, #5
 800b0c2:	dc0e      	bgt.n	800b0e2 <VL53L1_StartMeasurement+0x52>
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	da09      	bge.n	800b0dc <VL53L1_StartMeasurement+0x4c>
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	dc02      	bgt.n	800b0d2 <VL53L1_StartMeasurement+0x42>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da05      	bge.n	800b0dc <VL53L1_StartMeasurement+0x4c>
 800b0d0:	e007      	b.n	800b0e2 <VL53L1_StartMeasurement+0x52>
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d105      	bne.n	800b0e2 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	75fb      	strb	r3, [r7, #23]
		break;
 800b0da:	e004      	b.n	800b0e6 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b0dc:	23f2      	movs	r3, #242	; 0xf2
 800b0de:	75fb      	strb	r3, [r7, #23]
		break;
 800b0e0:	e001      	b.n	800b0e6 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b0e2:	23fd      	movs	r3, #253	; 0xfd
 800b0e4:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b0e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d11f      	bne.n	800b12e <VL53L1_StartMeasurement+0x9e>
 800b0ee:	7dbb      	ldrb	r3, [r7, #22]
 800b0f0:	2b40      	cmp	r3, #64	; 0x40
 800b0f2:	d11c      	bne.n	800b12e <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b0f4:	f107 0310 	add.w	r3, r7, #16
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fdde 	bl	800acbc <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b100:	4603      	mov	r3, r0
 800b102:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	4a17      	ldr	r2, [pc, #92]	; (800b164 <VL53L1_StartMeasurement+0xd4>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	099b      	lsrs	r3, r3, #6
 800b10e:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b110:	f107 030c 	add.w	r3, r7, #12
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fe9c 	bl	800ae54 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b11c:	4603      	mov	r3, r0
 800b11e:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	1d1a      	adds	r2, r3, #4
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	429a      	cmp	r2, r3
 800b128:	d901      	bls.n	800b12e <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b12a:	23fc      	movs	r3, #252	; 0xfc
 800b12c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d107      	bne.n	800b146 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b136:	7dbb      	ldrb	r3, [r7, #22]
 800b138:	2206      	movs	r2, #6
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f001 f867 	bl	800c210 <VL53L1_init_and_start_range>
 800b142:	4603      	mov	r3, r0
 800b144:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d103      	bne.n	800b156 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2204      	movs	r2, #4
 800b152:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	10624dd3 	.word	0x10624dd3

0800b168 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	789b      	ldrb	r3, [r3, #2]
 800b178:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f001 fb87 	bl	800c892 <VL53L1_clear_interrupt_and_enable_next_range>
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b1a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f004 fb18 	bl	800f7da <VL53L1_poll_for_range_completion>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b08d      	sub	sp, #52	; 0x34
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	603a      	str	r2, [r7, #0]
 800b1c6:	71fb      	strb	r3, [r7, #7]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b1cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b1d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b1d2:	231e      	movs	r3, #30
 800b1d4:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b1d6:	4b33      	ldr	r3, [pc, #204]	; (800b2a4 <ComputeRQL+0xe8>)
 800b1d8:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b1da:	4b33      	ldr	r3, [pc, #204]	; (800b2a8 <ComputeRQL+0xec>)
 800b1dc:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b1de:	f641 139a 	movw	r3, #6554	; 0x199a
 800b1e2:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <ComputeRQL+0x36>
		returnvalue = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1f0:	e04f      	b.n	800b292 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b1f2:	79bb      	ldrb	r3, [r7, #6]
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	d103      	bne.n	800b200 <ComputeRQL+0x44>
		returnvalue = 50;
 800b1f8:	2332      	movs	r3, #50	; 0x32
 800b1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1fe:	e048      	b.n	800b292 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b206:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b20a:	429a      	cmp	r2, r3
 800b20c:	dd03      	ble.n	800b216 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b20e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b210:	041b      	lsls	r3, r3, #16
 800b212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b214:	e007      	b.n	800b226 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b21c:	461a      	mov	r2, r3
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	fb02 f303 	mul.w	r3, r2, r3
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d020      	beq.n	800b26e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b230:	461a      	mov	r2, r3
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	4413      	add	r3, r2
 800b242:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	041b      	lsls	r3, r3, #16
 800b252:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d804      	bhi.n	800b266 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	62bb      	str	r3, [r7, #40]	; 0x28
 800b264:	e006      	b.n	800b274 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b266:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b26a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b26c:	e002      	b.n	800b274 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b26e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	0c1b      	lsrs	r3, r3, #16
 800b278:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	2b32      	cmp	r3, #50	; 0x32
 800b27e:	d905      	bls.n	800b28c <ComputeRQL+0xd0>
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	2b64      	cmp	r3, #100	; 0x64
 800b284:	bf28      	it	cs
 800b286:	2364      	movcs	r3, #100	; 0x64
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	e000      	b.n	800b28e <ComputeRQL+0xd2>
 800b28c:	2332      	movs	r3, #50	; 0x32
 800b28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b296:	4618      	mov	r0, r3
 800b298:	3734      	adds	r7, #52	; 0x34
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	0075b333 	.word	0x0075b333
 800b2a8:	0030cccd 	.word	0x0030cccd

0800b2ac <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	3b04      	subs	r3, #4
 800b2ba:	2b0f      	cmp	r3, #15
 800b2bc:	d83d      	bhi.n	800b33a <ConvertStatusLite+0x8e>
 800b2be:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <ConvertStatusLite+0x18>)
 800b2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c4:	0800b317 	.word	0x0800b317
 800b2c8:	0800b311 	.word	0x0800b311
 800b2cc:	0800b31d 	.word	0x0800b31d
 800b2d0:	0800b323 	.word	0x0800b323
 800b2d4:	0800b32f 	.word	0x0800b32f
 800b2d8:	0800b335 	.word	0x0800b335
 800b2dc:	0800b33b 	.word	0x0800b33b
 800b2e0:	0800b33b 	.word	0x0800b33b
 800b2e4:	0800b329 	.word	0x0800b329
 800b2e8:	0800b33b 	.word	0x0800b33b
 800b2ec:	0800b33b 	.word	0x0800b33b
 800b2f0:	0800b33b 	.word	0x0800b33b
 800b2f4:	0800b33b 	.word	0x0800b33b
 800b2f8:	0800b33b 	.word	0x0800b33b
 800b2fc:	0800b305 	.word	0x0800b305
 800b300:	0800b30b 	.word	0x0800b30b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b304:	230a      	movs	r3, #10
 800b306:	73fb      	strb	r3, [r7, #15]
		break;
 800b308:	e019      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b30a:	2306      	movs	r3, #6
 800b30c:	73fb      	strb	r3, [r7, #15]
		break;
 800b30e:	e016      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b310:	2304      	movs	r3, #4
 800b312:	73fb      	strb	r3, [r7, #15]
		break;
 800b314:	e013      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b316:	2302      	movs	r3, #2
 800b318:	73fb      	strb	r3, [r7, #15]
		break;
 800b31a:	e010      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b31c:	2301      	movs	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
		break;
 800b320:	e00d      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b322:	2307      	movs	r3, #7
 800b324:	73fb      	strb	r3, [r7, #15]
		break;
 800b326:	e00a      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b328:	2309      	movs	r3, #9
 800b32a:	73fb      	strb	r3, [r7, #15]
		break;
 800b32c:	e007      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b32e:	2303      	movs	r3, #3
 800b330:	73fb      	strb	r3, [r7, #15]
		break;
 800b332:	e004      	b.n	800b33e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
		break;
 800b338:	e001      	b.n	800b33e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b33a:	23ff      	movs	r3, #255	; 0xff
 800b33c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08c      	sub	sp, #48	; 0x30
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	72fb      	strb	r3, [r7, #11]
 800b35a:	4613      	mov	r3, r2
 800b35c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b37a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff ff1a 	bl	800b1bc <ComputeRQL>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b394:	025b      	lsls	r3, r3, #9
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b39c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b3a2:	025b      	lsls	r3, r3, #9
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3aa:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b3b8:	025b      	lsls	r3, r3, #9
 800b3ba:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	6a3a      	ldr	r2, [r7, #32]
 800b3c0:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b3d2:	7abb      	ldrb	r3, [r7, #10]
 800b3d4:	2b11      	cmp	r3, #17
 800b3d6:	d009      	beq.n	800b3ec <SetSimpleData+0xa0>
 800b3d8:	2b11      	cmp	r3, #17
 800b3da:	dc0f      	bgt.n	800b3fc <SetSimpleData+0xb0>
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	dc02      	bgt.n	800b3e6 <SetSimpleData+0x9a>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dc03      	bgt.n	800b3ec <SetSimpleData+0xa0>
 800b3e4:	e00a      	b.n	800b3fc <SetSimpleData+0xb0>
 800b3e6:	2b0d      	cmp	r3, #13
 800b3e8:	d004      	beq.n	800b3f4 <SetSimpleData+0xa8>
 800b3ea:	e007      	b.n	800b3fc <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	2205      	movs	r2, #5
 800b3f0:	76da      	strb	r2, [r3, #27]
		break;
 800b3f2:	e006      	b.n	800b402 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	220d      	movs	r2, #13
 800b3f8:	76da      	strb	r2, [r3, #27]
		break;
 800b3fa:	e002      	b.n	800b402 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	2200      	movs	r2, #0
 800b400:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	7edb      	ldrb	r3, [r3, #27]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d108      	bne.n	800b41c <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b40a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff ff4c 	bl	800b2ac <ConvertStatusLite>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b420:	025b      	lsls	r3, r3, #9
 800b422:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a3a      	ldr	r2, [r7, #32]
 800b428:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b430:	025b      	lsls	r3, r3, #9
 800b432:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	461a      	mov	r2, r3
 800b442:	2100      	movs	r1, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7ff fdb3 	bl	800afb0 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b44a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b44e:	2b06      	cmp	r3, #6
 800b450:	bf0c      	ite	eq
 800b452:	2301      	moveq	r3, #1
 800b454:	2300      	movne	r3, #0
 800b456:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b458:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b45a:	f107 0319 	add.w	r3, r7, #25
 800b45e:	461a      	mov	r2, r3
 800b460:	2100      	movs	r1, #0
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff fd81 	bl	800af6a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b468:	7e7b      	ldrb	r3, [r7, #25]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d104      	bne.n	800b478 <SetSimpleData+0x12c>
 800b46e:	7ffb      	ldrb	r3, [r7, #31]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <SetSimpleData+0x12c>
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <SetSimpleData+0x12e>
 800b478:	2300      	movs	r3, #0
 800b47a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	7fba      	ldrb	r2, [r7, #30]
 800b480:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b484:	f107 0314 	add.w	r3, r7, #20
 800b488:	461a      	mov	r2, r3
 800b48a:	2101      	movs	r1, #1
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff fd8f 	bl	800afb0 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b492:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b496:	2b04      	cmp	r3, #4
 800b498:	bf0c      	ite	eq
 800b49a:	2301      	moveq	r3, #1
 800b49c:	2300      	movne	r3, #0
 800b49e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b4a0:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b4a2:	f107 0319 	add.w	r3, r7, #25
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fd5d 	bl	800af6a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b4b0:	7e7b      	ldrb	r3, [r7, #25]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d104      	bne.n	800b4c0 <SetSimpleData+0x174>
 800b4b6:	7f7b      	ldrb	r3, [r7, #29]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <SetSimpleData+0x174>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e000      	b.n	800b4c2 <SetSimpleData+0x176>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	7fba      	ldrb	r2, [r7, #30]
 800b4c8:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	8b1b      	ldrh	r3, [r3, #24]
 800b4d0:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	7edb      	ldrb	r3, [r3, #27]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d110      	bne.n	800b4fc <SetSimpleData+0x1b0>
 800b4da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	da0c      	bge.n	800b4fc <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b4e2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b4e6:	4b08      	ldr	r3, [pc, #32]	; (800b508 <SetSimpleData+0x1bc>)
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	da03      	bge.n	800b4f6 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	220e      	movs	r2, #14
 800b4f2:	76da      	strb	r2, [r3, #27]
 800b4f4:	e002      	b.n	800b4fc <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b4fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b500:	4618      	mov	r0, r3
 800b502:	3730      	adds	r7, #48	; 0x30
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000134 	.word	0x20000134

0800b50c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b0a8      	sub	sp, #160	; 0xa0
 800b510:	af02      	add	r7, sp, #8
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b516:	2300      	movs	r3, #0
 800b518:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b51c:	f107 0308 	add.w	r3, r7, #8
 800b520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b524:	221c      	movs	r2, #28
 800b526:	21ff      	movs	r1, #255	; 0xff
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f004 fd89 	bl	8010040 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b52e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b532:	2102      	movs	r1, #2
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 f93c 	bl	800c7b2 <VL53L1_get_device_results>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b540:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b544:	2b00      	cmp	r3, #0
 800b546:	d117      	bne.n	800b578 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b54c:	789a      	ldrb	r2, [r3, #2]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b556:	3304      	adds	r3, #4
 800b558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b55c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b560:	78da      	ldrb	r2, [r3, #3]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b56a:	2101      	movs	r1, #1
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff feed 	bl	800b34c <SetSimpleData>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b578:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3798      	adds	r7, #152	; 0x98
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b0c6      	sub	sp, #280	; 0x118
 800b588:	af00      	add	r7, sp, #0
 800b58a:	1d3b      	adds	r3, r7, #4
 800b58c:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b58e:	2300      	movs	r3, #0
 800b590:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b59a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d108      	bne.n	800b5b4 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b5a2:	1d3b      	adds	r3, r7, #4
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2185      	movs	r1, #133	; 0x85
 800b5a8:	6818      	ldr	r0, [r3, #0]
 800b5aa:	f004 f9f1 	bl	800f990 <VL53L1_WrByte>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b5b4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d103      	bne.n	800b5c4 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b5bc:	1d3b      	adds	r3, r7, #4
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	f002 fce1 	bl	800df86 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b5c4:	4b65      	ldr	r3, [pc, #404]	; (800b75c <VL53L1_LoadPatch+0x1d8>)
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d81b      	bhi.n	800b60c <VL53L1_LoadPatch+0x88>
 800b5d4:	a201      	add	r2, pc, #4	; (adr r2, 800b5dc <VL53L1_LoadPatch+0x58>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b5ed 	.word	0x0800b5ed
 800b5e0:	0800b5f5 	.word	0x0800b5f5
 800b5e4:	0800b5fd 	.word	0x0800b5fd
 800b5e8:	0800b605 	.word	0x0800b605

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b5f2:	e00e      	b.n	800b612 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b5fa:	e00a      	b.n	800b612 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b5fc:	2320      	movs	r3, #32
 800b5fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b602:	e006      	b.n	800b612 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b60a:	e002      	b.n	800b612 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b612:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b616:	2b00      	cmp	r3, #0
 800b618:	d125      	bne.n	800b666 <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b61a:	f107 030c 	add.w	r3, r7, #12
 800b61e:	2229      	movs	r2, #41	; 0x29
 800b620:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b622:	f107 030c 	add.w	r3, r7, #12
 800b626:	22c9      	movs	r2, #201	; 0xc9
 800b628:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b62a:	f107 030c 	add.w	r3, r7, #12
 800b62e:	220e      	movs	r2, #14
 800b630:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b632:	f107 030c 	add.w	r3, r7, #12
 800b636:	2240      	movs	r2, #64	; 0x40
 800b638:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b63a:	f107 030c 	add.w	r3, r7, #12
 800b63e:	2228      	movs	r2, #40	; 0x28
 800b640:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b642:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b646:	b2da      	uxtb	r2, r3
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b64e:	f107 020c 	add.w	r2, r7, #12
 800b652:	1d38      	adds	r0, r7, #4
 800b654:	2306      	movs	r3, #6
 800b656:	f240 4176 	movw	r1, #1142	; 0x476
 800b65a:	6800      	ldr	r0, [r0, #0]
 800b65c:	f004 f92c 	bl	800f8b8 <VL53L1_WriteMulti>
 800b660:	4603      	mov	r3, r0
 800b662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b666:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d123      	bne.n	800b6b6 <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	2203      	movs	r2, #3
 800b674:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b676:	f107 030c 	add.w	r3, r7, #12
 800b67a:	226d      	movs	r2, #109	; 0x6d
 800b67c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b67e:	f107 030c 	add.w	r3, r7, #12
 800b682:	2203      	movs	r2, #3
 800b684:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b686:	f107 030c 	add.w	r3, r7, #12
 800b68a:	226f      	movs	r2, #111	; 0x6f
 800b68c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b68e:	f107 030c 	add.w	r3, r7, #12
 800b692:	2207      	movs	r2, #7
 800b694:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b696:	f107 030c 	add.w	r3, r7, #12
 800b69a:	2229      	movs	r2, #41	; 0x29
 800b69c:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b69e:	f107 020c 	add.w	r2, r7, #12
 800b6a2:	1d38      	adds	r0, r7, #4
 800b6a4:	2306      	movs	r3, #6
 800b6a6:	f240 4196 	movw	r1, #1174	; 0x496
 800b6aa:	6800      	ldr	r0, [r0, #0]
 800b6ac:	f004 f904 	bl	800f8b8 <VL53L1_WriteMulti>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b6b6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d113      	bne.n	800b6e6 <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b6c6:	f107 030c 	add.w	r3, r7, #12
 800b6ca:	2207      	movs	r2, #7
 800b6cc:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b6ce:	f107 020c 	add.w	r2, r7, #12
 800b6d2:	1d38      	adds	r0, r7, #4
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	f240 4172 	movw	r1, #1138	; 0x472
 800b6da:	6800      	ldr	r0, [r0, #0]
 800b6dc:	f004 f8ec 	bl	800f8b8 <VL53L1_WriteMulti>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b6e6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d113      	bne.n	800b716 <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b6ee:	f107 030c 	add.w	r3, r7, #12
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b6f6:	f107 030c 	add.w	r3, r7, #12
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b6fe:	f107 020c 	add.w	r2, r7, #12
 800b702:	1d38      	adds	r0, r7, #4
 800b704:	2302      	movs	r3, #2
 800b706:	f240 4174 	movw	r1, #1140	; 0x474
 800b70a:	6800      	ldr	r0, [r0, #0]
 800b70c:	f004 f8d4 	bl	800f8b8 <VL53L1_WriteMulti>
 800b710:	4603      	mov	r3, r0
 800b712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b716:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	2201      	movs	r2, #1
 800b722:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	f004 f932 	bl	800f990 <VL53L1_WrByte>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b732:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b736:	2b00      	cmp	r3, #0
 800b738:	d108      	bne.n	800b74c <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b73a:	1d3b      	adds	r3, r7, #4
 800b73c:	2201      	movs	r2, #1
 800b73e:	2185      	movs	r1, #133	; 0x85
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f004 f925 	bl	800f990 <VL53L1_WrByte>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b74c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b750:	4618      	mov	r0, r3
 800b752:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000134 	.word	0x20000134

0800b760 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af04      	add	r7, sp, #16
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800b774:	2162      	movs	r1, #98	; 0x62
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f002 f8bf 	bl	800d8fa <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2201      	movs	r2, #1
 800b786:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2200      	movs	r2, #0
 800b78c:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2201      	movs	r2, #1
 800b792:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2201      	movs	r2, #1
 800b798:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7a0:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b7a8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b7b0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2264      	movs	r2, #100	; 0x64
 800b7b6:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b7be:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f240 72db 	movw	r2, #2011	; 0x7db
 800b7ce:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f002 f875 	bl	800d8c2 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d008      	beq.n	800b7f0 <VL53L1_data_init+0x90>
 800b7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d104      	bne.n	800b7f0 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f857 	bl	800b89a <VL53L1_read_p2p_data>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f001 fba4 	bl	800cf44 <VL53L1_init_refspadchar_config_struct>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b806:	4618      	mov	r0, r3
 800b808:	f001 fbc0 	bl	800cf8c <VL53L1_init_ssc_config_struct>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f001 fbd5 	bl	800cfce <VL53L1_init_xtalk_config_struct>
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 fc2f 	bl	800d092 <VL53L1_init_offset_cal_config_struct>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	33a4      	adds	r3, #164	; 0xa4
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 fc4f 	bl	800d0e0 <VL53L1_init_tuning_parm_storage_struct>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800b846:	2120      	movs	r1, #32
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fcc1 	bl	800c1d0 <VL53L1_set_vhv_loopbound>
 800b84e:	4603      	mov	r3, r0
 800b850:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800b852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d116      	bne.n	800b888 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	7858      	ldrb	r0, [r3, #1]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	8b1c      	ldrh	r4, [r3, #24]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	689d      	ldr	r5, [r3, #8]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	6912      	ldr	r2, [r2, #16]
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	6949      	ldr	r1, [r1, #20]
 800b872:	9102      	str	r1, [sp, #8]
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	462b      	mov	r3, r5
 800b87a:	4622      	mov	r2, r4
 800b87c:	4601      	mov	r1, r0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fad8 	bl	800be34 <VL53L1_set_preset_mode>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f002 fdb5 	bl	800e3f8 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800b88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bdb0      	pop	{r4, r5, r7, pc}

0800b89a <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d108      	bne.n	800b8c4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f002 ff39 	bl	800e732 <VL53L1_get_static_nvm_managed>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800b8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d107      	bne.n	800b8dc <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3342      	adds	r3, #66	; 0x42
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f003 f86b 	bl	800e9ae <VL53L1_get_customer_nvm_managed>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800b8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d115      	bne.n	800b910 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f003 ff1d 	bl	800f72c <VL53L1_get_nvm_copy_data>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800b8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d108      	bne.n	800b910 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	33f0      	adds	r3, #240	; 0xf0
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f002 f957 	bl	800dbbe <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800b910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d109      	bne.n	800b92c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b91e:	461a      	mov	r2, r3
 800b920:	21de      	movs	r1, #222	; 0xde
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f004 f892 	bl	800fa4c <VL53L1_RdWord>
 800b928:	4603      	mov	r3, r0
 800b92a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b936:	d204      	bcs.n	800b942 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800b93e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800b942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d107      	bne.n	800b95a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	339e      	adds	r3, #158	; 0x9e
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f990 	bl	800bc76 <VL53L1_get_mode_mitigation_roi>
 800b956:	4603      	mov	r3, r0
 800b958:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d114      	bne.n	800b98e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10f      	bne.n	800b98e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b974:	011b      	lsls	r3, r3, #4
 800b976:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800b98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b9b6:	23f1      	movs	r3, #241	; 0xf1
 800b9b8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800b9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10c      	bne.n	800b9dc <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b9ce:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ba08:	23f1      	movs	r3, #241	; 0xf1
 800ba0a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800ba20:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800ba28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ba58:	23f1      	movs	r3, #241	; 0xf1
 800ba5a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800ba5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d11b      	bne.n	800ba9c <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800ba88:	9201      	str	r2, [sp, #4]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	68b8      	ldr	r0, [r7, #8]
 800ba94:	f002 fbe2 	bl	800e25c <VL53L1_calc_timeout_register_values>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bab6:	2300      	movs	r3, #0
 800bab8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bad0:	23f1      	movs	r3, #241	; 0xf1
 800bad2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d14a      	bne.n	800bb72 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800bae8:	4619      	mov	r1, r3
 800baea:	4610      	mov	r0, r2
 800baec:	f002 fa5d 	bl	800dfaa <VL53L1_calc_macro_period_us>
 800baf0:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800baf8:	6979      	ldr	r1, [r7, #20]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f002 fb15 	bl	800e12a <VL53L1_calc_timeout_us>
 800bb00:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bb0c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bb0e:	8a7b      	ldrh	r3, [r7, #18]
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bb1a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bb1c:	4413      	add	r3, r2
 800bb1e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bb20:	8a7b      	ldrh	r3, [r7, #18]
 800bb22:	6979      	ldr	r1, [r7, #20]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f002 fb3e 	bl	800e1a6 <VL53L1_calc_decoded_timeout_us>
 800bb2a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bb36:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bb38:	8a7b      	ldrh	r3, [r7, #18]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bb44:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bb46:	4413      	add	r3, r2
 800bb48:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bb4a:	8a7b      	ldrh	r3, [r7, #18]
 800bb4c:	6979      	ldr	r1, [r7, #20]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f002 fb29 	bl	800e1a6 <VL53L1_calc_decoded_timeout_us>
 800bb54:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bb72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	460b      	mov	r3, r1
 800bb88:	607a      	str	r2, [r7, #4]
 800bb8a:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800bb94:	2301      	movs	r3, #1
 800bb96:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	2b07      	cmp	r3, #7
 800bb9c:	d81c      	bhi.n	800bbd8 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800bb9e:	7afb      	ldrb	r3, [r7, #11]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	2201      	movs	r2, #1
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800bbb4:	7dbb      	ldrb	r3, [r7, #22]
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800bbbe:	7afb      	ldrb	r3, [r7, #11]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	fa42 f303 	asr.w	r3, r2, r3
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	e001      	b.n	800bbdc <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bbd8:	23fc      	movs	r3, #252	; 0xfc
 800bbda:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800bbdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	371c      	adds	r7, #28
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	7858      	ldrb	r0, [r3, #1]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	7819      	ldrb	r1, [r3, #0]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	f002 fb9e 	bl	800e34e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	7898      	ldrb	r0, [r3, #2]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	78d9      	ldrb	r1, [r3, #3]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800bc20:	461a      	mov	r2, r3
 800bc22:	f002 fbd3 	bl	800e3cc <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800bc26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	f002 fc8a 	bl	800e56a <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	1c99      	adds	r1, r3, #2
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	3303      	adds	r3, #3
 800bc64:	461a      	mov	r2, r3
 800bc66:	f002 fb99 	bl	800e39c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800bc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800bc9a:	f107 020e 	add.w	r2, r7, #14
 800bc9e:	f107 010d 	add.w	r1, r7, #13
 800bca2:	4618      	mov	r0, r3
 800bca4:	f002 fc61 	bl	800e56a <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800bca8:	7bba      	ldrb	r2, [r7, #14]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800bcae:	7b7a      	ldrb	r2, [r7, #13]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800bcba:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	091b      	lsrs	r3, r3, #4
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	f003 030f 	and.w	r3, r3, #15
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800bcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b087      	sub	sp, #28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	607a      	str	r2, [r7, #4]
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	460b      	mov	r3, r1
 800bcee:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800bcf8:	7afb      	ldrb	r3, [r7, #11]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	2b25      	cmp	r3, #37	; 0x25
 800bcfe:	f200 808e 	bhi.w	800be1e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800bd02:	a201      	add	r2, pc, #4	; (adr r2, 800bd08 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd08:	0800bda1 	.word	0x0800bda1
 800bd0c:	0800bda1 	.word	0x0800bda1
 800bd10:	0800bda1 	.word	0x0800bda1
 800bd14:	0800bda1 	.word	0x0800bda1
 800bd18:	0800bda1 	.word	0x0800bda1
 800bd1c:	0800bdcb 	.word	0x0800bdcb
 800bd20:	0800bdcb 	.word	0x0800bdcb
 800bd24:	0800bdcb 	.word	0x0800bdcb
 800bd28:	0800be1f 	.word	0x0800be1f
 800bd2c:	0800be1f 	.word	0x0800be1f
 800bd30:	0800be1f 	.word	0x0800be1f
 800bd34:	0800be1f 	.word	0x0800be1f
 800bd38:	0800be1f 	.word	0x0800be1f
 800bd3c:	0800be1f 	.word	0x0800be1f
 800bd40:	0800be1f 	.word	0x0800be1f
 800bd44:	0800be1f 	.word	0x0800be1f
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bdcb 	.word	0x0800bdcb
 800bd50:	0800be1f 	.word	0x0800be1f
 800bd54:	0800be1f 	.word	0x0800be1f
 800bd58:	0800be1f 	.word	0x0800be1f
 800bd5c:	0800be1f 	.word	0x0800be1f
 800bd60:	0800be1f 	.word	0x0800be1f
 800bd64:	0800be1f 	.word	0x0800be1f
 800bd68:	0800be1f 	.word	0x0800be1f
 800bd6c:	0800be1f 	.word	0x0800be1f
 800bd70:	0800be1f 	.word	0x0800be1f
 800bd74:	0800be1f 	.word	0x0800be1f
 800bd78:	0800be1f 	.word	0x0800be1f
 800bd7c:	0800be1f 	.word	0x0800be1f
 800bd80:	0800be1f 	.word	0x0800be1f
 800bd84:	0800be1f 	.word	0x0800be1f
 800bd88:	0800be1f 	.word	0x0800be1f
 800bd8c:	0800be1f 	.word	0x0800be1f
 800bd90:	0800be1f 	.word	0x0800be1f
 800bd94:	0800bdf5 	.word	0x0800bdf5
 800bd98:	0800bdf5 	.word	0x0800bdf5
 800bd9c:	0800bdf5 	.word	0x0800bdf5
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	601a      	str	r2, [r3, #0]
	break;
 800bdc8:	e02c      	b.n	800be24 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	601a      	str	r2, [r3, #0]
	break;
 800bdf2:	e017      	b.n	800be24 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	601a      	str	r2, [r3, #0]
	break;
 800be1c:	e002      	b.n	800be24 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800be1e:	23fc      	movs	r3, #252	; 0xfc
 800be20:	75fb      	strb	r3, [r7, #23]
		break;
 800be22:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800be24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b092      	sub	sp, #72	; 0x48
 800be38:	af04      	add	r7, sp, #16
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	607b      	str	r3, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	72fb      	strb	r3, [r7, #11]
 800be42:	4613      	mov	r3, r2
 800be44:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be46:	2300      	movs	r3, #0
 800be48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800be5e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800be6e:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800be76:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	33a4      	adds	r3, #164	; 0xa4
 800be7c:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800be84:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	7afa      	ldrb	r2, [r7, #11]
 800be8a:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be90:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be96:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be9c:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800be9e:	2103      	movs	r1, #3
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f001 fd2a 	bl	800d8fa <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	2b25      	cmp	r3, #37	; 0x25
 800beac:	f200 810c 	bhi.w	800c0c8 <VL53L1_set_preset_mode+0x294>
 800beb0:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <VL53L1_set_preset_mode+0x84>)
 800beb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb6:	bf00      	nop
 800beb8:	0800bf51 	.word	0x0800bf51
 800bebc:	0800bf6d 	.word	0x0800bf6d
 800bec0:	0800bf89 	.word	0x0800bf89
 800bec4:	0800bfa5 	.word	0x0800bfa5
 800bec8:	0800bfc1 	.word	0x0800bfc1
 800becc:	0800bfdd 	.word	0x0800bfdd
 800bed0:	0800bff9 	.word	0x0800bff9
 800bed4:	0800c015 	.word	0x0800c015
 800bed8:	0800c0c9 	.word	0x0800c0c9
 800bedc:	0800c0c9 	.word	0x0800c0c9
 800bee0:	0800c0c9 	.word	0x0800c0c9
 800bee4:	0800c0c9 	.word	0x0800c0c9
 800bee8:	0800c0c9 	.word	0x0800c0c9
 800beec:	0800c0c9 	.word	0x0800c0c9
 800bef0:	0800c0c9 	.word	0x0800c0c9
 800bef4:	0800c0c9 	.word	0x0800c0c9
 800bef8:	0800c031 	.word	0x0800c031
 800befc:	0800c04d 	.word	0x0800c04d
 800bf00:	0800c0c9 	.word	0x0800c0c9
 800bf04:	0800c0c9 	.word	0x0800c0c9
 800bf08:	0800c0c9 	.word	0x0800c0c9
 800bf0c:	0800c0c9 	.word	0x0800c0c9
 800bf10:	0800c0c9 	.word	0x0800c0c9
 800bf14:	0800c0c9 	.word	0x0800c0c9
 800bf18:	0800c0c9 	.word	0x0800c0c9
 800bf1c:	0800c0c9 	.word	0x0800c0c9
 800bf20:	0800c0c9 	.word	0x0800c0c9
 800bf24:	0800c0c9 	.word	0x0800c0c9
 800bf28:	0800c0c9 	.word	0x0800c0c9
 800bf2c:	0800c0c9 	.word	0x0800c0c9
 800bf30:	0800c0c9 	.word	0x0800c0c9
 800bf34:	0800c0c9 	.word	0x0800c0c9
 800bf38:	0800c0c9 	.word	0x0800c0c9
 800bf3c:	0800c0c9 	.word	0x0800c0c9
 800bf40:	0800c0c9 	.word	0x0800c0c9
 800bf44:	0800c069 	.word	0x0800c069
 800bf48:	0800c089 	.word	0x0800c089
 800bf4c:	0800c0a9 	.word	0x0800c0a9

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf60:	f001 f94d 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800bf64:	4603      	mov	r3, r0
 800bf66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf6a:	e0b1      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf7c:	f001 fa5d 	bl	800d43a <VL53L1_preset_mode_standard_ranging_short_range>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf86:	e0a3      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	9301      	str	r3, [sp, #4]
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf98:	f001 fa90 	bl	800d4bc <VL53L1_preset_mode_standard_ranging_long_range>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bfa2:	e095      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfb4:	f001 fac3 	bl	800d53e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bfbe:	e087      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd0:	f001 fada 	bl	800d588 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bfda:	e079      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfec:	f001 faf1 	bl	800d5d2 <VL53L1_preset_mode_timed_ranging>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bff6:	e06b      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c008:	f001 fb1d 	bl	800d646 <VL53L1_preset_mode_timed_ranging_short_range>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c012:	e05d      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c024:	f001 fb49 	bl	800d6ba <VL53L1_preset_mode_timed_ranging_long_range>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c02e:	e04f      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	9301      	str	r3, [sp, #4]
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c03c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c03e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c040:	f001 fc1d 	bl	800d87e <VL53L1_preset_mode_olt>
 800c044:	4603      	mov	r3, r0
 800c046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c04a:	e041      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c05a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c05c:	f001 fbd9 	bl	800d812 <VL53L1_preset_mode_singleshot_ranging>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c066:	e033      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	9301      	str	r3, [sp, #4]
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c07c:	f001 fb7d 	bl	800d77a <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c086:	e023      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	9302      	str	r3, [sp, #8]
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c09a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c09c:	f001 fb47 	bl	800d72e <VL53L1_preset_mode_low_power_auto_ranging>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c0a6:	e013      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	9302      	str	r3, [sp, #8]
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0bc:	f001 fb83 	bl	800d7c6 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c0c6:	e003      	b.n	800c0d0 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c0c8:	23fc      	movs	r3, #252	; 0xfc
 800c0ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c0ce:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c0d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d105      	bne.n	800c0e4 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	893a      	ldrh	r2, [r7, #8]
 800c0dc:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	893a      	ldrh	r2, [r7, #8]
 800c0e2:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c0e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d108      	bne.n	800c0fe <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fca0 	bl	800ba38 <VL53L1_set_timeouts_us>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c0fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c106:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7ff fc46 	bl	800b99a <VL53L1_set_inter_measurement_period_ms>
 800c10e:	4603      	mov	r3, r0
 800c110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c114:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3738      	adds	r7, #56	; 0x38
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c13c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	887a      	ldrh	r2, [r7, #2]
 800c164:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c168:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c194:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	887a      	ldrh	r2, [r7, #2]
 800c1bc:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c200:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b0d0      	sub	sp, #320	; 0x140
 800c214:	af00      	add	r7, sp, #0
 800c216:	1d3b      	adds	r3, r7, #4
 800c218:	6018      	str	r0, [r3, #0]
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	1cfb      	adds	r3, r7, #3
 800c220:	4602      	mov	r2, r0
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	1cbb      	adds	r3, r7, #2
 800c226:	460a      	mov	r2, r1
 800c228:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c230:	1d3b      	adds	r3, r7, #4
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c238:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c23c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c244:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c248:	3342      	adds	r3, #66	; 0x42
 800c24a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c24e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c252:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c256:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c25a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c25e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c262:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c26a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c26e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c272:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c276:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c27a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c27e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c282:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c286:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c28a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c28e:	332c      	adds	r3, #44	; 0x2c
 800c290:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c2b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2b8:	1cfa      	adds	r2, r7, #3
 800c2ba:	7812      	ldrb	r2, [r2, #0]
 800c2bc:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c2:	791b      	ldrb	r3, [r3, #4]
 800c2c4:	b25b      	sxtb	r3, r3
 800c2c6:	f003 030f 	and.w	r3, r3, #15
 800c2ca:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c2cc:	1cfb      	adds	r3, r7, #3
 800c2ce:	f993 3000 	ldrsb.w	r3, [r3]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	b25b      	sxtb	r3, r3
 800c2d6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2dc:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c2de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2e2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c2e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2ea:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c2ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2f2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c2f6:	2bff      	cmp	r3, #255	; 0xff
 800c2f8:	d104      	bne.n	800c304 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c2fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c308:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d133      	bne.n	800c378 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c310:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c314:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d12d      	bne.n	800c378 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c31c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c320:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c324:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c328:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c32c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c330:	2220      	movs	r2, #32
 800c332:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c336:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c33a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c33e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10c      	bne.n	800c360 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c346:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c34a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c34e:	b29b      	uxth	r3, r3
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	b29b      	uxth	r3, r3
 800c354:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c356:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c35a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c35e:	e004      	b.n	800c36a <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c364:	2200      	movs	r2, #0
 800c366:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c36a:	1cbb      	adds	r3, r7, #2
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b04      	cmp	r3, #4
 800c370:	d802      	bhi.n	800c378 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c372:	1cbb      	adds	r3, r7, #2
 800c374:	2205      	movs	r2, #5
 800c376:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c37c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c380:	2b01      	cmp	r3, #1
 800c382:	d110      	bne.n	800c3a6 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c384:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c388:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d10a      	bne.n	800c3a6 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c394:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c398:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c39c:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c3a0:	1cbb      	adds	r3, r7, #2
 800c3a2:	2206      	movs	r2, #6
 800c3a4:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c3a6:	1cbb      	adds	r3, r7, #2
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	2b05      	cmp	r3, #5
 800c3ae:	d827      	bhi.n	800c400 <VL53L1_init_and_start_range+0x1f0>
 800c3b0:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <VL53L1_init_and_start_range+0x1a8>)
 800c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b6:	bf00      	nop
 800c3b8:	0800c3f9 	.word	0x0800c3f9
 800c3bc:	0800c3f1 	.word	0x0800c3f1
 800c3c0:	0800c3e9 	.word	0x0800c3e9
 800c3c4:	0800c3e1 	.word	0x0800c3e1
 800c3c8:	0800c3d9 	.word	0x0800c3d9
 800c3cc:	0800c3d1 	.word	0x0800c3d1
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3d6:	e017      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c3d8:	230d      	movs	r3, #13
 800c3da:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3de:	e013      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c3e0:	2324      	movs	r3, #36	; 0x24
 800c3e2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3e6:	e00f      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c3e8:	2344      	movs	r3, #68	; 0x44
 800c3ea:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3ee:	e00b      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c3f0:	235a      	movs	r3, #90	; 0x5a
 800c3f2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3f6:	e007      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c3f8:	2371      	movs	r3, #113	; 0x71
 800c3fa:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c3fe:	e003      	b.n	800c408 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c400:	2383      	movs	r3, #131	; 0x83
 800c402:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c406:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c408:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c40c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c410:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c414:	f107 030c 	add.w	r3, r7, #12
 800c418:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c41c:	2300      	movs	r3, #0
 800c41e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c422:	e00b      	b.n	800c43c <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c424:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c432:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c436:	3301      	adds	r3, #1
 800c438:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c43c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c440:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c444:	429a      	cmp	r2, r3
 800c446:	d3ed      	bcc.n	800c424 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c448:	1cbb      	adds	r3, r7, #2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b05      	cmp	r3, #5
 800c44e:	d917      	bls.n	800c480 <VL53L1_init_and_start_range+0x270>
 800c450:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c454:	2b00      	cmp	r3, #0
 800c456:	d113      	bne.n	800c480 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c458:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c45c:	f1c3 0301 	rsb	r3, r3, #1
 800c460:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c464:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c468:	f107 020c 	add.w	r2, r7, #12
 800c46c:	4413      	add	r3, r2
 800c46e:	461a      	mov	r2, r3
 800c470:	210b      	movs	r1, #11
 800c472:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c476:	f002 f8a7 	bl	800e5c8 <VL53L1_i2c_encode_static_nvm_managed>
 800c47a:	4603      	mov	r3, r0
 800c47c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c480:	1cbb      	adds	r3, r7, #2
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	2b04      	cmp	r3, #4
 800c486:	d917      	bls.n	800c4b8 <VL53L1_init_and_start_range+0x2a8>
 800c488:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d113      	bne.n	800c4b8 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c490:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c494:	f1c3 030d 	rsb	r3, r3, #13
 800c498:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c49c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c4a0:	f107 020c 	add.w	r2, r7, #12
 800c4a4:	4413      	add	r3, r2
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	2117      	movs	r1, #23
 800c4aa:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c4ae:	f002 f967 	bl	800e780 <VL53L1_i2c_encode_customer_nvm_managed>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c4b8:	1cbb      	adds	r3, r7, #2
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d917      	bls.n	800c4f0 <VL53L1_init_and_start_range+0x2e0>
 800c4c0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d113      	bne.n	800c4f0 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c4c8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c4cc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c4d0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c4d4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c4d8:	f107 020c 	add.w	r2, r7, #12
 800c4dc:	4413      	add	r3, r2
 800c4de:	461a      	mov	r2, r3
 800c4e0:	2120      	movs	r1, #32
 800c4e2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c4e6:	f002 fa89 	bl	800e9fc <VL53L1_i2c_encode_static_config>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c4f0:	1cbb      	adds	r3, r7, #2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d917      	bls.n	800c528 <VL53L1_init_and_start_range+0x318>
 800c4f8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d113      	bne.n	800c528 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c500:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c504:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c508:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c50c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c510:	f107 020c 	add.w	r2, r7, #12
 800c514:	4413      	add	r3, r2
 800c516:	461a      	mov	r2, r3
 800c518:	2116      	movs	r1, #22
 800c51a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c51e:	f002 fb50 	bl	800ebc2 <VL53L1_i2c_encode_general_config>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c528:	1cbb      	adds	r3, r7, #2
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d917      	bls.n	800c560 <VL53L1_init_and_start_range+0x350>
 800c530:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c534:	2b00      	cmp	r3, #0
 800c536:	d113      	bne.n	800c560 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c538:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c53c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c540:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c544:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c548:	f107 020c 	add.w	r2, r7, #12
 800c54c:	4413      	add	r3, r2
 800c54e:	461a      	mov	r2, r3
 800c550:	2117      	movs	r1, #23
 800c552:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c556:	f002 fbb8 	bl	800ecca <VL53L1_i2c_encode_timing_config>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c560:	1cbb      	adds	r3, r7, #2
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d036      	beq.n	800c5d6 <VL53L1_init_and_start_range+0x3c6>
 800c568:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d132      	bne.n	800c5d6 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c570:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c574:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c578:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c580:	791b      	ldrb	r3, [r3, #4]
 800c582:	f003 0320 	and.w	r3, r3, #32
 800c586:	2b00      	cmp	r3, #0
 800c588:	d017      	beq.n	800c5ba <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c58a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c58e:	789b      	ldrb	r3, [r3, #2]
 800c590:	f043 0301 	orr.w	r3, r3, #1
 800c594:	b2da      	uxtb	r2, r3
 800c596:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c59a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c59c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c5a0:	789b      	ldrb	r3, [r3, #2]
 800c5a2:	f043 0301 	orr.w	r3, r3, #1
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c5ac:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c5ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c5b2:	789a      	ldrb	r2, [r3, #2]
 800c5b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c5b8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c5ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c5be:	f107 020c 	add.w	r2, r7, #12
 800c5c2:	4413      	add	r3, r2
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	2112      	movs	r1, #18
 800c5c8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c5cc:	f002 fbff 	bl	800edce <VL53L1_i2c_encode_dynamic_config>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c5d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d113      	bne.n	800c606 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c5de:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c5e2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c5e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c5ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c5ee:	f107 020c 	add.w	r2, r7, #12
 800c5f2:	4413      	add	r3, r2
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	2105      	movs	r1, #5
 800c5f8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c5fc:	f002 fc6c 	bl	800eed8 <VL53L1_i2c_encode_system_control>
 800c600:	4603      	mov	r3, r0
 800c602:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c606:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10c      	bne.n	800c628 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c60e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c612:	f107 020c 	add.w	r2, r7, #12
 800c616:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c61a:	1d38      	adds	r0, r7, #4
 800c61c:	6800      	ldr	r0, [r0, #0]
 800c61e:	f003 f94b 	bl	800f8b8 <VL53L1_WriteMulti>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c628:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c630:	1d3b      	adds	r3, r7, #4
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	f001 f98a 	bl	800d94c <VL53L1_update_ll_driver_rd_state>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c63e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c646:	1d3b      	adds	r3, r7, #4
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	f001 fa52 	bl	800daf2 <VL53L1_update_ll_driver_cfg_state>
 800c64e:	4603      	mov	r3, r0
 800c650:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c654:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c658:	4618      	mov	r0, r3
 800c65a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop

0800c664 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b0c8      	sub	sp, #288	; 0x120
 800c668:	af00      	add	r7, sp, #0
 800c66a:	1d3b      	adds	r3, r7, #4
 800c66c:	6018      	str	r0, [r3, #0]
 800c66e:	460a      	mov	r2, r1
 800c670:	1cfb      	adds	r3, r7, #3
 800c672:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c674:	2300      	movs	r3, #0
 800c676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c67a:	1d3b      	adds	r3, r7, #4
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c682:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c686:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c68a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c68e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c692:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c696:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c69a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c69e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c6a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c6a6:	2388      	movs	r3, #136	; 0x88
 800c6a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c6b8:	1cfb      	adds	r3, r7, #3
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d008      	beq.n	800c6d2 <VL53L1_get_measurement_results+0x6e>
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d10d      	bne.n	800c6e0 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c6c4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c6c8:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c6cc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c6d0:	e00a      	b.n	800c6e8 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c6d2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c6d6:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c6da:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c6de:	e003      	b.n	800c6e8 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c6e0:	232c      	movs	r3, #44	; 0x2c
 800c6e2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c6e6:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c6e8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10c      	bne.n	800c70a <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c6f0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c6f4:	f107 0208 	add.w	r2, r7, #8
 800c6f8:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c6fc:	1d38      	adds	r0, r7, #4
 800c6fe:	6800      	ldr	r0, [r0, #0]
 800c700:	f003 f910 	bl	800f924 <VL53L1_ReadMulti>
 800c704:	4603      	mov	r3, r0
 800c706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c70a:	1cfb      	adds	r3, r7, #3
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d917      	bls.n	800c742 <VL53L1_get_measurement_results+0xde>
 800c712:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c716:	2b00      	cmp	r3, #0
 800c718:	d113      	bne.n	800c742 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c71a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c71e:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c722:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c726:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c72a:	f107 0208 	add.w	r2, r7, #8
 800c72e:	4413      	add	r3, r2
 800c730:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c734:	4619      	mov	r1, r3
 800c736:	2038      	movs	r0, #56	; 0x38
 800c738:	f002 fd60 	bl	800f1fc <VL53L1_i2c_decode_debug_results>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c742:	1cfb      	adds	r3, r7, #3
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d017      	beq.n	800c77a <VL53L1_get_measurement_results+0x116>
 800c74a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d113      	bne.n	800c77a <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c752:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c756:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c75a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c75e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800c762:	f107 0208 	add.w	r2, r7, #8
 800c766:	4413      	add	r3, r2
 800c768:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c76c:	4619      	mov	r1, r3
 800c76e:	2021      	movs	r0, #33	; 0x21
 800c770:	f002 fce3 	bl	800f13a <VL53L1_i2c_decode_core_results>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800c77a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d110      	bne.n	800c7a4 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c788:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800c78c:	f107 0208 	add.w	r2, r7, #8
 800c790:	4413      	add	r3, r2
 800c792:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c796:	4619      	mov	r1, r3
 800c798:	202c      	movs	r0, #44	; 0x2c
 800c79a:	f002 fbd8 	bl	800ef4e <VL53L1_i2c_decode_system_results>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c7a4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b088      	sub	sp, #32
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	60f8      	str	r0, [r7, #12]
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	607a      	str	r2, [r7, #4]
 800c7be:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800c7ce:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c7d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d106      	bne.n	800c7ea <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800c7dc:	7afb      	ldrb	r3, [r7, #11]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff ff3f 	bl	800c664 <VL53L1_get_measurement_results>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800c7ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10c      	bne.n	800c80c <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	f000 f85e 	bl	800c8c8 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c812:	2b01      	cmp	r3, #1
 800c814:	d11f      	bne.n	800c856 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800c816:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10e      	bne.n	800c83c <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800c824:	2b00      	cmp	r3, #0
 800c826:	d109      	bne.n	800c83c <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f001 fe32 	bl	800e492 <VL53L1_low_power_auto_setup_manual_calibration>
 800c82e:	4603      	mov	r3, r0
 800c830:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800c83a:	e00c      	b.n	800c856 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c83c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d108      	bne.n	800c856 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d103      	bne.n	800c856 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	2202      	movs	r2, #2
 800c852:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800c86a:	2284      	movs	r2, #132	; 0x84
 800c86c:	6939      	ldr	r1, [r7, #16]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f003 fbd8 	bl	8010024 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800c874:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d104      	bne.n	800c886 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f001 f8ed 	bl	800da5c <VL53L1_check_ll_driver_rd_state>
 800c882:	4603      	mov	r3, r0
 800c884:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c886:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3720      	adds	r7, #32
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d107      	bne.n	800c8ba <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800c8aa:	78fb      	ldrb	r3, [r7, #3]
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff fcad 	bl	800c210 <VL53L1_init_and_start_range>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800c8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b089      	sub	sp, #36	; 0x24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	78da      	ldrb	r2, [r3, #3]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	77fb      	strb	r3, [r7, #31]
 800c8f4:	e0d0      	b.n	800ca98 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	7ffa      	ldrb	r2, [r7, #31]
 800c8fa:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	2200      	movs	r2, #0
 800c900:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	78db      	ldrb	r3, [r3, #3]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10a      	bne.n	800c920 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	785b      	ldrb	r3, [r3, #1]
 800c90e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800c912:	2b09      	cmp	r3, #9
 800c914:	d104      	bne.n	800c920 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	2213      	movs	r2, #19
 800c91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c91e:	e007      	b.n	800c930 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	f003 031f 	and.w	r3, r3, #31
 800c928:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800c930:	7ffb      	ldrb	r3, [r7, #31]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800c936:	2b01      	cmp	r3, #1
 800c938:	d05d      	beq.n	800c9f6 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800c93a:	e0a7      	b.n	800ca8c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	789b      	ldrb	r3, [r3, #2]
 800c940:	2b07      	cmp	r3, #7
 800c942:	d104      	bne.n	800c94e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	821a      	strh	r2, [r3, #16]
 800c94c:	e00c      	b.n	800c968 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	789b      	ldrb	r3, [r3, #2]
 800c952:	2b08      	cmp	r3, #8
 800c954:	d104      	bne.n	800c960 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	821a      	strh	r2, [r3, #16]
 800c95e:	e003      	b.n	800c968 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	895b      	ldrh	r3, [r3, #10]
 800c984:	015b      	lsls	r3, r3, #5
 800c986:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c98e:	d302      	bcc.n	800c996 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800c990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c994:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	b29a      	uxth	r2, r3
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800c9aa:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	fb02 f303 	mul.w	r3, r2, r3
 800c9b4:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9bc:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	da01      	bge.n	800c9c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800c9c4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c9c8:	12db      	asrs	r3, r3, #11
 800c9ca:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	b21a      	sxth	r2, r3
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	621a      	str	r2, [r3, #32]

			break;
 800c9f4:	e04a      	b.n	800ca8c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca0c:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	8bdb      	ldrh	r3, [r3, #30]
 800ca1a:	015b      	lsls	r3, r3, #5
 800ca1c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca24:	d302      	bcc.n	800ca2c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800ca26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca2a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800ca40:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	fb02 f303 	mul.w	r3, r2, r3
 800ca4a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca52:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da01      	bge.n	800ca5e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800ca5a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ca5e:	12db      	asrs	r3, r3, #11
 800ca60:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	b21a      	sxth	r2, r3
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	621a      	str	r2, [r3, #32]

			break;
 800ca8a:	bf00      	nop
		}

		pdata++;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	3340      	adds	r3, #64	; 0x40
 800ca90:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800ca92:	7ffb      	ldrb	r3, [r7, #31]
 800ca94:	3301      	adds	r3, #1
 800ca96:	77fb      	strb	r3, [r7, #31]
 800ca98:	7ffb      	ldrb	r3, [r7, #31]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	f67f af2b 	bls.w	800c8f6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2200      	movs	r2, #0
 800caa4:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	f003 031f 	and.w	r3, r3, #31
 800caae:	2b11      	cmp	r3, #17
 800cab0:	bf8c      	ite	hi
 800cab2:	2201      	movhi	r2, #1
 800cab4:	2200      	movls	r2, #0
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	2a00      	cmp	r2, #0
 800caba:	d116      	bne.n	800caea <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800cabc:	2201      	movs	r2, #1
 800cabe:	409a      	lsls	r2, r3
 800cac0:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800cac2:	4013      	ands	r3, r2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bf14      	ite	ne
 800cac8:	2301      	movne	r3, #1
 800caca:	2300      	moveq	r3, #0
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00b      	beq.n	800caea <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	785b      	ldrb	r3, [r3, #1]
 800cad6:	f003 031f 	and.w	r3, r3, #31
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800cae8:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800caea:	bf00      	nop
 800caec:	3724      	adds	r7, #36	; 0x24
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	0002200e 	.word	0x0002200e

0800cafc <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	460b      	mov	r3, r1
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800cb12:	897b      	ldrh	r3, [r7, #10]
 800cb14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cb18:	2b38      	cmp	r3, #56	; 0x38
 800cb1a:	f200 8204 	bhi.w	800cf26 <VL53L1_get_tuning_parm+0x42a>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <VL53L1_get_tuning_parm+0x28>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cc09 	.word	0x0800cc09
 800cb28:	0800cc17 	.word	0x0800cc17
 800cb2c:	0800cc25 	.word	0x0800cc25
 800cb30:	0800cc33 	.word	0x0800cc33
 800cb34:	0800cc41 	.word	0x0800cc41
 800cb38:	0800cc4f 	.word	0x0800cc4f
 800cb3c:	0800cc5d 	.word	0x0800cc5d
 800cb40:	0800cc6b 	.word	0x0800cc6b
 800cb44:	0800cc79 	.word	0x0800cc79
 800cb48:	0800cc87 	.word	0x0800cc87
 800cb4c:	0800cc95 	.word	0x0800cc95
 800cb50:	0800cca3 	.word	0x0800cca3
 800cb54:	0800ccb1 	.word	0x0800ccb1
 800cb58:	0800ccbf 	.word	0x0800ccbf
 800cb5c:	0800cccd 	.word	0x0800cccd
 800cb60:	0800ccdb 	.word	0x0800ccdb
 800cb64:	0800cce9 	.word	0x0800cce9
 800cb68:	0800ccf7 	.word	0x0800ccf7
 800cb6c:	0800cd05 	.word	0x0800cd05
 800cb70:	0800cd13 	.word	0x0800cd13
 800cb74:	0800cd21 	.word	0x0800cd21
 800cb78:	0800cd2f 	.word	0x0800cd2f
 800cb7c:	0800cd3d 	.word	0x0800cd3d
 800cb80:	0800cd4b 	.word	0x0800cd4b
 800cb84:	0800cd59 	.word	0x0800cd59
 800cb88:	0800cd67 	.word	0x0800cd67
 800cb8c:	0800cd75 	.word	0x0800cd75
 800cb90:	0800cd83 	.word	0x0800cd83
 800cb94:	0800cd91 	.word	0x0800cd91
 800cb98:	0800cd9f 	.word	0x0800cd9f
 800cb9c:	0800cdad 	.word	0x0800cdad
 800cba0:	0800cdbb 	.word	0x0800cdbb
 800cba4:	0800cdc9 	.word	0x0800cdc9
 800cba8:	0800cdd7 	.word	0x0800cdd7
 800cbac:	0800cde5 	.word	0x0800cde5
 800cbb0:	0800cdf3 	.word	0x0800cdf3
 800cbb4:	0800ce01 	.word	0x0800ce01
 800cbb8:	0800ce0f 	.word	0x0800ce0f
 800cbbc:	0800ce1d 	.word	0x0800ce1d
 800cbc0:	0800ce2b 	.word	0x0800ce2b
 800cbc4:	0800ce39 	.word	0x0800ce39
 800cbc8:	0800ce47 	.word	0x0800ce47
 800cbcc:	0800ce55 	.word	0x0800ce55
 800cbd0:	0800ce63 	.word	0x0800ce63
 800cbd4:	0800ce71 	.word	0x0800ce71
 800cbd8:	0800ce7f 	.word	0x0800ce7f
 800cbdc:	0800ce8d 	.word	0x0800ce8d
 800cbe0:	0800ce9b 	.word	0x0800ce9b
 800cbe4:	0800cea9 	.word	0x0800cea9
 800cbe8:	0800ceb7 	.word	0x0800ceb7
 800cbec:	0800cec5 	.word	0x0800cec5
 800cbf0:	0800ced3 	.word	0x0800ced3
 800cbf4:	0800cee1 	.word	0x0800cee1
 800cbf8:	0800ceef 	.word	0x0800ceef
 800cbfc:	0800cefd 	.word	0x0800cefd
 800cc00:	0800cf0b 	.word	0x0800cf0b
 800cc04:	0800cf19 	.word	0x0800cf19

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800cc0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]
	break;
 800cc14:	e18e      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800cc1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	601a      	str	r2, [r3, #0]
	break;
 800cc22:	e187      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cc2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	601a      	str	r2, [r3, #0]
	break;
 800cc30:	e180      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cc38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	601a      	str	r2, [r3, #0]
	break;
 800cc3e:	e179      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cc46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	601a      	str	r2, [r3, #0]
	break;
 800cc4c:	e172      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800cc54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	601a      	str	r2, [r3, #0]
	break;
 800cc5a:	e16b      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cc62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	601a      	str	r2, [r3, #0]
	break;
 800cc68:	e164      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800cc70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	601a      	str	r2, [r3, #0]
	break;
 800cc76:	e15d      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800cc7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
	break;
 800cc84:	e156      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800cc8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	601a      	str	r2, [r3, #0]
	break;
 800cc92:	e14f      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800cc9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	601a      	str	r2, [r3, #0]
	break;
 800cca0:	e148      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800cca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	601a      	str	r2, [r3, #0]
	break;
 800ccae:	e141      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ccb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	601a      	str	r2, [r3, #0]
	break;
 800ccbc:	e13a      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800ccc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	601a      	str	r2, [r3, #0]
	break;
 800ccca:	e133      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800ccd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	601a      	str	r2, [r3, #0]
	break;
 800ccd8:	e12c      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cce0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	601a      	str	r2, [r3, #0]
	break;
 800cce6:	e125      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800ccee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
	break;
 800ccf4:	e11e      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ccfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	601a      	str	r2, [r3, #0]
	break;
 800cd02:	e117      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800cd0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	601a      	str	r2, [r3, #0]
	break;
 800cd10:	e110      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800cd18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	601a      	str	r2, [r3, #0]
	break;
 800cd1e:	e109      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cd26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	601a      	str	r2, [r3, #0]
	break;
 800cd2c:	e102      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800cd34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	601a      	str	r2, [r3, #0]
	break;
 800cd3a:	e0fb      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800cd42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
	break;
 800cd48:	e0f4      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800cd50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	601a      	str	r2, [r3, #0]
	break;
 800cd56:	e0ed      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800cd5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	601a      	str	r2, [r3, #0]
	break;
 800cd64:	e0e6      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cd6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	601a      	str	r2, [r3, #0]
	break;
 800cd72:	e0df      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800cd7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	601a      	str	r2, [r3, #0]
	break;
 800cd80:	e0d8      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800cd88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
	break;
 800cd8e:	e0d1      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800cd96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	601a      	str	r2, [r3, #0]
	break;
 800cd9c:	e0ca      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cda4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	601a      	str	r2, [r3, #0]
	break;
 800cdaa:	e0c3      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cdb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	601a      	str	r2, [r3, #0]
	break;
 800cdb8:	e0bc      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800cdc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
	break;
 800cdc6:	e0b5      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cdce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	601a      	str	r2, [r3, #0]
	break;
 800cdd4:	e0ae      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800cddc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	601a      	str	r2, [r3, #0]
	break;
 800cde2:	e0a7      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800cdea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	601a      	str	r2, [r3, #0]
	break;
 800cdf0:	e0a0      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800cdf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	601a      	str	r2, [r3, #0]
	break;
 800cdfe:	e099      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ce06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	601a      	str	r2, [r3, #0]
	break;
 800ce0c:	e092      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ce14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
	break;
 800ce1a:	e08b      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]
	break;
 800ce28:	e084      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ce30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	601a      	str	r2, [r3, #0]
	break;
 800ce36:	e07d      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ce3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	601a      	str	r2, [r3, #0]
	break;
 800ce44:	e076      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800ce4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]
	break;
 800ce52:	e06f      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800ce5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	601a      	str	r2, [r3, #0]
	break;
 800ce60:	e068      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800ce68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]
	break;
 800ce6e:	e061      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800ce76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	601a      	str	r2, [r3, #0]
	break;
 800ce7c:	e05a      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800ce84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	601a      	str	r2, [r3, #0]
	break;
 800ce8a:	e053      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800ce92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	601a      	str	r2, [r3, #0]
	break;
 800ce98:	e04c      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800cea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]
	break;
 800cea6:	e045      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ceae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]
	break;
 800ceb4:	e03e      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
	break;
 800cec2:	e037      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ceca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	601a      	str	r2, [r3, #0]
	break;
 800ced0:	e030      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ced8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	601a      	str	r2, [r3, #0]
	break;
 800cede:	e029      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	601a      	str	r2, [r3, #0]
	break;
 800ceec:	e022      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	601a      	str	r2, [r3, #0]
	break;
 800cefa:	e01b      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800cf02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	601a      	str	r2, [r3, #0]
	break;
 800cf08:	e014      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
	break;
 800cf16:	e00d      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800cf1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	601a      	str	r2, [r3, #0]
	break;
 800cf24:	e006      	b.n	800cf34 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cf2c:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800cf2e:	23fc      	movs	r3, #252	; 0xfc
 800cf30:	75fb      	strb	r3, [r7, #23]
	break;
 800cf32:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800cf34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	371c      	adds	r7, #28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2208      	movs	r2, #8
 800cf54:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	220b      	movs	r2, #11
 800cf5a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf62:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cf6a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800cf72:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800cf7a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800cf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2212      	movs	r2, #18
 800cfa2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	220f      	movs	r2, #15
 800cfa8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2202      	movs	r2, #2
 800cfae:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800cfb6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	220c      	movs	r2, #12
 800cfbc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800cfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	895b      	ldrh	r3, [r3, #10]
 800cfe0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	895b      	ldrh	r3, [r3, #10]
 800cffe:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2200      	movs	r2, #0
 800d01c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2240      	movs	r2, #64	; 0x40
 800d022:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10d      	bne.n	800d048 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d108      	bne.n	800d048 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d103      	bne.n	800d048 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	741a      	strb	r2, [r3, #16]
 800d046:	e002      	b.n	800d04e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2201      	movs	r2, #1
 800d04c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d114      	bne.n	800d080 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d110      	bne.n	800d080 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	7d1b      	ldrb	r3, [r3, #20]
 800d072:	f000 ffc9 	bl	800e008 <VL53L1_calc_range_ignore_threshold>
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	82da      	strh	r2, [r3, #22]
 800d07e:	e002      	b.n	800d086 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2200      	movs	r2, #0
 800d084:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d086:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d092:	b480      	push	{r7}
 800d094:	b085      	sub	sp, #20
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d09a:	2300      	movs	r3, #0
 800d09c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d0a4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0ac:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d0b4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d0bc:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2208      	movs	r2, #8
 800d0c2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2228      	movs	r2, #40	; 0x28
 800d0c8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2209      	movs	r2, #9
 800d0ce:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f248 0203 	movw	r2, #32771	; 0x8003
 800d0f2:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f248 0201 	movw	r2, #32769	; 0x8001
 800d0fa:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f248 0241 	movw	r2, #32833	; 0x8041
 800d102:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	220e      	movs	r2, #14
 800d108:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	220a      	movs	r2, #10
 800d10e:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2206      	movs	r2, #6
 800d114:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	220e      	movs	r2, #14
 800d11a:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	220a      	movs	r2, #10
 800d120:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2206      	movs	r2, #6
 800d126:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2202      	movs	r2, #2
 800d12c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2221      	movs	r2, #33	; 0x21
 800d132:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d146:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d14e:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d156:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	22c0      	movs	r2, #192	; 0xc0
 800d15c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	22c0      	movs	r2, #192	; 0xc0
 800d162:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	22c0      	movs	r2, #192	; 0xc0
 800d168:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2208      	movs	r2, #8
 800d16e:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2210      	movs	r2, #16
 800d174:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2202      	movs	r2, #2
 800d182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d1a4:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d1ac:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f248 0230 	movw	r2, #32816	; 0x8030
 800d1b4:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1bc:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d1c4:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d1cc:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d1d4:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d1dc:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d1e4:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d1ec:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b087      	sub	sp, #28
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
 800d20a:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d216:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2200      	movs	r2, #0
 800d240:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2211      	movs	r2, #17
 800d258:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2202      	movs	r2, #2
 800d25e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2202      	movs	r2, #2
 800d26a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2208      	movs	r2, #8
 800d270:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2201      	movs	r2, #1
 800d296:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	22ff      	movs	r2, #255	; 0xff
 800d2ae:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2220      	movs	r2, #32
 800d2e2:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	220b      	movs	r2, #11
 800d2e8:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	220d      	movs	r2, #13
 800d2fc:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2200      	movs	r2, #0
 800d30a:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2201      	movs	r2, #1
 800d310:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2200      	movs	r2, #0
 800d316:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2200      	movs	r2, #0
 800d31c:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d324:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2200      	movs	r2, #0
 800d32a:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2238      	movs	r2, #56	; 0x38
 800d330:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	22ff      	movs	r2, #255	; 0xff
 800d336:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	2201      	movs	r2, #1
 800d33c:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	221a      	movs	r2, #26
 800d348:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2220      	movs	r2, #32
 800d354:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	22cc      	movs	r2, #204	; 0xcc
 800d360:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	220b      	movs	r2, #11
 800d366:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	22f5      	movs	r2, #245	; 0xf5
 800d372:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2209      	movs	r2, #9
 800d378:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2208      	movs	r2, #8
 800d38e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2278      	movs	r2, #120	; 0x78
 800d394:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	220b      	movs	r2, #11
 800d3c8:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2209      	movs	r2, #9
 800d3ce:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	22c7      	movs	r2, #199	; 0xc7
 800d3fe:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	22ff      	movs	r2, #255	; 0xff
 800d404:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	22db      	movs	r2, #219	; 0xdb
 800d40a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2202      	movs	r2, #2
 800d410:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d412:	6a3b      	ldr	r3, [r7, #32]
 800d414:	2200      	movs	r2, #0
 800d416:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	2201      	movs	r2, #1
 800d41c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	2201      	movs	r2, #1
 800d422:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	2221      	movs	r2, #33	; 0x21
 800d428:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	371c      	adds	r7, #28
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b088      	sub	sp, #32
 800d43e:	af02      	add	r7, sp, #8
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	607a      	str	r2, [r7, #4]
 800d446:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d448:	2300      	movs	r3, #0
 800d44a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fecf 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d460:	4603      	mov	r3, r0
 800d462:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d121      	bne.n	800d4b0 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2207      	movs	r2, #7
 800d470:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2205      	movs	r2, #5
 800d476:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2208      	movs	r2, #8
 800d48c:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2238      	movs	r2, #56	; 0x38
 800d492:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2207      	movs	r2, #7
 800d498:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2205      	movs	r2, #5
 800d49e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d4b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b088      	sub	sp, #32
 800d4c0:	af02      	add	r7, sp, #8
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	68b9      	ldr	r1, [r7, #8]
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff fe8e 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d4e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d121      	bne.n	800d532 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	220f      	movs	r2, #15
 800d4f2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	220d      	movs	r2, #13
 800d4f8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2208      	movs	r2, #8
 800d50e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	22b8      	movs	r2, #184	; 0xb8
 800d514:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	220f      	movs	r2, #15
 800d51a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	220d      	movs	r2, #13
 800d520:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d524:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b088      	sub	sp, #32
 800d542:	af02      	add	r7, sp, #8
 800d544:	60f8      	str	r0, [r7, #12]
 800d546:	60b9      	str	r1, [r7, #8]
 800d548:	607a      	str	r2, [r7, #4]
 800d54a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d54c:	2300      	movs	r3, #0
 800d54e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	68b9      	ldr	r1, [r7, #8]
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7ff fe4d 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d564:	4603      	mov	r3, r0
 800d566:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d105      	bne.n	800d57c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2202      	movs	r2, #2
 800d574:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	223b      	movs	r2, #59	; 0x3b
 800d57a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af02      	add	r7, sp, #8
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d596:	2300      	movs	r3, #0
 800d598:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fe28 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d5b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d105      	bne.n	800d5c6 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2202      	movs	r2, #2
 800d5be:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	225b      	movs	r2, #91	; 0x5b
 800d5c4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b088      	sub	sp, #32
 800d5d6:	af02      	add	r7, sp, #8
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
 800d5de:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff fe03 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d5fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d11a      	bne.n	800d63a <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2200      	movs	r2, #0
 800d608:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	22b1      	movs	r2, #177	; 0xb1
 800d614:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	22d4      	movs	r2, #212	; 0xd4
 800d620:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d628:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	2240      	movs	r2, #64	; 0x40
 800d638:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b088      	sub	sp, #32
 800d64a:	af02      	add	r7, sp, #8
 800d64c:	60f8      	str	r0, [r7, #12]
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607a      	str	r2, [r7, #4]
 800d652:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	68b9      	ldr	r1, [r7, #8]
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f7ff fee7 	bl	800d43a <VL53L1_preset_mode_standard_ranging_short_range>
 800d66c:	4603      	mov	r3, r0
 800d66e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11a      	bne.n	800d6ae <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2200      	movs	r2, #0
 800d67c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2284      	movs	r2, #132	; 0x84
 800d688:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	22b1      	movs	r2, #177	; 0xb1
 800d694:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d69c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	2240      	movs	r2, #64	; 0x40
 800d6ac:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d6ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b088      	sub	sp, #32
 800d6be:	af02      	add	r7, sp, #8
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	60b9      	str	r1, [r7, #8]
 800d6c4:	607a      	str	r2, [r7, #4]
 800d6c6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	68b9      	ldr	r1, [r7, #8]
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f7ff feee 	bl	800d4bc <VL53L1_preset_mode_standard_ranging_long_range>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d6e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d11a      	bne.n	800d722 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2297      	movs	r2, #151	; 0x97
 800d6fc:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	22b1      	movs	r2, #177	; 0xb1
 800d708:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d710:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	2240      	movs	r2, #64	; 0x40
 800d720:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b088      	sub	sp, #32
 800d732:	af02      	add	r7, sp, #8
 800d734:	60f8      	str	r0, [r7, #12]
 800d736:	60b9      	str	r1, [r7, #8]
 800d738:	607a      	str	r2, [r7, #4]
 800d73a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7ff ff3f 	bl	800d5d2 <VL53L1_preset_mode_timed_ranging>
 800d754:	4603      	mov	r3, r0
 800d756:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d106      	bne.n	800d76e <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	68b8      	ldr	r0, [r7, #8]
 800d766:	f000 fe7b 	bl	800e460 <VL53L1_config_low_power_auto_mode>
 800d76a:	4603      	mov	r3, r0
 800d76c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b088      	sub	sp, #32
 800d77e:	af02      	add	r7, sp, #8
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	607a      	str	r2, [r7, #4]
 800d786:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d788:	2300      	movs	r3, #0
 800d78a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f7ff ff53 	bl	800d646 <VL53L1_preset_mode_timed_ranging_short_range>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	68b8      	ldr	r0, [r7, #8]
 800d7b2:	f000 fe55 	bl	800e460 <VL53L1_config_low_power_auto_mode>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b088      	sub	sp, #32
 800d7ca:	af02      	add	r7, sp, #8
 800d7cc:	60f8      	str	r0, [r7, #12]
 800d7ce:	60b9      	str	r1, [r7, #8]
 800d7d0:	607a      	str	r2, [r7, #4]
 800d7d2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff ff67 	bl	800d6ba <VL53L1_preset_mode_timed_ranging_long_range>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d7f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d106      	bne.n	800d806 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	68b8      	ldr	r0, [r7, #8]
 800d7fe:	f000 fe2f 	bl	800e460 <VL53L1_config_low_power_auto_mode>
 800d802:	4603      	mov	r3, r0
 800d804:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b088      	sub	sp, #32
 800d816:	af02      	add	r7, sp, #8
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	60b9      	str	r1, [r7, #8]
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d820:	2300      	movs	r3, #0
 800d822:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	9301      	str	r3, [sp, #4]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	68b9      	ldr	r1, [r7, #8]
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fce3 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d838:	4603      	mov	r3, r0
 800d83a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d83c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d116      	bne.n	800d872 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2200      	movs	r2, #0
 800d848:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	22b1      	movs	r2, #177	; 0xb1
 800d854:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	22d4      	movs	r2, #212	; 0xd4
 800d860:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	2210      	movs	r2, #16
 800d870:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b088      	sub	sp, #32
 800d882:	af02      	add	r7, sp, #8
 800d884:	60f8      	str	r0, [r7, #12]
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d88c:	2300      	movs	r3, #0
 800d88e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff fcad 	bl	800d1fe <VL53L1_preset_mode_standard_ranging>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d8a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d102      	bne.n	800d8b6 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d8b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2202      	movs	r2, #2
 800d8da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	220d      	movs	r2, #13
 800d8e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f640 028e 	movw	r2, #2190	; 0x88e
 800d8ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d8ee:	bf00      	nop
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	460b      	mov	r3, r1
 800d904:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	332c      	adds	r3, #44	; 0x2c
 800d90e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	78fa      	ldrb	r2, [r7, #3]
 800d914:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2200      	movs	r2, #0
 800d91a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2202      	movs	r2, #2
 800d920:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2200      	movs	r2, #0
 800d926:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	78fa      	ldrb	r2, [r7, #3]
 800d92c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2200      	movs	r2, #0
 800d932:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2202      	movs	r2, #2
 800d938:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2200      	movs	r2, #0
 800d93e:	71da      	strb	r2, [r3, #7]

}
 800d940:	bf00      	nop
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800d954:	2300      	movs	r3, #0
 800d956:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	332c      	adds	r3, #44	; 0x2c
 800d960:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10c      	bne.n	800d98a <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2203      	movs	r2, #3
 800d974:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2202      	movs	r2, #2
 800d980:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	71da      	strb	r2, [r3, #7]
 800d988:	e060      	b.n	800da4c <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	795b      	ldrb	r3, [r3, #5]
 800d98e:	2bff      	cmp	r3, #255	; 0xff
 800d990:	d103      	bne.n	800d99a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2280      	movs	r2, #128	; 0x80
 800d996:	715a      	strb	r2, [r3, #5]
 800d998:	e005      	b.n	800d9a6 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	795b      	ldrb	r3, [r3, #5]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	799b      	ldrb	r3, [r3, #6]
 800d9aa:	f083 0302 	eor.w	r3, r3, #2
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	791b      	ldrb	r3, [r3, #4]
 800d9b8:	3b03      	subs	r3, #3
 800d9ba:	2b05      	cmp	r3, #5
 800d9bc:	d839      	bhi.n	800da32 <VL53L1_update_ll_driver_rd_state+0xe6>
 800d9be:	a201      	add	r2, pc, #4	; (adr r2, 800d9c4 <VL53L1_update_ll_driver_rd_state+0x78>)
 800d9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c4:	0800d9dd 	.word	0x0800d9dd
 800d9c8:	0800da33 	.word	0x0800da33
 800d9cc:	0800da33 	.word	0x0800da33
 800d9d0:	0800da07 	.word	0x0800da07
 800d9d4:	0800da15 	.word	0x0800da15
 800d9d8:	0800da1d 	.word	0x0800da1d

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	dd03      	ble.n	800d9f2 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2206      	movs	r2, #6
 800d9ee:	711a      	strb	r2, [r3, #4]
 800d9f0:	e002      	b.n	800d9f8 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	71da      	strb	r2, [r3, #7]

		break;
 800da04:	e022      	b.n	800da4c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2208      	movs	r2, #8
 800da10:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800da12:	e01b      	b.n	800da4c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2208      	movs	r2, #8
 800da18:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800da1a:	e017      	b.n	800da4c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	79db      	ldrb	r3, [r3, #7]
 800da20:	f083 0301 	eor.w	r3, r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2208      	movs	r2, #8
 800da2e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800da30:	e00c      	b.n	800da4c <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2203      	movs	r2, #3
 800da36:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2202      	movs	r2, #2
 800da42:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	71da      	strb	r2, [r3, #7]

		break;
 800da4a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800da4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	371c      	adds	r7, #28
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b089      	sub	sp, #36	; 0x24
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800da64:	2300      	movs	r3, #0
 800da66:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	332c      	adds	r3, #44	; 0x2c
 800da70:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800da78:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800da8a:	f003 031f 	and.w	r3, r3, #31
 800da8e:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	78db      	ldrb	r3, [r3, #3]
 800da94:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800da9a:	111b      	asrs	r3, r3, #4
 800da9c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800daaa:	f003 0320 	and.w	r3, r3, #32
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d017      	beq.n	800dae2 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	791b      	ldrb	r3, [r3, #4]
 800dab6:	2b06      	cmp	r3, #6
 800dab8:	d105      	bne.n	800dac6 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	2b12      	cmp	r3, #18
 800dabe:	d010      	beq.n	800dae2 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800dac0:	23ef      	movs	r3, #239	; 0xef
 800dac2:	77fb      	strb	r3, [r7, #31]
 800dac4:	e00d      	b.n	800dae2 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	795b      	ldrb	r3, [r3, #5]
 800daca:	7bba      	ldrb	r2, [r7, #14]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d001      	beq.n	800dad4 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800dad0:	23ee      	movs	r3, #238	; 0xee
 800dad2:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	799b      	ldrb	r3, [r3, #6]
 800dad8:	7b7a      	ldrb	r2, [r7, #13]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d001      	beq.n	800dae2 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800dade:	23ed      	movs	r3, #237	; 0xed
 800dae0:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800dae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3724      	adds	r7, #36	; 0x24
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr

0800daf2 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800daf2:	b480      	push	{r7}
 800daf4:	b087      	sub	sp, #28
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dafa:	2300      	movs	r3, #0
 800dafc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	332c      	adds	r3, #44	; 0x2c
 800db06:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800db0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10c      	bne.n	800db30 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2203      	movs	r2, #3
 800db1a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2202      	movs	r2, #2
 800db26:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	70da      	strb	r2, [r3, #3]
 800db2e:	e03e      	b.n	800dbae <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	2bff      	cmp	r3, #255	; 0xff
 800db36:	d103      	bne.n	800db40 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2280      	movs	r2, #128	; 0x80
 800db3c:	705a      	strb	r2, [r3, #1]
 800db3e:	e005      	b.n	800db4c <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	785b      	ldrb	r3, [r3, #1]
 800db44:	3301      	adds	r3, #1
 800db46:	b2da      	uxtb	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	789b      	ldrb	r3, [r3, #2]
 800db50:	f083 0302 	eor.w	r3, r3, #2
 800db54:	b2da      	uxtb	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d002      	beq.n	800db68 <VL53L1_update_ll_driver_cfg_state+0x76>
 800db62:	2b04      	cmp	r3, #4
 800db64:	d00e      	beq.n	800db84 <VL53L1_update_ll_driver_cfg_state+0x92>
 800db66:	e015      	b.n	800db94 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	78db      	ldrb	r3, [r3, #3]
 800db6c:	f083 0301 	eor.w	r3, r3, #1
 800db70:	b2da      	uxtb	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2201      	movs	r2, #1
 800db7a:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2204      	movs	r2, #4
 800db80:	701a      	strb	r2, [r3, #0]
		break;
 800db82:	e014      	b.n	800dbae <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	78db      	ldrb	r3, [r3, #3]
 800db88:	f083 0301 	eor.w	r3, r3, #1
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	70da      	strb	r2, [r3, #3]

		break;
 800db92:	e00c      	b.n	800dbae <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2203      	movs	r2, #3
 800db98:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2202      	movs	r2, #2
 800dba4:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	70da      	strb	r2, [r3, #3]

		break;
 800dbac:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	371c      	adds	r7, #28
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b083      	sub	sp, #12
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
 800dbc6:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7c1a      	ldrb	r2, [r3, #16]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	7c52      	ldrb	r2, [r2, #17]
 800dbd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	3302      	adds	r3, #2
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	7c92      	ldrb	r2, [r2, #18]
 800dbe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3303      	adds	r3, #3
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	7cd2      	ldrb	r2, [r2, #19]
 800dbec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	7d12      	ldrb	r2, [r2, #20]
 800dbf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	3305      	adds	r3, #5
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	7d52      	ldrb	r2, [r2, #21]
 800dc00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	3306      	adds	r3, #6
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	7d92      	ldrb	r2, [r2, #22]
 800dc0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	3307      	adds	r3, #7
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	7dd2      	ldrb	r2, [r2, #23]
 800dc14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	3308      	adds	r3, #8
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	7e12      	ldrb	r2, [r2, #24]
 800dc1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	3309      	adds	r3, #9
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	7e52      	ldrb	r2, [r2, #25]
 800dc28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	330a      	adds	r3, #10
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	7e92      	ldrb	r2, [r2, #26]
 800dc32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	330b      	adds	r3, #11
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	7ed2      	ldrb	r2, [r2, #27]
 800dc3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	330c      	adds	r3, #12
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	7f12      	ldrb	r2, [r2, #28]
 800dc46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	330d      	adds	r3, #13
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	7f52      	ldrb	r2, [r2, #29]
 800dc50:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	330e      	adds	r3, #14
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	7f92      	ldrb	r2, [r2, #30]
 800dc5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	330f      	adds	r3, #15
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	7fd2      	ldrb	r2, [r2, #31]
 800dc64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3310      	adds	r3, #16
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800dc70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	3311      	adds	r3, #17
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800dc7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	3312      	adds	r3, #18
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800dc88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	3313      	adds	r3, #19
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800dc94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	3314      	adds	r3, #20
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dca0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	3315      	adds	r3, #21
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800dcac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	3316      	adds	r3, #22
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800dcb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	3317      	adds	r3, #23
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800dcc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	3318      	adds	r3, #24
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800dcd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	3319      	adds	r3, #25
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800dcdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	331a      	adds	r3, #26
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800dce8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	331b      	adds	r3, #27
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800dcf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	331c      	adds	r3, #28
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800dd00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	331d      	adds	r3, #29
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800dd0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	331e      	adds	r3, #30
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800dd18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	331f      	adds	r3, #31
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800dd24:	701a      	strb	r2, [r3, #0]
}
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b085      	sub	sp, #20
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	4603      	mov	r3, r0
 800dd3a:	603a      	str	r2, [r7, #0]
 800dd3c:	80fb      	strh	r3, [r7, #6]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dd4e:	2300      	movs	r3, #0
 800dd50:	81fb      	strh	r3, [r7, #14]
 800dd52:	e00e      	b.n	800dd72 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800dd54:	88ba      	ldrh	r2, [r7, #4]
 800dd56:	89fb      	ldrh	r3, [r7, #14]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	4413      	add	r3, r2
 800dd60:	89ba      	ldrh	r2, [r7, #12]
 800dd62:	b2d2      	uxtb	r2, r2
 800dd64:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800dd66:	89bb      	ldrh	r3, [r7, #12]
 800dd68:	0a1b      	lsrs	r3, r3, #8
 800dd6a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	81fb      	strh	r3, [r7, #14]
 800dd72:	89fa      	ldrh	r2, [r7, #14]
 800dd74:	88bb      	ldrh	r3, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d3ec      	bcc.n	800dd54 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800dd7a:	bf00      	nop
 800dd7c:	bf00      	nop
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	4603      	mov	r3, r0
 800dd90:	6039      	str	r1, [r7, #0]
 800dd92:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800dd94:	2300      	movs	r3, #0
 800dd96:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800dd98:	e00a      	b.n	800ddb0 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dd9a:	89fb      	ldrh	r3, [r7, #14]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	b21a      	sxth	r2, r3
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	1c59      	adds	r1, r3, #1
 800dda4:	6039      	str	r1, [r7, #0]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	b21b      	sxth	r3, r3
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	b21b      	sxth	r3, r3
 800ddae:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	1e5a      	subs	r2, r3, #1
 800ddb4:	80fa      	strh	r2, [r7, #6]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1ef      	bne.n	800dd9a <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800ddba:	89fb      	ldrh	r3, [r7, #14]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	603a      	str	r2, [r7, #0]
 800ddd2:	80fb      	strh	r3, [r7, #6]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800dddc:	2300      	movs	r3, #0
 800ddde:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dde0:	88fb      	ldrh	r3, [r7, #6]
 800dde2:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dde4:	2300      	movs	r3, #0
 800dde6:	81fb      	strh	r3, [r7, #14]
 800dde8:	e00f      	b.n	800de0a <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ddea:	88ba      	ldrh	r2, [r7, #4]
 800ddec:	89fb      	ldrh	r3, [r7, #14]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	89ba      	ldrh	r2, [r7, #12]
 800ddf8:	b2d2      	uxtb	r2, r2
 800ddfa:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800ddfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de00:	121b      	asrs	r3, r3, #8
 800de02:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800de04:	89fb      	ldrh	r3, [r7, #14]
 800de06:	3301      	adds	r3, #1
 800de08:	81fb      	strh	r3, [r7, #14]
 800de0a:	89fa      	ldrh	r2, [r7, #14]
 800de0c:	88bb      	ldrh	r3, [r7, #4]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d3eb      	bcc.n	800ddea <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800de12:	bf00      	nop
 800de14:	bf00      	nop
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	6039      	str	r1, [r7, #0]
 800de2a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800de2c:	2300      	movs	r3, #0
 800de2e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	b25b      	sxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	da0e      	bge.n	800de58 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800de3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de3e:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800de40:	e00a      	b.n	800de58 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800de42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de46:	021b      	lsls	r3, r3, #8
 800de48:	b21a      	sxth	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	1c59      	adds	r1, r3, #1
 800de4e:	6039      	str	r1, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	b21b      	sxth	r3, r3
 800de54:	4313      	orrs	r3, r2
 800de56:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800de58:	88fb      	ldrh	r3, [r7, #6]
 800de5a:	1e5a      	subs	r2, r3, #1
 800de5c:	80fa      	strh	r2, [r7, #6]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1ef      	bne.n	800de42 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800de62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800de72:	b480      	push	{r7}
 800de74:	b087      	sub	sp, #28
 800de76:	af00      	add	r7, sp, #0
 800de78:	60f8      	str	r0, [r7, #12]
 800de7a:	460b      	mov	r3, r1
 800de7c:	607a      	str	r2, [r7, #4]
 800de7e:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800de84:	2300      	movs	r3, #0
 800de86:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800de8c:	2300      	movs	r3, #0
 800de8e:	82fb      	strh	r3, [r7, #22]
 800de90:	e00e      	b.n	800deb0 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800de92:	897a      	ldrh	r2, [r7, #10]
 800de94:	8afb      	ldrh	r3, [r7, #22]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	3b01      	subs	r3, #1
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	4413      	add	r3, r2
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	b2d2      	uxtb	r2, r2
 800dea2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	0a1b      	lsrs	r3, r3, #8
 800dea8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800deaa:	8afb      	ldrh	r3, [r7, #22]
 800deac:	3301      	adds	r3, #1
 800deae:	82fb      	strh	r3, [r7, #22]
 800deb0:	8afa      	ldrh	r2, [r7, #22]
 800deb2:	897b      	ldrh	r3, [r7, #10]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d3ec      	bcc.n	800de92 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	371c      	adds	r7, #28
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b085      	sub	sp, #20
 800deca:	af00      	add	r7, sp, #0
 800decc:	4603      	mov	r3, r0
 800dece:	6039      	str	r1, [r7, #0]
 800ded0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800ded6:	e007      	b.n	800dee8 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	021a      	lsls	r2, r3, #8
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	1c59      	adds	r1, r3, #1
 800dee0:	6039      	str	r1, [r7, #0]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800dee8:	88fb      	ldrh	r3, [r7, #6]
 800deea:	1e5a      	subs	r2, r3, #1
 800deec:	80fa      	strh	r2, [r7, #6]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1f2      	bne.n	800ded8 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800def2:	68fb      	ldr	r3, [r7, #12]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800df00:	b480      	push	{r7}
 800df02:	b085      	sub	sp, #20
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	b25b      	sxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	da0b      	bge.n	800df32 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800df1a:	f04f 33ff 	mov.w	r3, #4294967295
 800df1e:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800df20:	e007      	b.n	800df32 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	021a      	lsls	r2, r3, #8
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	1c59      	adds	r1, r3, #1
 800df2a:	6039      	str	r1, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	4313      	orrs	r3, r2
 800df30:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800df32:	88fb      	ldrh	r3, [r7, #6]
 800df34:	1e5a      	subs	r2, r3, #1
 800df36:	80fa      	strh	r2, [r7, #6]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1f2      	bne.n	800df22 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800df3c:	68fb      	ldr	r3, [r7, #12]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	460b      	mov	r3, r1
 800df54:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	78fa      	ldrb	r2, [r7, #3]
 800df62:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800df6c:	461a      	mov	r2, r3
 800df6e:	2183      	movs	r1, #131	; 0x83
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 fd0d 	bl	800f990 <VL53L1_WrByte>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800df7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800df8e:	2300      	movs	r3, #0
 800df90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800df92:	2101      	movs	r1, #1
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7ff ffd8 	bl	800df4a <VL53L1_set_powerforce_register>
 800df9a:	4603      	mov	r3, r0
 800df9c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800df9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	460a      	mov	r2, r1
 800dfb4:	80fb      	strh	r3, [r7, #6]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 faa7 	bl	800e51c <VL53L1_calc_pll_period_us>
 800dfce:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800dfd0:	797b      	ldrb	r3, [r7, #5]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fab6 	bl	800e544 <VL53L1_decode_vcsel_period>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	4413      	add	r3, r2
 800dfe4:	021b      	lsls	r3, r3, #8
 800dfe6:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	099b      	lsrs	r3, r3, #6
 800dfec:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800dfee:	7cfa      	ldrb	r2, [r7, #19]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	fb02 f303 	mul.w	r3, r2, r3
 800dff6:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	099b      	lsrs	r3, r3, #6
 800dffc:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800dffe:	68fb      	ldr	r3, [r7, #12]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e008:	b480      	push	{r7}
 800e00a:	b089      	sub	sp, #36	; 0x24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	4608      	mov	r0, r1
 800e012:	4611      	mov	r1, r2
 800e014:	461a      	mov	r2, r3
 800e016:	4603      	mov	r3, r0
 800e018:	817b      	strh	r3, [r7, #10]
 800e01a:	460b      	mov	r3, r1
 800e01c:	813b      	strh	r3, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	011b      	lsls	r3, r3, #4
 800e03a:	4a23      	ldr	r2, [pc, #140]	; (800e0c8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e03c:	fb82 1203 	smull	r1, r2, r2, r3
 800e040:	1192      	asrs	r2, r2, #6
 800e042:	17db      	asrs	r3, r3, #31
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e048:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	da03      	bge.n	800e058 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e050:	897b      	ldrh	r3, [r7, #10]
 800e052:	425b      	negs	r3, r3
 800e054:	b29b      	uxth	r3, r3
 800e056:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e058:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da03      	bge.n	800e068 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e060:	893b      	ldrh	r3, [r7, #8]
 800e062:	425b      	negs	r3, r3
 800e064:	b29b      	uxth	r3, r3
 800e066:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e068:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e06c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e070:	4413      	add	r3, r2
 800e072:	015b      	lsls	r3, r3, #5
 800e074:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	4a13      	ldr	r2, [pc, #76]	; (800e0c8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e07a:	fb82 1203 	smull	r1, r2, r2, r3
 800e07e:	1192      	asrs	r2, r2, #6
 800e080:	17db      	asrs	r3, r3, #31
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	4413      	add	r3, r2
 800e08c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e08e:	79fa      	ldrb	r2, [r7, #7]
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	fb02 f303 	mul.w	r3, r2, r3
 800e096:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	3310      	adds	r3, #16
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	da00      	bge.n	800e0a2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800e0a0:	331f      	adds	r3, #31
 800e0a2:	115b      	asrs	r3, r3, #5
 800e0a4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0ac:	db03      	blt.n	800e0b6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e0ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0b2:	83fb      	strh	r3, [r7, #30]
 800e0b4:	e001      	b.n	800e0ba <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e0ba:	8bfb      	ldrh	r3, [r7, #30]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3724      	adds	r7, #36	; 0x24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	10624dd3 	.word	0x10624dd3

0800e0cc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	031a      	lsls	r2, r3, #12
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	085b      	lsrs	r3, r3, #1
 800e0e2:	441a      	add	r2, r3
	timeout_mclks   =
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ea:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e104:	2300      	movs	r3, #0
 800e106:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e10c:	6839      	ldr	r1, [r7, #0]
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff ffdc 	bl	800e0cc <VL53L1_calc_timeout_mclks>
 800e114:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f000 f85e 	bl	800e1d8 <VL53L1_encode_timeout>
 800e11c:	4603      	mov	r3, r0
 800e11e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e120:	897b      	ldrh	r3, [r7, #10]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e12a:	b4f0      	push	{r4, r5, r6, r7}
 800e12c:	b086      	sub	sp, #24
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e138:	f04f 0200 	mov.w	r2, #0
 800e13c:	f04f 0300 	mov.w	r3, #0
 800e140:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4618      	mov	r0, r3
 800e148:	f04f 0100 	mov.w	r1, #0
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	f04f 0300 	mov.w	r3, #0
 800e154:	fb02 fc01 	mul.w	ip, r2, r1
 800e158:	fb00 f603 	mul.w	r6, r0, r3
 800e15c:	4466      	add	r6, ip
 800e15e:	fba0 2302 	umull	r2, r3, r0, r2
 800e162:	18f1      	adds	r1, r6, r3
 800e164:	460b      	mov	r3, r1
 800e166:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e16a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e16e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e172:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e176:	f143 0500 	adc.w	r5, r3, #0
 800e17a:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e17e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e182:	f04f 0200 	mov.w	r2, #0
 800e186:	f04f 0300 	mov.w	r3, #0
 800e18a:	0b02      	lsrs	r2, r0, #12
 800e18c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e190:	0b0b      	lsrs	r3, r1, #12
 800e192:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e19a:	697b      	ldr	r3, [r7, #20]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bcf0      	pop	{r4, r5, r6, r7}
 800e1a4:	4770      	bx	lr

0800e1a6 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	6039      	str	r1, [r7, #0]
 800e1b0:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e1ba:	88fb      	ldrh	r3, [r7, #6]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 f837 	bl	800e230 <VL53L1_decode_timeout>
 800e1c2:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7ff ffaf 	bl	800e12a <VL53L1_calc_timeout_us>
 800e1cc:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b087      	sub	sp, #28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d017      	beq.n	800e222 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e1f8:	e005      	b.n	800e206 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	085b      	lsrs	r3, r3, #1
 800e1fe:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e200:	89fb      	ldrh	r3, [r7, #14]
 800e202:	3301      	adds	r3, #1
 800e204:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1f4      	bne.n	800e1fa <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e210:	89fb      	ldrh	r3, [r7, #14]
 800e212:	021b      	lsls	r3, r3, #8
 800e214:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e21e:	4413      	add	r3, r2
 800e220:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e222:	8afb      	ldrh	r3, [r7, #22]
}
 800e224:	4618      	mov	r0, r3
 800e226:	371c      	adds	r7, #28
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	4603      	mov	r3, r0
 800e238:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e242:	88fa      	ldrh	r2, [r7, #6]
 800e244:	0a12      	lsrs	r2, r2, #8
 800e246:	b292      	uxth	r2, r2
 800e248:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e24a:	3301      	adds	r3, #1
 800e24c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e24e:	68fb      	ldr	r3, [r7, #12]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e26a:	2300      	movs	r3, #0
 800e26c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e27a:	887b      	ldrh	r3, [r7, #2]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e280:	23f1      	movs	r3, #241	; 0xf1
 800e282:	77fb      	strb	r3, [r7, #31]
 800e284:	e05d      	b.n	800e342 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e288:	799a      	ldrb	r2, [r3, #6]
 800e28a:	887b      	ldrh	r3, [r7, #2]
 800e28c:	4611      	mov	r1, r2
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fe8b 	bl	800dfaa <VL53L1_calc_macro_period_us>
 800e294:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e296:	6979      	ldr	r1, [r7, #20]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f7ff ff17 	bl	800e0cc <VL53L1_calc_timeout_mclks>
 800e29e:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	2bff      	cmp	r3, #255	; 0xff
 800e2a4:	d901      	bls.n	800e2aa <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e2a6:	23ff      	movs	r3, #255	; 0xff
 800e2a8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e2b2:	6979      	ldr	r1, [r7, #20]
 800e2b4:	68b8      	ldr	r0, [r7, #8]
 800e2b6:	f7ff ff20 	bl	800e0fa <VL53L1_calc_encoded_timeout>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e2be:	8a7b      	ldrh	r3, [r7, #18]
 800e2c0:	0a1b      	lsrs	r3, r3, #8
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e2ca:	8a7b      	ldrh	r3, [r7, #18]
 800e2cc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e2d2:	6979      	ldr	r1, [r7, #20]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff ff10 	bl	800e0fa <VL53L1_calc_encoded_timeout>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e2de:	8a7b      	ldrh	r3, [r7, #18]
 800e2e0:	0a1b      	lsrs	r3, r3, #8
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e2ea:	8a7b      	ldrh	r3, [r7, #18]
 800e2ec:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	7a5a      	ldrb	r2, [r3, #9]
 800e2f6:	887b      	ldrh	r3, [r7, #2]
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff fe55 	bl	800dfaa <VL53L1_calc_macro_period_us>
 800e300:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e302:	6979      	ldr	r1, [r7, #20]
 800e304:	68b8      	ldr	r0, [r7, #8]
 800e306:	f7ff fef8 	bl	800e0fa <VL53L1_calc_encoded_timeout>
 800e30a:	4603      	mov	r3, r0
 800e30c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e30e:	8a7b      	ldrh	r3, [r7, #18]
 800e310:	0a1b      	lsrs	r3, r3, #8
 800e312:	b29b      	uxth	r3, r3
 800e314:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e31a:	8a7b      	ldrh	r3, [r7, #18]
 800e31c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e322:	6979      	ldr	r1, [r7, #20]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff fee8 	bl	800e0fa <VL53L1_calc_encoded_timeout>
 800e32a:	4603      	mov	r3, r0
 800e32c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e32e:	8a7b      	ldrh	r3, [r7, #18]
 800e330:	0a1b      	lsrs	r3, r3, #8
 800e332:	b29b      	uxth	r3, r3
 800e334:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e338:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e33a:	8a7b      	ldrh	r3, [r7, #18]
 800e33c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e342:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	4603      	mov	r3, r0
 800e356:	603a      	str	r2, [r7, #0]
 800e358:	71fb      	strb	r3, [r7, #7]
 800e35a:	460b      	mov	r3, r1
 800e35c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	2b07      	cmp	r3, #7
 800e362:	d90a      	bls.n	800e37a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e364:	79bb      	ldrb	r3, [r7, #6]
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	3b71      	subs	r3, #113	; 0x71
 800e372:	b2da      	uxtb	r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e378:	e00a      	b.n	800e390 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e37a:	79bb      	ldrb	r3, [r7, #6]
 800e37c:	f1c3 030f 	rsb	r3, r3, #15
 800e380:	b2db      	uxtb	r3, r3
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	b2da      	uxtb	r2, r3
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	4413      	add	r3, r2
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	701a      	strb	r2, [r3, #0]
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	091b      	lsrs	r3, r3, #4
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
 800e3b6:	f003 030f 	and.w	r3, r3, #15
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	701a      	strb	r2, [r3, #0]

}
 800e3c0:	bf00      	nop
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	603a      	str	r2, [r7, #0]
 800e3d6:	71fb      	strb	r3, [r7, #7]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e3dc:	79bb      	ldrb	r3, [r7, #6]
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	701a      	strb	r2, [r3, #0]

}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e400:	2300      	movs	r3, #0
 800e402:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2203      	movs	r2, #3
 800e40c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	2200      	movs	r2, #0
 800e424:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2200      	movs	r2, #0
 800e434:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2200      	movs	r2, #0
 800e444:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e46c:	2300      	movs	r3, #0
 800e46e:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	229b      	movs	r2, #155	; 0x9b
 800e480:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e486:	4618      	mov	r0, r3
 800e488:	371c      	adds	r7, #28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e492:	b480      	push	{r7}
 800e494:	b085      	sub	sp, #20
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e4d2:	f003 0303 	and.w	r3, r3, #3
 800e4d6:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e4e2:	4413      	add	r3, r2
 800e4e4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e50c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e530:	fb92 f3f3 	sdiv	r3, r2, r3
 800e534:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e536:	68fb      	ldr	r3, [r7, #12]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e544:	b480      	push	{r7}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	4603      	mov	r3, r0
 800e54c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	3301      	adds	r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3714      	adds	r7, #20
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b085      	sub	sp, #20
 800e56e:	af00      	add	r7, sp, #0
 800e570:	4603      	mov	r3, r0
 800e572:	60b9      	str	r1, [r7, #8]
 800e574:	607a      	str	r2, [r7, #4]
 800e576:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	da10      	bge.n	800e5a2 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e580:	7bfb      	ldrb	r3, [r7, #15]
 800e582:	43db      	mvns	r3, r3
 800e584:	b2db      	uxtb	r3, r3
 800e586:	f003 0307 	and.w	r3, r3, #7
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	3308      	adds	r3, #8
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e594:	7bfb      	ldrb	r3, [r7, #15]
 800e596:	3b80      	subs	r3, #128	; 0x80
 800e598:	10db      	asrs	r3, r3, #3
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e5a0:	e00c      	b.n	800e5bc <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e5a2:	7bfb      	ldrb	r3, [r7, #15]
 800e5a4:	f003 0307 	and.w	r3, r3, #7
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
 800e5b0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e5b4:	10db      	asrs	r3, r3, #3
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	701a      	strb	r2, [r3, #0]
}
 800e5bc:	bf00      	nop
 800e5be:	3714      	adds	r7, #20
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e5da:	897b      	ldrh	r3, [r7, #10]
 800e5dc:	2b0a      	cmp	r3, #10
 800e5de:	d802      	bhi.n	800e5e6 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e5e0:	f06f 0309 	mvn.w	r3, #9
 800e5e4:	e047      	b.n	800e676 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ee:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e5fc:	f002 020f 	and.w	r2, r2, #15
 800e600:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e60c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e610:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e612:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e61c:	f002 0203 	and.w	r2, r2, #3
 800e620:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e622:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e62c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e630:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e632:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	88d8      	ldrh	r0, [r3, #6]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3305      	adds	r3, #5
 800e63c:	461a      	mov	r2, r3
 800e63e:	2102      	movs	r1, #2
 800e640:	f7ff fb77 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e64c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e660:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e664:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e666:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e670:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3718      	adds	r7, #24
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b086      	sub	sp, #24
 800e682:	af00      	add	r7, sp, #0
 800e684:	4603      	mov	r3, r0
 800e686:	60b9      	str	r1, [r7, #8]
 800e688:	607a      	str	r2, [r7, #4]
 800e68a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e690:	89fb      	ldrh	r3, [r7, #14]
 800e692:	2b0a      	cmp	r3, #10
 800e694:	d802      	bhi.n	800e69c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e696:	f06f 0309 	mvn.w	r3, #9
 800e69a:	e046      	b.n	800e72a <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6a4:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f003 030f 	and.w	r3, r3, #15
 800e6b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	3302      	adds	r3, #2
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	3303      	adds	r3, #3
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	f003 0303 	and.w	r3, r3, #3
 800e6d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	3305      	adds	r3, #5
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	2002      	movs	r0, #2
 800e6f2:	f7ff fb49 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	79da      	ldrb	r2, [r3, #7]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	7a1a      	ldrb	r2, [r3, #8]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	3309      	adds	r3, #9
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e718:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	7a9a      	ldrb	r2, [r3, #10]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3718      	adds	r7, #24
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b086      	sub	sp, #24
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e73c:	2300      	movs	r3, #0
 800e73e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d108      	bne.n	800e75a <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e748:	f107 020c 	add.w	r2, r7, #12
 800e74c:	230b      	movs	r3, #11
 800e74e:	2101      	movs	r1, #1
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f001 f8e7 	bl	800f924 <VL53L1_ReadMulti>
 800e756:	4603      	mov	r3, r0
 800e758:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e75a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d108      	bne.n	800e774 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e762:	f107 030c 	add.w	r3, r7, #12
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4619      	mov	r1, r3
 800e76a:	200b      	movs	r0, #11
 800e76c:	f7ff ff87 	bl	800e67e <VL53L1_i2c_decode_static_nvm_managed>
 800e770:	4603      	mov	r3, r0
 800e772:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	460b      	mov	r3, r1
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e78e:	2300      	movs	r3, #0
 800e790:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	2b16      	cmp	r3, #22
 800e796:	d802      	bhi.n	800e79e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e798:	f06f 0309 	mvn.w	r3, #9
 800e79c:	e076      	b.n	800e88c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e7ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e7b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e7c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e7cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e7d6:	f002 020f 	and.w	r2, r2, #15
 800e7da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e7dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e7e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e7f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e7f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e7f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e800:	f002 0203 	and.w	r2, r2, #3
 800e804:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e806:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8958      	ldrh	r0, [r3, #10]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3309      	adds	r3, #9
 800e810:	461a      	mov	r2, r3
 800e812:	2102      	movs	r1, #2
 800e814:	f7ff fa8d 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	330b      	adds	r3, #11
 800e822:	461a      	mov	r2, r3
 800e824:	2102      	movs	r1, #2
 800e826:	f7ff facf 	bl	800ddc8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	330d      	adds	r3, #13
 800e834:	461a      	mov	r2, r3
 800e836:	2102      	movs	r1, #2
 800e838:	f7ff fac6 	bl	800ddc8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	8a18      	ldrh	r0, [r3, #16]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	330f      	adds	r3, #15
 800e844:	461a      	mov	r2, r3
 800e846:	2102      	movs	r1, #2
 800e848:	f7ff fa73 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800e852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e856:	b218      	sxth	r0, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3311      	adds	r3, #17
 800e85c:	461a      	mov	r2, r3
 800e85e:	2102      	movs	r1, #2
 800e860:	f7ff fab2 	bl	800ddc8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3313      	adds	r3, #19
 800e86e:	461a      	mov	r2, r3
 800e870:	2102      	movs	r1, #2
 800e872:	f7ff faa9 	bl	800ddc8 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3315      	adds	r3, #21
 800e880:	461a      	mov	r2, r3
 800e882:	2102      	movs	r1, #2
 800e884:	f7ff faa0 	bl	800ddc8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	4603      	mov	r3, r0
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e8a6:	89fb      	ldrh	r3, [r7, #14]
 800e8a8:	2b16      	cmp	r3, #22
 800e8aa:	d802      	bhi.n	800e8b2 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8ac:	f06f 0309 	mvn.w	r3, #9
 800e8b0:	e079      	b.n	800e9a6 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	785a      	ldrb	r2, [r3, #1]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	789a      	ldrb	r2, [r3, #2]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	78da      	ldrb	r2, [r3, #3]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	791a      	ldrb	r2, [r3, #4]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	3305      	adds	r3, #5
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f003 030f 	and.w	r3, r3, #15
 800e8e4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	799a      	ldrb	r2, [r3, #6]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	3307      	adds	r3, #7
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8fc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	3308      	adds	r3, #8
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 0303 	and.w	r3, r3, #3
 800e90c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	3309      	adds	r3, #9
 800e916:	4619      	mov	r1, r3
 800e918:	2002      	movs	r0, #2
 800e91a:	f7ff fa35 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800e91e:	4603      	mov	r3, r0
 800e920:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	330b      	adds	r3, #11
 800e92a:	4619      	mov	r1, r3
 800e92c:	2002      	movs	r0, #2
 800e92e:	f7ff fa77 	bl	800de20 <VL53L1_i2c_decode_int16_t>
 800e932:	4603      	mov	r3, r0
 800e934:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	330d      	adds	r3, #13
 800e93e:	4619      	mov	r1, r3
 800e940:	2002      	movs	r0, #2
 800e942:	f7ff fa6d 	bl	800de20 <VL53L1_i2c_decode_int16_t>
 800e946:	4603      	mov	r3, r0
 800e948:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	330f      	adds	r3, #15
 800e952:	4619      	mov	r1, r3
 800e954:	2002      	movs	r0, #2
 800e956:	f7ff fa17 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800e95a:	4603      	mov	r3, r0
 800e95c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	3311      	adds	r3, #17
 800e966:	4619      	mov	r1, r3
 800e968:	2002      	movs	r0, #2
 800e96a:	f7ff fa59 	bl	800de20 <VL53L1_i2c_decode_int16_t>
 800e96e:	4603      	mov	r3, r0
 800e970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e974:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	3313      	adds	r3, #19
 800e97e:	4619      	mov	r1, r3
 800e980:	2002      	movs	r0, #2
 800e982:	f7ff fa4d 	bl	800de20 <VL53L1_i2c_decode_int16_t>
 800e986:	4603      	mov	r3, r0
 800e988:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	3315      	adds	r3, #21
 800e992:	4619      	mov	r1, r3
 800e994:	2002      	movs	r0, #2
 800e996:	f7ff fa43 	bl	800de20 <VL53L1_i2c_decode_int16_t>
 800e99a:	4603      	mov	r3, r0
 800e99c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3718      	adds	r7, #24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b088      	sub	sp, #32
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e9bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d108      	bne.n	800e9d6 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e9c4:	f107 0208 	add.w	r2, r7, #8
 800e9c8:	2317      	movs	r3, #23
 800e9ca:	210d      	movs	r1, #13
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 ffa9 	bl	800f924 <VL53L1_ReadMulti>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e9d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d108      	bne.n	800e9f0 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800e9de:	f107 0308 	add.w	r3, r7, #8
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	2017      	movs	r0, #23
 800e9e8:	f7ff ff54 	bl	800e894 <VL53L1_i2c_decode_customer_nvm_managed>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e9f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3720      	adds	r7, #32
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	460b      	mov	r3, r1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ea0e:	897b      	ldrh	r3, [r7, #10]
 800ea10:	2b1f      	cmp	r3, #31
 800ea12:	d802      	bhi.n	800ea1a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea14:	f06f 0309 	mvn.w	r3, #9
 800ea18:	e0cf      	b.n	800ebba <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	881b      	ldrh	r3, [r3, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	2102      	movs	r1, #2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff f985 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ea30:	f002 0201 	and.w	r2, r2, #1
 800ea34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ea36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ea40:	f002 020f 	and.w	r2, r2, #15
 800ea44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ea46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ea50:	f002 020f 	and.w	r2, r2, #15
 800ea54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ea56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ea60:	f002 021f 	and.w	r2, r2, #31
 800ea64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ea66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ea70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ea74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ea76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ea80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ea84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ea86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ea90:	f002 0201 	and.w	r2, r2, #1
 800ea94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ea96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800eaa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800eaaa:	f002 0201 	and.w	r2, r2, #1
 800eaae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800eab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800eaba:	f002 0203 	and.w	r2, r2, #3
 800eabe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800eac0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800eaca:	f002 021f 	and.w	r2, r2, #31
 800eace:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ead0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800eada:	f002 0203 	and.w	r2, r2, #3
 800eade:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800eae0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800eaea:	f002 0203 	and.w	r2, r2, #3
 800eaee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800eaf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800eafa:	f002 0207 	and.w	r2, r2, #7
 800eafe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800eb00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800eb0a:	f002 021f 	and.w	r2, r2, #31
 800eb0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800eb10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800eb1a:	f002 0201 	and.w	r2, r2, #1
 800eb1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800eb20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800eb2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800eb34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800eb3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800eb48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800eb52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800eb5c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	8b18      	ldrh	r0, [r3, #24]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3318      	adds	r3, #24
 800eb66:	461a      	mov	r2, r3
 800eb68:	2102      	movs	r1, #2
 800eb6a:	f7ff f8e2 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800eb76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800eb80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800eb8a:	f002 020f 	and.w	r2, r2, #15
 800eb8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800eb90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800eb9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800eba4:	f002 020f 	and.w	r2, r2, #15
 800eba8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800ebaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800ebb4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ebb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3718      	adds	r7, #24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b086      	sub	sp, #24
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	60f8      	str	r0, [r7, #12]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	607a      	str	r2, [r7, #4]
 800ebce:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ebd4:	897b      	ldrh	r3, [r7, #10]
 800ebd6:	2b15      	cmp	r3, #21
 800ebd8:	d802      	bhi.n	800ebe0 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ebda:	f06f 0309 	mvn.w	r3, #9
 800ebde:	e070      	b.n	800ecc2 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ebf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ebfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800ec04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ec0a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800ec10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec14:	b298      	uxth	r0, r3
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3304      	adds	r3, #4
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	2102      	movs	r1, #2
 800ec1e:	f7ff f888 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800ec2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ec30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800ec3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ec44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800ec4e:	f002 0201 	and.w	r2, r2, #1
 800ec52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ec54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800ec5e:	f002 0207 	and.w	r2, r2, #7
 800ec62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ec64:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	8998      	ldrh	r0, [r3, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	330c      	adds	r3, #12
 800ec6e:	461a      	mov	r2, r3
 800ec70:	2102      	movs	r1, #2
 800ec72:	f7ff f85e 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	89d8      	ldrh	r0, [r3, #14]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	330e      	adds	r3, #14
 800ec7e:	461a      	mov	r2, r3
 800ec80:	2102      	movs	r1, #2
 800ec82:	f7ff f856 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	8a18      	ldrh	r0, [r3, #16]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3310      	adds	r3, #16
 800ec8e:	461a      	mov	r2, r3
 800ec90:	2102      	movs	r1, #2
 800ec92:	f7ff f84e 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ec9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800eca8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ecb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ecbc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ecbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b086      	sub	sp, #24
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	607a      	str	r2, [r7, #4]
 800ecd6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ecdc:	897b      	ldrh	r3, [r7, #10]
 800ecde:	2b16      	cmp	r3, #22
 800ece0:	d802      	bhi.n	800ece8 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ece2:	f06f 0309 	mvn.w	r3, #9
 800ece6:	e06e      	b.n	800edc6 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ecfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ed08:	f002 020f 	and.w	r2, r2, #15
 800ed0c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ed0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ed18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ed22:	f002 020f 	and.w	r2, r2, #15
 800ed26:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ed28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ed32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800ed3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ed40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ed42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ed4c:	f002 020f 	and.w	r2, r2, #15
 800ed50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ed52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ed5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800ed66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ed6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ed6c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	8958      	ldrh	r0, [r3, #10]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	330a      	adds	r3, #10
 800ed76:	461a      	mov	r2, r3
 800ed78:	2102      	movs	r1, #2
 800ed7a:	f7fe ffda 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	8998      	ldrh	r0, [r3, #12]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	330c      	adds	r3, #12
 800ed86:	461a      	mov	r2, r3
 800ed88:	2102      	movs	r1, #2
 800ed8a:	f7fe ffd2 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800ed96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800eda0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6918      	ldr	r0, [r3, #16]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3312      	adds	r3, #18
 800edaa:	461a      	mov	r2, r3
 800edac:	2104      	movs	r1, #4
 800edae:	f7ff f860 	bl	800de72 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800edba:	f002 0201 	and.w	r2, r2, #1
 800edbe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800edc0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800edc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b086      	sub	sp, #24
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	60f8      	str	r0, [r7, #12]
 800edd6:	460b      	mov	r3, r1
 800edd8:	607a      	str	r2, [r7, #4]
 800edda:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eddc:	2300      	movs	r3, #0
 800edde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ede0:	897b      	ldrh	r3, [r7, #10]
 800ede2:	2b11      	cmp	r3, #17
 800ede4:	d802      	bhi.n	800edec <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ede6:	f06f 0309 	mvn.w	r3, #9
 800edea:	e071      	b.n	800eed0 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0303 	and.w	r3, r3, #3
 800edf4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	8858      	ldrh	r0, [r3, #2]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3301      	adds	r3, #1
 800ee02:	461a      	mov	r2, r3
 800ee04:	2102      	movs	r1, #2
 800ee06:	f7fe ff94 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	8898      	ldrh	r0, [r3, #4]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3303      	adds	r3, #3
 800ee12:	461a      	mov	r2, r3
 800ee14:	2102      	movs	r1, #2
 800ee16:	f7fe ff8c 	bl	800dd32 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ee22:	f002 0201 	and.w	r2, r2, #1
 800ee26:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ee28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ee32:	f002 0207 	and.w	r2, r2, #7
 800ee36:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ee38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ee42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ee4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ee56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ee5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ee66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ee6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ee76:	f002 0203 	and.w	r2, r2, #3
 800ee7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ee7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ee86:	f002 0203 	and.w	r2, r2, #3
 800ee8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ee8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800ee96:	f002 020f 	and.w	r2, r2, #15
 800ee9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ee9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800eea6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800eeb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800eeba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800eec4:	f002 0203 	and.w	r2, r2, #3
 800eec8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800eeca:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3718      	adds	r7, #24
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b087      	sub	sp, #28
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	460b      	mov	r3, r1
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800eeea:	897b      	ldrh	r3, [r7, #10]
 800eeec:	2b04      	cmp	r3, #4
 800eeee:	d802      	bhi.n	800eef6 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eef0:	f06f 0309 	mvn.w	r3, #9
 800eef4:	e025      	b.n	800ef42 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800ef0c:	f002 0201 	and.w	r2, r2, #1
 800ef10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ef12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800ef1c:	f002 0201 	and.w	r2, r2, #1
 800ef20:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ef22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800ef2c:	f002 0203 	and.w	r2, r2, #3
 800ef30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ef32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ef3c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ef3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	371c      	adds	r7, #28
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b086      	sub	sp, #24
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	4603      	mov	r3, r0
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	607a      	str	r2, [r7, #4]
 800ef5a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ef60:	89fb      	ldrh	r3, [r7, #14]
 800ef62:	2b2b      	cmp	r3, #43	; 0x2b
 800ef64:	d802      	bhi.n	800ef6c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef66:	f06f 0309 	mvn.w	r3, #9
 800ef6a:	e0e2      	b.n	800f132 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef74:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	785a      	ldrb	r2, [r3, #1]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	3302      	adds	r3, #2
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 030f 	and.w	r3, r3, #15
 800ef8c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	78da      	ldrb	r2, [r3, #3]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	4619      	mov	r1, r3
 800efa0:	2002      	movs	r0, #2
 800efa2:	f7fe fef1 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800efa6:	4603      	mov	r3, r0
 800efa8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	3306      	adds	r3, #6
 800efb2:	4619      	mov	r1, r3
 800efb4:	2002      	movs	r0, #2
 800efb6:	f7fe fee7 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800efba:	4603      	mov	r3, r0
 800efbc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	3308      	adds	r3, #8
 800efc6:	4619      	mov	r1, r3
 800efc8:	2002      	movs	r0, #2
 800efca:	f7fe fedd 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800efce:	4603      	mov	r3, r0
 800efd0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	330a      	adds	r3, #10
 800efda:	4619      	mov	r1, r3
 800efdc:	2002      	movs	r0, #2
 800efde:	f7fe fed3 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800efe2:	4603      	mov	r3, r0
 800efe4:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	330c      	adds	r3, #12
 800efee:	4619      	mov	r1, r3
 800eff0:	2002      	movs	r0, #2
 800eff2:	f7fe fec9 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800eff6:	4603      	mov	r3, r0
 800eff8:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	330e      	adds	r3, #14
 800f002:	4619      	mov	r1, r3
 800f004:	2002      	movs	r0, #2
 800f006:	f7fe febf 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f00a:	4603      	mov	r3, r0
 800f00c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	3310      	adds	r3, #16
 800f016:	4619      	mov	r1, r3
 800f018:	2002      	movs	r0, #2
 800f01a:	f7fe feb5 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f01e:	4603      	mov	r3, r0
 800f020:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	3312      	adds	r3, #18
 800f02a:	4619      	mov	r1, r3
 800f02c:	2002      	movs	r0, #2
 800f02e:	f7fe feab 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f032:	4603      	mov	r3, r0
 800f034:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	3314      	adds	r3, #20
 800f03e:	4619      	mov	r1, r3
 800f040:	2002      	movs	r0, #2
 800f042:	f7fe fea1 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f046:	4603      	mov	r3, r0
 800f048:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	3316      	adds	r3, #22
 800f052:	4619      	mov	r1, r3
 800f054:	2002      	movs	r0, #2
 800f056:	f7fe fe97 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f05a:	4603      	mov	r3, r0
 800f05c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	3318      	adds	r3, #24
 800f066:	4619      	mov	r1, r3
 800f068:	2002      	movs	r0, #2
 800f06a:	f7fe fe8d 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f06e:	4603      	mov	r3, r0
 800f070:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	331a      	adds	r3, #26
 800f07a:	4619      	mov	r1, r3
 800f07c:	2002      	movs	r0, #2
 800f07e:	f7fe fe83 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f082:	4603      	mov	r3, r0
 800f084:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	331c      	adds	r3, #28
 800f08e:	4619      	mov	r1, r3
 800f090:	2002      	movs	r0, #2
 800f092:	f7fe fe79 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f096:	4603      	mov	r3, r0
 800f098:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	331e      	adds	r3, #30
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	2002      	movs	r0, #2
 800f0a6:	f7fe fe6f 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	3320      	adds	r3, #32
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	2002      	movs	r0, #2
 800f0ba:	f7fe fe65 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	3322      	adds	r3, #34	; 0x22
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	2002      	movs	r0, #2
 800f0ce:	f7fe fe5b 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	3324      	adds	r3, #36	; 0x24
 800f0de:	4619      	mov	r1, r3
 800f0e0:	2002      	movs	r0, #2
 800f0e2:	f7fe fe51 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	3326      	adds	r3, #38	; 0x26
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	2002      	movs	r0, #2
 800f0f6:	f7fe fe47 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	3328      	adds	r3, #40	; 0x28
 800f106:	4619      	mov	r1, r3
 800f108:	2002      	movs	r0, #2
 800f10a:	f7fe fe3d 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f10e:	4603      	mov	r3, r0
 800f110:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3718      	adds	r7, #24
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b086      	sub	sp, #24
 800f13e:	af00      	add	r7, sp, #0
 800f140:	4603      	mov	r3, r0
 800f142:	60b9      	str	r1, [r7, #8]
 800f144:	607a      	str	r2, [r7, #4]
 800f146:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f148:	2300      	movs	r3, #0
 800f14a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	2b20      	cmp	r3, #32
 800f150:	d802      	bhi.n	800f158 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f152:	f06f 0309 	mvn.w	r3, #9
 800f156:	e04d      	b.n	800f1f4 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f158:	68b9      	ldr	r1, [r7, #8]
 800f15a:	2004      	movs	r0, #4
 800f15c:	f7fe feb3 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f160:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	3304      	adds	r3, #4
 800f16a:	4619      	mov	r1, r3
 800f16c:	2004      	movs	r0, #4
 800f16e:	f7fe feaa 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f172:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	3308      	adds	r3, #8
 800f17c:	4619      	mov	r1, r3
 800f17e:	2004      	movs	r0, #4
 800f180:	f7fe febe 	bl	800df00 <VL53L1_i2c_decode_int32_t>
 800f184:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	330c      	adds	r3, #12
 800f18e:	4619      	mov	r1, r3
 800f190:	2004      	movs	r0, #4
 800f192:	f7fe fe98 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f196:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	3310      	adds	r3, #16
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	2004      	movs	r0, #4
 800f1a4:	f7fe fe8f 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f1a8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	3314      	adds	r3, #20
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	2004      	movs	r0, #4
 800f1b6:	f7fe fe86 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f1ba:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	3318      	adds	r3, #24
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	2004      	movs	r0, #4
 800f1c8:	f7fe fe9a 	bl	800df00 <VL53L1_i2c_decode_int32_t>
 800f1cc:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	331c      	adds	r3, #28
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	2004      	movs	r0, #4
 800f1da:	f7fe fe74 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f1de:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
 800f208:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f20a:	2300      	movs	r3, #0
 800f20c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f20e:	89fb      	ldrh	r3, [r7, #14]
 800f210:	2b37      	cmp	r3, #55	; 0x37
 800f212:	d802      	bhi.n	800f21a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f214:	f06f 0309 	mvn.w	r3, #9
 800f218:	e15e      	b.n	800f4d8 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	2002      	movs	r0, #2
 800f21e:	f7fe fdb3 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f222:	4603      	mov	r3, r0
 800f224:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	3302      	adds	r3, #2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f234:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	3303      	adds	r3, #3
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f244:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	3304      	adds	r3, #4
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	f003 0303 	and.w	r3, r3, #3
 800f254:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	3305      	adds	r3, #5
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	f003 0301 	and.w	r3, r3, #1
 800f264:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	3306      	adds	r3, #6
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f274:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	3307      	adds	r3, #7
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f284:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	3308      	adds	r3, #8
 800f28e:	4619      	mov	r1, r3
 800f290:	2002      	movs	r0, #2
 800f292:	f7fe fd79 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f296:	4603      	mov	r3, r0
 800f298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f29c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	330a      	adds	r3, #10
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	f003 0303 	and.w	r3, r3, #3
 800f2ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	330b      	adds	r3, #11
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	f003 0303 	and.w	r3, r3, #3
 800f2bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	330c      	adds	r3, #12
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	f003 030f 	and.w	r3, r3, #15
 800f2cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	330d      	adds	r3, #13
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	f003 0307 	and.w	r3, r3, #7
 800f2dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	330e      	adds	r3, #14
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	f003 0301 	and.w	r3, r3, #1
 800f2ec:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	330f      	adds	r3, #15
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	f003 0303 	and.w	r3, r3, #3
 800f2fc:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	7c1a      	ldrb	r2, [r3, #16]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	7c5a      	ldrb	r2, [r3, #17]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	3312      	adds	r3, #18
 800f316:	4619      	mov	r1, r3
 800f318:	2002      	movs	r0, #2
 800f31a:	f7fe fd35 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f31e:	4603      	mov	r3, r0
 800f320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f324:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	3316      	adds	r3, #22
 800f32e:	4619      	mov	r1, r3
 800f330:	2002      	movs	r0, #2
 800f332:	f7fe fd29 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f336:	4603      	mov	r3, r0
 800f338:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	3318      	adds	r3, #24
 800f342:	4619      	mov	r1, r3
 800f344:	2002      	movs	r0, #2
 800f346:	f7fe fd1f 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f34a:	4603      	mov	r3, r0
 800f34c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	331a      	adds	r3, #26
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	f003 0301 	and.w	r3, r3, #1
 800f35c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	331b      	adds	r3, #27
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 0307 	and.w	r3, r3, #7
 800f36c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	7f1a      	ldrb	r2, [r3, #28]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	7f5a      	ldrb	r2, [r3, #29]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	331e      	adds	r3, #30
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f38c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	331f      	adds	r3, #31
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f39c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	3320      	adds	r3, #32
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f003 0303 	and.w	r3, r3, #3
 800f3ac:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	3321      	adds	r3, #33	; 0x21
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 030f 	and.w	r3, r3, #15
 800f3bc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	3325      	adds	r3, #37	; 0x25
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	3326      	adds	r3, #38	; 0x26
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	f003 0303 	and.w	r3, r3, #3
 800f402:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	3327      	adds	r3, #39	; 0x27
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	f003 031f 	and.w	r3, r3, #31
 800f414:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	3328      	adds	r3, #40	; 0x28
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	f003 031f 	and.w	r3, r3, #31
 800f426:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	3329      	adds	r3, #41	; 0x29
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	f003 031f 	and.w	r3, r3, #31
 800f438:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	332a      	adds	r3, #42	; 0x2a
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	f003 0301 	and.w	r3, r3, #1
 800f44a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	332b      	adds	r3, #43	; 0x2b
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	332c      	adds	r3, #44	; 0x2c
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	f003 0303 	and.w	r3, r3, #3
 800f46e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	332d      	adds	r3, #45	; 0x2d
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f480:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	332e      	adds	r3, #46	; 0x2e
 800f48c:	4619      	mov	r1, r3
 800f48e:	2004      	movs	r0, #4
 800f490:	f7fe fd19 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f494:	4603      	mov	r3, r0
 800f496:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	3332      	adds	r3, #50	; 0x32
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	2004      	movs	r0, #4
 800f4a6:	f7fe fd0e 	bl	800dec6 <VL53L1_i2c_decode_uint32_t>
 800f4aa:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	3336      	adds	r3, #54	; 0x36
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3337      	adds	r3, #55	; 0x37
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f003 0301 	and.w	r3, r3, #1
 800f4cc:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f4d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f4f2:	89fb      	ldrh	r3, [r7, #14]
 800f4f4:	2b30      	cmp	r3, #48	; 0x30
 800f4f6:	d802      	bhi.n	800f4fe <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4f8:	f06f 0309 	mvn.w	r3, #9
 800f4fc:	e112      	b.n	800f724 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	785a      	ldrb	r2, [r3, #1]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	789a      	ldrb	r2, [r3, #2]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	3303      	adds	r3, #3
 800f51a:	4619      	mov	r1, r3
 800f51c:	2002      	movs	r0, #2
 800f51e:	f7fe fc33 	bl	800dd88 <VL53L1_i2c_decode_uint16_t>
 800f522:	4603      	mov	r3, r0
 800f524:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	3305      	adds	r3, #5
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f534:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	3306      	adds	r3, #6
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	f003 0307 	and.w	r3, r3, #7
 800f544:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3307      	adds	r3, #7
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0307 	and.w	r3, r3, #7
 800f554:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	3308      	adds	r3, #8
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f564:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	3309      	adds	r3, #9
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f574:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	330a      	adds	r3, #10
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	330b      	adds	r3, #11
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f594:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	330c      	adds	r3, #12
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0301 	and.w	r3, r3, #1
 800f5a4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	330d      	adds	r3, #13
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5b4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	330e      	adds	r3, #14
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5c4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	7bda      	ldrb	r2, [r3, #15]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	7c1a      	ldrb	r2, [r3, #16]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	7c5a      	ldrb	r2, [r3, #17]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	7c9a      	ldrb	r2, [r3, #18]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	7cda      	ldrb	r2, [r3, #19]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	7d1a      	ldrb	r2, [r3, #20]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	7d5a      	ldrb	r2, [r3, #21]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	7d9a      	ldrb	r2, [r3, #22]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7dda      	ldrb	r2, [r3, #23]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	7e1a      	ldrb	r2, [r3, #24]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	7e5a      	ldrb	r2, [r3, #25]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	7e9a      	ldrb	r2, [r3, #26]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	7eda      	ldrb	r2, [r3, #27]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	7f1a      	ldrb	r2, [r3, #28]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	7f5a      	ldrb	r2, [r3, #29]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	7f9a      	ldrb	r2, [r3, #30]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	7fda      	ldrb	r2, [r3, #31]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b090      	sub	sp, #64	; 0x40
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f736:	2300      	movs	r3, #0
 800f738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f73c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10a      	bne.n	800f75a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f744:	f107 020c 	add.w	r2, r7, #12
 800f748:	2331      	movs	r3, #49	; 0x31
 800f74a:	f240 110f 	movw	r1, #271	; 0x10f
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f8e8 	bl	800f924 <VL53L1_ReadMulti>
 800f754:	4603      	mov	r3, r0
 800f756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f75a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d109      	bne.n	800f776 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f762:	f107 030c 	add.w	r3, r7, #12
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	4619      	mov	r1, r3
 800f76a:	2031      	movs	r0, #49	; 0x31
 800f76c:	f7ff feb8 	bl	800f4e0 <VL53L1_i2c_decode_nvm_copy_data>
 800f770:	4603      	mov	r3, r0
 800f772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f776:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3740      	adds	r7, #64	; 0x40
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b086      	sub	sp, #24
 800f786:	af02      	add	r7, sp, #8
 800f788:	6078      	str	r0, [r7, #4]
 800f78a:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f790:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f9b9 	bl	800fb0c <VL53L1_WaitUs>
 800f79a:	4603      	mov	r3, r0
 800f79c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f79e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d10b      	bne.n	800f7be <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	9301      	str	r3, [sp, #4]
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	9300      	str	r3, [sp, #0]
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	22e5      	movs	r2, #229	; 0xe5
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f9bf 	bl	800fb38 <VL53L1_WaitValueMaskEx>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f7be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d103      	bne.n	800f7ce <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f7c6:	2103      	movs	r1, #3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7fe f896 	bl	800d8fa <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b088      	sub	sp, #32
 800f7de:	af02      	add	r7, sp, #8
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800f7fa:	f003 0310 	and.w	r3, r3, #16
 800f7fe:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d102      	bne.n	800f80c <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800f806:	2301      	movs	r3, #1
 800f808:	75fb      	strb	r3, [r7, #23]
 800f80a:	e001      	b.n	800f810 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800f810:	7dfb      	ldrb	r3, [r7, #23]
 800f812:	2201      	movs	r2, #1
 800f814:	9201      	str	r2, [sp, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	9200      	str	r2, [sp, #0]
 800f81a:	2231      	movs	r2, #49	; 0x31
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 f98a 	bl	800fb38 <VL53L1_WaitValueMaskEx>
 800f824:	4603      	mov	r3, r0
 800f826:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800f828:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af02      	add	r7, sp, #8
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	330a      	adds	r3, #10
 800f844:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f852:	b299      	uxth	r1, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	b29a      	uxth	r2, r3
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	4613      	mov	r3, r2
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	f7f5 f9b0 	bl	8004bc4 <HAL_I2C_Master_Transmit>
 800f864:	4603      	mov	r3, r0
 800f866:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f868:	693b      	ldr	r3, [r7, #16]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3718      	adds	r7, #24
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f872:	b580      	push	{r7, lr}
 800f874:	b088      	sub	sp, #32
 800f876:	af02      	add	r7, sp, #8
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	330a      	adds	r3, #10
 800f882:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f890:	f043 0301 	orr.w	r3, r3, #1
 800f894:	b2db      	uxtb	r3, r3
 800f896:	b299      	uxth	r1, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	f7f5 fa8c 	bl	8004dc0 <HAL_I2C_Master_Receive>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f8ac:	693b      	ldr	r3, [r7, #16]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
	...

0800f8b8 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	607a      	str	r2, [r7, #4]
 800f8c2:	603b      	str	r3, [r7, #0]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	2bff      	cmp	r3, #255	; 0xff
 800f8d0:	d902      	bls.n	800f8d8 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800f8d2:	f06f 0303 	mvn.w	r3, #3
 800f8d6:	e01d      	b.n	800f914 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800f8d8:	897b      	ldrh	r3, [r7, #10]
 800f8da:	0a1b      	lsrs	r3, r3, #8
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	4b0e      	ldr	r3, [pc, #56]	; (800f91c <VL53L1_WriteMulti+0x64>)
 800f8e2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f8e4:	897b      	ldrh	r3, [r7, #10]
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	4b0c      	ldr	r3, [pc, #48]	; (800f91c <VL53L1_WriteMulti+0x64>)
 800f8ea:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	480b      	ldr	r0, [pc, #44]	; (800f920 <VL53L1_WriteMulti+0x68>)
 800f8f2:	f000 fb97 	bl	8010024 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	3302      	adds	r3, #2
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	4907      	ldr	r1, [pc, #28]	; (800f91c <VL53L1_WriteMulti+0x64>)
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	f7ff ff98 	bl	800f834 <_I2CWrite>
 800f904:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f90c:	23f3      	movs	r3, #243	; 0xf3
 800f90e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	20000670 	.word	0x20000670
 800f920:	20000672 	.word	0x20000672

0800f924 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	607a      	str	r2, [r7, #4]
 800f92e:	603b      	str	r3, [r7, #0]
 800f930:	460b      	mov	r3, r1
 800f932:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f934:	2300      	movs	r3, #0
 800f936:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f938:	897b      	ldrh	r3, [r7, #10]
 800f93a:	0a1b      	lsrs	r3, r3, #8
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	4b12      	ldr	r3, [pc, #72]	; (800f98c <VL53L1_ReadMulti+0x68>)
 800f942:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f944:	897b      	ldrh	r3, [r7, #10]
 800f946:	b2da      	uxtb	r2, r3
 800f948:	4b10      	ldr	r3, [pc, #64]	; (800f98c <VL53L1_ReadMulti+0x68>)
 800f94a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f94c:	2202      	movs	r2, #2
 800f94e:	490f      	ldr	r1, [pc, #60]	; (800f98c <VL53L1_ReadMulti+0x68>)
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f7ff ff6f 	bl	800f834 <_I2CWrite>
 800f956:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d002      	beq.n	800f964 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f95e:	23f3      	movs	r3, #243	; 0xf3
 800f960:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f962:	e00c      	b.n	800f97e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f964:	683a      	ldr	r2, [r7, #0]
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f7ff ff82 	bl	800f872 <_I2CRead>
 800f96e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d002      	beq.n	800f97c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f976:	23f3      	movs	r3, #243	; 0xf3
 800f978:	75fb      	strb	r3, [r7, #23]
 800f97a:	e000      	b.n	800f97e <VL53L1_ReadMulti+0x5a>
    }
done:
 800f97c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800f97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20000670 	.word	0x20000670

0800f990 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	807b      	strh	r3, [r7, #2]
 800f99c:	4613      	mov	r3, r2
 800f99e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f9a4:	887b      	ldrh	r3, [r7, #2]
 800f9a6:	0a1b      	lsrs	r3, r3, #8
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	b2da      	uxtb	r2, r3
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	; (800f9e0 <VL53L1_WrByte+0x50>)
 800f9ae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f9b0:	887b      	ldrh	r3, [r7, #2]
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	4b0a      	ldr	r3, [pc, #40]	; (800f9e0 <VL53L1_WrByte+0x50>)
 800f9b6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800f9b8:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <VL53L1_WrByte+0x50>)
 800f9ba:	787b      	ldrb	r3, [r7, #1]
 800f9bc:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f9be:	2203      	movs	r2, #3
 800f9c0:	4907      	ldr	r1, [pc, #28]	; (800f9e0 <VL53L1_WrByte+0x50>)
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff ff36 	bl	800f834 <_I2CWrite>
 800f9c8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f9d0:	23f3      	movs	r3, #243	; 0xf3
 800f9d2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	20000670 	.word	0x20000670

0800f9e4 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	607a      	str	r2, [r7, #4]
 800f9f0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800f9f6:	897b      	ldrh	r3, [r7, #10]
 800f9f8:	0a1b      	lsrs	r3, r3, #8
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	b2da      	uxtb	r2, r3
 800f9fe:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <VL53L1_RdByte+0x64>)
 800fa00:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fa02:	897b      	ldrh	r3, [r7, #10]
 800fa04:	b2da      	uxtb	r2, r3
 800fa06:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <VL53L1_RdByte+0x64>)
 800fa08:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fa0a:	2202      	movs	r2, #2
 800fa0c:	490e      	ldr	r1, [pc, #56]	; (800fa48 <VL53L1_RdByte+0x64>)
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff ff10 	bl	800f834 <_I2CWrite>
 800fa14:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa1c:	23f3      	movs	r3, #243	; 0xf3
 800fa1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa20:	e00c      	b.n	800fa3c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fa22:	2201      	movs	r2, #1
 800fa24:	6879      	ldr	r1, [r7, #4]
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f7ff ff23 	bl	800f872 <_I2CRead>
 800fa2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d002      	beq.n	800fa3a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa34:	23f3      	movs	r3, #243	; 0xf3
 800fa36:	75fb      	strb	r3, [r7, #23]
 800fa38:	e000      	b.n	800fa3c <VL53L1_RdByte+0x58>
    }
done:
 800fa3a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800fa3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20000670 	.word	0x20000670

0800fa4c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b086      	sub	sp, #24
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	460b      	mov	r3, r1
 800fa56:	607a      	str	r2, [r7, #4]
 800fa58:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fa5e:	897b      	ldrh	r3, [r7, #10]
 800fa60:	0a1b      	lsrs	r3, r3, #8
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	b2da      	uxtb	r2, r3
 800fa66:	4b18      	ldr	r3, [pc, #96]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800fa68:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fa6a:	897b      	ldrh	r3, [r7, #10]
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	4b16      	ldr	r3, [pc, #88]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800fa70:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fa72:	2202      	movs	r2, #2
 800fa74:	4914      	ldr	r1, [pc, #80]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff fedc 	bl	800f834 <_I2CWrite>
 800fa7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa84:	23f3      	movs	r3, #243	; 0xf3
 800fa86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa88:	e017      	b.n	800faba <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fa8a:	2202      	movs	r2, #2
 800fa8c:	490e      	ldr	r1, [pc, #56]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f7ff feef 	bl	800f872 <_I2CRead>
 800fa94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa9c:	23f3      	movs	r3, #243	; 0xf3
 800fa9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800faa0:	e00b      	b.n	800faba <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800faa2:	4b09      	ldr	r3, [pc, #36]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	021b      	lsls	r3, r3, #8
 800faaa:	b29a      	uxth	r2, r3
 800faac:	4b06      	ldr	r3, [pc, #24]	; (800fac8 <VL53L1_RdWord+0x7c>)
 800faae:	785b      	ldrb	r3, [r3, #1]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	4413      	add	r3, r2
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800faba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20000670 	.word	0x20000670

0800facc <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fad4:	2300      	movs	r3, #0
 800fad6:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3714      	adds	r7, #20
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f3 fcda 	bl	80034b4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	4a06      	ldr	r2, [pc, #24]	; (800fb34 <VL53L1_WaitUs+0x28>)
 800fb1a:	fb82 1203 	smull	r1, r2, r2, r3
 800fb1e:	1192      	asrs	r2, r2, #6
 800fb20:	17db      	asrs	r3, r3, #31
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f3 fcc5 	bl	80034b4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	10624dd3 	.word	0x10624dd3

0800fb38 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fb38:	b590      	push	{r4, r7, lr}
 800fb3a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	f107 040c 	add.w	r4, r7, #12
 800fb44:	6020      	str	r0, [r4, #0]
 800fb46:	f107 0008 	add.w	r0, r7, #8
 800fb4a:	6001      	str	r1, [r0, #0]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	1dbb      	adds	r3, r7, #6
 800fb50:	801a      	strh	r2, [r3, #0]
 800fb52:	1d7b      	adds	r3, r7, #5
 800fb54:	460a      	mov	r2, r1
 800fb56:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800fb76:	2300      	movs	r3, #0
 800fb78:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fb7c:	f107 0310 	add.w	r3, r7, #16
 800fb80:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb84:	4935      	ldr	r1, [pc, #212]	; (800fc5c <VL53L1_WaitValueMaskEx+0x124>)
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fa62 	bl	8010050 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fb8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff ff9b 	bl	800facc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fb96:	e03f      	b.n	800fc18 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fb98:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10b      	bne.n	800fbb8 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fba0:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fba4:	1dbb      	adds	r3, r7, #6
 800fba6:	8819      	ldrh	r1, [r3, #0]
 800fba8:	f107 030c 	add.w	r3, r7, #12
 800fbac:	6818      	ldr	r0, [r3, #0]
 800fbae:	f7ff ff19 	bl	800f9e4 <VL53L1_RdByte>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fbb8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800fbbc:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800fbc0:	4013      	ands	r3, r2
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	1d7a      	adds	r2, r7, #5
 800fbc6:	7812      	ldrb	r2, [r2, #0]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d102      	bne.n	800fbd2 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fbd2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d112      	bne.n	800fc00 <VL53L1_WaitValueMaskEx+0xc8>
 800fbda:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10e      	bne.n	800fc00 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fbe2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00a      	beq.n	800fc00 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fbea:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	f7ff ff7a 	bl	800faee <VL53L1_WaitMs>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800fc00:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff ff61 	bl	800facc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800fc0a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800fc0e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fc18:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10a      	bne.n	800fc36 <VL53L1_WaitValueMaskEx+0xfe>
 800fc20:	f107 0308 	add.w	r3, r7, #8
 800fc24:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d203      	bcs.n	800fc36 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800fc2e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0b0      	beq.n	800fb98 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fc36:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d106      	bne.n	800fc4c <VL53L1_WaitValueMaskEx+0x114>
 800fc3e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d102      	bne.n	800fc4c <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fc46:	23f9      	movs	r3, #249	; 0xf9
 800fc48:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fc4c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd90      	pop	{r4, r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	0801030c 	.word	0x0801030c

0800fc60 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b0a4      	sub	sp, #144	; 0x90
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fc6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fc6e:	2200      	movs	r2, #0
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	605a      	str	r2, [r3, #4]
 800fc74:	609a      	str	r2, [r3, #8]
 800fc76:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fc78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	601a      	str	r2, [r3, #0]
 800fc80:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800fc82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	605a      	str	r2, [r3, #4]
 800fc8c:	609a      	str	r2, [r3, #8]
 800fc8e:	60da      	str	r2, [r3, #12]
 800fc90:	611a      	str	r2, [r3, #16]
 800fc92:	615a      	str	r2, [r3, #20]
 800fc94:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800fcb4:	e009      	b.n	800fcca <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800fcb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcba:	005b      	lsls	r3, r3, #1
 800fcbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fcc0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800fcca:	79fa      	ldrb	r2, [r7, #7]
 800fccc:	494d      	ldr	r1, [pc, #308]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	3310      	adds	r3, #16
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d3e8      	bcc.n	800fcb6 <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800fce4:	79fa      	ldrb	r2, [r7, #7]
 800fce6:	4947      	ldr	r1, [pc, #284]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fce8:	4613      	mov	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	440b      	add	r3, r1
 800fcf2:	3308      	adds	r3, #8
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4b43      	ldr	r3, [pc, #268]	; (800fe08 <DC_MOTOR_Init+0x1a8>)
 800fcfa:	fb03 f302 	mul.w	r3, r3, r2
 800fcfe:	4618      	mov	r0, r3
 800fd00:	79fa      	ldrb	r2, [r7, #7]
 800fd02:	4940      	ldr	r1, [pc, #256]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fd04:	4613      	mov	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	440b      	add	r3, r1
 800fd0e:	330c      	adds	r3, #12
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fd16:	fb02 f303 	mul.w	r3, r2, r3
 800fd1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800fd1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800fd22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd26:	3b01      	subs	r3, #1
 800fd28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800fd2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd30:	3b02      	subs	r3, #2
 800fd32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800fd36:	79fa      	ldrb	r2, [r7, #7]
 800fd38:	4932      	ldr	r1, [pc, #200]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4413      	add	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	440b      	add	r3, r1
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800fd48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd4c:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800fd4e:	2360      	movs	r3, #96	; 0x60
 800fd50:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800fd52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd56:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fd5c:	2380      	movs	r3, #128	; 0x80
 800fd5e:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800fd60:	f107 0308 	add.w	r3, r7, #8
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f7 fb89 	bl	800747c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd6e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800fd70:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800fd74:	f107 0308 	add.w	r3, r7, #8
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7f8 fc34 	bl	80085e8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800fd80:	f107 0308 	add.w	r3, r7, #8
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7f7 fd2f 	bl	80077e8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800fd92:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fd96:	f107 0308 	add.w	r3, r7, #8
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f9 fbc3 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fda2:	2360      	movs	r3, #96	; 0x60
 800fda4:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800fdb2:	79fa      	ldrb	r2, [r7, #7]
 800fdb4:	4913      	ldr	r1, [pc, #76]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdc8:	f107 0308 	add.w	r3, r7, #8
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7f8 fa33 	bl	8008238 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800fdd2:	f107 0308 	add.w	r3, r7, #8
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f3 f8f2 	bl	8002fc0 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800fddc:	79fa      	ldrb	r2, [r7, #7]
 800fdde:	4909      	ldr	r1, [pc, #36]	; (800fe04 <DC_MOTOR_Init+0x1a4>)
 800fde0:	4613      	mov	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	440b      	add	r3, r1
 800fdea:	3304      	adds	r3, #4
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	f107 0308 	add.w	r3, r7, #8
 800fdf2:	4611      	mov	r1, r2
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f7 fde7 	bl	80079c8 <HAL_TIM_PWM_Start>
}
 800fdfa:	bf00      	nop
 800fdfc:	3790      	adds	r7, #144	; 0x90
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	08010350 	.word	0x08010350
 800fe08:	000f4240 	.word	0x000f4240

0800fe0c <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	460a      	mov	r2, r1
 800fe16:	71fb      	strb	r3, [r7, #7]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800fe1c:	79fa      	ldrb	r2, [r7, #7]
 800fe1e:	4928      	ldr	r1, [pc, #160]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe20:	4613      	mov	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4413      	add	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	440b      	add	r3, r1
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10a      	bne.n	800fe48 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800fe32:	79fa      	ldrb	r2, [r7, #7]
 800fe34:	4922      	ldr	r1, [pc, #136]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe36:	4613      	mov	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	88ba      	ldrh	r2, [r7, #4]
 800fe44:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800fe46:	e035      	b.n	800feb4 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800fe48:	79fa      	ldrb	r2, [r7, #7]
 800fe4a:	491d      	ldr	r1, [pc, #116]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	4413      	add	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	440b      	add	r3, r1
 800fe56:	3304      	adds	r3, #4
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b04      	cmp	r3, #4
 800fe5c:	d10a      	bne.n	800fe74 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800fe5e:	79fa      	ldrb	r2, [r7, #7]
 800fe60:	4917      	ldr	r1, [pc, #92]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe62:	4613      	mov	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4413      	add	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	440b      	add	r3, r1
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	88ba      	ldrh	r2, [r7, #4]
 800fe70:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fe72:	e01f      	b.n	800feb4 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800fe74:	79fa      	ldrb	r2, [r7, #7]
 800fe76:	4912      	ldr	r1, [pc, #72]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe78:	4613      	mov	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	009b      	lsls	r3, r3, #2
 800fe80:	440b      	add	r3, r1
 800fe82:	3304      	adds	r3, #4
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b08      	cmp	r3, #8
 800fe88:	d10a      	bne.n	800fea0 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800fe8a:	79fa      	ldrb	r2, [r7, #7]
 800fe8c:	490c      	ldr	r1, [pc, #48]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fe8e:	4613      	mov	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	440b      	add	r3, r1
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	88ba      	ldrh	r2, [r7, #4]
 800fe9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fe9e:	e009      	b.n	800feb4 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800fea0:	79fa      	ldrb	r2, [r7, #7]
 800fea2:	4907      	ldr	r1, [pc, #28]	; (800fec0 <DC_MOTOR_Start+0xb4>)
 800fea4:	4613      	mov	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	440b      	add	r3, r1
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	88ba      	ldrh	r2, [r7, #4]
 800feb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800feb4:	bf00      	nop
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	08010350 	.word	0x08010350

0800fec4 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	460a      	mov	r2, r1
 800fece:	71fb      	strb	r3, [r7, #7]
 800fed0:	4613      	mov	r3, r2
 800fed2:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800fed4:	79fa      	ldrb	r2, [r7, #7]
 800fed6:	4928      	ldr	r1, [pc, #160]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	440b      	add	r3, r1
 800fee2:	3304      	adds	r3, #4
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d10a      	bne.n	800ff00 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800feea:	79fa      	ldrb	r2, [r7, #7]
 800feec:	4922      	ldr	r1, [pc, #136]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800feee:	4613      	mov	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	4413      	add	r3, r2
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	440b      	add	r3, r1
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	88ba      	ldrh	r2, [r7, #4]
 800fefc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800fefe:	e035      	b.n	800ff6c <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800ff00:	79fa      	ldrb	r2, [r7, #7]
 800ff02:	491d      	ldr	r1, [pc, #116]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800ff04:	4613      	mov	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	440b      	add	r3, r1
 800ff0e:	3304      	adds	r3, #4
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b04      	cmp	r3, #4
 800ff14:	d10a      	bne.n	800ff2c <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800ff16:	79fa      	ldrb	r2, [r7, #7]
 800ff18:	4917      	ldr	r1, [pc, #92]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4413      	add	r3, r2
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	440b      	add	r3, r1
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	88ba      	ldrh	r2, [r7, #4]
 800ff28:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ff2a:	e01f      	b.n	800ff6c <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800ff2c:	79fa      	ldrb	r2, [r7, #7]
 800ff2e:	4912      	ldr	r1, [pc, #72]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	4413      	add	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	440b      	add	r3, r1
 800ff3a:	3304      	adds	r3, #4
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b08      	cmp	r3, #8
 800ff40:	d10a      	bne.n	800ff58 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800ff42:	79fa      	ldrb	r2, [r7, #7]
 800ff44:	490c      	ldr	r1, [pc, #48]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800ff46:	4613      	mov	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	4413      	add	r3, r2
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	440b      	add	r3, r1
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	88ba      	ldrh	r2, [r7, #4]
 800ff54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ff56:	e009      	b.n	800ff6c <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800ff58:	79fa      	ldrb	r2, [r7, #7]
 800ff5a:	4907      	ldr	r1, [pc, #28]	; (800ff78 <DC_MOTOR_Set_Speed+0xb4>)
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4413      	add	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	440b      	add	r3, r1
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	88ba      	ldrh	r2, [r7, #4]
 800ff6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	08010350 	.word	0x08010350

0800ff7c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800ff80:	4b14      	ldr	r3, [pc, #80]	; (800ffd4 <DWT_Delay_Init+0x58>)
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	4a13      	ldr	r2, [pc, #76]	; (800ffd4 <DWT_Delay_Init+0x58>)
 800ff86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ff8a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800ff8c:	4b11      	ldr	r3, [pc, #68]	; (800ffd4 <DWT_Delay_Init+0x58>)
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	4a10      	ldr	r2, [pc, #64]	; (800ffd4 <DWT_Delay_Init+0x58>)
 800ff92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff96:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800ff98:	4b0f      	ldr	r3, [pc, #60]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a0e      	ldr	r2, [pc, #56]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ff9e:	f023 0301 	bic.w	r3, r3, #1
 800ffa2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800ffa4:	4b0c      	ldr	r3, [pc, #48]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a0b      	ldr	r2, [pc, #44]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ffaa:	f043 0301 	orr.w	r3, r3, #1
 800ffae:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800ffb0:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800ffb6:	bf00      	nop
    __ASM volatile ("NOP");
 800ffb8:	bf00      	nop
    __ASM volatile ("NOP");
 800ffba:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800ffbc:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <DWT_Delay_Init+0x5c>)
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e000      	b.n	800ffca <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800ffc8:	2301      	movs	r3, #1
    }
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	e000edf0 	.word	0xe000edf0
 800ffd8:	e0001000 	.word	0xe0001000

0800ffdc <__libc_init_array>:
 800ffdc:	b570      	push	{r4, r5, r6, lr}
 800ffde:	4d0d      	ldr	r5, [pc, #52]	; (8010014 <__libc_init_array+0x38>)
 800ffe0:	4c0d      	ldr	r4, [pc, #52]	; (8010018 <__libc_init_array+0x3c>)
 800ffe2:	1b64      	subs	r4, r4, r5
 800ffe4:	10a4      	asrs	r4, r4, #2
 800ffe6:	2600      	movs	r6, #0
 800ffe8:	42a6      	cmp	r6, r4
 800ffea:	d109      	bne.n	8010000 <__libc_init_array+0x24>
 800ffec:	4d0b      	ldr	r5, [pc, #44]	; (801001c <__libc_init_array+0x40>)
 800ffee:	4c0c      	ldr	r4, [pc, #48]	; (8010020 <__libc_init_array+0x44>)
 800fff0:	f000 f842 	bl	8010078 <_init>
 800fff4:	1b64      	subs	r4, r4, r5
 800fff6:	10a4      	asrs	r4, r4, #2
 800fff8:	2600      	movs	r6, #0
 800fffa:	42a6      	cmp	r6, r4
 800fffc:	d105      	bne.n	801000a <__libc_init_array+0x2e>
 800fffe:	bd70      	pop	{r4, r5, r6, pc}
 8010000:	f855 3b04 	ldr.w	r3, [r5], #4
 8010004:	4798      	blx	r3
 8010006:	3601      	adds	r6, #1
 8010008:	e7ee      	b.n	800ffe8 <__libc_init_array+0xc>
 801000a:	f855 3b04 	ldr.w	r3, [r5], #4
 801000e:	4798      	blx	r3
 8010010:	3601      	adds	r6, #1
 8010012:	e7f2      	b.n	800fffa <__libc_init_array+0x1e>
 8010014:	08010380 	.word	0x08010380
 8010018:	08010380 	.word	0x08010380
 801001c:	08010380 	.word	0x08010380
 8010020:	08010384 	.word	0x08010384

08010024 <memcpy>:
 8010024:	440a      	add	r2, r1
 8010026:	4291      	cmp	r1, r2
 8010028:	f100 33ff 	add.w	r3, r0, #4294967295
 801002c:	d100      	bne.n	8010030 <memcpy+0xc>
 801002e:	4770      	bx	lr
 8010030:	b510      	push	{r4, lr}
 8010032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010036:	f803 4f01 	strb.w	r4, [r3, #1]!
 801003a:	4291      	cmp	r1, r2
 801003c:	d1f9      	bne.n	8010032 <memcpy+0xe>
 801003e:	bd10      	pop	{r4, pc}

08010040 <memset>:
 8010040:	4402      	add	r2, r0
 8010042:	4603      	mov	r3, r0
 8010044:	4293      	cmp	r3, r2
 8010046:	d100      	bne.n	801004a <memset+0xa>
 8010048:	4770      	bx	lr
 801004a:	f803 1b01 	strb.w	r1, [r3], #1
 801004e:	e7f9      	b.n	8010044 <memset+0x4>

08010050 <strncpy>:
 8010050:	b510      	push	{r4, lr}
 8010052:	3901      	subs	r1, #1
 8010054:	4603      	mov	r3, r0
 8010056:	b132      	cbz	r2, 8010066 <strncpy+0x16>
 8010058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801005c:	f803 4b01 	strb.w	r4, [r3], #1
 8010060:	3a01      	subs	r2, #1
 8010062:	2c00      	cmp	r4, #0
 8010064:	d1f7      	bne.n	8010056 <strncpy+0x6>
 8010066:	441a      	add	r2, r3
 8010068:	2100      	movs	r1, #0
 801006a:	4293      	cmp	r3, r2
 801006c:	d100      	bne.n	8010070 <strncpy+0x20>
 801006e:	bd10      	pop	{r4, pc}
 8010070:	f803 1b01 	strb.w	r1, [r3], #1
 8010074:	e7f9      	b.n	801006a <strncpy+0x1a>
	...

08010078 <_init>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	bf00      	nop
 801007c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007e:	bc08      	pop	{r3}
 8010080:	469e      	mov	lr, r3
 8010082:	4770      	bx	lr

08010084 <_fini>:
 8010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010086:	bf00      	nop
 8010088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801008a:	bc08      	pop	{r3}
 801008c:	469e      	mov	lr, r3
 801008e:	4770      	bx	lr
