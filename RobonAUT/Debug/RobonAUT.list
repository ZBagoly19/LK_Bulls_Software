
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a00  08006a00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000078  08006a80  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08006a80  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170b0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002566  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  000396c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003a8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c7e  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001639e  00000000  00000000  0006169e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee171  00000000  00000000  00077a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  00165c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006928 	.word	0x08006928

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006928 	.word	0x08006928

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b0b2      	sub	sp, #200	; 0xc8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t ARR_Value = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    DWT_Delay_Init();
 8000de6:	f005 f90f 	bl	8006008 <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4a8e      	ldr	r2, [pc, #568]	; (8001028 <SERVO_Init+0x294>)
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	4413      	add	r3, r2
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a8d      	ldr	r2, [pc, #564]	; (800102c <SERVO_Init+0x298>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10e      	bne.n	8000e18 <SERVO_Init+0x84>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfe:	4b8c      	ldr	r3, [pc, #560]	; (8001030 <SERVO_Init+0x29c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a8b      	ldr	r2, [pc, #556]	; (8001030 <SERVO_Init+0x29c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b89      	ldr	r3, [pc, #548]	; (8001030 <SERVO_Init+0x29c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	e05a      	b.n	8000ece <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	4a83      	ldr	r2, [pc, #524]	; (8001028 <SERVO_Init+0x294>)
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	4413      	add	r3, r2
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a84      	ldr	r2, [pc, #528]	; (8001034 <SERVO_Init+0x2a0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d10e      	bne.n	8000e46 <SERVO_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2c:	4b80      	ldr	r3, [pc, #512]	; (8001030 <SERVO_Init+0x29c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a7f      	ldr	r2, [pc, #508]	; (8001030 <SERVO_Init+0x29c>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <SERVO_Init+0x29c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	e043      	b.n	8000ece <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	4a77      	ldr	r2, [pc, #476]	; (8001028 <SERVO_Init+0x294>)
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a79      	ldr	r2, [pc, #484]	; (8001038 <SERVO_Init+0x2a4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10e      	bne.n	8000e74 <SERVO_Init+0xe0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	4b75      	ldr	r3, [pc, #468]	; (8001030 <SERVO_Init+0x29c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a74      	ldr	r2, [pc, #464]	; (8001030 <SERVO_Init+0x29c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b72      	ldr	r3, [pc, #456]	; (8001030 <SERVO_Init+0x29c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	e02c      	b.n	8000ece <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4a6c      	ldr	r2, [pc, #432]	; (8001028 <SERVO_Init+0x294>)
 8000e78:	015b      	lsls	r3, r3, #5
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6f      	ldr	r2, [pc, #444]	; (800103c <SERVO_Init+0x2a8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10e      	bne.n	8000ea2 <SERVO_Init+0x10e>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	4b69      	ldr	r3, [pc, #420]	; (8001030 <SERVO_Init+0x29c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a68      	ldr	r2, [pc, #416]	; (8001030 <SERVO_Init+0x29c>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b66      	ldr	r3, [pc, #408]	; (8001030 <SERVO_Init+0x29c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	e015      	b.n	8000ece <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4a60      	ldr	r2, [pc, #384]	; (8001028 <SERVO_Init+0x294>)
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	4413      	add	r3, r2
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a64      	ldr	r2, [pc, #400]	; (8001040 <SERVO_Init+0x2ac>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10d      	bne.n	8000ece <SERVO_Init+0x13a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <SERVO_Init+0x29c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a5d      	ldr	r2, [pc, #372]	; (8001030 <SERVO_Init+0x29c>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <SERVO_Init+0x29c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4a55      	ldr	r2, [pc, #340]	; (8001028 <SERVO_Init+0x294>)
 8000ed2:	015b      	lsls	r3, r3, #5
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <SERVO_Init+0x294>)
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	4413      	add	r3, r2
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 feae 	bl	8002c5c <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a49      	ldr	r2, [pc, #292]	; (8001028 <SERVO_Init+0x294>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb19 	bl	8000544 <__aeabi_ui2d>
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <SERVO_Init+0x2b0>)
 8000f18:	f7ff fcb8 	bl	800088c <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fd9a 	bl	8000a5c <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <SERVO_Init+0x294>)
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4413      	add	r3, r2
 8000f36:	3314      	adds	r3, #20
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fb02 	bl	8000544 <__aeabi_ui2d>
 8000f40:	4604      	mov	r4, r0
 8000f42:	460d      	mov	r5, r1
 8000f44:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000f48:	f7ff fafc 	bl	8000544 <__aeabi_ui2d>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <SERVO_Init+0x2b4>)
 8000f52:	f7ff f9bb 	bl	80002cc <__adddf3>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <SERVO_Init+0x2b8>)
 8000f64:	f7ff fb68 	bl	8000638 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	4629      	mov	r1, r5
 8000f70:	f7ff fc8c 	bl	800088c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <SERVO_Init+0x2b4>)
 8000f82:	f7ff f9a1 	bl	80002c8 <__aeabi_dsub>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fd65 	bl	8000a5c <__aeabi_d2uiz>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <SERVO_Init+0x294>)
 8000f9c:	015b      	lsls	r3, r3, #5
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <SERVO_Init+0x2bc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10e      	bne.n	8000fc8 <SERVO_Init+0x234>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SERVO_Init+0x29c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <SERVO_Init+0x29c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <SERVO_Init+0x29c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	e05e      	b.n	8001086 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <SERVO_Init+0x294>)
 8000fcc:	015b      	lsls	r3, r3, #5
 8000fce:	4413      	add	r3, r2
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd8:	d10e      	bne.n	8000ff8 <SERVO_Init+0x264>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <SERVO_Init+0x29c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <SERVO_Init+0x29c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <SERVO_Init+0x29c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	e046      	b.n	8001086 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <SERVO_Init+0x294>)
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	4413      	add	r3, r2
 8001000:	3308      	adds	r3, #8
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <SERVO_Init+0x2c0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d126      	bne.n	8001058 <SERVO_Init+0x2c4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <SERVO_Init+0x29c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <SERVO_Init+0x29c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SERVO_Init+0x29c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	e02e      	b.n	8001086 <SERVO_Init+0x2f2>
 8001028:	0800698c 	.word	0x0800698c
 800102c:	40020000 	.word	0x40020000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	41490000 	.word	0x41490000
 8001048:	3ff00000 	.word	0x3ff00000
 800104c:	40490000 	.word	0x40490000
 8001050:	40010000 	.word	0x40010000
 8001054:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <SERVO_Init+0x440>)
 800105c:	015b      	lsls	r3, r3, #5
 800105e:	4413      	add	r3, r2
 8001060:	3308      	adds	r3, #8
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a5c      	ldr	r2, [pc, #368]	; (80011d8 <SERVO_Init+0x444>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <SERVO_Init+0x2f2>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <SERVO_Init+0x448>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a5a      	ldr	r2, [pc, #360]	; (80011dc <SERVO_Init+0x448>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <SERVO_Init+0x448>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <SERVO_Init+0x440>)
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	4413      	add	r3, r2
 800108e:	3308      	adds	r3, #8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Prescaler = PSC_Value;
 8001094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.Period = ARR_Value;
 800109e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIM_Base_Init(&htim);
 80010ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 feb8 	bl	8003e26 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80010be:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80010c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 faf3 	bl	80046b4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80010ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 ff66 	bl	8003fa4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80010e4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80010e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fee0 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.Pulse = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <SERVO_Init+0x440>)
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	4413      	add	r3, r2
 8001110:	3310      	adds	r3, #16
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fa07 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8001122:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001126:	f7ff fa0d 	bl	8000544 <__aeabi_ui2d>
 800112a:	4604      	mov	r4, r0
 800112c:	460d      	mov	r5, r1
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <SERVO_Init+0x440>)
 8001132:	015b      	lsls	r3, r3, #5
 8001134:	4413      	add	r3, r2
 8001136:	3318      	adds	r3, #24
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa24 	bl	8000588 <__aeabi_f2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <SERVO_Init+0x44c>)
 8001146:	f7ff fba1 	bl	800088c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fa71 	bl	8000638 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fc7c 	bl	8000a5c <__aeabi_d2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <SERVO_Init+0x450>)
 800116a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800116e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001172:	f7ff f9e7 	bl	8000544 <__aeabi_ui2d>
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <SERVO_Init+0x454>)
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa03 	bl	8000588 <__aeabi_f2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <SERVO_Init+0x44c>)
 8001188:	f7ff fb80 	bl	800088c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff fa50 	bl	8000638 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	88fc      	ldrh	r4, [r7, #6]
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fc5b 	bl	8000a5c <__aeabi_d2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b299      	uxth	r1, r3
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <SERVO_Init+0x450>)
 80011ac:	00a3      	lsls	r3, r4, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <SERVO_Init+0x440>)
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	4413      	add	r3, r2
 80011bc:	3310      	adds	r3, #16
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff3c 	bl	8004044 <HAL_TIM_PWM_Start>
}
 80011cc:	bf00      	nop
 80011ce:	37c8      	adds	r7, #200	; 0xc8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	0800698c 	.word	0x0800698c
 80011d8:	40000800 	.word	0x40000800
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40340000 	.word	0x40340000
 80011e4:	20000094 	.word	0x20000094
 80011e8:	40133333 	.word	0x40133333

080011ec <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	ed87 0a00 	vstr	s0, [r7]
 80011f8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <SERVO_MoveTo+0x94>)
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	885b      	ldrh	r3, [r3, #2]
 8001208:	4619      	mov	r1, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <SERVO_MoveTo+0x94>)
 800120e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001212:	1acb      	subs	r3, r1, r3
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	edd7 7a00 	vldr	s15, [r7]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	ee17 0a90 	vmov	r0, s15
 8001228:	f7ff f9ae 	bl	8000588 <__aeabi_f2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <SERVO_MoveTo+0x98>)
 8001232:	f7ff fb2b 	bl	800088c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <SERVO_MoveTo+0x94>)
 8001242:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f98c 	bl	8000564 <__aeabi_i2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff f83a 	bl	80002cc <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fbfc 	bl	8000a5c <__aeabi_d2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <SERVO_MoveTo+0x9c>)
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	4413      	add	r3, r2
 8001270:	330c      	adds	r3, #12
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	89fa      	ldrh	r2, [r7, #14]
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bdb0      	pop	{r4, r5, r7, pc}
 8001280:	20000094 	.word	0x20000094
 8001284:	40668000 	.word	0x40668000
 8001288:	0800698c 	.word	0x0800698c

0800128c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_UART_RxCpltCallback+0x48>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d111      	bne.n	80012c0 <HAL_UART_RxCpltCallback+0x34>
	{
		//erosen kerdeses
		if(bluetooth_rx == 0x0A)
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_UART_RxCpltCallback+0x4c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d102      	bne.n	80012aa <HAL_UART_RxCpltCallback+0x1e>
			bluetooth_flag = 1;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_UART_RxCpltCallback+0x50>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_UART_RxCpltCallback+0x4c>)
 80012b0:	7811      	ldrb	r1, [r2, #0]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_UART_RxCpltCallback+0x58>)
 80012b4:	54d1      	strb	r1, [r2, r3]
		bluetooth_a++;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012be:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	4905      	ldr	r1, [pc, #20]	; (80012d8 <HAL_UART_RxCpltCallback+0x4c>)
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <HAL_UART_RxCpltCallback+0x48>)
 80012c6:	f003 ffb6 	bl	8005236 <HAL_UART_Receive_IT>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000504 	.word	0x20000504
 80012d8:	20000154 	.word	0x20000154
 80012dc:	20000098 	.word	0x20000098
 80012e0:	2000009c 	.word	0x2000009c
 80012e4:	200000a0 	.word	0x200000a0

080012e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d122      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//itt kell kiirni amire kivancsiak vagyunk a stringben
		sprintf(bluetooth_buffer, "%i -edik uzenet \t kivant sebesseg: %i \t allapot: %c kanyar/egyenes: %c \r\n",
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4914      	ldr	r1, [pc, #80]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001302:	7809      	ldrb	r1, [r1, #0]
 8001304:	4608      	mov	r0, r1
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001308:	7809      	ldrb	r1, [r1, #0]
 800130a:	9101      	str	r1, [sp, #4]
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001312:	f004 fee9 	bl	80060e8 <siprintf>
				bluetooth_i, kivant_sebesseg, sc_vagy_gyorskor, kanyarban_vagy_egyenes);
		bluetooth_i++;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800131e:	6013      	str	r3, [r2, #0]
		bluetooth_len = strlen(bluetooth_buffer);
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001322:	f7fe ff75 	bl	8000210 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800132c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800133a:	f003 feea 	bl	8005112 <HAL_UART_Transmit>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200004bc 	.word	0x200004bc
 800134c:	20000144 	.word	0x20000144
 8001350:	20000000 	.word	0x20000000
 8001354:	20000005 	.word	0x20000005
 8001358:	20000004 	.word	0x20000004
 800135c:	08006940 	.word	0x08006940
 8001360:	200000e0 	.word	0x200000e0
 8001364:	200000dc 	.word	0x200000dc
 8001368:	20000504 	.word	0x20000504

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[50];
  VL53L1_RangingMeasurementData_t RangingData;
  VL53L1_Dev_t  vl53l1_c; // center module
  VL53L1_DEV    Dev = &vl53l1_c;
 8001374:	463b      	mov	r3, r7
 8001376:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f001 fa35 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 f851 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001382:	f000 fc5d 	bl	8001c40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001386:	f000 fc31 	bl	8001bec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800138a:	f000 f8b7 	bl	80014fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800138e:	f000 f8e3 	bl	8001558 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001392:	f000 f93d 	bl	8001610 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001396:	f000 f971 	bl	800167c <MX_SPI2_Init>
  MX_SPI3_Init();
 800139a:	f000 f9a5 	bl	80016e8 <MX_SPI3_Init>
  MX_TIM3_Init();
 800139e:	f000 fa27 	bl	80017f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013a2:	f000 fa7f 	bl	80018a4 <MX_TIM4_Init>
  MX_UART4_Init();
 80013a6:	f000 fbcd 	bl	8001b44 <MX_UART4_Init>
  MX_TIM8_Init();
 80013aa:	f000 facf 	bl	800194c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013ae:	f000 fbf3 	bl	8001b98 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80013b2:	f000 f8ff 	bl	80015b4 <MX_I2C3_Init>
  MX_TIM12_Init();
 80013b6:	f000 fb75 	bl	8001aa4 <MX_TIM12_Init>
  MX_TIM2_Init();
 80013ba:	f000 f9cb 	bl	8001754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(SZERVO);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fce8 	bl	8000d94 <SERVO_Init>
  HAL_UART_Receive_IT(&huart2, &bluetooth_rx, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <main+0xa4>)
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <main+0xa8>)
 80013ca:	f003 ff34 	bl	8005236 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <main+0xac>)
 80013d0:	f002 fd78 	bl	8003ec4 <HAL_TIM_Base_Start_IT>

  // initialize vl53l1x communication parameters
  Dev->I2cHandle = &hi2c1;
 80013d4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <main+0xb0>)
 80013da:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 80013de:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80013e2:	2252      	movs	r2, #82	; 0x52
 80013e4:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
  {
	  //Bluetooth iras/olvasas logika
	  //HC05 Module-ban van puska

	  //Szervo
	  SERVO_MoveTo(SZERVO, 30.0);
 80013e8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fefd 	bl	80011ec <SERVO_MoveTo>
	  HAL_Delay(1000);
 80013f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f6:	f001 fa69 	bl	80028cc <HAL_Delay>
	  SERVO_MoveTo(SZERVO, 150);
 80013fa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001420 <main+0xb4>
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fef4 	bl	80011ec <SERVO_MoveTo>
	  HAL_Delay(1000);
 8001404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001408:	f001 fa60 	bl	80028cc <HAL_Delay>
	  SERVO_MoveTo(SZERVO, 30.0);
 800140c:	e7ec      	b.n	80013e8 <main+0x7c>
 800140e:	bf00      	nop
 8001410:	20000154 	.word	0x20000154
 8001414:	20000504 	.word	0x20000504
 8001418:	200004bc 	.word	0x200004bc
 800141c:	20000294 	.word	0x20000294
 8001420:	43160000 	.word	0x43160000

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2234      	movs	r2, #52	; 0x34
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fe50 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <SystemClock_Config+0xd0>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <SystemClock_Config+0xd0>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <SystemClock_Config+0xd0>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <SystemClock_Config+0xd4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <SystemClock_Config+0xd4>)
 8001472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <SystemClock_Config+0xd4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2310      	movs	r3, #16
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001494:	2300      	movs	r3, #0
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001498:	2308      	movs	r3, #8
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800149c:	2348      	movs	r3, #72	; 0x48
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f991 	bl	80037d8 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014bc:	f000 fc82 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2102      	movs	r1, #2
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 feaf 	bl	8003240 <HAL_RCC_ClockConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80014e8:	f000 fc6c 	bl	8001dc4 <Error_Handler>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2C1_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_I2C1_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_I2C1_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_I2C1_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_I2C1_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_I2C1_Init+0x50>)
 800153a:	f001 fd3d 	bl	8002fb8 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 fc3e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000294 	.word	0x20000294
 8001550:	40005400 	.word	0x40005400
 8001554:	000186a0 	.word	0x000186a0

08001558 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C2_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C2_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C2_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C2_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C2_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C2_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C2_Init+0x50>)
 8001596:	f001 fd0f 	bl	8002fb8 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 fc10 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002e8 	.word	0x200002e8
 80015ac:	40005800 	.word	0x40005800
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C3_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_I2C3_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C3_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_I2C3_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C3_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_I2C3_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_I2C3_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_I2C3_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_I2C3_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_I2C3_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_I2C3_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_I2C3_Init+0x50>)
 80015f2:	f001 fce1 	bl	8002fb8 <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f000 fbe2 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000158 	.word	0x20000158
 8001608:	40005c00 	.word	0x40005c00
 800160c:	000186a0 	.word	0x000186a0

08001610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_SPI1_Init+0x64>)
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <MX_SPI1_Init+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_SPI1_Init+0x64>)
 800161c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_SPI1_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_SPI1_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_SPI1_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_SPI1_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_SPI1_Init+0x64>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_SPI1_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_SPI1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_SPI1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_SPI1_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_SPI1_Init+0x64>)
 800165c:	220a      	movs	r2, #10
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_SPI1_Init+0x64>)
 8001662:	f002 fb57 	bl	8003d14 <HAL_SPI_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800166c:	f000 fbaa 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000464 	.word	0x20000464
 8001678:	40013000 	.word	0x40013000

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SPI2_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016ce:	f002 fb21 	bl	8003d14 <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 fb74 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001ac 	.word	0x200001ac
 80016e4:	40003800 	.word	0x40003800

080016e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_SPI3_Init+0x64>)
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <MX_SPI3_Init+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_SPI3_Init+0x64>)
 80016f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_SPI3_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_SPI3_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_SPI3_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_SPI3_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_SPI3_Init+0x64>)
 8001714:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001718:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_SPI3_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_SPI3_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_SPI3_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_SPI3_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_SPI3_Init+0x64>)
 8001734:	220a      	movs	r2, #10
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_SPI3_Init+0x64>)
 800173a:	f002 faeb 	bl	8003d14 <HAL_SPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001744:	f000 fb3e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000384 	.word	0x20000384
 8001750:	40003c00 	.word	0x40003c00

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MX_TIM2_Init+0x98>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_TIM2_Init+0x98>)
 800177a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800177e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_TIM2_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_TIM2_Init+0x98>)
 8001788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800178c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_TIM2_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_TIM2_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <MX_TIM2_Init+0x98>)
 800179c:	f002 fb43 	bl	8003e26 <HAL_TIM_Base_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017a6:	f000 fb0d 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_TIM2_Init+0x98>)
 80017b8:	f002 ff7c 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017c2:	f000 faff 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <MX_TIM2_Init+0x98>)
 80017d4:	f003 fb6e 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017de:	f000 faf1 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200004bc 	.word	0x200004bc

080017f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_TIM3_Init+0xac>)
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <MX_TIM3_Init+0xb0>)
 8001816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <MX_TIM3_Init+0xac>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_TIM3_Init+0xac>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_TIM3_Init+0xac>)
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_TIM3_Init+0xac>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_TIM3_Init+0xac>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <MX_TIM3_Init+0xac>)
 800183a:	f002 fbb3 	bl	8003fa4 <HAL_TIM_PWM_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001844:	f000 fabe 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4619      	mov	r1, r3
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_TIM3_Init+0xac>)
 8001858:	f003 fb2c 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001862:	f000 faaf 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001866:	2360      	movs	r3, #96	; 0x60
 8001868:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM3_Init+0xac>)
 800187e:	f002 fe57 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001888:	f000 fa9c 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM3_Init+0xac>)
 800188e:	f000 fd97 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000033c 	.word	0x2000033c
 80018a0:	40000400 	.word	0x40000400

080018a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 fc10 	bl	80060d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <MX_TIM4_Init+0xa4>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_TIM4_Init+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018fe:	2301      	movs	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_TIM4_Init+0xa0>)
 8001912:	f002 fc5f 	bl	80041d4 <HAL_TIM_Encoder_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800191c:	f000 fa52 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_TIM4_Init+0xa0>)
 800192e:	f003 fac1 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001938:	f000 fa44 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3730      	adds	r7, #48	; 0x30
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000024c 	.word	0x2000024c
 8001948:	40000800 	.word	0x40000800

0800194c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b096      	sub	sp, #88	; 0x58
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2220      	movs	r2, #32
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f004 fba7 	bl	80060d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <MX_TIM8_Init+0x150>)
 800198c:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <MX_TIM8_Init+0x154>)
 800198e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <MX_TIM8_Init+0x150>)
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a4:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019b6:	4839      	ldr	r0, [pc, #228]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019b8:	f002 fa35 	bl	8003e26 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80019c2:	f000 f9ff 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019d0:	4619      	mov	r1, r3
 80019d2:	4832      	ldr	r0, [pc, #200]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019d4:	f002 fe6e 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019de:	f000 f9f1 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019e2:	482e      	ldr	r0, [pc, #184]	; (8001a9c <MX_TIM8_Init+0x150>)
 80019e4:	f002 fade 	bl	8003fa4 <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80019ee:	f000 f9e9 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fe:	4619      	mov	r1, r3
 8001a00:	4826      	ldr	r0, [pc, #152]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001a02:	f003 fa57 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a0c:	f000 f9da 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a10:	2360      	movs	r3, #96	; 0x60
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	2204      	movs	r2, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4819      	ldr	r0, [pc, #100]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001a36:	f002 fd7b 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001a40:	f000 f9c0 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001a4e:	f002 fd6f 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a58:	f000 f9b4 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001a80:	f003 fa94 	bl	8004fac <HAL_TIMEx_ConfigBreakDeadTime>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001a8a:	f000 f99b 	bl	8001dc4 <Error_Handler>
  /* USER CODE BEGIN TIM8_Init 2 */

  //Itt kell megivni a DC_MOTOR_Init() -et

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM8_Init+0x150>)
 8001a90:	f000 fc96 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3758      	adds	r7, #88	; 0x58
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000204 	.word	0x20000204
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <MX_TIM12_Init+0x9c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001ae4:	f002 fa5e 	bl	8003fa4 <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001aee:	f000 f969 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	2360      	movs	r3, #96	; 0x60
 8001af4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001b0a:	f002 fd11 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001b14:	f000 f956 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001b20:	f002 fd06 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001b2a:	f000 f94b 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM12_Init+0x98>)
 8001b30:	f000 fc46 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000548 	.word	0x20000548
 8001b40:	40001800 	.word	0x40001800

08001b44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_UART4_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_UART4_Init+0x4c>)
 8001b7c:	f003 fa7c 	bl	8005078 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f91d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000420 	.word	0x20000420
 8001b94:	40004c00 	.word	0x40004c00

08001b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART1_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f003 fa52 	bl	8005078 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 f8f3 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200003dc 	.word	0x200003dc
 8001be8:	40011000 	.word	0x40011000

08001bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART2_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f003 fa28 	bl	8005078 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f8c9 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000504 	.word	0x20000504
 8001c3c:	40004400 	.word	0x40004400

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <MX_GPIO_Init+0x170>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	213d      	movs	r1, #61	; 0x3d
 8001ce6:	4833      	ldr	r0, [pc, #204]	; (8001db4 <MX_GPIO_Init+0x174>)
 8001ce8:	f001 f94c 	bl	8002f84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f641 0102 	movw	r1, #6146	; 0x1802
 8001cf2:	4831      	ldr	r0, [pc, #196]	; (8001db8 <MX_GPIO_Init+0x178>)
 8001cf4:	f001 f946 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f241 0126 	movw	r1, #4134	; 0x1026
 8001cfe:	482f      	ldr	r0, [pc, #188]	; (8001dbc <MX_GPIO_Init+0x17c>)
 8001d00:	f001 f940 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4826      	ldr	r0, [pc, #152]	; (8001db4 <MX_GPIO_Init+0x174>)
 8001d1c:	f000 ff9e 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d20:	233d      	movs	r3, #61	; 0x3d
 8001d22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	481f      	ldr	r0, [pc, #124]	; (8001db4 <MX_GPIO_Init+0x174>)
 8001d38:	f000 ff90 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001d3c:	f641 0302 	movw	r3, #6146	; 0x1802
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_GPIO_Init+0x178>)
 8001d56:	f000 ff81 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <MX_GPIO_Init+0x178>)
 8001d6e:	f000 ff75 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8001d72:	f241 0326 	movw	r3, #4134	; 0x1026
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_GPIO_Init+0x17c>)
 8001d8c:	f000 ff66 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d90:	2304      	movs	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <MX_GPIO_Init+0x180>)
 8001da4:	f000 ff5a 	bl	8002c5c <HAL_GPIO_Init>

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e0e:	2007      	movs	r0, #7
 8001e10:	f000 fe50 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b090      	sub	sp, #64	; 0x40
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6b      	ldr	r2, [pc, #428]	; (8001fec <HAL_I2C_MspInit+0x1cc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12d      	bne.n	8001e9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e46:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a69      	ldr	r2, [pc, #420]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e70:	2304      	movs	r3, #4
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	485e      	ldr	r0, [pc, #376]	; (8001ff4 <HAL_I2C_MspInit+0x1d4>)
 8001e7c:	f000 feee 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e9c:	e0a2      	b.n	8001fe4 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_I2C_MspInit+0x1d8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d14c      	bne.n	8001f42 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efa:	4619      	mov	r1, r3
 8001efc:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <HAL_I2C_MspInit+0x1d4>)
 8001efe:	f000 fead 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f08:	2312      	movs	r3, #18
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f14:	2304      	movs	r3, #4
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4837      	ldr	r0, [pc, #220]	; (8001ffc <HAL_I2C_MspInit+0x1dc>)
 8001f20:	f000 fe9c 	bl	8002c5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
}
 8001f40:	e050      	b.n	8001fe4 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <HAL_I2C_MspInit+0x1e0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d14b      	bne.n	8001fe4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f96:	2304      	movs	r3, #4
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4816      	ldr	r0, [pc, #88]	; (8001ffc <HAL_I2C_MspInit+0x1dc>)
 8001fa2:	f000 fe5b 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4810      	ldr	r0, [pc, #64]	; (8002004 <HAL_I2C_MspInit+0x1e4>)
 8001fc4:	f000 fe4a 	bl	8002c5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001fd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_I2C_MspInit+0x1d0>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3740      	adds	r7, #64	; 0x40
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40005c00 	.word	0x40005c00
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b090      	sub	sp, #64	; 0x40
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a81      	ldr	r2, [pc, #516]	; (800222c <HAL_SPI_MspInit+0x224>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12c      	bne.n	8002084 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
 800202e:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b7d      	ldr	r3, [pc, #500]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	4b79      	ldr	r3, [pc, #484]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a78      	ldr	r2, [pc, #480]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002062:	23e0      	movs	r3, #224	; 0xe0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002072:	2305      	movs	r3, #5
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207a:	4619      	mov	r1, r3
 800207c:	486d      	ldr	r0, [pc, #436]	; (8002234 <HAL_SPI_MspInit+0x22c>)
 800207e:	f000 fded 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002082:	e0cf      	b.n	8002224 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6b      	ldr	r2, [pc, #428]	; (8002238 <HAL_SPI_MspInit+0x230>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d14b      	bne.n	8002126 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a66      	ldr	r2, [pc, #408]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_SPI_MspInit+0x228>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020e2:	2302      	movs	r3, #2
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80020f2:	2307      	movs	r3, #7
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fa:	4619      	mov	r1, r3
 80020fc:	484f      	ldr	r0, [pc, #316]	; (800223c <HAL_SPI_MspInit+0x234>)
 80020fe:	f000 fdad 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002114:	2305      	movs	r3, #5
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	4848      	ldr	r0, [pc, #288]	; (8002240 <HAL_SPI_MspInit+0x238>)
 8002120:	f000 fd9c 	bl	8002c5c <HAL_GPIO_Init>
}
 8002124:	e07e      	b.n	8002224 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_SPI_MspInit+0x23c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d179      	bne.n	8002224 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_SPI_MspInit+0x228>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_SPI_MspInit+0x228>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a0:	2301      	movs	r3, #1
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80021b0:	2307      	movs	r3, #7
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4821      	ldr	r0, [pc, #132]	; (8002240 <HAL_SPI_MspInit+0x238>)
 80021bc:	f000 fd4e 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d2:	2306      	movs	r3, #6
 80021d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	4815      	ldr	r0, [pc, #84]	; (8002234 <HAL_SPI_MspInit+0x22c>)
 80021de:	f000 fd3d 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f4:	2306      	movs	r3, #6
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fc:	4619      	mov	r1, r3
 80021fe:	480f      	ldr	r0, [pc, #60]	; (800223c <HAL_SPI_MspInit+0x234>)
 8002200:	f000 fd2c 	bl	8002c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002204:	2310      	movs	r3, #16
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002214:	2306      	movs	r3, #6
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221c:	4619      	mov	r1, r3
 800221e:	4808      	ldr	r0, [pc, #32]	; (8002240 <HAL_SPI_MspInit+0x238>)
 8002220:	f000 fd1c 	bl	8002c5c <HAL_GPIO_Init>
}
 8002224:	bf00      	nop
 8002226:	3740      	adds	r7, #64	; 0x40
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013000 	.word	0x40013000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	40003800 	.word	0x40003800
 800223c:	40020800 	.word	0x40020800
 8002240:	40020400 	.word	0x40020400
 8002244:	40003c00 	.word	0x40003c00

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d116      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	201c      	movs	r0, #28
 800227c:	f000 fc25 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002280:	201c      	movs	r0, #28
 8002282:	f000 fc3e 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002286:	e012      	b.n	80022ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_TIM_Base_MspInit+0x74>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_TIM_Base_MspInit+0x70>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_TIM_PWM_MspInit+0x64>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022ee:	e012      	b.n	8002316 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_TIM_PWM_MspInit+0x6c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10d      	bne.n	8002316 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 8002304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_TIM_PWM_MspInit+0x68>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40000400 	.word	0x40000400
 8002328:	40023800 	.word	0x40023800
 800232c:	40001800 	.word	0x40001800

08002330 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12b      	bne.n	80023aa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238a:	23c0      	movs	r3, #192	; 0xc0
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800239a:	2302      	movs	r3, #2
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80023a6:	f000 fc59 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020400 	.word	0x40020400

080023c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a37      	ldr	r2, [pc, #220]	; (80024bc <HAL_TIM_MspPostInit+0xfc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11e      	bne.n	8002420 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023fe:	2340      	movs	r3, #64	; 0x40
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800240e:	2302      	movs	r3, #2
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	482a      	ldr	r0, [pc, #168]	; (80024c4 <HAL_TIM_MspPostInit+0x104>)
 800241a:	f000 fc1f 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800241e:	e048      	b.n	80024b2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_TIM_MspPostInit+0x108>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11f      	bne.n	800246a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002446:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002458:	2303      	movs	r3, #3
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4818      	ldr	r0, [pc, #96]	; (80024c4 <HAL_TIM_MspPostInit+0x104>)
 8002464:	f000 fbfa 	bl	8002c5c <HAL_GPIO_Init>
}
 8002468:	e023      	b.n	80024b2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_TIM_MspPostInit+0x10c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d11e      	bne.n	80024b2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_MspPostInit+0x100>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002490:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024a2:	2309      	movs	r3, #9
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <HAL_TIM_MspPostInit+0x110>)
 80024ae:	f000 fbd5 	bl	8002c5c <HAL_GPIO_Init>
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40001800 	.word	0x40001800
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <HAL_UART_MspInit+0x19c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d153      	bne.n	800259e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a5d      	ldr	r2, [pc, #372]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b54      	ldr	r3, [pc, #336]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800255a:	2308      	movs	r3, #8
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4844      	ldr	r0, [pc, #272]	; (8002678 <HAL_UART_MspInit+0x1a4>)
 8002566:	f000 fb79 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800256a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800257c:	2308      	movs	r3, #8
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	483d      	ldr	r0, [pc, #244]	; (800267c <HAL_UART_MspInit+0x1a8>)
 8002588:	f000 fb68 	bl	8002c5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2034      	movs	r0, #52	; 0x34
 8002592:	f000 fa9a 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002596:	2034      	movs	r0, #52	; 0x34
 8002598:	f000 fab3 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800259c:	e063      	b.n	8002666 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a37      	ldr	r2, [pc, #220]	; (8002680 <HAL_UART_MspInit+0x1ac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d12d      	bne.n	8002604 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6453      	str	r3, [r2, #68]	; 0x44
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6313      	str	r3, [r2, #48]	; 0x30
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f2:	2307      	movs	r3, #7
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fa:	4619      	mov	r1, r3
 80025fc:	481e      	ldr	r0, [pc, #120]	; (8002678 <HAL_UART_MspInit+0x1a4>)
 80025fe:	f000 fb2d 	bl	8002c5c <HAL_GPIO_Init>
}
 8002602:	e030      	b.n	8002666 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_UART_MspInit+0x1b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12b      	bne.n	8002666 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_UART_MspInit+0x1a0>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002646:	230c      	movs	r3, #12
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002656:	2307      	movs	r3, #7
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <HAL_UART_MspInit+0x1a4>)
 8002662:	f000 fafb 	bl	8002c5c <HAL_GPIO_Init>
}
 8002666:	bf00      	nop
 8002668:	3738      	adds	r7, #56	; 0x38
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020800 	.word	0x40020800
 8002680:	40011000 	.word	0x40011000
 8002684:	40004400 	.word	0x40004400

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800268c:	e7fe      	b.n	800268c <NMI_Handler+0x4>

0800268e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <HardFault_Handler+0x4>

08002694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <MemManage_Handler+0x4>

0800269a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269e:	e7fe      	b.n	800269e <BusFault_Handler+0x4>

080026a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <UsageFault_Handler+0x4>

080026a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d4:	f000 f8da 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <TIM2_IRQHandler+0x10>)
 80026e2:	f001 fe1d 	bl	8004320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200004bc 	.word	0x200004bc

080026f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <UART4_IRQHandler+0x10>)
 80026f6:	f002 fdcf 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000420 	.word	0x20000420

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f003 fc98 	bl	8006068 <__errno>
 8002738:	4603      	mov	r3, r0
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20020000 	.word	0x20020000
 8002764:	00000400 	.word	0x00000400
 8002768:	20000148 	.word	0x20000148
 800276c:	200005a8 	.word	0x200005a8

08002770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <SystemInit+0x20>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <SystemInit+0x20>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279a:	490e      	ldr	r1, [pc, #56]	; (80027d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b0:	4c0b      	ldr	r4, [pc, #44]	; (80027e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027be:	f7ff ffd7 	bl	8002770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f003 fc57 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c6:	f7fe fdd1 	bl	800136c <main>
  bx  lr    
 80027ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027d8:	08006a08 	.word	0x08006a08
  ldr r2, =_sbss
 80027dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027e0:	200005a4 	.word	0x200005a4

080027e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC_IRQHandler>
	...

080027e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_Init+0x40>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_Init+0x40>)
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x40>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f94f 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	2000      	movs	r0, #0
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff fad8 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f967 	bl	8002b1e <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 f92f 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000008 	.word	0x20000008
 8002884:	20000010 	.word	0x20000010
 8002888:	2000000c 	.word	0x2000000c

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000010 	.word	0x20000010
 80028b0:	20000590 	.word	0x20000590

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000590 	.word	0x20000590

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff ffee 	bl	80028b4 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_Delay+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000010 	.word	0x20000010

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff8e 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff29 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff3e 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff8e 	bl	8002a08 <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5d 	bl	80029b4 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff31 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff feb6 	bl	80028b4 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d008      	beq.n	8002b68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e052      	b.n	8002c0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0216 	bic.w	r2, r2, #22
 8002b76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <HAL_DMA_Abort+0x62>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0208 	bic.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb8:	e013      	b.n	8002be2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bba:	f7ff fe7b 	bl	80028b4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d90c      	bls.n	8002be2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e015      	b.n	8002c0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e4      	bne.n	8002bba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	223f      	movs	r2, #63	; 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e00c      	b.n	8002c4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2205      	movs	r2, #5
 8002c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e165      	b.n	8002f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8154 	bne.w	8002f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80ae 	beq.w	8002f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x308>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x30c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x310>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x314>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_GPIO_Init+0x318>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x20a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_GPIO_Init+0x31c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x206>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <HAL_GPIO_Init+0x320>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x202>
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	e00c      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e5e:	2307      	movs	r3, #7
 8002e60:	e00a      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e62:	2305      	movs	r3, #5
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eba:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f ae96 	bls.w	8002c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e12b      	b.n	8003222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe ff1e 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800300a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800301a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800301c:	f000 fa02 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a81      	ldr	r2, [pc, #516]	; (800322c <HAL_I2C_Init+0x274>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d807      	bhi.n	800303c <HAL_I2C_Init+0x84>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a80      	ldr	r2, [pc, #512]	; (8003230 <HAL_I2C_Init+0x278>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e006      	b.n	800304a <HAL_I2C_Init+0x92>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a7d      	ldr	r2, [pc, #500]	; (8003234 <HAL_I2C_Init+0x27c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0e7      	b.n	8003222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a78      	ldr	r2, [pc, #480]	; (8003238 <HAL_I2C_Init+0x280>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_I2C_Init+0x274>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d802      	bhi.n	800308c <HAL_I2C_Init+0xd4>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3301      	adds	r3, #1
 800308a:	e009      	b.n	80030a0 <HAL_I2C_Init+0xe8>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	4a69      	ldr	r2, [pc, #420]	; (800323c <HAL_I2C_Init+0x284>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	3301      	adds	r3, #1
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	495c      	ldr	r1, [pc, #368]	; (800322c <HAL_I2C_Init+0x274>)
 80030bc:	428b      	cmp	r3, r1
 80030be:	d819      	bhi.n	80030f4 <HAL_I2C_Init+0x13c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e59      	subs	r1, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030d4:	400b      	ands	r3, r1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_I2C_Init+0x138>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e59      	subs	r1, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	e051      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e04f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_I2C_Init+0x168>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e012      	b.n	8003146 <HAL_I2C_Init+0x18e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	0099      	lsls	r1, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Init+0x196>
 800314a:	2301      	movs	r3, #1
 800314c:	e022      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <HAL_I2C_Init+0x1bc>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1e58      	subs	r0, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	440b      	add	r3, r1
 8003164:	fbb0 f3f3 	udiv	r3, r0, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	e00f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6911      	ldr	r1, [r2, #16]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	000186a0 	.word	0x000186a0
 8003230:	001e847f 	.word	0x001e847f
 8003234:	003d08ff 	.word	0x003d08ff
 8003238:	431bde83 	.word	0x431bde83
 800323c:	10624dd3 	.word	0x10624dd3

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cc      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d90c      	bls.n	800327c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7ff fac0 	bl	80028b4 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7ff fabc 	bl	80028b4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20c      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f855 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fa20 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	080069ac 	.word	0x080069ac
 8003404:	20000008 	.word	0x20000008
 8003408:	2000000c 	.word	0x2000000c

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000008 	.word	0x20000008

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	080069bc 	.word	0x080069bc

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffdc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	080069bc 	.word	0x080069bc

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b088      	sub	sp, #32
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4bce      	ldr	r3, [pc, #824]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b0c      	cmp	r3, #12
 800349a:	f200 818d 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x344>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080037b9 	.word	0x080037b9
 80034ac:	080037b9 	.word	0x080037b9
 80034b0:	080037b9 	.word	0x080037b9
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080037b9 	.word	0x080037b9
 80034bc:	080037b9 	.word	0x080037b9
 80034c0:	080037b9 	.word	0x080037b9
 80034c4:	080034e5 	.word	0x080034e5
 80034c8:	080037b9 	.word	0x080037b9
 80034cc:	080037b9 	.word	0x080037b9
 80034d0:	080037b9 	.word	0x080037b9
 80034d4:	08003659 	.word	0x08003659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4bbd      	ldr	r3, [pc, #756]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034da:	61bb      	str	r3, [r7, #24]
       break;
 80034dc:	e16f      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4bbd      	ldr	r3, [pc, #756]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x360>)
 80034e0:	61bb      	str	r3, [r7, #24]
      break;
 80034e2:	e16c      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4bb9      	ldr	r3, [pc, #740]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4bb7      	ldr	r3, [pc, #732]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d053      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4bb4      	ldr	r3, [pc, #720]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	461a      	mov	r2, r3
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	ea02 0400 	and.w	r4, r2, r0
 8003512:	603c      	str	r4, [r7, #0]
 8003514:	400b      	ands	r3, r1
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	014b      	lsls	r3, r1, #5
 800352a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800352e:	0142      	lsls	r2, r0, #5
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	4623      	mov	r3, r4
 8003536:	1ac0      	subs	r0, r0, r3
 8003538:	462b      	mov	r3, r5
 800353a:	eb61 0103 	sbc.w	r1, r1, r3
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800354c:	0182      	lsls	r2, r0, #6
 800354e:	1a12      	subs	r2, r2, r0
 8003550:	eb63 0301 	sbc.w	r3, r3, r1
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	00d9      	lsls	r1, r3, #3
 800355e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003562:	00d0      	lsls	r0, r2, #3
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4621      	mov	r1, r4
 800356a:	1852      	adds	r2, r2, r1
 800356c:	4629      	mov	r1, r5
 800356e:	eb43 0101 	adc.w	r1, r3, r1
 8003572:	460b      	mov	r3, r1
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	0259      	lsls	r1, r3, #9
 800357e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003582:	0250      	lsls	r0, r2, #9
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f7fd fa82 	bl	8000a9c <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e04c      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b8a      	ldr	r3, [pc, #552]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	461a      	mov	r2, r3
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	ea02 0a00 	and.w	sl, r2, r0
 80035ba:	ea03 0b01 	and.w	fp, r3, r1
 80035be:	4650      	mov	r0, sl
 80035c0:	4659      	mov	r1, fp
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	014b      	lsls	r3, r1, #5
 80035cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035d0:	0142      	lsls	r2, r0, #5
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	ebb0 000a 	subs.w	r0, r0, sl
 80035da:	eb61 010b 	sbc.w	r1, r1, fp
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	018b      	lsls	r3, r1, #6
 80035e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ec:	0182      	lsls	r2, r0, #6
 80035ee:	1a12      	subs	r2, r2, r0
 80035f0:	eb63 0301 	sbc.w	r3, r3, r1
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	00d9      	lsls	r1, r3, #3
 80035fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003602:	00d0      	lsls	r0, r2, #3
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	eb12 020a 	adds.w	r2, r2, sl
 800360c:	eb43 030b 	adc.w	r3, r3, fp
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	0299      	lsls	r1, r3, #10
 800361a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800361e:	0290      	lsls	r0, r2, #10
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	461a      	mov	r2, r3
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f7fd fa34 	bl	8000a9c <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	61bb      	str	r3, [r7, #24]
      break;
 8003656:	e0b2      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003658:	4b5c      	ldr	r3, [pc, #368]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003660:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003662:	4b5a      	ldr	r3, [pc, #360]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d04d      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366e:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	461a      	mov	r2, r3
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	ea02 0800 	and.w	r8, r2, r0
 8003686:	ea03 0901 	and.w	r9, r3, r1
 800368a:	4640      	mov	r0, r8
 800368c:	4649      	mov	r1, r9
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	014b      	lsls	r3, r1, #5
 8003698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800369c:	0142      	lsls	r2, r0, #5
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	ebb0 0008 	subs.w	r0, r0, r8
 80036a6:	eb61 0109 	sbc.w	r1, r1, r9
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	018b      	lsls	r3, r1, #6
 80036b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b8:	0182      	lsls	r2, r0, #6
 80036ba:	1a12      	subs	r2, r2, r0
 80036bc:	eb63 0301 	sbc.w	r3, r3, r1
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	00d9      	lsls	r1, r3, #3
 80036ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ce:	00d0      	lsls	r0, r2, #3
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	eb12 0208 	adds.w	r2, r2, r8
 80036d8:	eb43 0309 	adc.w	r3, r3, r9
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0259      	lsls	r1, r3, #9
 80036e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036ea:	0250      	lsls	r0, r2, #9
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	f7fd f9ce 	bl	8000a9c <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e04a      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	461a      	mov	r2, r3
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	ea02 0400 	and.w	r4, r2, r0
 8003722:	ea03 0501 	and.w	r5, r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	014b      	lsls	r3, r1, #5
 8003734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003738:	0142      	lsls	r2, r0, #5
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	1b00      	subs	r0, r0, r4
 8003740:	eb61 0105 	sbc.w	r1, r1, r5
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	018b      	lsls	r3, r1, #6
 800374e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003752:	0182      	lsls	r2, r0, #6
 8003754:	1a12      	subs	r2, r2, r0
 8003756:	eb63 0301 	sbc.w	r3, r3, r1
 800375a:	f04f 0000 	mov.w	r0, #0
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	00d9      	lsls	r1, r3, #3
 8003764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003768:	00d0      	lsls	r0, r2, #3
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	1912      	adds	r2, r2, r4
 8003770:	eb45 0303 	adc.w	r3, r5, r3
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	0299      	lsls	r1, r3, #10
 800377e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003782:	0290      	lsls	r0, r2, #10
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	461a      	mov	r2, r3
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f7fd f982 	bl	8000a9c <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	0f1b      	lsrs	r3, r3, #28
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	61bb      	str	r3, [r7, #24]
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80037ba:	61bb      	str	r3, [r7, #24]
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	69bb      	ldr	r3, [r7, #24]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e28d      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8083 	beq.w	80038fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037f8:	4b94      	ldr	r3, [pc, #592]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b04      	cmp	r3, #4
 8003802:	d019      	beq.n	8003838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003804:	4b91      	ldr	r3, [pc, #580]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800380c:	2b08      	cmp	r3, #8
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003810:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381c:	d00c      	beq.n	8003838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d112      	bne.n	8003850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003836:	d10b      	bne.n	8003850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4b84      	ldr	r3, [pc, #528]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05b      	beq.n	80038fc <HAL_RCC_OscConfig+0x124>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d157      	bne.n	80038fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e25a      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d106      	bne.n	8003868 <HAL_RCC_OscConfig+0x90>
 800385a:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7b      	ldr	r2, [pc, #492]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e01d      	b.n	80038a4 <HAL_RCC_OscConfig+0xcc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0xb4>
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a72      	ldr	r2, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0xcc>
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800389e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7ff f802 	bl	80028b4 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fe fffe 	bl	80028b4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e21f      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xdc>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe ffee 	bl	80028b4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe ffea 	bl	80028b4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e20b      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x104>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06f      	beq.n	80039ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800390a:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x186>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1d3      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_OscConfig+0x278>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe ff97 	bl	80028b4 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398a:	f7fe ff93 	bl	80028b4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1b4      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x278>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe ff76 	bl	80028b4 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe ff72 	bl	80028b4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e193      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe ff56 	bl	80028b4 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe ff52 	bl	80028b4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e173      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x234>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe ff3f 	bl	80028b4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe ff3b 	bl	80028b4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e15c      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b8a      	ldr	r3, [pc, #552]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b83      	ldr	r3, [pc, #524]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7f      	ldr	r3, [pc, #508]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a7e      	ldr	r2, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	; (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fefb 	bl	80028b4 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe fef7 	bl	80028b4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e118      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x31e>
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x358>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x340>
 8003afe:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a60      	ldr	r2, [pc, #384]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x358>
 8003b18:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a59      	ldr	r2, [pc, #356]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b57      	ldr	r3, [pc, #348]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a56      	ldr	r2, [pc, #344]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe febc 	bl	80028b4 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fe feb8 	bl	80028b4 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0d7      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x368>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fea6 	bl	80028b4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fe fea2 	bl	80028b4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0c1      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80ad 	beq.w	8003d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d060      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d145      	bne.n	8003c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fe76 	bl	80028b4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fe72 	bl	80028b4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e093      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	071b      	lsls	r3, r3, #28
 8003c16:	491b      	ldr	r1, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fe fe47 	bl	80028b4 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe fe43 	bl	80028b4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e064      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x452>
 8003c48:	e05c      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fe30 	bl	80028b4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fe2c 	bl	80028b4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04d      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x480>
 8003c76:	e045      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e040      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCC_OscConfig+0x538>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d030      	beq.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d129      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d122      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d119      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d10f      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07b      	b.n	8003e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d009      	beq.n	8003d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe f94e 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0104 	and.w	r1, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0210 	and.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e041      	b.n	8003ebc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fe f9fb 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fd15 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04e      	b.n	8003f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d01d      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d010      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	e007      	b.n	8003f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e041      	b.n	800403a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe f978 	bl	80022c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fc56 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x24>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e022      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d109      	bne.n	8004082 <HAL_TIM_PWM_Start+0x3e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e015      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x58>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <HAL_TIM_PWM_Start+0x6a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07c      	b.n	80041b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x82>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	e013      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x92>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d4:	e00b      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	e003      	b.n	80040ee <HAL_TIM_PWM_Start+0xaa>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 feb6 	bl	8004e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HAL_TIM_PWM_Start+0x174>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_TIM_PWM_Start+0xcc>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <HAL_TIM_PWM_Start+0x178>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_TIM_PWM_Start+0xd0>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_TIM_PWM_Start+0xd2>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_TIM_PWM_Start+0x174>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d01d      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_TIM_PWM_Start+0x17c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_TIM_PWM_Start+0x180>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIM_PWM_Start+0x184>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <HAL_TIM_PWM_Start+0x178>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIM_PWM_Start+0x188>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_PWM_Start+0x136>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_TIM_PWM_Start+0x18c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d010      	beq.n	80041ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	e007      	b.n	80041ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40001800 	.word	0x40001800

080041d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e097      	b.n	8004318 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fe f897 	bl	8002330 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004218:	f023 0307 	bic.w	r3, r3, #7
 800421c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 fb33 	bl	8004894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	4313      	orrs	r3, r2
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004274:	f023 030c 	bic.w	r3, r3, #12
 8004278:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4313      	orrs	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	011a      	lsls	r2, r3, #4
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	031b      	lsls	r3, r3, #12
 80042a4:	4313      	orrs	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	4313      	orrs	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa77 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa69 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa7a 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0204 	mvn.w	r2, #4
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa4d 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa3f 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa50 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0208 	mvn.w	r2, #8
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa23 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa15 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fa26 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0210 	mvn.w	r2, #16
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2208      	movs	r2, #8
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9f9 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9eb 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9fc 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0201 	mvn.w	r2, #1
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc ff22 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fdca 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9c1 	bl	800487e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0220 	mvn.w	r2, #32
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fd94 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800454a:	2302      	movs	r3, #2
 800454c:	e0ae      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	f200 809f 	bhi.w	800469c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004599 	.word	0x08004599
 8004568:	0800469d 	.word	0x0800469d
 800456c:	0800469d 	.word	0x0800469d
 8004570:	0800469d 	.word	0x0800469d
 8004574:	080045d9 	.word	0x080045d9
 8004578:	0800469d 	.word	0x0800469d
 800457c:	0800469d 	.word	0x0800469d
 8004580:	0800469d 	.word	0x0800469d
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800469d 	.word	0x0800469d
 800458c:	0800469d 	.word	0x0800469d
 8004590:	0800469d 	.word	0x0800469d
 8004594:	0800465b 	.word	0x0800465b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa18 	bl	80049d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	619a      	str	r2, [r3, #24]
      break;
 80045d6:	e064      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa68 	bl	8004ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
      break;
 8004618:	e043      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fabd 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0208 	orr.w	r2, r2, #8
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0204 	bic.w	r2, r2, #4
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
      break;
 8004658:	e023      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fb11 	bl	8004c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
      break;
 80046a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_ConfigClockSource+0x1c>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0b4      	b.n	800483a <HAL_TIM_ConfigClockSource+0x186>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d03e      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xd4>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	f200 8087 	bhi.w	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	f000 8086 	beq.w	8004826 <HAL_TIM_ConfigClockSource+0x172>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	d87f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d01a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xa6>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d87b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d050      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x11a>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d877      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d03c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xfa>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d873      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d058      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x13a>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d86f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d064      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d86b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d060      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d867      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d05a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	e062      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f000 fb5d 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800477c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e04f      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 fb46 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e03c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 faba 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	; 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fb13 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80047cc:	e02c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fad9 	bl	8004d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fb03 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e01c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa9a 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 faf3 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 800480c:	e00c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 faea 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 800481e:	e003      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC1_SetConfig+0x64>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0308 	bic.w	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC1_SetConfig+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x68>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0x94>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a16      	ldr	r2, [pc, #88]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_OC3_SetConfig+0x92>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <TIM_OC4_SetConfig+0xa4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x68>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a11      	ldr	r2, [pc, #68]	; (8004d30 <TIM_OC4_SetConfig+0xa8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e05a      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d01d      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40001800 	.word	0x40001800

08004fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e03d      	b.n	8005044 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e03f      	b.n	800510a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd fa18 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fddb 	bl	8005c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	d17c      	bne.n	800522c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Transmit+0x2c>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e075      	b.n	800522e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit+0x3e>
 800514c:	2302      	movs	r3, #2
 800514e:	e06e      	b.n	800522e <HAL_UART_Transmit+0x11c>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005166:	f7fd fba5 	bl	80028b4 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Transmit+0x82>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051a4:	e02a      	b.n	80051fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fb1f 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e036      	b.n	800522e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3302      	adds	r3, #2
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e007      	b.n	80051ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cf      	bne.n	80051a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 faef 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b20      	cmp	r3, #32
 800524e:	d11d      	bne.n	800528c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Receive_IT+0x26>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e016      	b.n	800528e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UART_Receive_IT+0x38>
 800526a:	2302      	movs	r3, #2
 800526c:	e00f      	b.n	800528e <HAL_UART_Receive_IT+0x58>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	461a      	mov	r2, r3
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fb24 	bl	80058d0 <UART_Start_Receive_IT>
 8005288:	4603      	mov	r3, r0
 800528a:	e000      	b.n	800528e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0ba      	sub	sp, #232	; 0xe8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fc03 	bl	8005b02 <UART_Receive_IT>
      return;
 80052fc:	e256      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80de 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80d1 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0204 	orr.w	r2, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d011      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
 800539a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f043 0208 	orr.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 81ed 	beq.w	80057a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fb8e 	bl	8005b02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <HAL_UART_IRQHandler+0x17a>
 800540a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04f      	beq.n	80054b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa96 	bl	8005944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d141      	bne.n	80054aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800543c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800545e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800546a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1d9      	bne.n	8005426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	2b00      	cmp	r3, #0
 8005478:	d013      	beq.n	80054a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	4a7d      	ldr	r2, [pc, #500]	; (8005674 <HAL_UART_IRQHandler+0x3dc>)
 8005480:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fbc5 	bl	8002c16 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00e      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f990 	bl	80057c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00a      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f98c 	bl	80057c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e006      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f988 	bl	80057c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054be:	e170      	b.n	80057a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	bf00      	nop
    return;
 80054c2:	e16e      	b.n	80057a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	f040 814a 	bne.w	8005762 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8143 	beq.w	8005762 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 813c 	beq.w	8005762 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	f040 80b4 	bne.w	8005678 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800551c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8140 	beq.w	80057a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800552e:	429a      	cmp	r2, r3
 8005530:	f080 8139 	bcs.w	80057a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800553a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	f000 8088 	beq.w	800565a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800558e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1d9      	bne.n	800554a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e1      	bne.n	8005596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800563c:	65ba      	str	r2, [r7, #88]	; 0x58
 800563e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4618      	mov	r0, r3
 8005656:	f7fd fa6e 	bl	8002b36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005662:	b29b      	uxth	r3, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8b6 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005670:	e099      	b.n	80057a6 <HAL_UART_IRQHandler+0x50e>
 8005672:	bf00      	nop
 8005674:	08005a0b 	.word	0x08005a0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005680:	b29b      	uxth	r3, r3
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 808b 	beq.w	80057aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8086 	beq.w	80057aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056c2:	647a      	str	r2, [r7, #68]	; 0x44
 80056c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e3      	bne.n	800569e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	623b      	str	r3, [r7, #32]
   return(result);
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056fa:	633a      	str	r2, [r7, #48]	; 0x30
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e3      	bne.n	80056d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	60fb      	str	r3, [r7, #12]
   return(result);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005740:	61fa      	str	r2, [r7, #28]
 8005742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	617b      	str	r3, [r7, #20]
   return(result);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e3      	bne.n	800571c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f83e 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005760:	e023      	b.n	80057aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_UART_IRQHandler+0x4ea>
 800576e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f959 	bl	8005a32 <UART_Transmit_IT>
    return;
 8005780:	e014      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <HAL_UART_IRQHandler+0x514>
 800578e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f999 	bl	8005ad2 <UART_EndTransmit_IT>
    return;
 80057a0:	e004      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
    return;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
      return;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
      return;
 80057aa:	bf00      	nop
  }
}
 80057ac:	37e8      	adds	r7, #232	; 0xe8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop

080057b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b090      	sub	sp, #64	; 0x40
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005804:	e050      	b.n	80058a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d04c      	beq.n	80058a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <UART_WaitOnFlagUntilTimeout+0x30>
 8005814:	f7fd f84e 	bl	80028b4 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005820:	429a      	cmp	r2, r3
 8005822:	d241      	bcs.n	80058a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005844:	637a      	str	r2, [r7, #52]	; 0x34
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800584a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	613b      	str	r3, [r7, #16]
   return(result);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005878:	623a      	str	r2, [r7, #32]
 800587a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	61bb      	str	r3, [r7, #24]
   return(result);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e00f      	b.n	80058c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d09f      	beq.n	8005806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3740      	adds	r7, #64	; 0x40
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2222      	movs	r2, #34	; 0x22
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005914:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0220 	orr.w	r2, r2, #32
 8005934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b095      	sub	sp, #84	; 0x54
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800596c:	643a      	str	r2, [r7, #64]	; 0x40
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e5      	bne.n	800594c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3314      	adds	r3, #20
 800599e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e5      	bne.n	8005980 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d119      	bne.n	80059f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059dc:	61ba      	str	r2, [r7, #24]
 80059de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059fe:	bf00      	nop
 8005a00:	3754      	adds	r7, #84	; 0x54
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fecf 	bl	80057c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b21      	cmp	r3, #33	; 0x21
 8005a44:	d13e      	bne.n	8005ac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d114      	bne.n	8005a7a <UART_Transmit_IT+0x48>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d110      	bne.n	8005a7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	621a      	str	r2, [r3, #32]
 8005a78:	e008      	b.n	8005a8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6211      	str	r1, [r2, #32]
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10f      	bne.n	8005ac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005abe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fe5e 	bl	80057b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08c      	sub	sp, #48	; 0x30
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b22      	cmp	r3, #34	; 0x22
 8005b14:	f040 80ab 	bne.w	8005c6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d117      	bne.n	8005b52 <UART_Receive_IT+0x50>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d113      	bne.n	8005b52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	1c9a      	adds	r2, r3, #2
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b50:	e026      	b.n	8005ba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b64:	d007      	beq.n	8005b76 <UART_Receive_IT+0x74>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <UART_Receive_IT+0x82>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e008      	b.n	8005b96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4619      	mov	r1, r3
 8005bae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d15a      	bne.n	8005c6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0220 	bic.w	r2, r2, #32
 8005bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d135      	bne.n	8005c60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f023 0310 	bic.w	r3, r3, #16
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	623a      	str	r2, [r7, #32]
 8005c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	69f9      	ldr	r1, [r7, #28]
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e5      	bne.n	8005bfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d10a      	bne.n	8005c52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fdbf 	bl	80057dc <HAL_UARTEx_RxEventCallback>
 8005c5e:	e002      	b.n	8005c66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fb fb13 	bl	800128c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e002      	b.n	8005c70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3730      	adds	r7, #48	; 0x30
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	b09f      	sub	sp, #124	; 0x7c
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	ea40 0301 	orr.w	r3, r0, r1
 8005c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cbc:	f021 010c 	bic.w	r1, r1, #12
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4bc5      	ldr	r3, [pc, #788]	; (8005ffc <UART_SetConfig+0x384>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d004      	beq.n	8005cf6 <UART_SetConfig+0x7e>
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4bc3      	ldr	r3, [pc, #780]	; (8006000 <UART_SetConfig+0x388>)
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d103      	bne.n	8005cfe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf6:	f7fd fba9 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005cfa:	6778      	str	r0, [r7, #116]	; 0x74
 8005cfc:	e002      	b.n	8005d04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7fd fb91 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8005d02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	f040 80b6 	bne.w	8005e7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d12:	461c      	mov	r4, r3
 8005d14:	f04f 0500 	mov.w	r5, #0
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d20:	415b      	adcs	r3, r3
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
 8005d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d28:	1912      	adds	r2, r2, r4
 8005d2a:	eb45 0303 	adc.w	r3, r5, r3
 8005d2e:	f04f 0000 	mov.w	r0, #0
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	00d9      	lsls	r1, r3, #3
 8005d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d3c:	00d0      	lsls	r0, r2, #3
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	1911      	adds	r1, r2, r4
 8005d44:	6639      	str	r1, [r7, #96]	; 0x60
 8005d46:	416b      	adcs	r3, r5
 8005d48:	667b      	str	r3, [r7, #100]	; 0x64
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d64:	f7fa fe9a 	bl	8000a9c <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4ba5      	ldr	r3, [pc, #660]	; (8006004 <UART_SetConfig+0x38c>)
 8005d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	011e      	lsls	r6, r3, #4
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	461c      	mov	r4, r3
 8005d7a:	f04f 0500 	mov.w	r5, #0
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	1891      	adds	r1, r2, r2
 8005d84:	6339      	str	r1, [r7, #48]	; 0x30
 8005d86:	415b      	adcs	r3, r3
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d8e:	1912      	adds	r2, r2, r4
 8005d90:	eb45 0303 	adc.w	r3, r5, r3
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	00d9      	lsls	r1, r3, #3
 8005d9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005da2:	00d0      	lsls	r0, r2, #3
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	1911      	adds	r1, r2, r4
 8005daa:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dac:	416b      	adcs	r3, r5
 8005dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dca:	f7fa fe67 	bl	8000a9c <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b8c      	ldr	r3, [pc, #560]	; (8006004 <UART_SetConfig+0x38c>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a87      	ldr	r2, [pc, #540]	; (8006004 <UART_SetConfig+0x38c>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df4:	441e      	add	r6, r3
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	1894      	adds	r4, r2, r2
 8005e04:	623c      	str	r4, [r7, #32]
 8005e06:	415b      	adcs	r3, r3
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e0e:	1812      	adds	r2, r2, r0
 8005e10:	eb41 0303 	adc.w	r3, r1, r3
 8005e14:	f04f 0400 	mov.w	r4, #0
 8005e18:	f04f 0500 	mov.w	r5, #0
 8005e1c:	00dd      	lsls	r5, r3, #3
 8005e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e22:	00d4      	lsls	r4, r2, #3
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	1814      	adds	r4, r2, r0
 8005e2a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e2c:	414b      	adcs	r3, r1
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	61b9      	str	r1, [r7, #24]
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e4a:	f7fa fe27 	bl	8000a9c <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4b6c      	ldr	r3, [pc, #432]	; (8006004 <UART_SetConfig+0x38c>)
 8005e54:	fba3 1302 	umull	r1, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	3332      	adds	r3, #50	; 0x32
 8005e66:	4a67      	ldr	r2, [pc, #412]	; (8006004 <UART_SetConfig+0x38c>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f003 0207 	and.w	r2, r3, #7
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4432      	add	r2, r6
 8005e78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e7a:	e0b9      	b.n	8005ff0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e7e:	461c      	mov	r4, r3
 8005e80:	f04f 0500 	mov.w	r5, #0
 8005e84:	4622      	mov	r2, r4
 8005e86:	462b      	mov	r3, r5
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	6139      	str	r1, [r7, #16]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e94:	1912      	adds	r2, r2, r4
 8005e96:	eb45 0303 	adc.w	r3, r5, r3
 8005e9a:	f04f 0000 	mov.w	r0, #0
 8005e9e:	f04f 0100 	mov.w	r1, #0
 8005ea2:	00d9      	lsls	r1, r3, #3
 8005ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ea8:	00d0      	lsls	r0, r2, #3
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	eb12 0804 	adds.w	r8, r2, r4
 8005eb2:	eb43 0905 	adc.w	r9, r3, r5
 8005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	008b      	lsls	r3, r1, #2
 8005eca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ece:	0082      	lsls	r2, r0, #2
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa fde2 	bl	8000a9c <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b49      	ldr	r3, [pc, #292]	; (8006004 <UART_SetConfig+0x38c>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011e      	lsls	r6, r3, #4
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	1894      	adds	r4, r2, r2
 8005ef4:	60bc      	str	r4, [r7, #8]
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005efe:	1812      	adds	r2, r2, r0
 8005f00:	eb41 0303 	adc.w	r3, r1, r3
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	00dd      	lsls	r5, r3, #3
 8005f0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f12:	00d4      	lsls	r4, r2, #3
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	1814      	adds	r4, r2, r0
 8005f1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f1c:	414b      	adcs	r3, r1
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	008b      	lsls	r3, r1, #2
 8005f34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f38:	0082      	lsls	r2, r0, #2
 8005f3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f3e:	f7fa fdad 	bl	8000a9c <__aeabi_uldivmod>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <UART_SetConfig+0x38c>)
 8005f48:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	2164      	movs	r1, #100	; 0x64
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	3332      	adds	r3, #50	; 0x32
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <UART_SetConfig+0x38c>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f66:	441e      	add	r6, r3
 8005f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	1894      	adds	r4, r2, r2
 8005f76:	603c      	str	r4, [r7, #0]
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f80:	1812      	adds	r2, r2, r0
 8005f82:	eb41 0303 	adc.w	r3, r1, r3
 8005f86:	f04f 0400 	mov.w	r4, #0
 8005f8a:	f04f 0500 	mov.w	r5, #0
 8005f8e:	00dd      	lsls	r5, r3, #3
 8005f90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f94:	00d4      	lsls	r4, r2, #3
 8005f96:	4622      	mov	r2, r4
 8005f98:	462b      	mov	r3, r5
 8005f9a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f9e:	eb43 0b01 	adc.w	fp, r3, r1
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	008b      	lsls	r3, r1, #2
 8005fb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fba:	0082      	lsls	r2, r0, #2
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	f7fa fd6c 	bl	8000a9c <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <UART_SetConfig+0x38c>)
 8005fca:	fba3 1302 	umull	r1, r3, r3, r2
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2164      	movs	r1, #100	; 0x64
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	3332      	adds	r3, #50	; 0x32
 8005fdc:	4a09      	ldr	r2, [pc, #36]	; (8006004 <UART_SetConfig+0x38c>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4432      	add	r2, r6
 8005fee:	609a      	str	r2, [r3, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	377c      	adds	r7, #124	; 0x7c
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40011400 	.word	0x40011400
 8006004:	51eb851f 	.word	0x51eb851f

08006008 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <DWT_Delay_Init+0x58>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <DWT_Delay_Init+0x58>)
 8006012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006016:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006018:	4b11      	ldr	r3, [pc, #68]	; (8006060 <DWT_Delay_Init+0x58>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a10      	ldr	r2, [pc, #64]	; (8006060 <DWT_Delay_Init+0x58>)
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006022:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <DWT_Delay_Init+0x5c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0e      	ldr	r2, [pc, #56]	; (8006064 <DWT_Delay_Init+0x5c>)
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <DWT_Delay_Init+0x5c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a0b      	ldr	r2, [pc, #44]	; (8006064 <DWT_Delay_Init+0x5c>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <DWT_Delay_Init+0x5c>)
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8006042:	bf00      	nop
    __ASM volatile ("NOP");
 8006044:	bf00      	nop
    __ASM volatile ("NOP");
 8006046:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <DWT_Delay_Init+0x5c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8006054:	2301      	movs	r3, #1
    }
}
 8006056:	4618      	mov	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	e000edf0 	.word	0xe000edf0
 8006064:	e0001000 	.word	0xe0001000

08006068 <__errno>:
 8006068:	4b01      	ldr	r3, [pc, #4]	; (8006070 <__errno+0x8>)
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000014 	.word	0x20000014

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4d0d      	ldr	r5, [pc, #52]	; (80060ac <__libc_init_array+0x38>)
 8006078:	4c0d      	ldr	r4, [pc, #52]	; (80060b0 <__libc_init_array+0x3c>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	2600      	movs	r6, #0
 8006080:	42a6      	cmp	r6, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	4d0b      	ldr	r5, [pc, #44]	; (80060b4 <__libc_init_array+0x40>)
 8006086:	4c0c      	ldr	r4, [pc, #48]	; (80060b8 <__libc_init_array+0x44>)
 8006088:	f000 fc4e 	bl	8006928 <_init>
 800608c:	1b64      	subs	r4, r4, r5
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	2600      	movs	r6, #0
 8006092:	42a6      	cmp	r6, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	f855 3b04 	ldr.w	r3, [r5], #4
 800609c:	4798      	blx	r3
 800609e:	3601      	adds	r6, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a6:	4798      	blx	r3
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	08006a00 	.word	0x08006a00
 80060b0:	08006a00 	.word	0x08006a00
 80060b4:	08006a00 	.word	0x08006a00
 80060b8:	08006a04 	.word	0x08006a04

080060bc <memcpy>:
 80060bc:	440a      	add	r2, r1
 80060be:	4291      	cmp	r1, r2
 80060c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c4:	d100      	bne.n	80060c8 <memcpy+0xc>
 80060c6:	4770      	bx	lr
 80060c8:	b510      	push	{r4, lr}
 80060ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d2:	4291      	cmp	r1, r2
 80060d4:	d1f9      	bne.n	80060ca <memcpy+0xe>
 80060d6:	bd10      	pop	{r4, pc}

080060d8 <memset>:
 80060d8:	4402      	add	r2, r0
 80060da:	4603      	mov	r3, r0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	f803 1b01 	strb.w	r1, [r3], #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <siprintf>:
 80060e8:	b40e      	push	{r1, r2, r3}
 80060ea:	b500      	push	{lr}
 80060ec:	b09c      	sub	sp, #112	; 0x70
 80060ee:	ab1d      	add	r3, sp, #116	; 0x74
 80060f0:	9002      	str	r0, [sp, #8]
 80060f2:	9006      	str	r0, [sp, #24]
 80060f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060f8:	4809      	ldr	r0, [pc, #36]	; (8006120 <siprintf+0x38>)
 80060fa:	9107      	str	r1, [sp, #28]
 80060fc:	9104      	str	r1, [sp, #16]
 80060fe:	4909      	ldr	r1, [pc, #36]	; (8006124 <siprintf+0x3c>)
 8006100:	f853 2b04 	ldr.w	r2, [r3], #4
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	a902      	add	r1, sp, #8
 800610c:	f000 f868 	bl	80061e0 <_svfiprintf_r>
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	b01c      	add	sp, #112	; 0x70
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
 800611c:	b003      	add	sp, #12
 800611e:	4770      	bx	lr
 8006120:	20000014 	.word	0x20000014
 8006124:	ffff0208 	.word	0xffff0208

08006128 <__ssputs_r>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	688e      	ldr	r6, [r1, #8]
 800612e:	429e      	cmp	r6, r3
 8006130:	4682      	mov	sl, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4690      	mov	r8, r2
 8006136:	461f      	mov	r7, r3
 8006138:	d838      	bhi.n	80061ac <__ssputs_r+0x84>
 800613a:	898a      	ldrh	r2, [r1, #12]
 800613c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006140:	d032      	beq.n	80061a8 <__ssputs_r+0x80>
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	6909      	ldr	r1, [r1, #16]
 8006146:	eba5 0901 	sub.w	r9, r5, r1
 800614a:	6965      	ldr	r5, [r4, #20]
 800614c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006154:	3301      	adds	r3, #1
 8006156:	444b      	add	r3, r9
 8006158:	106d      	asrs	r5, r5, #1
 800615a:	429d      	cmp	r5, r3
 800615c:	bf38      	it	cc
 800615e:	461d      	movcc	r5, r3
 8006160:	0553      	lsls	r3, r2, #21
 8006162:	d531      	bpl.n	80061c8 <__ssputs_r+0xa0>
 8006164:	4629      	mov	r1, r5
 8006166:	f000 fb39 	bl	80067dc <_malloc_r>
 800616a:	4606      	mov	r6, r0
 800616c:	b950      	cbnz	r0, 8006184 <__ssputs_r+0x5c>
 800616e:	230c      	movs	r3, #12
 8006170:	f8ca 3000 	str.w	r3, [sl]
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	6921      	ldr	r1, [r4, #16]
 8006186:	464a      	mov	r2, r9
 8006188:	f7ff ff98 	bl	80060bc <memcpy>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	6126      	str	r6, [r4, #16]
 800619a:	6165      	str	r5, [r4, #20]
 800619c:	444e      	add	r6, r9
 800619e:	eba5 0509 	sub.w	r5, r5, r9
 80061a2:	6026      	str	r6, [r4, #0]
 80061a4:	60a5      	str	r5, [r4, #8]
 80061a6:	463e      	mov	r6, r7
 80061a8:	42be      	cmp	r6, r7
 80061aa:	d900      	bls.n	80061ae <__ssputs_r+0x86>
 80061ac:	463e      	mov	r6, r7
 80061ae:	4632      	mov	r2, r6
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	4641      	mov	r1, r8
 80061b4:	f000 faa8 	bl	8006708 <memmove>
 80061b8:	68a3      	ldr	r3, [r4, #8]
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	1b9b      	subs	r3, r3, r6
 80061be:	4432      	add	r2, r6
 80061c0:	60a3      	str	r3, [r4, #8]
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7db      	b.n	8006180 <__ssputs_r+0x58>
 80061c8:	462a      	mov	r2, r5
 80061ca:	f000 fb61 	bl	8006890 <_realloc_r>
 80061ce:	4606      	mov	r6, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1e1      	bne.n	8006198 <__ssputs_r+0x70>
 80061d4:	6921      	ldr	r1, [r4, #16]
 80061d6:	4650      	mov	r0, sl
 80061d8:	f000 fab0 	bl	800673c <_free_r>
 80061dc:	e7c7      	b.n	800616e <__ssputs_r+0x46>
	...

080061e0 <_svfiprintf_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	4698      	mov	r8, r3
 80061e6:	898b      	ldrh	r3, [r1, #12]
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	b09d      	sub	sp, #116	; 0x74
 80061ec:	4607      	mov	r7, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	d50e      	bpl.n	8006212 <_svfiprintf_r+0x32>
 80061f4:	690b      	ldr	r3, [r1, #16]
 80061f6:	b963      	cbnz	r3, 8006212 <_svfiprintf_r+0x32>
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	f000 faef 	bl	80067dc <_malloc_r>
 80061fe:	6028      	str	r0, [r5, #0]
 8006200:	6128      	str	r0, [r5, #16]
 8006202:	b920      	cbnz	r0, 800620e <_svfiprintf_r+0x2e>
 8006204:	230c      	movs	r3, #12
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e0d1      	b.n	80063b2 <_svfiprintf_r+0x1d2>
 800620e:	2340      	movs	r3, #64	; 0x40
 8006210:	616b      	str	r3, [r5, #20]
 8006212:	2300      	movs	r3, #0
 8006214:	9309      	str	r3, [sp, #36]	; 0x24
 8006216:	2320      	movs	r3, #32
 8006218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800621c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006220:	2330      	movs	r3, #48	; 0x30
 8006222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063cc <_svfiprintf_r+0x1ec>
 8006226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800622a:	f04f 0901 	mov.w	r9, #1
 800622e:	4623      	mov	r3, r4
 8006230:	469a      	mov	sl, r3
 8006232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006236:	b10a      	cbz	r2, 800623c <_svfiprintf_r+0x5c>
 8006238:	2a25      	cmp	r2, #37	; 0x25
 800623a:	d1f9      	bne.n	8006230 <_svfiprintf_r+0x50>
 800623c:	ebba 0b04 	subs.w	fp, sl, r4
 8006240:	d00b      	beq.n	800625a <_svfiprintf_r+0x7a>
 8006242:	465b      	mov	r3, fp
 8006244:	4622      	mov	r2, r4
 8006246:	4629      	mov	r1, r5
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ff6d 	bl	8006128 <__ssputs_r>
 800624e:	3001      	adds	r0, #1
 8006250:	f000 80aa 	beq.w	80063a8 <_svfiprintf_r+0x1c8>
 8006254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006256:	445a      	add	r2, fp
 8006258:	9209      	str	r2, [sp, #36]	; 0x24
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80a2 	beq.w	80063a8 <_svfiprintf_r+0x1c8>
 8006264:	2300      	movs	r3, #0
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800626e:	f10a 0a01 	add.w	sl, sl, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	9307      	str	r3, [sp, #28]
 8006276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800627a:	931a      	str	r3, [sp, #104]	; 0x68
 800627c:	4654      	mov	r4, sl
 800627e:	2205      	movs	r2, #5
 8006280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006284:	4851      	ldr	r0, [pc, #324]	; (80063cc <_svfiprintf_r+0x1ec>)
 8006286:	f7f9 ffcb 	bl	8000220 <memchr>
 800628a:	9a04      	ldr	r2, [sp, #16]
 800628c:	b9d8      	cbnz	r0, 80062c6 <_svfiprintf_r+0xe6>
 800628e:	06d0      	lsls	r0, r2, #27
 8006290:	bf44      	itt	mi
 8006292:	2320      	movmi	r3, #32
 8006294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006298:	0711      	lsls	r1, r2, #28
 800629a:	bf44      	itt	mi
 800629c:	232b      	movmi	r3, #43	; 0x2b
 800629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a2:	f89a 3000 	ldrb.w	r3, [sl]
 80062a6:	2b2a      	cmp	r3, #42	; 0x2a
 80062a8:	d015      	beq.n	80062d6 <_svfiprintf_r+0xf6>
 80062aa:	9a07      	ldr	r2, [sp, #28]
 80062ac:	4654      	mov	r4, sl
 80062ae:	2000      	movs	r0, #0
 80062b0:	f04f 0c0a 	mov.w	ip, #10
 80062b4:	4621      	mov	r1, r4
 80062b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ba:	3b30      	subs	r3, #48	; 0x30
 80062bc:	2b09      	cmp	r3, #9
 80062be:	d94e      	bls.n	800635e <_svfiprintf_r+0x17e>
 80062c0:	b1b0      	cbz	r0, 80062f0 <_svfiprintf_r+0x110>
 80062c2:	9207      	str	r2, [sp, #28]
 80062c4:	e014      	b.n	80062f0 <_svfiprintf_r+0x110>
 80062c6:	eba0 0308 	sub.w	r3, r0, r8
 80062ca:	fa09 f303 	lsl.w	r3, r9, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	46a2      	mov	sl, r4
 80062d4:	e7d2      	b.n	800627c <_svfiprintf_r+0x9c>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	9103      	str	r1, [sp, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbb      	ittet	lt
 80062e2:	425b      	neglt	r3, r3
 80062e4:	f042 0202 	orrlt.w	r2, r2, #2
 80062e8:	9307      	strge	r3, [sp, #28]
 80062ea:	9307      	strlt	r3, [sp, #28]
 80062ec:	bfb8      	it	lt
 80062ee:	9204      	strlt	r2, [sp, #16]
 80062f0:	7823      	ldrb	r3, [r4, #0]
 80062f2:	2b2e      	cmp	r3, #46	; 0x2e
 80062f4:	d10c      	bne.n	8006310 <_svfiprintf_r+0x130>
 80062f6:	7863      	ldrb	r3, [r4, #1]
 80062f8:	2b2a      	cmp	r3, #42	; 0x2a
 80062fa:	d135      	bne.n	8006368 <_svfiprintf_r+0x188>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	9203      	str	r2, [sp, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	bfb8      	it	lt
 8006308:	f04f 33ff 	movlt.w	r3, #4294967295
 800630c:	3402      	adds	r4, #2
 800630e:	9305      	str	r3, [sp, #20]
 8006310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063dc <_svfiprintf_r+0x1fc>
 8006314:	7821      	ldrb	r1, [r4, #0]
 8006316:	2203      	movs	r2, #3
 8006318:	4650      	mov	r0, sl
 800631a:	f7f9 ff81 	bl	8000220 <memchr>
 800631e:	b140      	cbz	r0, 8006332 <_svfiprintf_r+0x152>
 8006320:	2340      	movs	r3, #64	; 0x40
 8006322:	eba0 000a 	sub.w	r0, r0, sl
 8006326:	fa03 f000 	lsl.w	r0, r3, r0
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	4303      	orrs	r3, r0
 800632e:	3401      	adds	r4, #1
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	4826      	ldr	r0, [pc, #152]	; (80063d0 <_svfiprintf_r+0x1f0>)
 8006338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800633c:	2206      	movs	r2, #6
 800633e:	f7f9 ff6f 	bl	8000220 <memchr>
 8006342:	2800      	cmp	r0, #0
 8006344:	d038      	beq.n	80063b8 <_svfiprintf_r+0x1d8>
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <_svfiprintf_r+0x1f4>)
 8006348:	bb1b      	cbnz	r3, 8006392 <_svfiprintf_r+0x1b2>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	3308      	adds	r3, #8
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	4433      	add	r3, r6
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	e767      	b.n	800622e <_svfiprintf_r+0x4e>
 800635e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006362:	460c      	mov	r4, r1
 8006364:	2001      	movs	r0, #1
 8006366:	e7a5      	b.n	80062b4 <_svfiprintf_r+0xd4>
 8006368:	2300      	movs	r3, #0
 800636a:	3401      	adds	r4, #1
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	4619      	mov	r1, r3
 8006370:	f04f 0c0a 	mov.w	ip, #10
 8006374:	4620      	mov	r0, r4
 8006376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800637a:	3a30      	subs	r2, #48	; 0x30
 800637c:	2a09      	cmp	r2, #9
 800637e:	d903      	bls.n	8006388 <_svfiprintf_r+0x1a8>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0c5      	beq.n	8006310 <_svfiprintf_r+0x130>
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	e7c3      	b.n	8006310 <_svfiprintf_r+0x130>
 8006388:	fb0c 2101 	mla	r1, ip, r1, r2
 800638c:	4604      	mov	r4, r0
 800638e:	2301      	movs	r3, #1
 8006390:	e7f0      	b.n	8006374 <_svfiprintf_r+0x194>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <_svfiprintf_r+0x1f8>)
 800639a:	a904      	add	r1, sp, #16
 800639c:	4638      	mov	r0, r7
 800639e:	f3af 8000 	nop.w
 80063a2:	1c42      	adds	r2, r0, #1
 80063a4:	4606      	mov	r6, r0
 80063a6:	d1d6      	bne.n	8006356 <_svfiprintf_r+0x176>
 80063a8:	89ab      	ldrh	r3, [r5, #12]
 80063aa:	065b      	lsls	r3, r3, #25
 80063ac:	f53f af2c 	bmi.w	8006208 <_svfiprintf_r+0x28>
 80063b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b2:	b01d      	add	sp, #116	; 0x74
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	ab03      	add	r3, sp, #12
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	462a      	mov	r2, r5
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <_svfiprintf_r+0x1f8>)
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	4638      	mov	r0, r7
 80063c4:	f000 f87a 	bl	80064bc <_printf_i>
 80063c8:	e7eb      	b.n	80063a2 <_svfiprintf_r+0x1c2>
 80063ca:	bf00      	nop
 80063cc:	080069c4 	.word	0x080069c4
 80063d0:	080069ce 	.word	0x080069ce
 80063d4:	00000000 	.word	0x00000000
 80063d8:	08006129 	.word	0x08006129
 80063dc:	080069ca 	.word	0x080069ca

080063e0 <_printf_common>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	4616      	mov	r6, r2
 80063e6:	4699      	mov	r9, r3
 80063e8:	688a      	ldr	r2, [r1, #8]
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	bfb8      	it	lt
 80063f4:	4613      	movlt	r3, r2
 80063f6:	6033      	str	r3, [r6, #0]
 80063f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fc:	4607      	mov	r7, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b10a      	cbz	r2, 8006406 <_printf_common+0x26>
 8006402:	3301      	adds	r3, #1
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	0699      	lsls	r1, r3, #26
 800640a:	bf42      	ittt	mi
 800640c:	6833      	ldrmi	r3, [r6, #0]
 800640e:	3302      	addmi	r3, #2
 8006410:	6033      	strmi	r3, [r6, #0]
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	f015 0506 	ands.w	r5, r5, #6
 8006418:	d106      	bne.n	8006428 <_printf_common+0x48>
 800641a:	f104 0a19 	add.w	sl, r4, #25
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	6832      	ldr	r2, [r6, #0]
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	42ab      	cmp	r3, r5
 8006426:	dc26      	bgt.n	8006476 <_printf_common+0x96>
 8006428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800642c:	1e13      	subs	r3, r2, #0
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	bf18      	it	ne
 8006432:	2301      	movne	r3, #1
 8006434:	0692      	lsls	r2, r2, #26
 8006436:	d42b      	bmi.n	8006490 <_printf_common+0xb0>
 8006438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d01e      	beq.n	8006484 <_printf_common+0xa4>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	68e5      	ldr	r5, [r4, #12]
 800644a:	6832      	ldr	r2, [r6, #0]
 800644c:	f003 0306 	and.w	r3, r3, #6
 8006450:	2b04      	cmp	r3, #4
 8006452:	bf08      	it	eq
 8006454:	1aad      	subeq	r5, r5, r2
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	bf0c      	ite	eq
 800645c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006460:	2500      	movne	r5, #0
 8006462:	4293      	cmp	r3, r2
 8006464:	bfc4      	itt	gt
 8006466:	1a9b      	subgt	r3, r3, r2
 8006468:	18ed      	addgt	r5, r5, r3
 800646a:	2600      	movs	r6, #0
 800646c:	341a      	adds	r4, #26
 800646e:	42b5      	cmp	r5, r6
 8006470:	d11a      	bne.n	80064a8 <_printf_common+0xc8>
 8006472:	2000      	movs	r0, #0
 8006474:	e008      	b.n	8006488 <_printf_common+0xa8>
 8006476:	2301      	movs	r3, #1
 8006478:	4652      	mov	r2, sl
 800647a:	4649      	mov	r1, r9
 800647c:	4638      	mov	r0, r7
 800647e:	47c0      	blx	r8
 8006480:	3001      	adds	r0, #1
 8006482:	d103      	bne.n	800648c <_printf_common+0xac>
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648c:	3501      	adds	r5, #1
 800648e:	e7c6      	b.n	800641e <_printf_common+0x3e>
 8006490:	18e1      	adds	r1, r4, r3
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	2030      	movs	r0, #48	; 0x30
 8006496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649a:	4422      	add	r2, r4
 800649c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a4:	3302      	adds	r3, #2
 80064a6:	e7c7      	b.n	8006438 <_printf_common+0x58>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4622      	mov	r2, r4
 80064ac:	4649      	mov	r1, r9
 80064ae:	4638      	mov	r0, r7
 80064b0:	47c0      	blx	r8
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0e6      	beq.n	8006484 <_printf_common+0xa4>
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7d9      	b.n	800646e <_printf_common+0x8e>
	...

080064bc <_printf_i>:
 80064bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	460c      	mov	r4, r1
 80064c2:	4691      	mov	r9, r2
 80064c4:	7e27      	ldrb	r7, [r4, #24]
 80064c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064c8:	2f78      	cmp	r7, #120	; 0x78
 80064ca:	4680      	mov	r8, r0
 80064cc:	469a      	mov	sl, r3
 80064ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064d2:	d807      	bhi.n	80064e4 <_printf_i+0x28>
 80064d4:	2f62      	cmp	r7, #98	; 0x62
 80064d6:	d80a      	bhi.n	80064ee <_printf_i+0x32>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	f000 80d8 	beq.w	800668e <_printf_i+0x1d2>
 80064de:	2f58      	cmp	r7, #88	; 0x58
 80064e0:	f000 80a3 	beq.w	800662a <_printf_i+0x16e>
 80064e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064ec:	e03a      	b.n	8006564 <_printf_i+0xa8>
 80064ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064f2:	2b15      	cmp	r3, #21
 80064f4:	d8f6      	bhi.n	80064e4 <_printf_i+0x28>
 80064f6:	a001      	add	r0, pc, #4	; (adr r0, 80064fc <_printf_i+0x40>)
 80064f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006569 	.word	0x08006569
 8006504:	080064e5 	.word	0x080064e5
 8006508:	080064e5 	.word	0x080064e5
 800650c:	080064e5 	.word	0x080064e5
 8006510:	080064e5 	.word	0x080064e5
 8006514:	08006569 	.word	0x08006569
 8006518:	080064e5 	.word	0x080064e5
 800651c:	080064e5 	.word	0x080064e5
 8006520:	080064e5 	.word	0x080064e5
 8006524:	080064e5 	.word	0x080064e5
 8006528:	08006675 	.word	0x08006675
 800652c:	08006599 	.word	0x08006599
 8006530:	08006657 	.word	0x08006657
 8006534:	080064e5 	.word	0x080064e5
 8006538:	080064e5 	.word	0x080064e5
 800653c:	08006697 	.word	0x08006697
 8006540:	080064e5 	.word	0x080064e5
 8006544:	08006599 	.word	0x08006599
 8006548:	080064e5 	.word	0x080064e5
 800654c:	080064e5 	.word	0x080064e5
 8006550:	0800665f 	.word	0x0800665f
 8006554:	680b      	ldr	r3, [r1, #0]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	600a      	str	r2, [r1, #0]
 800655c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006564:	2301      	movs	r3, #1
 8006566:	e0a3      	b.n	80066b0 <_printf_i+0x1f4>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	6808      	ldr	r0, [r1, #0]
 800656c:	062e      	lsls	r6, r5, #24
 800656e:	f100 0304 	add.w	r3, r0, #4
 8006572:	d50a      	bpl.n	800658a <_printf_i+0xce>
 8006574:	6805      	ldr	r5, [r0, #0]
 8006576:	600b      	str	r3, [r1, #0]
 8006578:	2d00      	cmp	r5, #0
 800657a:	da03      	bge.n	8006584 <_printf_i+0xc8>
 800657c:	232d      	movs	r3, #45	; 0x2d
 800657e:	426d      	negs	r5, r5
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006584:	485e      	ldr	r0, [pc, #376]	; (8006700 <_printf_i+0x244>)
 8006586:	230a      	movs	r3, #10
 8006588:	e019      	b.n	80065be <_printf_i+0x102>
 800658a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800658e:	6805      	ldr	r5, [r0, #0]
 8006590:	600b      	str	r3, [r1, #0]
 8006592:	bf18      	it	ne
 8006594:	b22d      	sxthne	r5, r5
 8006596:	e7ef      	b.n	8006578 <_printf_i+0xbc>
 8006598:	680b      	ldr	r3, [r1, #0]
 800659a:	6825      	ldr	r5, [r4, #0]
 800659c:	1d18      	adds	r0, r3, #4
 800659e:	6008      	str	r0, [r1, #0]
 80065a0:	0628      	lsls	r0, r5, #24
 80065a2:	d501      	bpl.n	80065a8 <_printf_i+0xec>
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	e002      	b.n	80065ae <_printf_i+0xf2>
 80065a8:	0669      	lsls	r1, r5, #25
 80065aa:	d5fb      	bpl.n	80065a4 <_printf_i+0xe8>
 80065ac:	881d      	ldrh	r5, [r3, #0]
 80065ae:	4854      	ldr	r0, [pc, #336]	; (8006700 <_printf_i+0x244>)
 80065b0:	2f6f      	cmp	r7, #111	; 0x6f
 80065b2:	bf0c      	ite	eq
 80065b4:	2308      	moveq	r3, #8
 80065b6:	230a      	movne	r3, #10
 80065b8:	2100      	movs	r1, #0
 80065ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065be:	6866      	ldr	r6, [r4, #4]
 80065c0:	60a6      	str	r6, [r4, #8]
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	bfa2      	ittt	ge
 80065c6:	6821      	ldrge	r1, [r4, #0]
 80065c8:	f021 0104 	bicge.w	r1, r1, #4
 80065cc:	6021      	strge	r1, [r4, #0]
 80065ce:	b90d      	cbnz	r5, 80065d4 <_printf_i+0x118>
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	d04d      	beq.n	8006670 <_printf_i+0x1b4>
 80065d4:	4616      	mov	r6, r2
 80065d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80065da:	fb03 5711 	mls	r7, r3, r1, r5
 80065de:	5dc7      	ldrb	r7, [r0, r7]
 80065e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065e4:	462f      	mov	r7, r5
 80065e6:	42bb      	cmp	r3, r7
 80065e8:	460d      	mov	r5, r1
 80065ea:	d9f4      	bls.n	80065d6 <_printf_i+0x11a>
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d10b      	bne.n	8006608 <_printf_i+0x14c>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	07df      	lsls	r7, r3, #31
 80065f4:	d508      	bpl.n	8006608 <_printf_i+0x14c>
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	6861      	ldr	r1, [r4, #4]
 80065fa:	4299      	cmp	r1, r3
 80065fc:	bfde      	ittt	le
 80065fe:	2330      	movle	r3, #48	; 0x30
 8006600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006608:	1b92      	subs	r2, r2, r6
 800660a:	6122      	str	r2, [r4, #16]
 800660c:	f8cd a000 	str.w	sl, [sp]
 8006610:	464b      	mov	r3, r9
 8006612:	aa03      	add	r2, sp, #12
 8006614:	4621      	mov	r1, r4
 8006616:	4640      	mov	r0, r8
 8006618:	f7ff fee2 	bl	80063e0 <_printf_common>
 800661c:	3001      	adds	r0, #1
 800661e:	d14c      	bne.n	80066ba <_printf_i+0x1fe>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	b004      	add	sp, #16
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	4835      	ldr	r0, [pc, #212]	; (8006700 <_printf_i+0x244>)
 800662c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	680e      	ldr	r6, [r1, #0]
 8006634:	061f      	lsls	r7, r3, #24
 8006636:	f856 5b04 	ldr.w	r5, [r6], #4
 800663a:	600e      	str	r6, [r1, #0]
 800663c:	d514      	bpl.n	8006668 <_printf_i+0x1ac>
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	bf44      	itt	mi
 8006642:	f043 0320 	orrmi.w	r3, r3, #32
 8006646:	6023      	strmi	r3, [r4, #0]
 8006648:	b91d      	cbnz	r5, 8006652 <_printf_i+0x196>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f023 0320 	bic.w	r3, r3, #32
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	2310      	movs	r3, #16
 8006654:	e7b0      	b.n	80065b8 <_printf_i+0xfc>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f043 0320 	orr.w	r3, r3, #32
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	2378      	movs	r3, #120	; 0x78
 8006660:	4828      	ldr	r0, [pc, #160]	; (8006704 <_printf_i+0x248>)
 8006662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006666:	e7e3      	b.n	8006630 <_printf_i+0x174>
 8006668:	065e      	lsls	r6, r3, #25
 800666a:	bf48      	it	mi
 800666c:	b2ad      	uxthmi	r5, r5
 800666e:	e7e6      	b.n	800663e <_printf_i+0x182>
 8006670:	4616      	mov	r6, r2
 8006672:	e7bb      	b.n	80065ec <_printf_i+0x130>
 8006674:	680b      	ldr	r3, [r1, #0]
 8006676:	6826      	ldr	r6, [r4, #0]
 8006678:	6960      	ldr	r0, [r4, #20]
 800667a:	1d1d      	adds	r5, r3, #4
 800667c:	600d      	str	r5, [r1, #0]
 800667e:	0635      	lsls	r5, r6, #24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	d501      	bpl.n	8006688 <_printf_i+0x1cc>
 8006684:	6018      	str	r0, [r3, #0]
 8006686:	e002      	b.n	800668e <_printf_i+0x1d2>
 8006688:	0671      	lsls	r1, r6, #25
 800668a:	d5fb      	bpl.n	8006684 <_printf_i+0x1c8>
 800668c:	8018      	strh	r0, [r3, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	4616      	mov	r6, r2
 8006694:	e7ba      	b.n	800660c <_printf_i+0x150>
 8006696:	680b      	ldr	r3, [r1, #0]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	600a      	str	r2, [r1, #0]
 800669c:	681e      	ldr	r6, [r3, #0]
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7f9 fdbc 	bl	8000220 <memchr>
 80066a8:	b108      	cbz	r0, 80066ae <_printf_i+0x1f2>
 80066aa:	1b80      	subs	r0, r0, r6
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	2300      	movs	r3, #0
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	e7a8      	b.n	800660c <_printf_i+0x150>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	4632      	mov	r2, r6
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0ab      	beq.n	8006620 <_printf_i+0x164>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	079b      	lsls	r3, r3, #30
 80066cc:	d413      	bmi.n	80066f6 <_printf_i+0x23a>
 80066ce:	68e0      	ldr	r0, [r4, #12]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	4298      	cmp	r0, r3
 80066d4:	bfb8      	it	lt
 80066d6:	4618      	movlt	r0, r3
 80066d8:	e7a4      	b.n	8006624 <_printf_i+0x168>
 80066da:	2301      	movs	r3, #1
 80066dc:	4632      	mov	r2, r6
 80066de:	4649      	mov	r1, r9
 80066e0:	4640      	mov	r0, r8
 80066e2:	47d0      	blx	sl
 80066e4:	3001      	adds	r0, #1
 80066e6:	d09b      	beq.n	8006620 <_printf_i+0x164>
 80066e8:	3501      	adds	r5, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dcf2      	bgt.n	80066da <_printf_i+0x21e>
 80066f4:	e7eb      	b.n	80066ce <_printf_i+0x212>
 80066f6:	2500      	movs	r5, #0
 80066f8:	f104 0619 	add.w	r6, r4, #25
 80066fc:	e7f5      	b.n	80066ea <_printf_i+0x22e>
 80066fe:	bf00      	nop
 8006700:	080069d5 	.word	0x080069d5
 8006704:	080069e6 	.word	0x080069e6

08006708 <memmove>:
 8006708:	4288      	cmp	r0, r1
 800670a:	b510      	push	{r4, lr}
 800670c:	eb01 0402 	add.w	r4, r1, r2
 8006710:	d902      	bls.n	8006718 <memmove+0x10>
 8006712:	4284      	cmp	r4, r0
 8006714:	4623      	mov	r3, r4
 8006716:	d807      	bhi.n	8006728 <memmove+0x20>
 8006718:	1e43      	subs	r3, r0, #1
 800671a:	42a1      	cmp	r1, r4
 800671c:	d008      	beq.n	8006730 <memmove+0x28>
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006726:	e7f8      	b.n	800671a <memmove+0x12>
 8006728:	4402      	add	r2, r0
 800672a:	4601      	mov	r1, r0
 800672c:	428a      	cmp	r2, r1
 800672e:	d100      	bne.n	8006732 <memmove+0x2a>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673a:	e7f7      	b.n	800672c <memmove+0x24>

0800673c <_free_r>:
 800673c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673e:	2900      	cmp	r1, #0
 8006740:	d048      	beq.n	80067d4 <_free_r+0x98>
 8006742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006746:	9001      	str	r0, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f1a1 0404 	sub.w	r4, r1, #4
 800674e:	bfb8      	it	lt
 8006750:	18e4      	addlt	r4, r4, r3
 8006752:	f000 f8d3 	bl	80068fc <__malloc_lock>
 8006756:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <_free_r+0x9c>)
 8006758:	9801      	ldr	r0, [sp, #4]
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	4615      	mov	r5, r2
 800675e:	b933      	cbnz	r3, 800676e <_free_r+0x32>
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	6014      	str	r4, [r2, #0]
 8006764:	b003      	add	sp, #12
 8006766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676a:	f000 b8cd 	b.w	8006908 <__malloc_unlock>
 800676e:	42a3      	cmp	r3, r4
 8006770:	d90b      	bls.n	800678a <_free_r+0x4e>
 8006772:	6821      	ldr	r1, [r4, #0]
 8006774:	1862      	adds	r2, r4, r1
 8006776:	4293      	cmp	r3, r2
 8006778:	bf04      	itt	eq
 800677a:	681a      	ldreq	r2, [r3, #0]
 800677c:	685b      	ldreq	r3, [r3, #4]
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	bf04      	itt	eq
 8006782:	1852      	addeq	r2, r2, r1
 8006784:	6022      	streq	r2, [r4, #0]
 8006786:	602c      	str	r4, [r5, #0]
 8006788:	e7ec      	b.n	8006764 <_free_r+0x28>
 800678a:	461a      	mov	r2, r3
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	b10b      	cbz	r3, 8006794 <_free_r+0x58>
 8006790:	42a3      	cmp	r3, r4
 8006792:	d9fa      	bls.n	800678a <_free_r+0x4e>
 8006794:	6811      	ldr	r1, [r2, #0]
 8006796:	1855      	adds	r5, r2, r1
 8006798:	42a5      	cmp	r5, r4
 800679a:	d10b      	bne.n	80067b4 <_free_r+0x78>
 800679c:	6824      	ldr	r4, [r4, #0]
 800679e:	4421      	add	r1, r4
 80067a0:	1854      	adds	r4, r2, r1
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	d1dd      	bne.n	8006764 <_free_r+0x28>
 80067a8:	681c      	ldr	r4, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	6053      	str	r3, [r2, #4]
 80067ae:	4421      	add	r1, r4
 80067b0:	6011      	str	r1, [r2, #0]
 80067b2:	e7d7      	b.n	8006764 <_free_r+0x28>
 80067b4:	d902      	bls.n	80067bc <_free_r+0x80>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6003      	str	r3, [r0, #0]
 80067ba:	e7d3      	b.n	8006764 <_free_r+0x28>
 80067bc:	6825      	ldr	r5, [r4, #0]
 80067be:	1961      	adds	r1, r4, r5
 80067c0:	428b      	cmp	r3, r1
 80067c2:	bf04      	itt	eq
 80067c4:	6819      	ldreq	r1, [r3, #0]
 80067c6:	685b      	ldreq	r3, [r3, #4]
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	bf04      	itt	eq
 80067cc:	1949      	addeq	r1, r1, r5
 80067ce:	6021      	streq	r1, [r4, #0]
 80067d0:	6054      	str	r4, [r2, #4]
 80067d2:	e7c7      	b.n	8006764 <_free_r+0x28>
 80067d4:	b003      	add	sp, #12
 80067d6:	bd30      	pop	{r4, r5, pc}
 80067d8:	2000014c 	.word	0x2000014c

080067dc <_malloc_r>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	1ccd      	adds	r5, r1, #3
 80067e0:	f025 0503 	bic.w	r5, r5, #3
 80067e4:	3508      	adds	r5, #8
 80067e6:	2d0c      	cmp	r5, #12
 80067e8:	bf38      	it	cc
 80067ea:	250c      	movcc	r5, #12
 80067ec:	2d00      	cmp	r5, #0
 80067ee:	4606      	mov	r6, r0
 80067f0:	db01      	blt.n	80067f6 <_malloc_r+0x1a>
 80067f2:	42a9      	cmp	r1, r5
 80067f4:	d903      	bls.n	80067fe <_malloc_r+0x22>
 80067f6:	230c      	movs	r3, #12
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	2000      	movs	r0, #0
 80067fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fe:	f000 f87d 	bl	80068fc <__malloc_lock>
 8006802:	4921      	ldr	r1, [pc, #132]	; (8006888 <_malloc_r+0xac>)
 8006804:	680a      	ldr	r2, [r1, #0]
 8006806:	4614      	mov	r4, r2
 8006808:	b99c      	cbnz	r4, 8006832 <_malloc_r+0x56>
 800680a:	4f20      	ldr	r7, [pc, #128]	; (800688c <_malloc_r+0xb0>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	b923      	cbnz	r3, 800681a <_malloc_r+0x3e>
 8006810:	4621      	mov	r1, r4
 8006812:	4630      	mov	r0, r6
 8006814:	f000 f862 	bl	80068dc <_sbrk_r>
 8006818:	6038      	str	r0, [r7, #0]
 800681a:	4629      	mov	r1, r5
 800681c:	4630      	mov	r0, r6
 800681e:	f000 f85d 	bl	80068dc <_sbrk_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d123      	bne.n	800686e <_malloc_r+0x92>
 8006826:	230c      	movs	r3, #12
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	4630      	mov	r0, r6
 800682c:	f000 f86c 	bl	8006908 <__malloc_unlock>
 8006830:	e7e3      	b.n	80067fa <_malloc_r+0x1e>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	1b5b      	subs	r3, r3, r5
 8006836:	d417      	bmi.n	8006868 <_malloc_r+0x8c>
 8006838:	2b0b      	cmp	r3, #11
 800683a:	d903      	bls.n	8006844 <_malloc_r+0x68>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	441c      	add	r4, r3
 8006840:	6025      	str	r5, [r4, #0]
 8006842:	e004      	b.n	800684e <_malloc_r+0x72>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	42a2      	cmp	r2, r4
 8006848:	bf0c      	ite	eq
 800684a:	600b      	streq	r3, [r1, #0]
 800684c:	6053      	strne	r3, [r2, #4]
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f85a 	bl	8006908 <__malloc_unlock>
 8006854:	f104 000b 	add.w	r0, r4, #11
 8006858:	1d23      	adds	r3, r4, #4
 800685a:	f020 0007 	bic.w	r0, r0, #7
 800685e:	1ac2      	subs	r2, r0, r3
 8006860:	d0cc      	beq.n	80067fc <_malloc_r+0x20>
 8006862:	1a1b      	subs	r3, r3, r0
 8006864:	50a3      	str	r3, [r4, r2]
 8006866:	e7c9      	b.n	80067fc <_malloc_r+0x20>
 8006868:	4622      	mov	r2, r4
 800686a:	6864      	ldr	r4, [r4, #4]
 800686c:	e7cc      	b.n	8006808 <_malloc_r+0x2c>
 800686e:	1cc4      	adds	r4, r0, #3
 8006870:	f024 0403 	bic.w	r4, r4, #3
 8006874:	42a0      	cmp	r0, r4
 8006876:	d0e3      	beq.n	8006840 <_malloc_r+0x64>
 8006878:	1a21      	subs	r1, r4, r0
 800687a:	4630      	mov	r0, r6
 800687c:	f000 f82e 	bl	80068dc <_sbrk_r>
 8006880:	3001      	adds	r0, #1
 8006882:	d1dd      	bne.n	8006840 <_malloc_r+0x64>
 8006884:	e7cf      	b.n	8006826 <_malloc_r+0x4a>
 8006886:	bf00      	nop
 8006888:	2000014c 	.word	0x2000014c
 800688c:	20000150 	.word	0x20000150

08006890 <_realloc_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	4607      	mov	r7, r0
 8006894:	4614      	mov	r4, r2
 8006896:	460e      	mov	r6, r1
 8006898:	b921      	cbnz	r1, 80068a4 <_realloc_r+0x14>
 800689a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800689e:	4611      	mov	r1, r2
 80068a0:	f7ff bf9c 	b.w	80067dc <_malloc_r>
 80068a4:	b922      	cbnz	r2, 80068b0 <_realloc_r+0x20>
 80068a6:	f7ff ff49 	bl	800673c <_free_r>
 80068aa:	4625      	mov	r5, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b0:	f000 f830 	bl	8006914 <_malloc_usable_size_r>
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d20f      	bcs.n	80068d8 <_realloc_r+0x48>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4638      	mov	r0, r7
 80068bc:	f7ff ff8e 	bl	80067dc <_malloc_r>
 80068c0:	4605      	mov	r5, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0f2      	beq.n	80068ac <_realloc_r+0x1c>
 80068c6:	4631      	mov	r1, r6
 80068c8:	4622      	mov	r2, r4
 80068ca:	f7ff fbf7 	bl	80060bc <memcpy>
 80068ce:	4631      	mov	r1, r6
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff ff33 	bl	800673c <_free_r>
 80068d6:	e7e9      	b.n	80068ac <_realloc_r+0x1c>
 80068d8:	4635      	mov	r5, r6
 80068da:	e7e7      	b.n	80068ac <_realloc_r+0x1c>

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	; (80068f8 <_sbrk_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fb ff0c 	bl	8002704 <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20000594 	.word	0x20000594

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_lock+0x8>)
 80068fe:	f000 b811 	b.w	8006924 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	2000059c 	.word	0x2000059c

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_unlock+0x8>)
 800690a:	f000 b80c 	b.w	8006926 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	2000059c 	.word	0x2000059c

08006914 <_malloc_usable_size_r>:
 8006914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006918:	1f18      	subs	r0, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbc      	itt	lt
 800691e:	580b      	ldrlt	r3, [r1, r0]
 8006920:	18c0      	addlt	r0, r0, r3
 8006922:	4770      	bx	lr

08006924 <__retarget_lock_acquire_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_release_recursive>:
 8006926:	4770      	bx	lr

08006928 <_init>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr

08006934 <_fini>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr
